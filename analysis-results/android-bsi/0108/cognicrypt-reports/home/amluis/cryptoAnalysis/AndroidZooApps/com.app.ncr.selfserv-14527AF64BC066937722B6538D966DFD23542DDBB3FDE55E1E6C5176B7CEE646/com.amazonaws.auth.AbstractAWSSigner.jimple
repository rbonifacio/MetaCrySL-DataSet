public abstract class com.amazonaws.auth.AbstractAWSSigner extends java.lang.Object implements com.amazonaws.auth.Signer
{

    public void <init>()
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract void addSessionCredentials(com.amazonaws.Request, com.amazonaws.auth.AWSSessionCredentials);

    protected byte[] getBinaryRequestPayload(com.amazonaws.Request)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        com.amazonaws.Request $r1;
        java.nio.charset.Charset $r2;
        boolean $z0;
        java.lang.String $r3;
        byte[] $r4;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: com.amazonaws.Request;

        $z0 = staticinvoke <com.amazonaws.util.HttpUtils: boolean usePayloadForQueryParameters(com.amazonaws.Request)>($r1);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String encodeParameters(com.amazonaws.Request)>($r1);

        if $r3 != null goto label1;

        $r4 = newarray (byte)[0];

        return $r4;

     label1:
        $r2 = <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8>;

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        return $r4;

     label2:
        $r4 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: byte[] getBinaryRequestPayloadWithoutQueryParams(com.amazonaws.Request)>($r1);

        return $r4;
    }

    protected java.io.InputStream getBinaryRequestPayloadStream(com.amazonaws.Request)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        com.amazonaws.Request $r1;
        java.nio.charset.Charset $r2;
        boolean $z0;
        java.lang.String $r3;
        java.io.ByteArrayInputStream $r4;
        byte[] $r5;
        java.io.InputStream $r6;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: com.amazonaws.Request;

        $z0 = staticinvoke <com.amazonaws.util.HttpUtils: boolean usePayloadForQueryParameters(com.amazonaws.Request)>($r1);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String encodeParameters(com.amazonaws.Request)>($r1);

        if $r3 != null goto label1;

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = newarray (byte)[0];

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        return $r4;

     label1:
        $r4 = new java.io.ByteArrayInputStream;

        $r2 = <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8>;

        $r5 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        return $r4;

     label2:
        $r6 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: java.io.InputStream getBinaryRequestPayloadStreamWithoutQueryParams(com.amazonaws.Request)>($r1);

        return $r6;
    }

    protected java.io.InputStream getBinaryRequestPayloadStreamWithoutQueryParams(com.amazonaws.Request)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        com.amazonaws.Request $r1;
        java.io.InputStream $r2;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        boolean $z0;
        com.amazonaws.AmazonClientException $r5;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8, varReplacer6914, varReplacer6915;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: com.amazonaws.Request;

     label01:
        $r2 = interfaceinvoke $r1.<com.amazonaws.Request: java.io.InputStream getContent()>();

     label02:
        if $r2 != null goto label05;

        $r3 = new java.io.ByteArrayInputStream;

     label03:
        $r4 = newarray (byte)[0];

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

     label04:
        return $r3;

     label05:
        $z0 = $r2 instanceof com.amazonaws.util.StringInputStream;

        if $z0 != 0 goto label11;

     label06:
        $z0 = virtualinvoke $r2.<java.io.InputStream: boolean markSupported()>();

     label07:
        if $z0 != 0 goto label10;

        $r5 = new com.amazonaws.AmazonClientException;

     label08:
        varReplacer6914 = "Unable to read request payload to sign request.";

        specialinvoke $r5.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(varReplacer6914);

        throw $r5;

     label09:
        $r6 := @caughtexception;

        $r5 = new com.amazonaws.AmazonClientException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        varReplacer6915 = "Unable to read request payload to sign request: ";

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer6915);

        $r8 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r6);

        throw $r5;

     label10:
        $r2 = interfaceinvoke $r1.<com.amazonaws.Request: java.io.InputStream getContent()>();

     label11:
        return $r2;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label06 to label07 with label09;
        catch java.lang.Exception from label08 to label09 with label09;
        catch java.lang.Exception from label10 to label11 with label09;
    }

    protected byte[] getBinaryRequestPayloadWithoutQueryParams(com.amazonaws.Request)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        com.amazonaws.Request $r1;
        java.io.InputStream $r2;
        java.io.ByteArrayOutputStream $r3;
        byte[] $r4;
        int $i0;
        java.lang.Exception $r5;
        com.amazonaws.AmazonClientException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: java.io.InputStream getBinaryRequestPayloadStreamWithoutQueryParams(com.amazonaws.Request)>($r1);

     label01:
        virtualinvoke $r2.<java.io.InputStream: void mark(int)>(-1);

     label02:
        $r3 = new java.io.ByteArrayOutputStream;

     label03:
        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = newarray (byte)[5120];

     label04:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r4);

     label05:
        if $i0 != -1 goto label08;

     label06:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void close()>();

        virtualinvoke $r2.<java.io.InputStream: void reset()>();

        $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label07:
        return $r4;

     label08:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r4, 0, $i0);

     label09:
        goto label04;

     label10:
        $r5 := @caughtexception;

        $r6 = new com.amazonaws.AmazonClientException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read request payload to sign request: ");

        $r8 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r5);

        throw $r6;

        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label05 with label10;
        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    protected java.lang.String getCanonicalizedEndpoint(java.net.URI)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        java.net.URI $r1;
        java.lang.String $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        int $i0;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: java.net.URI;

        $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String getHost()>();

        $r2 = staticinvoke <com.amazonaws.util.StringUtils: java.lang.String lowerCase(java.lang.String)>($r2);

        $z0 = staticinvoke <com.amazonaws.util.HttpUtils: boolean isUsingNonDefaultPort(java.net.URI)>($r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = virtualinvoke $r1.<java.net.URI: int getPort()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return $r2;
    }

    protected java.lang.String getCanonicalizedQueryString(com.amazonaws.Request)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        com.amazonaws.Request $r1;
        boolean $z0;
        java.util.Map $r2;
        java.lang.String $r3, varReplacer6891;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: com.amazonaws.Request;

        $z0 = staticinvoke <com.amazonaws.util.HttpUtils: boolean usePayloadForQueryParameters(com.amazonaws.Request)>($r1);

        if $z0 == 0 goto label1;

        varReplacer6891 = "";

        return varReplacer6891;

     label1:
        $r2 = interfaceinvoke $r1.<com.amazonaws.Request: java.util.Map getParameters()>();

        $r3 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: java.lang.String getCanonicalizedQueryString(java.util.Map)>($r2);

        return $r3;
    }

    protected java.lang.String getCanonicalizedQueryString(java.util.Map)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        java.util.Map $r1;
        java.util.TreeMap $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Map$Entry $r6;
        java.lang.String $r7, $r8, varReplacer6902, varReplacer6904;
        java.lang.StringBuilder $r9;
        int varReplacer6901, varReplacer6903;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: java.util.Map;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.String) $r5;

        varReplacer6901 = 0;

        $r7 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String urlEncode(java.lang.String,boolean)>($r7, varReplacer6901);

        varReplacer6903 = 0;

        $r8 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String urlEncode(java.lang.String,boolean)>($r8, varReplacer6903);

        interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label1;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.SortedMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r5;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        varReplacer6902 = "=";

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer6902);

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (java.lang.String) $r5;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        varReplacer6904 = "&";

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer6904);

        goto label3;

     label4:
        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    protected java.lang.String getCanonicalizedResourcePath(java.lang.String)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        java.lang.String $r1;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: java.lang.String getCanonicalizedResourcePath(java.lang.String,boolean)>($r1, 1);

        return $r1;
    }

    protected java.lang.String getCanonicalizedResourcePath(java.lang.String, boolean)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        boolean $z0;
        java.lang.String $r1, $r2, varReplacer6889, varReplacer6890;
        int $i0, varReplacer6888;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        varReplacer6889 = "/";

        return varReplacer6889;

     label2:
        if $z0 == 0 goto label3;

        varReplacer6888 = 1;

        $r1 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String urlEncode(java.lang.String,boolean)>($r1, varReplacer6888);

     label3:
        varReplacer6890 = "/";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer6890);

        if $z0 != 0 goto label4;

        $r2 = "/";

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>($r1);

     label4:
        return $r1;
    }

    protected java.lang.String getRequestPayload(com.amazonaws.Request)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        com.amazonaws.Request $r1;
        byte[] $r2;
        java.lang.String $r3;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: byte[] getBinaryRequestPayload(com.amazonaws.Request)>($r1);

        $r3 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: java.lang.String newString(byte[])>($r2);

        return $r3;
    }

    protected java.lang.String getRequestPayloadWithoutQueryParams(com.amazonaws.Request)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        com.amazonaws.Request $r1;
        byte[] $r2;
        java.lang.String $r3;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: byte[] getBinaryRequestPayloadWithoutQueryParams(com.amazonaws.Request)>($r1);

        $r3 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: java.lang.String newString(byte[])>($r2);

        return $r3;
    }

    protected java.util.Date getSignatureDate(int)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        int $i0;
        long $l1, $l2;
        java.util.Date $r1;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $i0 := @parameter0: int;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

        if $i0 == 0 goto label1;

        $l1 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $i0 = $i0 * 1000;

        $l2 = (long) $i0;

        $l1 = $l1 - $l2;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>(long)>($l1);

     label1:
        return $r1;
    }

    protected int getTimeOffset(com.amazonaws.Request)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        com.amazonaws.Request $r1;
        int $i0, $i1;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: com.amazonaws.Request;

        $i0 = interfaceinvoke $r1.<com.amazonaws.Request: int getTimeOffset()>();

        $i1 = staticinvoke <com.amazonaws.SDKGlobalConfiguration: int getGlobalTimeOffset()>();

        if $i1 == 0 goto label1;

        $i0 = staticinvoke <com.amazonaws.SDKGlobalConfiguration: int getGlobalTimeOffset()>();

     label1:
        return $i0;
    }

    protected byte[] hash(java.io.InputStream) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        java.io.InputStream $r1;
        java.security.MessageDigest $r2;
        com.amazonaws.internal.SdkDigestInputStream $r3;
        byte[] $r4;
        int $i0;
        java.lang.Exception $r5;
        com.amazonaws.AmazonClientException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8, varReplacer6907, varReplacer6908;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: java.io.InputStream;

     label1:
        varReplacer6907 = "SHA-256";

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer6907);

     label2:
        $r3 = new com.amazonaws.internal.SdkDigestInputStream;

     label3:
        specialinvoke $r3.<com.amazonaws.internal.SdkDigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>($r1, $r2);

        $r4 = newarray (byte)[1024];

     label4:
        $i0 = virtualinvoke $r3.<java.security.DigestInputStream: int read(byte[])>($r4);

     label5:
        if $i0 > -1 goto label4;

     label6:
        $r2 = virtualinvoke $r3.<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()>();

        $r4 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

     label7:
        return $r4;

     label8:
        $r5 := @caughtexception;

        $r6 = new com.amazonaws.AmazonClientException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        varReplacer6908 = "Unable to compute hash while signing request: ";

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer6908);

        $r8 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r5);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Exception from label3 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    public byte[] hash(java.lang.String) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        java.lang.String $r1, varReplacer6886, varReplacer6887;
        java.security.MessageDigest $r2;
        java.nio.charset.Charset $r3;
        byte[] $r4;
        java.lang.Exception $r5;
        com.amazonaws.AmazonClientException $r6;
        java.lang.StringBuilder $r7;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: java.lang.String;

     label1:
        varReplacer6886 = "SHA-256";

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer6886);

     label2:
        $r3 = <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8>;

     label3:
        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>($r4);

        $r4 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        $r6 = new com.amazonaws.AmazonClientException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        varReplacer6887 = "Unable to compute hash while signing request: ";

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer6887);

        $r1 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r5);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public byte[] hash(byte[]) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        byte[] $r1;
        com.amazonaws.AmazonClientException $r2;
        java.security.MessageDigest $r3;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: byte[];

     label1:
        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[])>($r1);

        $r1 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>();

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        $r2 = new com.amazonaws.AmazonClientException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to compute hash while signing request: ");

        $r6 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r4);

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.lang.String newString(byte[])
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        byte[] $r1;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: byte[];

        $r2 = new java.lang.String;

        $r3 = <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r1, $r3);

        return $r2;
    }

    protected com.amazonaws.auth.AWSCredentials sanitizeCredentials(com.amazonaws.auth.AWSCredentials)
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        com.amazonaws.auth.AWSCredentials $r1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0;
        com.amazonaws.auth.AWSSessionCredentials $r5;
        com.amazonaws.auth.BasicSessionCredentials $r6;
        java.lang.Throwable $r7;
        com.amazonaws.auth.BasicAWSCredentials $r8;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: com.amazonaws.auth.AWSCredentials;

        $r2 = null;

        entermonitor $r1;

     label01:
        $r3 = interfaceinvoke $r1.<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSAccessKeyId()>();

        $r4 = interfaceinvoke $r1.<com.amazonaws.auth.AWSCredentials: java.lang.String getAWSSecretKey()>();

        $z0 = $r1 instanceof com.amazonaws.auth.AWSSessionCredentials;

        if $z0 == 0 goto label02;

        $r5 = (com.amazonaws.auth.AWSSessionCredentials) $r1;

        $r2 = interfaceinvoke $r5.<com.amazonaws.auth.AWSSessionCredentials: java.lang.String getSessionToken()>();

     label02:
        exitmonitor $r1;

     label03:
        if $r4 == null goto label12;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

     label04:
        if $r3 == null goto label11;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

     label05:
        if $r2 == null goto label06;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

     label06:
        $z0 = $r1 instanceof com.amazonaws.auth.AWSSessionCredentials;

        if $z0 == 0 goto label10;

        $r6 = new com.amazonaws.auth.BasicSessionCredentials;

        specialinvoke $r6.<com.amazonaws.auth.BasicSessionCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r2);

        return $r6;

     label07:
        $r7 := @caughtexception;

     label08:
        exitmonitor $r1;

     label09:
        throw $r7;

     label10:
        $r8 = new com.amazonaws.auth.BasicAWSCredentials;

        specialinvoke $r8.<com.amazonaws.auth.BasicAWSCredentials: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        return $r8;

     label11:
        goto label05;

     label12:
        goto label04;

        catch java.lang.Throwable from label01 to label03 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public byte[] sign(java.lang.String, byte[], com.amazonaws.auth.SigningAlgorithm) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        java.lang.String $r1, varReplacer6874;
        byte[] $r2, $r6;
        com.amazonaws.auth.SigningAlgorithm $r3;
        com.amazonaws.AmazonClientException $r4;
        java.nio.charset.Charset $r5;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: com.amazonaws.auth.SigningAlgorithm;

        $r5 = <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8>;

     label1:
        $r6 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5);

        $r2 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: byte[] sign(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)>($r6, $r2, $r3);

     label2:
        return $r2;

     label3:
        $r7 := @caughtexception;

        $r4 = new com.amazonaws.AmazonClientException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        varReplacer6874 = "Unable to calculate a request signature: ";

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer6874);

        $r1 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r7);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected byte[] sign(byte[], byte[], com.amazonaws.auth.SigningAlgorithm) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        byte[] $r1, $r2;
        com.amazonaws.auth.SigningAlgorithm $r3;
        java.lang.String $r4, varReplacer6802;
        javax.crypto.Mac $r5;
        javax.crypto.spec.SecretKeySpec $r6;
        java.lang.Exception $r7;
        com.amazonaws.AmazonClientException $r8;
        java.lang.StringBuilder $r9;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: com.amazonaws.auth.SigningAlgorithm;

     label1:
        $r4 = virtualinvoke $r3.<com.amazonaws.auth.SigningAlgorithm: java.lang.String toString()>();

        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r4);

     label2:
        $r6 = new javax.crypto.spec.SecretKeySpec;

     label3:
        $r4 = virtualinvoke $r3.<com.amazonaws.auth.SigningAlgorithm: java.lang.String toString()>();

        specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r4);

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r6);

        $r1 = virtualinvoke $r5.<javax.crypto.Mac: byte[] doFinal(byte[])>($r1);

     label4:
        return $r1;

     label5:
        $r7 := @caughtexception;

        $r8 = new com.amazonaws.AmazonClientException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        varReplacer6802 = "Unable to calculate a request signature: ";

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer6802);

        $r4 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r7);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected java.lang.String signAndBase64Encode(java.lang.String, java.lang.String, com.amazonaws.auth.SigningAlgorithm) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.auth.SigningAlgorithm $r3;
        java.nio.charset.Charset $r4;
        byte[] $r5;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.amazonaws.auth.SigningAlgorithm;

        $r4 = <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8>;

        $r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $r1 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: java.lang.String signAndBase64Encode(byte[],java.lang.String,com.amazonaws.auth.SigningAlgorithm)>($r5, $r2, $r3);

        return $r1;
    }

    protected java.lang.String signAndBase64Encode(byte[], java.lang.String, com.amazonaws.auth.SigningAlgorithm) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.auth.AbstractAWSSigner $r0;
        byte[] $r1, $r6;
        java.lang.String $r2, varReplacer6794;
        com.amazonaws.auth.SigningAlgorithm $r3;
        com.amazonaws.AmazonClientException $r4;
        java.nio.charset.Charset $r5;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8;

        nop;

        $r0 := @this: com.amazonaws.auth.AbstractAWSSigner;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.amazonaws.auth.SigningAlgorithm;

        $r5 = <com.amazonaws.util.StringUtils: java.nio.charset.Charset UTF8>;

     label1:
        $r6 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5);

        $r1 = virtualinvoke $r0.<com.amazonaws.auth.AbstractAWSSigner: byte[] sign(byte[],byte[],com.amazonaws.auth.SigningAlgorithm)>($r1, $r6, $r3);

        $r2 = staticinvoke <com.amazonaws.util.Base64: java.lang.String encodeAsString(byte[])>($r1);

     label2:
        return $r2;

     label3:
        $r7 := @caughtexception;

        $r4 = new com.amazonaws.AmazonClientException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        varReplacer6794 = "Unable to calculate a request signature: ";

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer6794);

        $r2 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r7);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
