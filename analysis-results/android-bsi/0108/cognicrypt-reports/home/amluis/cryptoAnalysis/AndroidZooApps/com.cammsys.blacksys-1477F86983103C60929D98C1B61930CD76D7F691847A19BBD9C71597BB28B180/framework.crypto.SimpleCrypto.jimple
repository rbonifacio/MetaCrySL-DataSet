public class framework.crypto.SimpleCrypto extends java.lang.Object
{
    private static final java.lang.String HEX;

    public void <init>()
    {
        framework.crypto.SimpleCrypto $r0;

        $r0 := @this: framework.crypto.SimpleCrypto;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void appendHex(java.lang.StringBuffer, byte)
    {
        java.lang.StringBuffer $r0;
        byte $b0, $b1;
        java.lang.String $r1;
        char $c2;

        nop;

        $r0 := @parameter0: java.lang.StringBuffer;

        $b0 := @parameter1: byte;

        $r1 = "0123456789ABCDEF";

        $b1 = $b0 >> 4;

        $b1 = $b1 & 15;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($b1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r1 = "0123456789ABCDEF";

        $b0 = $b0 & 15;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($b0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        return;
    }

    public static java.lang.String decrypt(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        byte[] $r2, $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <framework.crypto.SimpleCrypto: byte[] getRawKey(byte[])>($r2);

        $r3 = staticinvoke <framework.crypto.SimpleCrypto: byte[] toByte(java.lang.String)>($r1);

        $r2 = staticinvoke <framework.crypto.SimpleCrypto: byte[] decrypt(byte[],byte[])>($r2, $r3);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

        return $r0;
    }

    private static byte[] decrypt(byte[], byte[])
    {
        byte[] $r0, $r1;
        java.lang.Exception $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.spec.IvParameterSpec $r4;
        javax.crypto.Cipher $r5;
        int $i0;
        java.lang.RuntimeException $r6;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "AES");

     label1:
        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label2:
        $r4 = new javax.crypto.spec.IvParameterSpec;

     label3:
        $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int getBlockSize()>();

        $r0 = newarray (byte)[$i0];

        specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r0);

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r3, $r4);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label4:
        return $r0;

     label5:
        $r2 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static java.lang.String encrypt(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        byte[] $r2, $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <framework.crypto.SimpleCrypto: byte[] getRawKey(byte[])>($r2);

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <framework.crypto.SimpleCrypto: byte[] encrypt(byte[],byte[])>($r2, $r3);

        $r0 = staticinvoke <framework.crypto.SimpleCrypto: java.lang.String toHex(byte[])>($r2);

        return $r0;
    }

    private static byte[] encrypt(byte[], byte[])
    {
        byte[] $r0, $r1;
        java.lang.Exception $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.spec.IvParameterSpec $r4;
        javax.crypto.Cipher $r5;
        int $i0, varReplacer3253;
        java.lang.RuntimeException $r6;
        java.lang.String varReplacer3252, varReplacer3254;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r3 = new javax.crypto.spec.SecretKeySpec;

        varReplacer3252 = "AES";

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer3252);

     label1:
        varReplacer3254 = "AES/CBC/PKCS5Padding";

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3254);

     label2:
        $r4 = new javax.crypto.spec.IvParameterSpec;

     label3:
        $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int getBlockSize()>();

        $r0 = newarray (byte)[$i0];

        specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r0);

        varReplacer3253 = 1;

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer3253, $r3, $r4);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label4:
        return $r0;

     label5:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.lang.Exception: void printStackTrace()>();

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static java.lang.String fromHex(java.lang.String)
    {
        java.lang.String $r0, $r1;
        byte[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.String;

        $r2 = staticinvoke <framework.crypto.SimpleCrypto: byte[] toByte(java.lang.String)>($r0);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r2);

        return $r1;
    }

    private static byte[] getRawKey(byte[])
    {
        byte[] $r0;
        javax.crypto.KeyGenerator $r1;
        java.security.SecureRandom $r2, $r3;
        javax.crypto.SecretKey $r4;
        java.lang.Throwable $r5, $r6;
        java.lang.RuntimeException r7;
        java.security.NoSuchProviderException r8;
        java.security.NoSuchAlgorithmException r9;
        java.lang.String varReplacer3247, varReplacer3248, varReplacer3249;
        int varReplacer3250;

        nop;

        $r0 := @parameter0: byte[];

     label01:
        varReplacer3247 = "AES";

        $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer3247);

     label02:
        $r2 = null;

     label03:
        varReplacer3248 = "SHA1PRNG";

        varReplacer3249 = "Crypto";

        $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer3248, varReplacer3249);

     label04:
        $r2 = $r3;

     label05:
        virtualinvoke $r2.<java.security.SecureRandom: void setSeed(byte[])>($r0);

        varReplacer3250 = 128;

        virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(varReplacer3250, $r2);

        $r4 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        $r0 = interfaceinvoke $r4.<javax.crypto.SecretKey: byte[] getEncoded()>();

     label06:
        return $r0;

     label07:
        $r5 := @caughtexception;

        r8 = (java.security.NoSuchProviderException) $r5;

     label08:
        virtualinvoke r8.<java.security.NoSuchProviderException: void printStackTrace()>();

     label09:
        goto label05;

     label10:
        $r6 := @caughtexception;

        r9 = (java.security.NoSuchAlgorithmException) $r6;

        virtualinvoke r9.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        r7 = new java.lang.RuntimeException;

        specialinvoke r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw r7;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label10;
        catch java.security.NoSuchProviderException from label03 to label04 with label07;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label10;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label10;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label10;
    }

    public static byte[] toByte(java.lang.String)
    {
        java.lang.String $r0, $r2;
        int $i0, $i1, $i2, $i3;
        byte[] $r1;
        java.lang.Integer $r3;
        byte $b4;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 / 2;

        $r1 = newarray (byte)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = $i1 * 2;

        $i3 = $i1 * 2;

        $i3 = $i3 + 2;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r2, 16);

        $b4 = virtualinvoke $r3.<java.lang.Integer: byte byteValue()>();

        $r1[$i1] = $b4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static java.lang.String toHex(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r0 = staticinvoke <framework.crypto.SimpleCrypto: java.lang.String toHex(byte[])>($r1);

        return $r0;
    }

    public static java.lang.String toHex(byte[])
    {
        byte[] $r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2, varReplacer3251;
        int $i0, $i1;
        byte $b2;

        nop;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        varReplacer3251 = "";

        return varReplacer3251;

     label1:
        $r1 = new java.lang.StringBuffer;

        $i0 = lengthof $r0;

        $i0 = $i0 * 2;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i0);

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $b2 = $r0[$i0];

        staticinvoke <framework.crypto.SimpleCrypto: void appendHex(java.lang.StringBuffer,byte)>($r1, $b2);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
