final class org.cryptocastle.openssl.PEMUtilities extends java.lang.Object
{
    private static final java.util.Map KEYSIZES;
    private static final java.util.Set PKCS5_SCHEME_1;
    private static final java.util.Set PKCS5_SCHEME_2;

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.HashSet $r1;
        java.util.Set $r2;
        org.cryptocastle.asn1.ASN1ObjectIdentifier $r3;
        java.util.Map $r4;
        java.lang.String $r5;
        java.lang.Integer $r6;
        int varReplacer3084, varReplacer3085, varReplacer3086, varReplacer3087;

        nop;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.cryptocastle.openssl.PEMUtilities: java.util.Map KEYSIZES> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_1> = $r1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_2> = $r1;

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndDES_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndRC2_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndDES_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndRC2_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndDES_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $r3 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndRC2_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier id_PBES2>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.cryptocastle.asn1.nist.NISTObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier id_aes128_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.cryptocastle.asn1.nist.NISTObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier id_aes192_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r2 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $r3 = <org.cryptocastle.asn1.nist.NISTObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier id_aes256_CBC>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r4 = <org.cryptocastle.openssl.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC>;

        $r5 = virtualinvoke $r3.<org.cryptocastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = new java.lang.Integer;

        varReplacer3086 = 192;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(varReplacer3086);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.cryptocastle.openssl.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.cryptocastle.asn1.nist.NISTObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier id_aes128_CBC>;

        $r5 = virtualinvoke $r3.<org.cryptocastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = new java.lang.Integer;

        varReplacer3087 = 128;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(varReplacer3087);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.cryptocastle.openssl.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.cryptocastle.asn1.nist.NISTObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier id_aes192_CBC>;

        $r5 = virtualinvoke $r3.<org.cryptocastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = new java.lang.Integer;

        varReplacer3085 = 192;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(varReplacer3085);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r4 = <org.cryptocastle.openssl.PEMUtilities: java.util.Map KEYSIZES>;

        $r3 = <org.cryptocastle.asn1.nist.NISTObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier id_aes256_CBC>;

        $r5 = virtualinvoke $r3.<org.cryptocastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $r6 = new java.lang.Integer;

        varReplacer3084 = 256;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(varReplacer3084);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    void <init>()
    {
        org.cryptocastle.openssl.PEMUtilities $r0;

        $r0 := @this: org.cryptocastle.openssl.PEMUtilities;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static byte[] crypt(boolean, java.lang.String, byte[], char[], java.lang.String, byte[]) throws java.io.IOException
    {
        boolean $z0;
        java.lang.String $r0, $r3;
        byte[] $r1, $r4;
        char[] $r2;
        java.security.Provider $r5, $r6;
        org.cryptocastle.openssl.EncryptionException $r7;
        java.lang.StringBuilder $r8;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: byte[];

        $r2 := @parameter3: char[];

        $r3 := @parameter4: java.lang.String;

        $r4 := @parameter5: byte[];

        $r5 = null;

        if $r0 == null goto label1;

        $r6 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>($r0);

        $r5 = $r6;

        if $r6 != null goto label1;

        $r7 = new org.cryptocastle.openssl.EncryptionException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find provider: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.cryptocastle.openssl.EncryptionException: void <init>(java.lang.String)>($r0);

        throw $r7;

     label1:
        $r1 = staticinvoke <org.cryptocastle.openssl.PEMUtilities: byte[] crypt(boolean,java.security.Provider,byte[],char[],java.lang.String,byte[])>($z0, $r5, $r1, $r2, $r3, $r4);

        return $r1;
    }

    static byte[] crypt(boolean, java.security.Provider, byte[], char[], java.lang.String, byte[]) throws java.io.IOException
    {
        boolean $z0, $z1, $z2;
        java.security.Provider $r0;
        byte[] $r1, $r4, $r14;
        char[] $r2;
        java.lang.String $r3, $r6, $r7, $r8, varReplacer3088, varReplacer3089, varReplacer3090, varReplacer3091, varReplacer3092, varReplacer3093, varReplacer3094, varReplacer3096, varReplacer3097, varReplacer3098, varReplacer3100, varReplacer3101, varReplacer3102, varReplacer3103, varReplacer3104, varReplacer3105, varReplacer3107, varReplacer3108, varReplacer3109, varReplacer3110, varReplacer3111, varReplacer3112, varReplacer3116, varReplacer3117;
        short $s0;
        byte $b1;
        javax.crypto.spec.IvParameterSpec $r5, r16;
        javax.crypto.SecretKey $r9;
        java.lang.Object $r10;
        java.lang.StringBuilder $r11, r17;
        javax.crypto.Cipher $r12;
        int $i2, varReplacer3095, varReplacer3099, varReplacer3106, varReplacer3113, varReplacer3114, varReplacer3115;
        javax.crypto.spec.RC2ParameterSpec $r13, r18;
        java.lang.Exception $r15;
        org.cryptocastle.openssl.EncryptionException r19;
        java.security.spec.AlgorithmParameterSpec r20;

        nop;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.security.Provider;

        $r1 := @parameter2: byte[];

        $r2 := @parameter3: char[];

        $r3 := @parameter4: java.lang.String;

        $r4 := @parameter5: byte[];

        $s0 = 128;

        $b1 = 1;

        $z1 = 0;

        r16 = new javax.crypto.spec.IvParameterSpec;

        $r5 = r16;

        specialinvoke r16.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4);

        $r6 = "CBC";

        $r7 = "PKCS5Padding";

        varReplacer3101 = "-CFB";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>(varReplacer3101);

        if $z2 == 0 goto label01;

        $r6 = "CFB";

        $r7 = "NoPadding";

     label01:
        varReplacer3116 = "-ECB";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>(varReplacer3116);

        if $z2 != 0 goto label02;

        $r8 = "DES-EDE";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 != 0 goto label02;

        $r8 = "DES-EDE3";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label03;

     label02:
        $r6 = "ECB";

        $r5 = null;

     label03:
        varReplacer3110 = "-OFB";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>(varReplacer3110);

        if $z2 == 0 goto label04;

        $r6 = "OFB";

        $r7 = "NoPadding";

     label04:
        varReplacer3109 = "DES-EDE";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3109);

        if $z2 == 0 goto label12;

        varReplacer3093 = "DES-EDE3";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3093);

        if $z2 != 0 goto label05;

        $z1 = 1;

     label05:
        $r3 = "DESede";

        $r10 = $r5;

        varReplacer3098 = "DESede";

        varReplacer3099 = 24;

        $r9 = staticinvoke <org.cryptocastle.openssl.PEMUtilities: javax.crypto.SecretKey getKey(char[],java.lang.String,int,byte[],boolean)>($r2, varReplacer3098, varReplacer3099, $r4, $z1);

     label06:
        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        varReplacer3111 = "/";

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3111);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer3096 = "/";

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3096);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        $r12 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>($r3, $r0);

     label08:
        if $r10 != null goto label26;

     label09:
        virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key)>($b1, $r9);

     label10:
        $r1 = virtualinvoke $r12.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label11:
        return $r1;

     label12:
        varReplacer3117 = "DES-";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3117);

        if $z1 == 0 goto label13;

        $r3 = "DES";

        $r10 = $r5;

        varReplacer3094 = "DES";

        varReplacer3095 = 8;

        $r9 = staticinvoke <org.cryptocastle.openssl.PEMUtilities: javax.crypto.SecretKey getKey(char[],java.lang.String,int,byte[])>($r2, varReplacer3094, varReplacer3095, $r4);

        goto label06;

     label13:
        varReplacer3100 = "BF-";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3100);

        if $z1 == 0 goto label14;

        $r3 = "Blowfish";

        $r10 = $r5;

        varReplacer3105 = "Blowfish";

        varReplacer3106 = 16;

        $r9 = staticinvoke <org.cryptocastle.openssl.PEMUtilities: javax.crypto.SecretKey getKey(char[],java.lang.String,int,byte[])>($r2, varReplacer3105, varReplacer3106, $r4);

        goto label06;

     label14:
        varReplacer3102 = "RC2-";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3102);

        if $z1 == 0 goto label19;

        varReplacer3091 = "RC2-40-";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3091);

        if $z1 == 0 goto label17;

        $s0 = 40;

     label15:
        $i2 = $s0 / 8;

        varReplacer3112 = "RC2";

        $r9 = staticinvoke <org.cryptocastle.openssl.PEMUtilities: javax.crypto.SecretKey getKey(char[],java.lang.String,int,byte[])>($r2, varReplacer3112, $i2, $r4);

        if $r5 != null goto label18;

        r18 = new javax.crypto.spec.RC2ParameterSpec;

        $r13 = r18;

        specialinvoke r18.<javax.crypto.spec.RC2ParameterSpec: void <init>(int)>($s0);

     label16:
        $r3 = "RC2";

        $r10 = $r13;

        goto label06;

     label17:
        varReplacer3088 = "RC2-64-";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3088);

        if $z1 == 0 goto label29;

        $s0 = 64;

        goto label15;

     label18:
        r18 = new javax.crypto.spec.RC2ParameterSpec;

        $r13 = r18;

        specialinvoke r18.<javax.crypto.spec.RC2ParameterSpec: void <init>(int,byte[])>($s0, $r4);

        goto label16;

     label19:
        varReplacer3108 = "AES-";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3108);

        if $z1 == 0 goto label25;

        $i2 = lengthof $r4;

        if $i2 <= 8 goto label20;

        $r14 = newarray (byte)[8];

        varReplacer3113 = 0;

        varReplacer3114 = 0;

        varReplacer3115 = 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, varReplacer3113, $r14, varReplacer3113, varReplacer3115);

        $r4 = $r14;

     label20:
        varReplacer3104 = "AES-128-";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3104);

        if $z1 == 0 goto label22;

     label21:
        $i2 = $s0 / 8;

        $r10 = $r5;

        varReplacer3092 = "AES";

        $r9 = staticinvoke <org.cryptocastle.openssl.PEMUtilities: javax.crypto.SecretKey getKey(char[],java.lang.String,int,byte[])>($r2, varReplacer3092, $i2, $r4);

        $r3 = "AES";

        goto label06;

     label22:
        varReplacer3090 = "AES-192-";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3090);

        if $z1 == 0 goto label23;

        $s0 = 192;

        goto label21;

     label23:
        varReplacer3107 = "AES-256-";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3107);

        if $z1 == 0 goto label24;

        $s0 = 256;

        goto label21;

     label24:
        r19 = new org.cryptocastle.openssl.EncryptionException;

        varReplacer3103 = "unknown AES encryption with private key";

        specialinvoke r19.<org.cryptocastle.openssl.EncryptionException: void <init>(java.lang.String)>(varReplacer3103);

        throw r19;

     label25:
        r19 = new org.cryptocastle.openssl.EncryptionException;

        varReplacer3097 = "unknown encryption with private key";

        specialinvoke r19.<org.cryptocastle.openssl.EncryptionException: void <init>(java.lang.String)>(varReplacer3097);

        throw r19;

     label26:
        r20 = (java.security.spec.AlgorithmParameterSpec) $r10;

        virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($b1, $r9, r20);

     label27:
        goto label10;

     label28:
        $r15 := @caughtexception;

        r19 = new org.cryptocastle.openssl.EncryptionException;

        varReplacer3089 = "exception using cipher - please check password and data.";

        specialinvoke r19.<org.cryptocastle.openssl.EncryptionException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer3089, $r15);

        throw r19;

     label29:
        $s0 = 128;

        goto label15;

        catch java.lang.Exception from label07 to label08 with label28;
        catch java.lang.Exception from label09 to label11 with label28;
        catch java.lang.Exception from label26 to label27 with label28;
    }

    static javax.crypto.SecretKey generateSecretKeyForPKCS5Scheme2(java.lang.String, char[], byte[], int)
    {
        java.lang.String $r0;
        char[] $r1;
        byte[] $r2, $r4;
        int $i0;
        org.cryptocastle.crypto.generators.PKCS5S2ParametersGenerator $r3;
        javax.crypto.spec.SecretKeySpec $r5;
        org.cryptocastle.crypto.CipherParameters $r6;
        org.cryptocastle.crypto.params.KeyParameter $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        $r2 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $r3 = new org.cryptocastle.crypto.generators.PKCS5S2ParametersGenerator;

        specialinvoke $r3.<org.cryptocastle.crypto.generators.PKCS5S2ParametersGenerator: void <init>()>();

        $r4 = staticinvoke <org.cryptocastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToBytes(char[])>($r1);

        virtualinvoke $r3.<org.cryptocastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r4, $r2, $i0);

        $r5 = new javax.crypto.spec.SecretKeySpec;

        $i0 = staticinvoke <org.cryptocastle.openssl.PEMUtilities: int getKeySize(java.lang.String)>($r0);

        $r6 = virtualinvoke $r3.<org.cryptocastle.crypto.PBEParametersGenerator: org.cryptocastle.crypto.CipherParameters generateDerivedParameters(int)>($i0);

        $r7 = (org.cryptocastle.crypto.params.KeyParameter) $r6;

        $r2 = virtualinvoke $r7.<org.cryptocastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r0);

        return $r5;
    }

    private static javax.crypto.SecretKey getKey(char[], java.lang.String, int, byte[])
    {
        char[] $r0;
        java.lang.String $r1;
        int $i0, varReplacer3120;
        byte[] $r2;
        javax.crypto.SecretKey $r3;

        nop;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: byte[];

        varReplacer3120 = 0;

        $r3 = staticinvoke <org.cryptocastle.openssl.PEMUtilities: javax.crypto.SecretKey getKey(char[],java.lang.String,int,byte[],boolean)>($r0, $r1, $i0, $r2, varReplacer3120);

        return $r3;
    }

    private static javax.crypto.SecretKey getKey(char[], java.lang.String, int, byte[], boolean)
    {
        char[] $r0;
        java.lang.String $r1;
        int $i0, varReplacer3121, varReplacer3122, varReplacer3123;
        byte[] $r2, $r4;
        boolean $z0;
        org.cryptocastle.crypto.generators.OpenSSLPBEParametersGenerator $r3;
        org.cryptocastle.crypto.CipherParameters $r5;
        org.cryptocastle.crypto.params.KeyParameter $r6;
        javax.crypto.spec.SecretKeySpec $r7;

        nop;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $z0 := @parameter4: boolean;

        $r3 = new org.cryptocastle.crypto.generators.OpenSSLPBEParametersGenerator;

        specialinvoke $r3.<org.cryptocastle.crypto.generators.OpenSSLPBEParametersGenerator: void <init>()>();

        $r4 = staticinvoke <org.cryptocastle.crypto.PBEParametersGenerator: byte[] PKCS5PasswordToBytes(char[])>($r0);

        virtualinvoke $r3.<org.cryptocastle.crypto.generators.OpenSSLPBEParametersGenerator: void init(byte[],byte[])>($r4, $r2);

        $i0 = $i0 * 8;

        $r5 = virtualinvoke $r3.<org.cryptocastle.crypto.generators.OpenSSLPBEParametersGenerator: org.cryptocastle.crypto.CipherParameters generateDerivedParameters(int)>($i0);

        $r6 = (org.cryptocastle.crypto.params.KeyParameter) $r5;

        $r2 = virtualinvoke $r6.<org.cryptocastle.crypto.params.KeyParameter: byte[] getKey()>();

        if $z0 == 0 goto label1;

        $i0 = lengthof $r2;

        if $i0 < 24 goto label1;

        varReplacer3121 = 0;

        varReplacer3122 = 16;

        varReplacer3123 = 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer3121, $r2, varReplacer3122, varReplacer3123);

     label1:
        $r7 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r1);

        return $r7;
    }

    static int getKeySize(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.cryptocastle.openssl.PEMUtilities: java.util.Map KEYSIZES>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no key size for algorithm: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label1:
        $r1 = <org.cryptocastle.openssl.PEMUtilities: java.util.Map KEYSIZES>;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    static boolean isPKCS12(org.cryptocastle.asn1.DERObjectIdentifier)
    {
        org.cryptocastle.asn1.DERObjectIdentifier $r0;
        java.lang.String $r1, $r3;
        org.cryptocastle.asn1.ASN1ObjectIdentifier $r2;
        boolean $z0;

        $r0 := @parameter0: org.cryptocastle.asn1.DERObjectIdentifier;

        $r1 = virtualinvoke $r0.<org.cryptocastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $r2 = <org.cryptocastle.asn1.pkcs.PKCSObjectIdentifiers: org.cryptocastle.asn1.ASN1ObjectIdentifier pkcs_12PbeIds>;

        $r3 = virtualinvoke $r2.<org.cryptocastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        return $z0;
    }

    static boolean isPKCS5Scheme1(org.cryptocastle.asn1.DERObjectIdentifier)
    {
        org.cryptocastle.asn1.DERObjectIdentifier $r0;
        boolean $z0;
        java.util.Set $r1;

        $r0 := @parameter0: org.cryptocastle.asn1.DERObjectIdentifier;

        $r1 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_1>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        return $z0;
    }

    static boolean isPKCS5Scheme2(org.cryptocastle.asn1.ASN1ObjectIdentifier)
    {
        org.cryptocastle.asn1.ASN1ObjectIdentifier $r0;
        boolean $z0;
        java.util.Set $r1;

        $r0 := @parameter0: org.cryptocastle.asn1.ASN1ObjectIdentifier;

        $r1 = <org.cryptocastle.openssl.PEMUtilities: java.util.Set PKCS5_SCHEME_2>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r0);

        return $z0;
    }
}
