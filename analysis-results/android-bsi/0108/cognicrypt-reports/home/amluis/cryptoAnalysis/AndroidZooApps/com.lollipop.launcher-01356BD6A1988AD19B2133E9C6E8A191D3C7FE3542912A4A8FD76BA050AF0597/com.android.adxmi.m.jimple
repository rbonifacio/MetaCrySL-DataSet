public class com.android.adxmi.m extends java.lang.Object
{

    public static java.lang.String a(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r3, $r7, varReplacer1338, varReplacer1339, varReplacer1340, varReplacer1341, varReplacer1342;
        int $i0, $i1;
        java.net.URL $r2;
        java.lang.String[] $r4, $r8;
        java.util.HashMap $r5;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r9, $r11, $r12;
        java.lang.Exception $r10;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.net.URL;

     label01:
        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.net.URL: java.lang.String getQuery()>();

        varReplacer1340 = "&";

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer1340);

     label02:
        $r5 = new java.util.HashMap;

     label03:
        specialinvoke $r5.<java.util.HashMap: void <init>()>();

     label04:
        $i0 = lengthof $r4;

        $i1 = 0;

     label05:
        if $i1 < $i0 goto label10;

     label06:
        $r1 = staticinvoke <com.android.adxmi.m: java.lang.String a(java.util.HashMap,java.lang.String)>($r5, $r1);

     label07:
        $r6 = new java.lang.StringBuilder;

     label08:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r0);

        varReplacer1342 = "&sign=";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1342);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        return $r0;

     label10:
        $r7 = $r4[$i1];

     label11:
        varReplacer1338 = "=";

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer1338);

     label12:
        $r3 = $r8[0];

     label13:
        varReplacer1341 = "=";

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer1341);

     label14:
        $r7 = $r8[1];

     label15:
        varReplacer1339 = "UTF-8";

        $r7 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r7, varReplacer1339);

     label16:
        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r7);

     label17:
        $i1 = $i1 + 1;

        goto label05;

     label18:
        $r9 := @caughtexception;

        $r7 = "";

        goto label16;

     label19:
        $r10 := @caughtexception;

        $r7 = "";

        goto label16;

     label20:
        $r11 := @caughtexception;

        throw $r11;

     label21:
        $r12 := @caughtexception;

        throw $r12;

        catch java.net.MalformedURLException from label01 to label02 with label20;
        catch java.net.MalformedURLException from label03 to label04 with label20;
        catch java.net.MalformedURLException from label06 to label07 with label20;
        catch java.net.MalformedURLException from label08 to label09 with label20;
        catch java.net.MalformedURLException from label11 to label12 with label20;
        catch java.io.IOException from label01 to label02 with label21;
        catch java.io.IOException from label03 to label04 with label21;
        catch java.io.IOException from label06 to label07 with label21;
        catch java.io.IOException from label08 to label09 with label21;
        catch java.io.IOException from label11 to label12 with label21;
        catch java.io.UnsupportedEncodingException from label13 to label14 with label18;
        catch java.io.UnsupportedEncodingException from label15 to label16 with label18;
        catch java.lang.Exception from label13 to label16 with label19;
        catch java.net.MalformedURLException from label16 to label17 with label20;
        catch java.io.IOException from label16 to label17 with label21;
    }

    public static java.lang.String a(java.util.HashMap, java.lang.String)
    {
        java.util.HashMap $r0;
        java.lang.String $r1, $r10, varReplacer1343, varReplacer1344, varReplacer1345, varReplacer1346;
        java.util.TreeMap $r2;
        java.util.Set $r3;
        java.lang.StringBuilder $r4, $r11;
        java.util.Iterator $r5;
        boolean $z0;
        java.security.MessageDigest $r6;
        byte[] $r7;
        int $i0, $i1;
        java.lang.Object $r8;
        java.util.Map$Entry $r9;
        java.lang.Throwable $r12;
        java.io.IOException $r13;
        byte $b2;
        short $s3;

        nop;

        $r0 := @parameter0: java.util.HashMap;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Map)>($r0);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label2:
        varReplacer1346 = "MD5";

        $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1346);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer1343 = "UTF-8";

        $r7 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer1343);

        $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest(byte[])>($r7);

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $i0 = 0;

     label4:
        $i1 = lengthof $r7;

        if $i0 < $i1 goto label7;

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label5:
        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.util.Map$Entry) $r8;

        $r8 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r8;

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        varReplacer1345 = "=";

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1345);

        $r8 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r8;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        goto label1;

     label6:
        $r12 := @caughtexception;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label7:
        $b2 = $r7[$i0];

        $s3 = $b2 & 255;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s3);

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 1 goto label8;

        varReplacer1344 = "0";

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1344);

     label8:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i0 = $i0 + 1;

        goto label4;

        catch java.security.GeneralSecurityException from label2 to label3 with label6;
    }
}
