class com.leanplum.a extends java.lang.Object
{
    private java.lang.String a;
    private java.lang.String b;
    private java.lang.Object c;
    private boolean d;

    private void <init>()
    {
        com.leanplum.a $r0;

        nop;

        $r0 := @this: com.leanplum.a;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.leanplum.a a(java.lang.String, int)
    {
        java.lang.String $r0, varReplacer2265;
        int $i0;
        java.lang.Integer $r1;
        com.leanplum.a $r2;

        nop;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        varReplacer2265 = "color";

        $r2 = staticinvoke <com.leanplum.a: com.leanplum.a a(java.lang.String,java.lang.Object,java.lang.String)>($r0, $r1, varReplacer2265);

        return $r2;
    }

    public static com.leanplum.a a(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0, $r2;
        java.lang.Object $r1;
        com.leanplum.a $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.leanplum.aS: java.lang.String a(java.lang.Object)>($r1);

        $r3 = staticinvoke <com.leanplum.a: com.leanplum.a a(java.lang.String,java.lang.Object,java.lang.String)>($r0, $r1, $r2);

        return $r3;
    }

    private static com.leanplum.a a(java.lang.String, java.lang.Object, java.lang.String)
    {
        java.lang.String $r0, $r2;
        java.lang.Object $r1;
        com.leanplum.a $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.String;

        $r3 = new com.leanplum.a;

        specialinvoke $r3.<com.leanplum.a: void <init>()>();

        $r3.<com.leanplum.a: java.lang.String a> = $r0;

        $r3.<com.leanplum.a: java.lang.String b> = $r2;

        $r3.<com.leanplum.a: java.lang.Object c> = $r1;

        return $r3;
    }

    public static java.lang.String a(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer2138, varReplacer2139, varReplacer2140;
        byte[] $r2;
        java.lang.Throwable $r3;
        java.lang.StringBuilder $r4;
        int varReplacer2141;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        varReplacer2138 = "UTF-8";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer2138);

        varReplacer2141 = 1;

        $r2 = staticinvoke <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>(varReplacer2141, $r0, $r2);

        $r0 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r2);

     label2:
        if $r0 == null goto label4;

        return $r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        varReplacer2140 = "Unable to encrypt ";

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer2140);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer2139 = "Leanplum";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>(varReplacer2139, $r0, $r3);

     label4:
        return $r1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String a(java.util.Map)
    {
        java.util.Map $r0;
        org.json.JSONObject $r1;
        java.lang.String $r2, varReplacer1959, varReplacer1960, varReplacer1961;
        org.json.JSONException $r3;
        java.lang.StringBuilder $r4;
        null_type varReplacer1958;

        nop;

        $r0 := @parameter0: java.util.Map;

     label1:
        $r1 = staticinvoke <com.leanplum.a: org.json.JSONObject b(java.util.Map)>($r0);

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String toString()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        varReplacer1961 = "Error converting ";

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer1961);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        varReplacer1959 = " to JSON";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1959);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer1960 = "Leanplum";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(varReplacer1960, $r2, $r3);

        varReplacer1958 = null;

        return varReplacer1958;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    public static java.util.List a(org.json.JSONArray)
    {
        org.json.JSONArray $r0, $r6;
        java.util.ArrayList $r1;
        int $i0, $i1;
        java.lang.Object $r2, $r3, $r4;
        boolean $z0;
        org.json.JSONObject $r5;

        nop;

        $r0 := @parameter0: org.json.JSONArray;

        $r1 = new java.util.ArrayList;

        $i0 = virtualinvoke $r0.<org.json.JSONArray: int length()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<org.json.JSONArray: int length()>();

        if $i0 < $i1 goto label2;

        return $r1;

     label2:
        $r2 = virtualinvoke $r0.<org.json.JSONArray: java.lang.Object opt(int)>($i0);

        $r3 = $r2;

        if $r2 == null goto label3;

        $r4 = <org.json.JSONObject: java.lang.Object NULL>;

        if $r2 != $r4 goto label5;

     label3:
        $r3 = null;

     label4:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label5:
        $z0 = $r2 instanceof org.json.JSONObject;

        if $z0 == 0 goto label6;

        $r5 = (org.json.JSONObject) $r2;

        $r3 = staticinvoke <com.leanplum.a: java.util.Map a(org.json.JSONObject)>($r5);

        goto label4;

     label6:
        $z0 = $r2 instanceof org.json.JSONArray;

        if $z0 == 0 goto label7;

        $r6 = (org.json.JSONArray) $r2;

        $r3 = staticinvoke <com.leanplum.a: java.util.List a(org.json.JSONArray)>($r6);

        goto label4;

     label7:
        $r4 = <org.json.JSONObject: java.lang.Object NULL>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        $r3 = null;

        goto label4;
    }

    public static java.util.Map a(java.lang.String)
    {
        java.lang.String $r0, varReplacer1997, varReplacer1998, varReplacer1999;
        org.json.JSONObject $r1;
        java.util.Map $r2;
        org.json.JSONException $r3;
        java.lang.StringBuilder $r4;
        null_type varReplacer2000;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = new org.json.JSONObject;

     label1:
        specialinvoke $r1.<org.json.JSONObject: void <init>(java.lang.String)>($r0);

        $r2 = staticinvoke <com.leanplum.a: java.util.Map a(org.json.JSONObject)>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        varReplacer1997 = "Error converting ";

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer1997);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        varReplacer1999 = " from JSON";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1999);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer1998 = "Leanplum";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(varReplacer1998, $r0, $r3);

        varReplacer2000 = null;

        return varReplacer2000;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    public static java.util.Map a(org.json.JSONObject)
    {
        org.json.JSONObject $r0, $r7;
        java.util.HashMap $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3, $r5, $r6;
        java.lang.String $r4;
        org.json.JSONArray $r8;

        nop;

        $r0 := @parameter0: org.json.JSONObject;

        $r2 = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        $r3 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($r4);

        $r5 = $r3;

        if $r3 == null goto label3;

        $r6 = <org.json.JSONObject: java.lang.Object NULL>;

        if $r3 != $r6 goto label5;

     label3:
        $r5 = null;

     label4:
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        goto label1;

     label5:
        $z0 = $r3 instanceof org.json.JSONObject;

        if $z0 == 0 goto label6;

        $r7 = (org.json.JSONObject) $r3;

        $r5 = staticinvoke <com.leanplum.a: java.util.Map a(org.json.JSONObject)>($r7);

        goto label4;

     label6:
        $z0 = $r3 instanceof org.json.JSONArray;

        if $z0 == 0 goto label7;

        $r8 = (org.json.JSONArray) $r3;

        $r5 = staticinvoke <com.leanplum.a: java.util.List a(org.json.JSONArray)>($r8);

        goto label4;

     label7:
        $r6 = <org.json.JSONObject: java.lang.Object NULL>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        $r5 = null;

        goto label4;
    }

    public static org.json.JSONArray a(java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        org.json.JSONArray $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3, $r4;
        java.util.Map $r5;

        nop;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 = new org.json.JSONArray;

        specialinvoke $r1.<org.json.JSONArray: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = $r3;

        $z0 = $r3 instanceof java.util.Map;

        if $z0 == 0 goto label4;

        $r5 = (java.util.Map) $r3;

        $r4 = staticinvoke <com.leanplum.a: org.json.JSONObject b(java.util.Map)>($r5);

     label3:
        virtualinvoke $r1.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r4);

        goto label1;

     label4:
        $z0 = $r3 instanceof java.lang.Iterable;

        if $z0 == 0 goto label5;

        $r0 = (java.lang.Iterable) $r3;

        $r4 = staticinvoke <com.leanplum.a: org.json.JSONArray a(java.lang.Iterable)>($r0);

        goto label3;

     label5:
        if $r3 != null goto label3;

        $r4 = <org.json.JSONObject: java.lang.Object NULL>;

        goto label3;
    }

    public static boolean a(java.lang.Number, java.lang.Number)
    {
        java.lang.Number $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Number;

        $r1 := @parameter1: java.lang.Number;

        $i0 = virtualinvoke $r0.<java.lang.Number: int intValue()>();

        if $i0 == 4 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.Number: int intValue()>();

        if $i0 != 1 goto label2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.Number: int intValue()>();

        if $i0 != 2 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static byte[] a(int, java.lang.String, byte[])
    {
        int $i0, varReplacer2119, varReplacer2120;
        java.lang.String $r0, $r2, varReplacer2111, varReplacer2116, varReplacer2118, varReplacer2122, varReplacer2124;
        byte[] $r1, $r3, $r4;
        javax.crypto.spec.PBEKeySpec $r5, r20;
        char[] $r6;
        javax.crypto.SecretKeyFactory $r7;
        javax.crypto.SecretKey $r8;
        javax.crypto.spec.SecretKeySpec $r9, r21;
        javax.crypto.Cipher $r10;
        javax.crypto.spec.IvParameterSpec $r11, r22;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.security.InvalidKeyException r23;
        java.security.NoSuchAlgorithmException r24;
        javax.crypto.NoSuchPaddingException r25;
        java.security.InvalidAlgorithmParameterException r26;
        javax.crypto.IllegalBlockSizeException r27;
        javax.crypto.BadPaddingException r28;
        java.io.UnsupportedEncodingException r29;
        java.security.spec.InvalidKeySpecException r30;
        null_type varReplacer2112, varReplacer2113, varReplacer2114, varReplacer2115, varReplacer2117, varReplacer2121, varReplacer2123, varReplacer2125;

        nop;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: byte[];

        $r2 = "L3@nP1Vm";

     label01:
        varReplacer2111 = "UTF-8";

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer2111);

     label02:
        $r2 = "__l3anplum__iv__";

     label03:
        varReplacer2116 = "UTF-8";

        $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer2116);

     label04:
        r20 = new javax.crypto.spec.PBEKeySpec;

        $r5 = r20;

     label05:
        $r6 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        varReplacer2119 = 1000;

        varReplacer2120 = 256;

        specialinvoke r20.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, $r3, varReplacer2119, varReplacer2120);

        varReplacer2122 = "PBEWithMD5And128BitAES-CBC-OpenSSL";

        $r7 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer2122);

        $r8 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5);

        $r3 = interfaceinvoke $r8.<javax.crypto.SecretKey: byte[] getEncoded()>();

     label06:
        r21 = new javax.crypto.spec.SecretKeySpec;

        $r9 = r21;

     label07:
        varReplacer2124 = "AES";

        specialinvoke r21.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer2124);

        varReplacer2118 = "AES/CBC/PKCS5Padding";

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2118);

     label08:
        r22 = new javax.crypto.spec.IvParameterSpec;

        $r11 = r22;

     label09:
        specialinvoke r22.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4);

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($i0, $r9, $r11);

        $r1 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label10:
        return $r1;

     label11:
        $r12 := @caughtexception;

        r23 = (java.security.InvalidKeyException) $r12;

        virtualinvoke r23.<java.security.InvalidKeyException: void printStackTrace()>();

        varReplacer2115 = null;

        return varReplacer2115;

     label12:
        $r13 := @caughtexception;

        r24 = (java.security.NoSuchAlgorithmException) $r13;

        virtualinvoke r24.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        varReplacer2121 = null;

        return varReplacer2121;

     label13:
        $r14 := @caughtexception;

        r25 = (javax.crypto.NoSuchPaddingException) $r14;

        virtualinvoke r25.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        varReplacer2125 = null;

        return varReplacer2125;

     label14:
        $r15 := @caughtexception;

        r26 = (java.security.InvalidAlgorithmParameterException) $r15;

        virtualinvoke r26.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        varReplacer2117 = null;

        return varReplacer2117;

     label15:
        $r16 := @caughtexception;

        r27 = (javax.crypto.IllegalBlockSizeException) $r16;

        virtualinvoke r27.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        varReplacer2112 = null;

        return varReplacer2112;

     label16:
        $r17 := @caughtexception;

        r28 = (javax.crypto.BadPaddingException) $r17;

        virtualinvoke r28.<javax.crypto.BadPaddingException: void printStackTrace()>();

        varReplacer2114 = null;

        return varReplacer2114;

     label17:
        $r18 := @caughtexception;

        r29 = (java.io.UnsupportedEncodingException) $r18;

        virtualinvoke r29.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        varReplacer2123 = null;

        return varReplacer2123;

     label18:
        $r19 := @caughtexception;

        r30 = (java.security.spec.InvalidKeySpecException) $r19;

        virtualinvoke r30.<java.security.spec.InvalidKeySpecException: void printStackTrace()>();

        varReplacer2113 = null;

        return varReplacer2113;

        catch java.security.InvalidKeyException from label01 to label02 with label11;
        catch java.security.InvalidKeyException from label03 to label04 with label11;
        catch java.security.InvalidKeyException from label05 to label06 with label11;
        catch java.security.InvalidKeyException from label07 to label08 with label11;
        catch java.security.InvalidKeyException from label09 to label10 with label11;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label12;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label12;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label12;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label12;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label12;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label13;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label13;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label13;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label13;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label13;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label14;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label14;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label14;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label14;
        catch java.security.InvalidAlgorithmParameterException from label09 to label10 with label14;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label15;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label15;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label15;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label15;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label15;
        catch javax.crypto.BadPaddingException from label01 to label02 with label16;
        catch javax.crypto.BadPaddingException from label03 to label04 with label16;
        catch javax.crypto.BadPaddingException from label05 to label06 with label16;
        catch javax.crypto.BadPaddingException from label07 to label08 with label16;
        catch javax.crypto.BadPaddingException from label09 to label10 with label16;
        catch java.io.UnsupportedEncodingException from label01 to label02 with label17;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label17;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label17;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label17;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label17;
        catch java.security.spec.InvalidKeySpecException from label01 to label02 with label18;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label18;
        catch java.security.spec.InvalidKeySpecException from label05 to label06 with label18;
        catch java.security.spec.InvalidKeySpecException from label07 to label08 with label18;
        catch java.security.spec.InvalidKeySpecException from label09 to label10 with label18;
    }

    public static java.lang.String b(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2, varReplacer1992, varReplacer1993, varReplacer1996;
        int $i0, $i1, varReplacer1994, varReplacer1995;
        java.lang.String[] $r3;
        byte[] $r4;
        byte $b2;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label01:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

     label02:
        $r1 = $r2;

     label03:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

     label04:
        $i0 = $i0 + -1;

     label05:
        varReplacer1995 = 1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(varReplacer1995, $i0);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        varReplacer1996 = "\\s*,\\s*";

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer1996);

     label06:
        $i0 = lengthof $r3;

        $r4 = newarray (byte)[$i0];

        $i0 = 0;

     label07:
        $i1 = lengthof $r3;

        if $i0 < $i1 goto label10;

        $r2 = new java.lang.String;

     label08:
        varReplacer1994 = 2;

        $r4 = staticinvoke <com.leanplum.a: byte[] a(int,java.lang.String,byte[])>(varReplacer1994, $r0, $r4);

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r4);

     label09:
        return $r2;

     label10:
        $r2 = $r3[$i0];

     label11:
        $b2 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>($r2);

     label12:
        $r4[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label07;

     label13:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        varReplacer1992 = "Invalid ciphertext: ";

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer1992);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer1993 = "Leanplum";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>(varReplacer1993, $r0, $r5);

        return $r1;

        catch java.lang.NumberFormatException from label01 to label02 with label13;
        catch java.lang.NumberFormatException from label03 to label04 with label13;
        catch java.lang.NumberFormatException from label05 to label06 with label13;
        catch java.lang.NumberFormatException from label08 to label09 with label13;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    public static org.json.JSONObject b(java.util.Map)
    {
        java.util.Map $r0, $r7;
        org.json.JSONObject $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4, $r6;
        java.lang.String $r5;
        java.lang.Iterable $r8;

        nop;

        $r0 := @parameter0: java.util.Map;

        $r1 = new org.json.JSONObject;

        specialinvoke $r1.<org.json.JSONObject: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $r4 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r6 = $r4;

        $z0 = $r4 instanceof java.util.Map;

        if $z0 == 0 goto label4;

        $r7 = (java.util.Map) $r4;

        $r6 = staticinvoke <com.leanplum.a: org.json.JSONObject b(java.util.Map)>($r7);

     label3:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r5, $r6);

        goto label1;

     label4:
        $z0 = $r4 instanceof java.lang.Iterable;

        if $z0 == 0 goto label5;

        $r8 = (java.lang.Iterable) $r4;

        $r6 = staticinvoke <com.leanplum.a: org.json.JSONArray a(java.lang.Iterable)>($r8);

        goto label3;

     label5:
        if $r4 != null goto label3;

        $r6 = <org.json.JSONObject: java.lang.Object NULL>;

        goto label3;
    }

    public static boolean b(java.lang.Number, java.lang.Number)
    {
        java.lang.Number $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Number;

        $r1 := @parameter1: java.lang.Number;

        $i0 = virtualinvoke $r0.<java.lang.Number: int intValue()>();

        if $i0 != 2 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.Number: int intValue()>();

        if $i0 != 4 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static com.leanplum.a c(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer2266, varReplacer2267;
        com.leanplum.a $r2;
        java.lang.Object $r3;
        java.io.InputStream $r4;
        int varReplacer2268, varReplacer2270;
        null_type varReplacer2269;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r1 = "";

        varReplacer2266 = "Background image";

        varReplacer2267 = "file";

        $r2 = staticinvoke <com.leanplum.a: com.leanplum.a a(java.lang.String,java.lang.Object,java.lang.String)>(varReplacer2266, $r1, varReplacer2267);

        $r3 = $r2.<com.leanplum.a: java.lang.Object c>;

        $r0 = (java.lang.String) $r3;

        $r3 = $r2.<com.leanplum.a: java.lang.Object c>;

        $r1 = (java.lang.String) $r3;

        $r4 = virtualinvoke $r2.<com.leanplum.a: java.io.InputStream d()>();

        varReplacer2268 = 0;

        varReplacer2269 = null;

        varReplacer2270 = 0;

        staticinvoke <com.leanplum.aS: boolean a(java.lang.String,java.lang.String,java.io.InputStream,boolean,java.lang.String,int)>($r0, $r1, $r4, varReplacer2268, varReplacer2269, varReplacer2268);

        return $r2;
    }

    public static com.leanplum.a d(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        com.leanplum.a $r2;
        java.lang.Object $r3;
        java.io.InputStream $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.leanplum.a: com.leanplum.a a(java.lang.String,java.lang.Object,java.lang.String)>($r0, $r1, "file");

        $r2.<com.leanplum.a: boolean d> = 1;

        $r3 = $r2.<com.leanplum.a: java.lang.Object c>;

        $r0 = (java.lang.String) $r3;

        $r3 = $r2.<com.leanplum.a: java.lang.Object c>;

        $r1 = (java.lang.String) $r3;

        $r4 = virtualinvoke $r2.<com.leanplum.a: java.io.InputStream d()>();

        staticinvoke <com.leanplum.aS: boolean a(java.lang.String,java.lang.String,java.io.InputStream,boolean,java.lang.String,int)>($r0, $r1, $r4, 0, null, 0);

        return $r2;
    }

    public static com.leanplum.a e(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r2, varReplacer2271;
        com.leanplum.a $r1;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r2 = "";

        varReplacer2271 = "action";

        $r1 = staticinvoke <com.leanplum.a: com.leanplum.a a(java.lang.String,java.lang.Object,java.lang.String)>($r0, $r2, varReplacer2271);

        return $r1;
    }

    public java.lang.String a()
    {
        com.leanplum.a $r0;
        java.lang.String r1;

        $r0 := @this: com.leanplum.a;

        r1 = $r0.<com.leanplum.a: java.lang.String a>;

        return r1;
    }

    public java.lang.String b()
    {
        com.leanplum.a $r0;
        java.lang.String r1;

        $r0 := @this: com.leanplum.a;

        r1 = $r0.<com.leanplum.a: java.lang.String b>;

        return r1;
    }

    public java.lang.Object c()
    {
        com.leanplum.a $r0;
        java.lang.Object r1;

        $r0 := @this: com.leanplum.a;

        r1 = $r0.<com.leanplum.a: java.lang.Object c>;

        return r1;
    }

    public java.io.InputStream d()
    {
        com.leanplum.a $r0;
        java.lang.String $r1, $r5, varReplacer2282;
        boolean $z0;
        java.lang.Boolean $r2, $r3;
        java.lang.Object $r4;
        java.io.InputStream $r6;
        null_type varReplacer2279, varReplacer2281;
        int varReplacer2280;

        nop;

        $r0 := @this: com.leanplum.a;

        $r1 = $r0.<com.leanplum.a: java.lang.String b>;

        varReplacer2282 = "file";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer2282);

        if $z0 != 0 goto label1;

        varReplacer2279 = null;

        return varReplacer2279;

     label1:
        $z0 = $r0.<com.leanplum.a: boolean d>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z0 = $r0.<com.leanplum.a: boolean d>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r4 = $r0.<com.leanplum.a: java.lang.Object c>;

        $r1 = (java.lang.String) $r4;

        $r4 = $r0.<com.leanplum.a: java.lang.Object c>;

        $r5 = (java.lang.String) $r4;

        varReplacer2280 = 0;

        varReplacer2281 = null;

        $r6 = staticinvoke <com.leanplum.FileManager: java.io.InputStream a(boolean,java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.String,byte[])>(varReplacer2280, $r2, $r3, $r1, $r5, varReplacer2281);

        return $r6;
    }
}
