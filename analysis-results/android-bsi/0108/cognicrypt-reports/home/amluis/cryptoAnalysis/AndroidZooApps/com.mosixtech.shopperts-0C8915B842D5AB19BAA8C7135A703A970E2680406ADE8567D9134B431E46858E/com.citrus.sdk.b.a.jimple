public class com.citrus.sdk.b.a extends java.lang.Object
{
    private static com.citrus.sdk.b.a a;
    private final byte[] b;
    private final java.lang.String c;

    static void <clinit>()
    {
        null_type varReplacer1549;

        nop;

        varReplacer1549 = null;

        <com.citrus.sdk.b.a: com.citrus.sdk.b.a a> = varReplacer1549;

        return;
    }

    private void <init>()
    {
        com.citrus.sdk.b.a $r0;
        byte[] $r1;
        java.lang.String varReplacer1551;

        nop;

        $r0 := @this: com.citrus.sdk.b.a;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[16];

        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $r1[6] = 0;

        $r1[7] = 0;

        $r1[8] = 0;

        $r1[9] = 0;

        $r1[10] = 0;

        $r1[11] = 0;

        $r1[12] = 0;

        $r1[13] = 0;

        $r1[14] = 0;

        $r1[15] = 0;

        $r0.<com.citrus.sdk.b.a: byte[] b> = $r1;

        varReplacer1551 = "UTF-8";

        $r0.<com.citrus.sdk.b.a: java.lang.String c> = varReplacer1551;

        return;
    }

    public static com.citrus.sdk.b.a a()
    {
        com.citrus.sdk.b.a $r0;
        java.lang.Throwable $r1;

        nop;

        $r0 = <com.citrus.sdk.b.a: com.citrus.sdk.b.a a>;

        if $r0 != null goto label3;

        entermonitor class "Lcom/citrus/sdk/b/a;";

     label1:
        $r0 = <com.citrus.sdk.b.a: com.citrus.sdk.b.a a>;

        if $r0 != null goto label2;

        $r0 = new com.citrus.sdk.b.a;

        specialinvoke $r0.<com.citrus.sdk.b.a: void <init>()>();

        <com.citrus.sdk.b.a: com.citrus.sdk.b.a a> = $r0;

     label2:
        exitmonitor class "Lcom/citrus/sdk/b/a;";

     label3:
        $r0 = <com.citrus.sdk.b.a: com.citrus.sdk.b.a a>;

        return $r0;

     label4:
        $r1 := @caughtexception;

     label5:
        exitmonitor class "Lcom/citrus/sdk/b/a;";

     label6:
        throw $r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private byte[] a(byte[], byte[], byte[]) throws java.io.UnsupportedEncodingException, java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        com.citrus.sdk.b.a $r0;
        byte[] $r1, $r2, $r3;
        javax.crypto.spec.SecretKeySpec $r4;
        javax.crypto.spec.IvParameterSpec $r5;
        javax.crypto.Cipher $r6;

        $r0 := @this: com.citrus.sdk.b.a;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $r5 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1);

        $r4 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "AES");

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r4, $r5);

        $r1 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        return $r1;
    }

    private byte[] b(byte[], byte[], byte[]) throws java.io.UnsupportedEncodingException, java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        com.citrus.sdk.b.a $r0;
        byte[] $r1, $r2, $r3;
        javax.crypto.spec.SecretKeySpec $r4;
        javax.crypto.spec.IvParameterSpec $r5;
        javax.crypto.Cipher $r6;
        java.lang.String varReplacer1825, varReplacer1826;
        int varReplacer1827;

        nop;

        $r0 := @this: com.citrus.sdk.b.a;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $r5 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1);

        $r4 = new javax.crypto.spec.SecretKeySpec;

        varReplacer1826 = "AES";

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer1826);

        varReplacer1825 = "AES/CBC/PKCS5Padding";

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1825);

        varReplacer1827 = 2;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1827, $r4, $r5);

        $r1 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        return $r1;
    }

    public byte[] a(java.lang.String, java.lang.String)
    {
        com.citrus.sdk.b.a $r0;
        java.lang.String $r1, $r2;
        byte[] $r3, $r5, $r6, $r7;
        java.security.MessageDigest $r4;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.security.NoSuchAlgorithmException r16;
        java.io.UnsupportedEncodingException r17;
        javax.crypto.NoSuchPaddingException r18;
        java.security.InvalidKeyException r19;
        java.security.InvalidAlgorithmParameterException r20;
        javax.crypto.IllegalBlockSizeException r21;
        javax.crypto.BadPaddingException r22;

        $r0 := @this: com.citrus.sdk.b.a;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        entermonitor $r0;

        $r3 = null;

     label01:
        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r5 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r5);

     label02:
        $r6 = $r0.<com.citrus.sdk.b.a: byte[] b>;

     label03:
        $r7 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r5 = specialinvoke $r0.<com.citrus.sdk.b.a: byte[] a(byte[],byte[],byte[])>($r6, $r5, $r7);

     label04:
        $r3 = $r5;

     label05:
        exitmonitor $r0;

        return $r3;

     label06:
        $r8 := @caughtexception;

     label07:
        r16 = (java.security.NoSuchAlgorithmException) $r8;

        virtualinvoke r16.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label08:
        goto label05;

     label09:
        $r9 := @caughtexception;

        exitmonitor $r0;

        throw $r9;

     label10:
        $r10 := @caughtexception;

     label11:
        r17 = (java.io.UnsupportedEncodingException) $r10;

        virtualinvoke r17.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label05;

     label12:
        $r11 := @caughtexception;

        r18 = (javax.crypto.NoSuchPaddingException) $r11;

        virtualinvoke r18.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label05;

     label13:
        $r12 := @caughtexception;

        r19 = (java.security.InvalidKeyException) $r12;

        virtualinvoke r19.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label05;

     label14:
        $r13 := @caughtexception;

        r20 = (java.security.InvalidAlgorithmParameterException) $r13;

        virtualinvoke r20.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label05;

     label15:
        $r14 := @caughtexception;

        r21 = (javax.crypto.IllegalBlockSizeException) $r14;

        virtualinvoke r21.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label05;

     label16:
        $r15 := @caughtexception;

        r22 = (javax.crypto.BadPaddingException) $r15;

        virtualinvoke r22.<javax.crypto.BadPaddingException: void printStackTrace()>();

     label17:
        goto label05;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label06;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label06;
        catch java.io.UnsupportedEncodingException from label01 to label02 with label10;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label10;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label12;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label12;
        catch java.security.InvalidKeyException from label01 to label02 with label13;
        catch java.security.InvalidKeyException from label03 to label04 with label13;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label14;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label14;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label15;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label15;
        catch javax.crypto.BadPaddingException from label01 to label02 with label16;
        catch javax.crypto.BadPaddingException from label03 to label04 with label16;
        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label17 with label09;
    }

    public byte[] b(java.lang.String, java.lang.String)
    {
        com.citrus.sdk.b.a $r0;
        java.lang.String $r1, $r2, varReplacer1821, varReplacer1822, varReplacer1823;
        byte[] $r3, $r5, $r6, $r7;
        java.security.MessageDigest $r4;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.security.NoSuchAlgorithmException r17;
        java.io.UnsupportedEncodingException r18;
        javax.crypto.NoSuchPaddingException r19;
        java.security.InvalidKeyException r20;
        java.security.InvalidAlgorithmParameterException r21;
        javax.crypto.IllegalBlockSizeException r22;
        javax.crypto.BadPaddingException r23;
        java.lang.IllegalArgumentException r24;
        int varReplacer1824;

        nop;

        $r0 := @this: com.citrus.sdk.b.a;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        entermonitor $r0;

        $r3 = null;

     label01:
        varReplacer1823 = "MD5";

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1823);

        varReplacer1821 = "UTF-8";

        $r5 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer1821);

        $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r5);

        varReplacer1822 = "UTF-8";

        $r6 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer1822);

        varReplacer1824 = 0;

        $r6 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r6, varReplacer1824);

     label02:
        $r7 = $r0.<com.citrus.sdk.b.a: byte[] b>;

     label03:
        $r5 = specialinvoke $r0.<com.citrus.sdk.b.a: byte[] b(byte[],byte[],byte[])>($r7, $r5, $r6);

     label04:
        $r3 = $r5;

     label05:
        exitmonitor $r0;

        return $r3;

     label06:
        $r8 := @caughtexception;

     label07:
        r17 = (java.security.NoSuchAlgorithmException) $r8;

        virtualinvoke r17.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label08:
        goto label05;

     label09:
        $r9 := @caughtexception;

        exitmonitor $r0;

        throw $r9;

     label10:
        $r10 := @caughtexception;

     label11:
        r18 = (java.io.UnsupportedEncodingException) $r10;

        virtualinvoke r18.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label05;

     label12:
        $r11 := @caughtexception;

        r19 = (javax.crypto.NoSuchPaddingException) $r11;

        virtualinvoke r19.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label05;

     label13:
        $r12 := @caughtexception;

        r20 = (java.security.InvalidKeyException) $r12;

        virtualinvoke r20.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label05;

     label14:
        $r13 := @caughtexception;

        r21 = (java.security.InvalidAlgorithmParameterException) $r13;

        virtualinvoke r21.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label05;

     label15:
        $r14 := @caughtexception;

        r22 = (javax.crypto.IllegalBlockSizeException) $r14;

        virtualinvoke r22.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label05;

     label16:
        $r15 := @caughtexception;

        r23 = (javax.crypto.BadPaddingException) $r15;

        virtualinvoke r23.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label05;

     label17:
        $r16 := @caughtexception;

        r24 = (java.lang.IllegalArgumentException) $r16;

        virtualinvoke r24.<java.lang.IllegalArgumentException: void printStackTrace()>();

     label18:
        goto label05;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label06;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label06;
        catch java.io.UnsupportedEncodingException from label01 to label02 with label10;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label10;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label12;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label12;
        catch java.security.InvalidKeyException from label01 to label02 with label13;
        catch java.security.InvalidKeyException from label03 to label04 with label13;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label14;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label14;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label15;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label15;
        catch javax.crypto.BadPaddingException from label01 to label02 with label16;
        catch javax.crypto.BadPaddingException from label03 to label04 with label16;
        catch java.lang.IllegalArgumentException from label01 to label02 with label17;
        catch java.lang.IllegalArgumentException from label03 to label04 with label17;
        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label18 with label09;
    }
}
