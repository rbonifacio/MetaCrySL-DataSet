public class net.roarsoftware.util.StringUtilities extends java.lang.Object
{
    private static java.util.regex.Pattern MBID_PATTERN;
    private static final java.util.regex.Pattern MD5_PATTERN;
    private static java.security.MessageDigest digest;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        java.security.MessageDigest $r1;
        java.lang.Throwable $r2;
        java.lang.String varReplacer389, varReplacer390, varReplacer391;
        int varReplacer392;

        nop;

        varReplacer391 = "^[0-9a-f]{8}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{12}$";

        varReplacer392 = 2;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(varReplacer391, varReplacer392);

        <net.roarsoftware.util.StringUtilities: java.util.regex.Pattern MBID_PATTERN> = $r0;

        varReplacer389 = "[a-zA-Z0-9]{32}";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(varReplacer389);

        <net.roarsoftware.util.StringUtilities: java.util.regex.Pattern MD5_PATTERN> = $r0;

     label1:
        varReplacer390 = "MD5";

        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer390);

     label2:
        <net.roarsoftware.util.StringUtilities: java.security.MessageDigest digest> = $r1;

        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public void <init>()
    {
        net.roarsoftware.util.StringUtilities $r0;

        $r0 := @this: net.roarsoftware.util.StringUtilities;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String cleanUp(java.lang.String)
    {
        java.lang.String $r0, varReplacer487, varReplacer488;

        nop;

        $r0 := @parameter0: java.lang.String;

        varReplacer487 = "[*:/\\\\?|<>\"]";

        varReplacer488 = "-";

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(varReplacer487, varReplacer488);

        return $r0;
    }

    public static java.lang.String decode(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r0, "UTF-8");

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String encode(java.lang.String)
    {
        java.lang.String $r0, varReplacer512;
        java.lang.Throwable $r1;
        null_type varReplacer511;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer512 = "UTF-8";

        $r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, varReplacer512);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        varReplacer511 = null;

        return varReplacer511;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static boolean isMD5(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 32 goto label1;

        $r1 = <net.roarsoftware.util.StringUtilities: java.util.regex.Pattern MD5_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isMbid(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, varReplacer394, varReplacer395;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;

        nop;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 36 goto label1;

        $r1 = <net.roarsoftware.util.StringUtilities: java.util.regex.Pattern MBID_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        varReplacer394 = 1;

        return varReplacer394;

     label1:
        varReplacer395 = 0;

        return varReplacer395;
    }

    public static transient java.util.Map map(java.lang.String[])
    {
        java.lang.String[] $r0;
        java.util.HashMap $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r4;

        $r0 := @parameter0: java.lang.String[];

        $i0 = lengthof $r0;

        $i0 = $i0 % 2;

        if $i0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("strings.length % 2 != 0");

        throw $r2;

     label1:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $r3 = $r0[$i0];

        $i1 = $i0 + 1;

        $r4 = $r0[$i1];

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $i0 = $i0 + 2;

        goto label2;

     label3:
        return $r1;
    }

    public static java.lang.String md5(java.lang.String)
    {
        java.lang.String $r0, varReplacer486;
        byte $b0;
        java.lang.StringBuilder $r1;
        int $i1, $i2, $i4, varReplacer483, varReplacer485;
        java.security.MessageDigest $r2;
        byte[] $r3;
        short $s3;
        java.lang.Throwable $r4;
        null_type varReplacer484;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r2 = <net.roarsoftware.util.StringUtilities: java.security.MessageDigest digest>;

     label01:
        varReplacer486 = "UTF-8";

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer486);

        $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

     label02:
        $r1 = new java.lang.StringBuilder;

     label03:
        varReplacer483 = 32;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(varReplacer483);

     label04:
        $i1 = lengthof $r3;

        $i2 = 0;

     label05:
        if $i2 >= $i1 goto label11;

        $b0 = $r3[$i2];

        $s3 = $b0 & 255;

     label06:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s3);

        $i4 = virtualinvoke $r0.<java.lang.String: int length()>();

     label07:
        if $i4 != 1 goto label09;

     label08:
        varReplacer485 = 48;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(varReplacer485);

     label09:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

     label10:
        $i2 = $i2 + 1;

        goto label05;

     label11:
        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label12:
        return $r0;

     label13:
        $r4 := @caughtexception;

        varReplacer484 = null;

        return varReplacer484;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label13;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label13;
        catch java.io.UnsupportedEncodingException from label06 to label07 with label13;
        catch java.io.UnsupportedEncodingException from label08 to label10 with label13;
        catch java.io.UnsupportedEncodingException from label11 to label12 with label13;
    }
}
