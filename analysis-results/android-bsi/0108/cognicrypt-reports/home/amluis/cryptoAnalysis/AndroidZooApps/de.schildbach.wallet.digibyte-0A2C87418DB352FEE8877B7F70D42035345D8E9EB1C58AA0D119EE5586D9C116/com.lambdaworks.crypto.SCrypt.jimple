public class com.lambdaworks.crypto.SCrypt extends java.lang.Object
{
    private static final boolean native_library_loaded;

    static void <clinit>()
    {
        com.lambdaworks.jni.LibraryLoader $r0;
        boolean $z0;
        java.lang.String varReplacer6384;
        int varReplacer6385;

        nop;

        $r0 = staticinvoke <com.lambdaworks.jni.LibraryLoaders: com.lambdaworks.jni.LibraryLoader loader()>();

        varReplacer6384 = "scrypt";

        varReplacer6385 = 1;

        $z0 = interfaceinvoke $r0.<com.lambdaworks.jni.LibraryLoader: boolean load(java.lang.String,boolean)>(varReplacer6384, varReplacer6385);

        <com.lambdaworks.crypto.SCrypt: boolean native_library_loaded> = $z0;

        return;
    }

    public void <init>()
    {
        com.lambdaworks.crypto.SCrypt $r0;

        $r0 := @this: com.lambdaworks.crypto.SCrypt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int R(int, int)
    {
        int $i0, $i1, $i2;

        nop;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }

    public static void blockmix_salsa8(byte[], int, int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, varReplacer6430, varReplacer6431, varReplacer6432, varReplacer6433, varReplacer6434, varReplacer6435, varReplacer6436, varReplacer6437, varReplacer6438;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 = newarray (byte)[64];

        $i3 = 2;

        $i3 = 1;

        $i3 = 64;

        $i3 = 64;

        varReplacer6435 = 64;

        varReplacer6436 = 0;

        varReplacer6437 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer6435, $r1, varReplacer6436, varReplacer6435);

        $i3 = 0;

     label1:
        $i4 = 2;

        if $i3 >= 2 goto label2;

        $i4 = $i3 * 64;

        varReplacer6433 = 0;

        varReplacer6434 = 64;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockxor(byte[],int,byte[],int,int)>($r0, $i4, $r1, varReplacer6433, varReplacer6434);

        staticinvoke <com.lambdaworks.crypto.SCrypt: void salsa20_8(byte[])>($r1);

        $i4 = $i3 * 64;

        $i4 = $i4 + 128;

        varReplacer6431 = 0;

        varReplacer6432 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer6431, $r0, $i4, varReplacer6432);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $i3 = 0;

     label3:
        if $i3 >= 1 goto label4;

        $i4 = $i3 * 2;

        $i4 = $i4 * 64;

        $i4 = $i4 + 128;

        $i5 = $i3 * 64;

        $i5 = $i5 + 0;

        varReplacer6438 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, $r0, $i5, varReplacer6438);

        $i3 = $i3 + 1;

        goto label3;

     label4:
        $i3 = 0;

     label5:
        if $i3 >= 1 goto label6;

        $i4 = $i3 * 2;

        $i4 = $i4 + 1;

        $i4 = $i4 * 64;

        $i4 = $i4 + 128;

        $i5 = $i3 + 1;

        $i5 = $i5 * 64;

        $i5 = $i5 + 0;

        varReplacer6430 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, $r0, $i5, varReplacer6430);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        return;
    }

    public static void blockxor(byte[], int, byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        byte $b5, $b7;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i4 = 0;

     label1:
        if $i4 >= $i2 goto label2;

        $i3 = 0 + $i4;

        $b5 = $r1[$i3];

        $i6 = $i0 + $i4;

        $b7 = $r0[$i6];

        $b5 = $b5 ^ $b7;

        $r1[$i3] = $b5;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return;
    }

    public static int integerify(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i4;
        byte $b2;
        short $s3;

        nop;

        $r0 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i0 = 2;

        $i0 = 1;

        $i0 = 64;

        $i1 = 64;

        $i0 = 64;

        $b2 = $r0[64];

        $s3 = $b2 & 255;

        $i0 = $s3 << 0;

        $i4 = 65;

        $b2 = $r0[65];

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        $i0 = $i0 | $i4;

        $i4 = 66;

        $b2 = $r0[66];

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        $i0 = $i0 | $i4;

        $i1 = 67;

        $b2 = $r0[67];

        $s3 = $b2 & 255;

        $i1 = $s3 << 24;

        $i1 = $i0 | $i1;

        return $i1;
    }

    public static void salsa20_8(byte[])
    {
        byte[] $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i4, $i5, varReplacer6439, varReplacer6440, varReplacer6441, varReplacer6442, varReplacer6443, varReplacer6444, varReplacer6445, varReplacer6446, varReplacer6447, varReplacer6448, varReplacer6449, varReplacer6450, varReplacer6451, varReplacer6452, varReplacer6453, varReplacer6454, varReplacer6455, varReplacer6456, varReplacer6457, varReplacer6458, varReplacer6459, varReplacer6460, varReplacer6461, varReplacer6462, varReplacer6463, varReplacer6464, varReplacer6465, varReplacer6466, varReplacer6467, varReplacer6468, varReplacer6469, varReplacer6470, varReplacer6471, varReplacer6472, varReplacer6473;
        byte $b2;
        short $s3;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = newarray (int)[16];

        $r2 = newarray (int)[16];

        $i0 = 0;

     label1:
        if $i0 >= 16 goto label2;

        $i1 = $i0 * 4;

        $b2 = $r0[$i1];

        $s3 = $b2 & 255;

        $i1 = $s3 << 0;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 1;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 2;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 3;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 24;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        varReplacer6456 = 0;

        varReplacer6457 = 0;

        varReplacer6458 = 16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer6456, $r2, varReplacer6456, varReplacer6458);

        $i0 = 8;

     label3:
        if $i0 <= 0 goto label4;

        $i1 = $r2[4];

        $i4 = $r2[0];

        $i5 = $r2[12];

        $i4 = $i4 + $i5;

        varReplacer6445 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6445);

        $i1 = $i1 ^ $i4;

        $r2[4] = $i1;

        $i1 = $r2[8];

        $i4 = $r2[4];

        $i5 = $r2[0];

        $i4 = $i4 + $i5;

        varReplacer6446 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6446);

        $i1 = $i1 ^ $i4;

        $r2[8] = $i1;

        $i1 = $r2[12];

        $i4 = $r2[8];

        $i5 = $r2[4];

        $i4 = $i4 + $i5;

        varReplacer6447 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6447);

        $i1 = $i1 ^ $i4;

        $r2[12] = $i1;

        $i1 = $r2[0];

        $i4 = $r2[12];

        $i5 = $r2[8];

        $i4 = $i4 + $i5;

        varReplacer6461 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6461);

        $i1 = $i1 ^ $i4;

        $r2[0] = $i1;

        $i1 = $r2[9];

        $i4 = $r2[5];

        $i5 = $r2[1];

        $i4 = $i4 + $i5;

        varReplacer6472 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6472);

        $i1 = $i1 ^ $i4;

        $r2[9] = $i1;

        $i1 = $r2[13];

        $i4 = $r2[9];

        $i5 = $r2[5];

        $i4 = $i4 + $i5;

        varReplacer6441 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6441);

        $i1 = $i1 ^ $i4;

        $r2[13] = $i1;

        $i1 = $r2[1];

        $i4 = $r2[13];

        $i5 = $r2[9];

        $i4 = $i4 + $i5;

        varReplacer6449 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6449);

        $i1 = $i1 ^ $i4;

        $r2[1] = $i1;

        $i1 = $r2[5];

        $i4 = $r2[1];

        $i5 = $r2[13];

        $i4 = $i4 + $i5;

        varReplacer6454 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6454);

        $i1 = $i1 ^ $i4;

        $r2[5] = $i1;

        $i1 = $r2[14];

        $i4 = $r2[10];

        $i5 = $r2[6];

        $i4 = $i4 + $i5;

        varReplacer6459 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6459);

        $i1 = $i1 ^ $i4;

        $r2[14] = $i1;

        $i1 = $r2[2];

        $i4 = $r2[14];

        $i5 = $r2[10];

        $i4 = $i4 + $i5;

        varReplacer6453 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6453);

        $i1 = $i1 ^ $i4;

        $r2[2] = $i1;

        $i1 = $r2[6];

        $i4 = $r2[2];

        $i5 = $r2[14];

        $i4 = $i4 + $i5;

        varReplacer6450 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6450);

        $i1 = $i1 ^ $i4;

        $r2[6] = $i1;

        $i1 = $r2[10];

        $i4 = $r2[6];

        $i5 = $r2[2];

        $i4 = $i4 + $i5;

        varReplacer6468 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6468);

        $i1 = $i1 ^ $i4;

        $r2[10] = $i1;

        $i1 = $r2[3];

        $i4 = $r2[15];

        $i5 = $r2[11];

        $i4 = $i4 + $i5;

        varReplacer6470 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6470);

        $i1 = $i1 ^ $i4;

        $r2[3] = $i1;

        $i1 = $r2[7];

        $i4 = $r2[3];

        $i5 = $r2[15];

        $i4 = $i4 + $i5;

        varReplacer6471 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6471);

        $i1 = $i1 ^ $i4;

        $r2[7] = $i1;

        $i1 = $r2[11];

        $i4 = $r2[7];

        $i5 = $r2[3];

        $i4 = $i4 + $i5;

        varReplacer6464 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6464);

        $i1 = $i1 ^ $i4;

        $r2[11] = $i1;

        $i1 = $r2[15];

        $i4 = $r2[11];

        $i5 = $r2[7];

        $i4 = $i4 + $i5;

        varReplacer6463 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6463);

        $i1 = $i1 ^ $i4;

        $r2[15] = $i1;

        $i1 = $r2[1];

        $i4 = $r2[0];

        $i5 = $r2[3];

        $i4 = $i4 + $i5;

        varReplacer6440 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6440);

        $i1 = $i1 ^ $i4;

        $r2[1] = $i1;

        $i1 = $r2[2];

        $i4 = $r2[1];

        $i5 = $r2[0];

        $i4 = $i4 + $i5;

        varReplacer6451 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6451);

        $i1 = $i1 ^ $i4;

        $r2[2] = $i1;

        $i1 = $r2[3];

        $i4 = $r2[2];

        $i5 = $r2[1];

        $i4 = $i4 + $i5;

        varReplacer6467 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6467);

        $i1 = $i1 ^ $i4;

        $r2[3] = $i1;

        $i1 = $r2[0];

        $i4 = $r2[3];

        $i5 = $r2[2];

        $i4 = $i4 + $i5;

        varReplacer6465 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6465);

        $i1 = $i1 ^ $i4;

        $r2[0] = $i1;

        $i1 = $r2[6];

        $i4 = $r2[5];

        $i5 = $r2[4];

        $i4 = $i4 + $i5;

        varReplacer6466 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6466);

        $i1 = $i1 ^ $i4;

        $r2[6] = $i1;

        $i1 = $r2[7];

        $i4 = $r2[6];

        $i5 = $r2[5];

        $i4 = $i4 + $i5;

        varReplacer6460 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6460);

        $i1 = $i1 ^ $i4;

        $r2[7] = $i1;

        $i1 = $r2[4];

        $i4 = $r2[7];

        $i5 = $r2[6];

        $i4 = $i4 + $i5;

        varReplacer6455 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6455);

        $i1 = $i1 ^ $i4;

        $r2[4] = $i1;

        $i1 = $r2[5];

        $i4 = $r2[4];

        $i5 = $r2[7];

        $i4 = $i4 + $i5;

        varReplacer6444 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6444);

        $i1 = $i1 ^ $i4;

        $r2[5] = $i1;

        $i1 = $r2[11];

        $i4 = $r2[10];

        $i5 = $r2[9];

        $i4 = $i4 + $i5;

        varReplacer6452 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6452);

        $i1 = $i1 ^ $i4;

        $r2[11] = $i1;

        $i1 = $r2[8];

        $i4 = $r2[11];

        $i5 = $r2[10];

        $i4 = $i4 + $i5;

        varReplacer6469 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6469);

        $i1 = $i1 ^ $i4;

        $r2[8] = $i1;

        $i1 = $r2[9];

        $i4 = $r2[8];

        $i5 = $r2[11];

        $i4 = $i4 + $i5;

        varReplacer6439 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6439);

        $i1 = $i1 ^ $i4;

        $r2[9] = $i1;

        $i1 = $r2[10];

        $i4 = $r2[9];

        $i5 = $r2[8];

        $i4 = $i4 + $i5;

        varReplacer6442 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6442);

        $i1 = $i1 ^ $i4;

        $r2[10] = $i1;

        $i1 = $r2[12];

        $i4 = $r2[15];

        $i5 = $r2[14];

        $i4 = $i4 + $i5;

        varReplacer6448 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6448);

        $i1 = $i1 ^ $i4;

        $r2[12] = $i1;

        $i1 = $r2[13];

        $i4 = $r2[12];

        $i5 = $r2[15];

        $i4 = $i4 + $i5;

        varReplacer6443 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6443);

        $i1 = $i1 ^ $i4;

        $r2[13] = $i1;

        $i1 = $r2[14];

        $i4 = $r2[13];

        $i5 = $r2[12];

        $i4 = $i4 + $i5;

        varReplacer6473 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6473);

        $i1 = $i1 ^ $i4;

        $r2[14] = $i1;

        $i1 = $r2[15];

        $i4 = $r2[14];

        $i5 = $r2[13];

        $i4 = $i4 + $i5;

        varReplacer6462 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6462);

        $i1 = $i1 ^ $i4;

        $r2[15] = $i1;

        $i0 = $i0 + -2;

        goto label3;

     label4:
        $i0 = 0;

     label5:
        if $i0 >= 16 goto label6;

        $i1 = $r2[$i0];

        $i4 = $r1[$i0];

        $i1 = $i1 + $i4;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = 0;

     label7:
        if $i0 >= 16 goto label8;

        $i1 = $i0 * 4;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 0;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 1;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 8;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 2;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 16;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 3;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 24;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i0 = $i0 + 1;

        goto label7;

     label8:
        return;
    }

    public static byte[] scrypt(byte[], byte[], int, int, int, int) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, varReplacer6386, varReplacer6387, varReplacer6388, varReplacer6389, varReplacer6390, varReplacer6391, varReplacer6392, varReplacer6393;
        boolean $z0;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $z0 = <com.lambdaworks.crypto.SCrypt: boolean native_library_loaded>;

        if $z0 == 0 goto label1;

        varReplacer6386 = 1024;

        varReplacer6387 = 1;

        varReplacer6388 = 1;

        varReplacer6389 = 32;

        $r0 = staticinvoke <com.lambdaworks.crypto.SCrypt: byte[] scryptN(byte[],byte[],int,int,int,int)>($r0, $r1, varReplacer6386, varReplacer6387, varReplacer6387, varReplacer6389);

        return $r0;

     label1:
        varReplacer6390 = 1024;

        varReplacer6391 = 1;

        varReplacer6392 = 1;

        varReplacer6393 = 32;

        $r0 = staticinvoke <com.lambdaworks.crypto.SCrypt: byte[] scryptJ(byte[],byte[],int,int,int,int)>($r0, $r1, varReplacer6390, varReplacer6391, varReplacer6391, varReplacer6393);

        return $r0;
    }

    public static byte[] scryptJ(byte[], byte[], int, int, int, int) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, varReplacer6396, varReplacer6397, varReplacer6398, varReplacer6399, varReplacer6400, varReplacer6401;
        javax.crypto.Mac $r5;
        java.lang.IllegalArgumentException $r6;
        javax.crypto.spec.SecretKeySpec $r7;
        java.lang.String varReplacer6402, varReplacer6403;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $i4 = 1023;

        $i4 = 0;

        goto label1;

     label1:
        $i4 = 16777215;

        goto label2;

     label2:
        $i4 = 16777215;

        goto label3;

     label3:
        varReplacer6403 = "HmacSHA256";

        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer6403);

        $r7 = new javax.crypto.spec.SecretKeySpec;

        varReplacer6402 = "HmacSHA256";

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer6402);

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r7);

        $r4 = newarray (byte)[32];

        $i4 = 128;

        $i4 = 128;

        $r0 = newarray (byte)[128];

        $i4 = 256;

        $r3 = newarray (byte)[256];

        $i4 = 128;

        $i4 = 131072;

        $r2 = newarray (byte)[131072];

        $i4 = 128;

        $i4 = 128;

        varReplacer6398 = 1;

        varReplacer6399 = 128;

        staticinvoke <com.lambdaworks.crypto.PBKDF: void pbkdf2(javax.crypto.Mac,byte[],int,byte[],int)>($r5, $r1, varReplacer6398, $r0, varReplacer6399);

        $i4 = 0;

     label4:
        if $i4 >= 1 goto label5;

        $i5 = $i4 * 128;

        $i5 = $i5 * 1;

        varReplacer6400 = 1;

        varReplacer6401 = 1024;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void smix(byte[],int,int,int,byte[],byte[])>($r0, $i5, varReplacer6400, varReplacer6401, $r2, $r3);

        $i4 = $i4 + 1;

        goto label4;

     label5:
        varReplacer6396 = 1;

        varReplacer6397 = 32;

        staticinvoke <com.lambdaworks.crypto.PBKDF: void pbkdf2(javax.crypto.Mac,byte[],int,byte[],int)>($r5, $r0, varReplacer6396, $r4, varReplacer6397);

        return $r4;
    }

    public static native byte[] scryptN(byte[], byte[], int, int, int, int);

    public static void smix(byte[], int, int, int, byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, varReplacer6414, varReplacer6415, varReplacer6416, varReplacer6417, varReplacer6418, varReplacer6419, varReplacer6420, varReplacer6421, varReplacer6422, varReplacer6423, varReplacer6424, varReplacer6425, varReplacer6426, varReplacer6427, varReplacer6428, varReplacer6429;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: byte[];

        $r2 := @parameter5: byte[];

        $i3 = 128;

        $i5 = 128;

        varReplacer6421 = 0;

        varReplacer6422 = 128;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r2, varReplacer6421, varReplacer6422);

        $i5 = 0;

     label1:
        if $i5 >= 1024 goto label2;

        $i4 = 128;

        $i4 = 128 * $i5;

        $i6 = 128;

        varReplacer6423 = 0;

        varReplacer6424 = 128;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer6423, $r1, $i4, varReplacer6424);

        varReplacer6418 = 0;

        varReplacer6419 = 128;

        varReplacer6420 = 1;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockmix_salsa8(byte[],int,int,int)>($r2, varReplacer6418, varReplacer6419, varReplacer6420);

        $i5 = $i5 + 1;

        goto label1;

     label2:
        $i5 = 0;

     label3:
        if $i5 >= 1024 goto label4;

        varReplacer6416 = 0;

        varReplacer6417 = 1;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int integerify(byte[],int,int)>($r2, varReplacer6416, varReplacer6417);

        $i6 = 1023;

        $i4 = $i4 & 1023;

        $i6 = 128;

        $i4 = 128 * $i4;

        $i6 = 128;

        varReplacer6428 = 0;

        varReplacer6429 = 128;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockxor(byte[],int,byte[],int,int)>($r1, $i4, $r2, varReplacer6428, varReplacer6429);

        varReplacer6425 = 0;

        varReplacer6426 = 128;

        varReplacer6427 = 1;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockmix_salsa8(byte[],int,int,int)>($r2, varReplacer6425, varReplacer6426, varReplacer6427);

        $i5 = $i5 + 1;

        goto label3;

     label4:
        $i1 = 128;

        varReplacer6414 = 0;

        varReplacer6415 = 128;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer6414, $r0, $i0, varReplacer6415);

        return;
    }
}
