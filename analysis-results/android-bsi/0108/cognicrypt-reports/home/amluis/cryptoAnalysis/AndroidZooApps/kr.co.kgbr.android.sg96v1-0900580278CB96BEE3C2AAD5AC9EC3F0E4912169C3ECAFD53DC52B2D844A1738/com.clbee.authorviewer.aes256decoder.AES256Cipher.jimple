public class com.clbee.authorviewer.aes256decoder.AES256Cipher extends java.lang.Object
{
    public static int decodeByteLenth;
    private static boolean isDecodeAble;
    public static byte[] ivBytes;

    static void <clinit>()
    {
        byte[] $r0;
        int varReplacer2143;

        nop;

        varReplacer2143 = 0;

        <com.clbee.authorviewer.aes256decoder.AES256Cipher: boolean isDecodeAble> = varReplacer2143;

        $r0 = newarray (byte)[16];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = 0;

        $r0[9] = 0;

        $r0[10] = 0;

        $r0[11] = 0;

        $r0[12] = 0;

        $r0[13] = 0;

        $r0[14] = 0;

        $r0[15] = 0;

        <com.clbee.authorviewer.aes256decoder.AES256Cipher: byte[] ivBytes> = $r0;

        return;
    }

    public void <init>()
    {
        com.clbee.authorviewer.aes256decoder.AES256Cipher $r0;

        $r0 := @this: com.clbee.authorviewer.aes256decoder.AES256Cipher;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] AES_Decode(java.lang.String)
    {
        java.lang.String $r0, $r3, varReplacer2255, varReplacer2256, varReplacer2257, varReplacer2258;
        java.io.File $r1;
        javax.crypto.spec.IvParameterSpec $r2;
        javax.crypto.spec.SecretKeySpec $r4;
        int $i0, varReplacer2251, varReplacer2252, varReplacer2253, varReplacer2254, varReplacer2259, varReplacer2260;
        boolean $z0;
        byte[] $r5, $r6, $r7, $r8;
        javax.crypto.Cipher $r9;
        java.lang.Throwable $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r3 = <com.clbee.authorviewer.constant.PageViewerConstant: java.lang.String AES256_CONTENTS_KEY>;

        if $r3 == null goto label01;

        if $r3 == null goto label11;

        varReplacer2255 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer2255);

        if $z0 == 0 goto label11;

     label01:
        varReplacer2253 = 0;

        <com.clbee.authorviewer.aes256decoder.AES256Cipher: boolean isDecodeAble> = varReplacer2253;

     label02:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

        $r5 = null;

        varReplacer2260 = -1;

        <com.clbee.authorviewer.aes256decoder.AES256Cipher: int decodeByteLenth> = varReplacer2260;

     label03:
        $r6 = staticinvoke <com.clbee.authorviewer.aes256decoder.AES256Cipher: byte[] getBytesFromFile(java.io.File)>($r1);

     label04:
        $r5 = $r6;

        $z0 = <com.clbee.authorviewer.aes256decoder.AES256Cipher: boolean isDecodeAble>;

        if $z0 == 0 goto label12;

        $r2 = new javax.crypto.spec.IvParameterSpec;

        $r7 = <com.clbee.authorviewer.aes256decoder.AES256Cipher: byte[] ivBytes>;

     label05:
        specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7);

        varReplacer2256 = "UTF-8";

        $r7 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer2256);

     label06:
        $r8 = newarray (byte)[32];

        $i0 = lengthof $r7;

     label07:
        varReplacer2251 = 0;

        varReplacer2252 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, varReplacer2251, $r8, varReplacer2251, $i0);

     label08:
        $r4 = new javax.crypto.spec.SecretKeySpec;

     label09:
        varReplacer2257 = "AES";

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer2257);

        varReplacer2258 = "AES/CBC/PKCS7Padding";

        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2258);

        varReplacer2254 = 2;

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer2254, $r4, $r2);

        $r6 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6);

     label10:
        $i0 = lengthof $r6;

        <com.clbee.authorviewer.aes256decoder.AES256Cipher: int decodeByteLenth> = $i0;

        return $r6;

     label11:
        varReplacer2259 = 1;

        <com.clbee.authorviewer.aes256decoder.AES256Cipher: boolean isDecodeAble> = varReplacer2259;

        goto label02;

     label12:
        return $r6;

     label13:
        $r10 := @caughtexception;

     label14:
        return $r5;

     label15:
        $r11 := @caughtexception;

        goto label14;

     label16:
        $r12 := @caughtexception;

        goto label14;

     label17:
        $r13 := @caughtexception;

        goto label14;

     label18:
        $r14 := @caughtexception;

        goto label14;

     label19:
        $r15 := @caughtexception;

        goto label14;

     label20:
        $r16 := @caughtexception;

        goto label14;

     label21:
        $r17 := @caughtexception;

        goto label14;

        catch java.security.InvalidKeyException from label03 to label04 with label21;
        catch java.security.InvalidKeyException from label05 to label06 with label21;
        catch java.security.InvalidKeyException from label07 to label08 with label21;
        catch java.security.InvalidKeyException from label09 to label10 with label21;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label20;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label20;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label20;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label20;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label19;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label19;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label19;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label19;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label18;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label18;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label18;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label18;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label17;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label17;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label17;
        catch java.security.InvalidAlgorithmParameterException from label09 to label10 with label17;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label16;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label16;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label16;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label16;
        catch javax.crypto.BadPaddingException from label03 to label04 with label15;
        catch javax.crypto.BadPaddingException from label05 to label06 with label15;
        catch javax.crypto.BadPaddingException from label07 to label08 with label15;
        catch javax.crypto.BadPaddingException from label09 to label10 with label15;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.io.IOException from label09 to label10 with label13;
    }

    public static byte[] AES_Decode(java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, varReplacer2136, varReplacer2137, varReplacer2142;
        int $i0, varReplacer2138, varReplacer2139, varReplacer2140, varReplacer2141;
        java.io.File $r2;
        javax.crypto.spec.IvParameterSpec $r3;
        javax.crypto.spec.SecretKeySpec $r4;
        byte[] $r5, $r6, $r7, $r8;
        javax.crypto.Cipher $r9;
        java.lang.Throwable $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r0);

        $r5 = null;

        varReplacer2141 = -1;

        <com.clbee.authorviewer.aes256decoder.AES256Cipher: int decodeByteLenth> = varReplacer2141;

     label01:
        $r6 = staticinvoke <com.clbee.authorviewer.aes256decoder.AES256Cipher: byte[] getBytesFromFile(java.io.File)>($r2);

     label02:
        $r5 = $r6;

        $r3 = new javax.crypto.spec.IvParameterSpec;

        $r7 = <com.clbee.authorviewer.aes256decoder.AES256Cipher: byte[] ivBytes>;

     label03:
        specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7);

        varReplacer2137 = "UTF-8";

        $r7 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer2137);

     label04:
        $r8 = newarray (byte)[32];

        $i0 = lengthof $r7;

     label05:
        varReplacer2139 = 0;

        varReplacer2140 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, varReplacer2139, $r8, varReplacer2139, $i0);

     label06:
        $r4 = new javax.crypto.spec.SecretKeySpec;

     label07:
        varReplacer2142 = "AES";

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer2142);

        varReplacer2136 = "AES/CBC/PKCS7Padding";

        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2136);

        varReplacer2138 = 2;

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer2138, $r4, $r3);

        $r6 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6);

     label08:
        $i0 = lengthof $r6;

        <com.clbee.authorviewer.aes256decoder.AES256Cipher: int decodeByteLenth> = $i0;

        return $r6;

     label09:
        $r10 := @caughtexception;

     label10:
        return $r5;

     label11:
        $r11 := @caughtexception;

        goto label10;

     label12:
        $r12 := @caughtexception;

        goto label10;

     label13:
        $r13 := @caughtexception;

        goto label10;

     label14:
        $r14 := @caughtexception;

        goto label10;

     label15:
        $r15 := @caughtexception;

        goto label10;

     label16:
        $r16 := @caughtexception;

        goto label10;

     label17:
        $r17 := @caughtexception;

        goto label10;

        catch java.security.InvalidKeyException from label01 to label02 with label17;
        catch java.security.InvalidKeyException from label03 to label04 with label17;
        catch java.security.InvalidKeyException from label05 to label06 with label17;
        catch java.security.InvalidKeyException from label07 to label08 with label17;
        catch java.io.UnsupportedEncodingException from label01 to label02 with label16;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label16;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label16;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label16;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label15;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label15;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label15;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label15;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label14;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label14;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label14;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label14;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label13;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label13;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label13;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label13;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label12;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label12;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label12;
        catch javax.crypto.BadPaddingException from label01 to label02 with label11;
        catch javax.crypto.BadPaddingException from label03 to label04 with label11;
        catch javax.crypto.BadPaddingException from label05 to label06 with label11;
        catch javax.crypto.BadPaddingException from label07 to label08 with label11;
        catch java.io.IOException from label01 to label02 with label09;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public static byte[] AES_Encode(java.io.File, java.lang.String) throws java.io.UnsupportedEncodingException, java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        byte[] $r3, $r4;
        javax.crypto.Cipher $r5;
        javax.crypto.spec.IvParameterSpec r6;
        javax.crypto.spec.SecretKeySpec r7;
        java.io.IOException r8;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r3 = null;

     label1:
        $r4 = staticinvoke <com.clbee.authorviewer.aes256decoder.AES256Cipher: byte[] getBytesFromFile(java.io.File)>($r0);

     label2:
        $r3 = $r4;

     label3:
        r6 = new javax.crypto.spec.IvParameterSpec;

        $r4 = <com.clbee.authorviewer.aes256decoder.AES256Cipher: byte[] ivBytes>;

        specialinvoke r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4);

        <com.clbee.authorviewer.aes256decoder.AES256Cipher: byte[] ivBytes> = null;

        r7 = new javax.crypto.spec.SecretKeySpec;

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        specialinvoke r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "AES");

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS7Padding");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, r7, r6);

        $r3 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        return $r3;

     label4:
        $r2 := @caughtexception;

        r8 = (java.io.IOException) $r2;

        virtualinvoke r8.<java.io.IOException: void printStackTrace()>();

        goto label3;

        catch java.io.IOException from label1 to label2 with label4;
    }

    public static java.lang.Object JNI_AES_Decode(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.io.ByteArrayInputStream $r2;
        java.io.ObjectInputStream $r3;
        java.lang.Exception $r4;
        byte[] $r5;
        java.lang.Object $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r5 = staticinvoke <com.clbee.authorviewer.aes256decoder.AES256Cipher: byte[] AES_Decode(java.lang.String)>($r0);

        $r2 = new java.io.ByteArrayInputStream;

     label1:
        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

     label2:
        $r3 = new java.io.ObjectInputStream;

     label3:
        specialinvoke $r3.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r2);

        $r6 = virtualinvoke $r3.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label4:
        return $r6;

     label5:
        $r4 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static byte[] getBytesFromFile(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        byte[] $r1;
        java.io.FileInputStream $r2;
        java.nio.channels.FileChannel $r3;
        java.nio.channels.FileChannel$MapMode $r4;
        long $l0, varReplacer2144;
        java.nio.MappedByteBuffer $r5;
        float $f0;
        int $i1, $i2, varReplacer2145;
        boolean $z0;
        byte $b3;

        nop;

        $r0 := @parameter0: java.io.File;

        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r3 = virtualinvoke $r2.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        $r4 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $l0 = virtualinvoke $r3.<java.nio.channels.FileChannel: long size()>();

        varReplacer2144 = 0L;

        $r5 = virtualinvoke $r3.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r4, varReplacer2144, $l0);

        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $f0 = (float) $l0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $r1 = newarray (byte)[$i1];

     label1:
        $z0 = virtualinvoke $r5.<java.nio.MappedByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke $r5.<java.nio.MappedByteBuffer: int remaining()>();

        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $f0 = (float) $l0;

        $i2 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        varReplacer2145 = 0;

        virtualinvoke $r5.<java.nio.MappedByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r1, varReplacer2145, $i1);

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label1;

        $b3 = $r1[$i2];

        $l0 = (long) $b3;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public static int getDecodeByteLenth(java.lang.String)
    {
        java.lang.String $r0;
        int i0;

        $r0 := @parameter0: java.lang.String;

        i0 = <com.clbee.authorviewer.aes256decoder.AES256Cipher: int decodeByteLenth>;

        return i0;
    }
}
