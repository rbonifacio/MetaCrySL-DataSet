public class com.google.ads.an extends java.lang.Object
{

    static void a(byte[])
    {
        byte[] $r0;
        int $i0, $i1;
        byte $b2;

        nop;

        $r0 := @parameter0: byte[];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $b2 = $r0[$i0];

        $b2 = $b2 ^ 68;

        $r0[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static byte[] a(java.lang.String) throws com.google.ads.ap, com.google.ads.an$a
    {
        java.lang.String $r0;
        byte[] $r1;
        int $i0, varReplacer3164, varReplacer3165;
        com.google.ads.an$a $r2;
        java.nio.ByteBuffer $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.ads.aq: byte[] a(java.lang.String)>($r0);

        $i0 = lengthof $r1;

        if $i0 == 32 goto label1;

        $r2 = new com.google.ads.an$a;

        specialinvoke $r2.<com.google.ads.an$a: void <init>()>();

        throw $r2;

     label1:
        varReplacer3164 = 4;

        varReplacer3165 = 16;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r1, varReplacer3164, varReplacer3165);

        $r1 = newarray (byte)[16];

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r1);

        staticinvoke <com.google.ads.an: void a(byte[])>($r1);

        return $r1;
    }

    public static byte[] a(byte[], java.lang.String) throws com.google.ads.an$a, com.google.ads.ap
    {
        byte[] $r0, $r4, $r7;
        java.lang.String $r1, varReplacer3160, varReplacer3161;
        javax.crypto.spec.IvParameterSpec $r2;
        int $i0, varReplacer3162;
        com.google.ads.an$a $r3;
        java.lang.Throwable $r5, $r10, $r11, $r12, $r13, $r14;
        java.nio.ByteBuffer $r6;
        javax.crypto.spec.SecretKeySpec $r8;
        javax.crypto.Cipher $r9;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $i0 = lengthof $r0;

        if $i0 == 16 goto label01;

        $r3 = new com.google.ads.an$a;

        specialinvoke $r3.<com.google.ads.an$a: void <init>()>();

        throw $r3;

     label01:
        $r4 = staticinvoke <com.google.ads.aq: byte[] a(java.lang.String)>($r1);

     label02:
        $i0 = lengthof $r4;

        if $i0 > 16 goto label06;

        $r3 = new com.google.ads.an$a;

     label03:
        specialinvoke $r3.<com.google.ads.an$a: void <init>()>();

     label04:
        throw $r3;

     label05:
        $r5 := @caughtexception;

        $r3 = new com.google.ads.an$a;

        specialinvoke $r3.<com.google.ads.an$a: void <init>(java.lang.Throwable)>($r5);

        throw $r3;

     label06:
        $i0 = lengthof $r4;

     label07:
        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r4);

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label08:
        $r7 = newarray (byte)[16];

        $i0 = lengthof $r4;

        $i0 = $i0 + -16;

        $r4 = newarray (byte)[$i0];

     label09:
        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r7);

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r4);

     label10:
        $r8 = new javax.crypto.spec.SecretKeySpec;

     label11:
        varReplacer3161 = "AES";

        specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer3161);

        varReplacer3160 = "AES/CBC/PKCS5Padding";

        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3160);

     label12:
        $r2 = new javax.crypto.spec.IvParameterSpec;

     label13:
        specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7);

        varReplacer3162 = 2;

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer3162, $r8, $r2);

        $r0 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

     label14:
        return $r0;

     label15:
        $r10 := @caughtexception;

        $r3 = new com.google.ads.an$a;

        specialinvoke $r3.<com.google.ads.an$a: void <init>(java.lang.Throwable)>($r10);

        throw $r3;

     label16:
        $r11 := @caughtexception;

        $r3 = new com.google.ads.an$a;

        specialinvoke $r3.<com.google.ads.an$a: void <init>(java.lang.Throwable)>($r11);

        throw $r3;

     label17:
        $r12 := @caughtexception;

        $r3 = new com.google.ads.an$a;

        specialinvoke $r3.<com.google.ads.an$a: void <init>(java.lang.Throwable)>($r12);

        throw $r3;

     label18:
        $r13 := @caughtexception;

        $r3 = new com.google.ads.an$a;

        specialinvoke $r3.<com.google.ads.an$a: void <init>(java.lang.Throwable)>($r13);

        throw $r3;

     label19:
        $r14 := @caughtexception;

        $r3 = new com.google.ads.an$a;

        specialinvoke $r3.<com.google.ads.an$a: void <init>(java.lang.Throwable)>($r14);

        throw $r3;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label05;
        catch java.security.InvalidKeyException from label01 to label02 with label15;
        catch java.security.InvalidKeyException from label03 to label04 with label15;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label16;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label16;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label17;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label17;
        catch javax.crypto.BadPaddingException from label01 to label02 with label18;
        catch javax.crypto.BadPaddingException from label03 to label04 with label18;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label19;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label19;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label05;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label05;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label05;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label05;
        catch java.security.InvalidKeyException from label07 to label08 with label15;
        catch java.security.InvalidKeyException from label09 to label10 with label15;
        catch java.security.InvalidKeyException from label11 to label12 with label15;
        catch java.security.InvalidKeyException from label13 to label14 with label15;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label16;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label16;
        catch javax.crypto.IllegalBlockSizeException from label11 to label12 with label16;
        catch javax.crypto.IllegalBlockSizeException from label13 to label14 with label16;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label17;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label17;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label17;
        catch javax.crypto.NoSuchPaddingException from label13 to label14 with label17;
        catch javax.crypto.BadPaddingException from label07 to label08 with label18;
        catch javax.crypto.BadPaddingException from label09 to label10 with label18;
        catch javax.crypto.BadPaddingException from label11 to label12 with label18;
        catch javax.crypto.BadPaddingException from label13 to label14 with label18;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label19;
        catch java.security.InvalidAlgorithmParameterException from label09 to label10 with label19;
        catch java.security.InvalidAlgorithmParameterException from label11 to label12 with label19;
        catch java.security.InvalidAlgorithmParameterException from label13 to label14 with label19;
    }
}
