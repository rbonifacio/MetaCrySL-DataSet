Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/betlic.fortis.yungo-0979AEDDFA510B21AEB05875D84A2A5A9E41264CBA6DA9124F6529A1B58EE98C.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <betlic.fortis.yungo.payment.google.l: void <clinit>()>
		SHA-256: 757e9c5a7695874a0e136ba602aaaa248c1e26a2f759b468303224b22487aec5
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <betlic.fortis.yungo.b.z: java.lang.String a(java.lang.String)>
		SHA-256: cb8011fda23a76ab498c20f4048ad3c2225f6a1bb9bbfd8e9fa2f97877f4fd1
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.MessageDigest
		Statement: $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer10792)
		Method: <betlic.fortis.yungo.activation.g: java.lang.String b(java.lang.String)>
		SHA-256: 54fcae513e229644bf32d3671af22cec70416dd1f733d6adf1f386aa2a6d5c0f
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3183)
		Method: <betlic.fortis.yungo.util.ay: java.lang.String d(java.lang.String)>
		SHA-256: b22c4b4b2cd241ca8a3818e1941f5811c7bfc687ff579117749f6627717ea6dc
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <betlic.fortis.yungo.registration.h: java.lang.String d(android.content.Context)>
		SHA-256: 2932f780c4711992e998a32aaae5b67477173b28a395582267db648673c85cdb
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3316)
		Method: <betlic.fortis.yungo.b.z: java.lang.String a(java.lang.String)>
		SHA-256: cfe0327575243e99d9f091af97ee9cf721b12e552086f89c84c94b7ed4c65f07
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <betlic.fortis.yungo.util.ay: java.lang.String d(java.lang.String)>
		SHA-256: 371f3849cc2e8dda306ba33f46d4fc4b9d097124c9f4518534bcb2a878c783e
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $z0 = virtualinvoke $r3.<java.security.Signature: boolean verify(byte[])>($r4)
		Method: <betlic.fortis.yungo.payment.google.l: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: 13282012f1b4d4b078ae4a70d74861df420636ff06b5fae32898e3eac41ad37a
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r7)
		Method: <betlic.fortis.yungo.activation.g: java.lang.String b(java.lang.String)>
		SHA-256: 68e855d7904b12fa6639b60967fe2954f296ef044c95d9b58071c1d1d9301073
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.Signature
		Statement: $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer8039)
		Method: <betlic.fortis.yungo.payment.google.l: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: 6a87bfdb9984b6c653b2542f3f7777202fb29f55d456a472b5f43f852971ffb4
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.KeyStore
		Statement: $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r0)
		Method: <betlic.fortis.yungo.b.a: org.apache.http.impl.client.DefaultHttpClient c()>
		SHA-256: 4e246f0f4497ea7950dda2315d1bef8847ed18de80d969c2fa58e6b842f539fe
		Secure: true

Findings in Java Class: betlic.fortis.yungo.util.ay

	 in Method: java.lang.String d(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #b22c4b4b2cd241ca8a3818e1941f5811c7bfc687ff579117749f6627717ea6dc)
			First parameter (with value "MD5") should be any of {SHA-224, SHA-256, SHA-384, SHA-512}
			at statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3183)


Findings in Java Class: betlic.fortis.yungo.b.z

	 in Method: java.lang.String a(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #cfe0327575243e99d9f091af97ee9cf721b12e552086f89c84c94b7ed4c65f07)
			First parameter (with value "SHA-1") should be any of {SHA-224, SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3316)


Findings in Java Class: betlic.fortis.yungo.payment.google.l

	 in Method: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r3.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0)

		ConstraintError violating CrySL rule for java.security.Signature (on Object #6a87bfdb9984b6c653b2542f3f7777202fb29f55d456a472b5f43f852971ffb4)
			First parameter (with value "SHA1withRSA") should be any of {SHA256withDSA, SHA256withRSA, DSA, SHA512withRSA, SHA384withRSA}
			at statement: $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer8039)


Findings in Java Class: betlic.fortis.yungo.activation.g

	 in Method: java.lang.String b(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #54fcae513e229644bf32d3671af22cec70416dd1f733d6adf1f386aa2a6d5c0f)
			First parameter (with value "SHA-1") should be any of {SHA-224, SHA-256, SHA-384, SHA-512}
			at statement: $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer10792)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 11

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 1
	ConstraintError: 4
=====================================================================
