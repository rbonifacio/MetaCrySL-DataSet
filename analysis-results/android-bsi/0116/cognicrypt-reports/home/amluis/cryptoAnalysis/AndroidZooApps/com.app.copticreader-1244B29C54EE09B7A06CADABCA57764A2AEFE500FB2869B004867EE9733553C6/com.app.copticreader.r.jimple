public final class com.app.copticreader.r extends java.lang.Object
{
    private javax.crypto.spec.IvParameterSpec a;
    private javax.crypto.spec.SecretKeySpec b;
    private javax.crypto.Cipher c;

    public void <init>()
    {
        com.app.copticreader.r $r0;
        java.lang.String varReplacer774;

        nop;

        $r0 := @this: com.app.copticreader.r;

        varReplacer774 = "BF0CD490B522DB71";

        specialinvoke $r0.<com.app.copticreader.r: void <init>(java.lang.String)>(varReplacer774);

        return;
    }

    public void <init>(java.lang.String)
    {
        com.app.copticreader.r $r0;
        java.lang.String $r1, $r2, varReplacer776, varReplacer777, varReplacer778;
        byte[] $r3;
        javax.crypto.Cipher $r4;
        java.lang.Throwable $r5, $r6, $r7;
        javax.crypto.spec.IvParameterSpec r8;
        javax.crypto.spec.SecretKeySpec r9;
        com.app.copticreader.q r10;
        java.lang.Exception r11;

        nop;

        $r0 := @this: com.app.copticreader.r;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r8 = new javax.crypto.spec.IvParameterSpec;

        $r2 = "4F754474483D7CA9";

     label1:
        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        specialinvoke r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3);

     label2:
        $r0.<com.app.copticreader.r: javax.crypto.spec.IvParameterSpec a> = r8;

        r9 = new javax.crypto.spec.SecretKeySpec;

     label3:
        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        varReplacer778 = "AES";

        specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer778);

     label4:
        $r0.<com.app.copticreader.r: javax.crypto.spec.SecretKeySpec b> = r9;

     label5:
        varReplacer776 = "AES/CBC/PKCS5Padding";

        varReplacer777 = "BC";

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer776, varReplacer777);

     label6:
        $r0.<com.app.copticreader.r: javax.crypto.Cipher c> = $r4;

        return;

     label7:
        $r5 := @caughtexception;

        r10 = new com.app.copticreader.q;

        r11 = (java.lang.Exception) $r5;

        specialinvoke r10.<com.app.copticreader.q: void <init>(java.lang.Exception)>(r11);

        throw r10;

     label8:
        $r6 := @caughtexception;

        r10 = new com.app.copticreader.q;

        r11 = (java.lang.Exception) $r6;

        specialinvoke r10.<com.app.copticreader.q: void <init>(java.lang.Exception)>(r11);

        throw r10;

     label9:
        $r7 := @caughtexception;

        r10 = new com.app.copticreader.q;

        r11 = (java.lang.Exception) $r7;

        specialinvoke r10.<com.app.copticreader.q: void <init>(java.lang.Exception)>(r11);

        throw r10;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label7;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label7;
        catch java.security.NoSuchAlgorithmException from label5 to label6 with label7;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label8;
        catch javax.crypto.NoSuchPaddingException from label3 to label4 with label8;
        catch javax.crypto.NoSuchPaddingException from label5 to label6 with label8;
        catch java.security.NoSuchProviderException from label1 to label2 with label9;
        catch java.security.NoSuchProviderException from label3 to label4 with label9;
        catch java.security.NoSuchProviderException from label5 to label6 with label9;
    }

    public final java.io.InputStream a(java.io.InputStream)
    {
        com.app.copticreader.r $r0;
        java.io.InputStream $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.spec.IvParameterSpec $r3;
        javax.crypto.Cipher $r4;
        javax.crypto.CipherInputStream $r5;
        int varReplacer775;

        nop;

        $r0 := @this: com.app.copticreader.r;

        $r1 := @parameter0: java.io.InputStream;

        $r4 = $r0.<com.app.copticreader.r: javax.crypto.Cipher c>;

        $r2 = $r0.<com.app.copticreader.r: javax.crypto.spec.SecretKeySpec b>;

        $r3 = $r0.<com.app.copticreader.r: javax.crypto.spec.IvParameterSpec a>;

        varReplacer775 = 2;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer775, $r2, $r3);

        $r5 = new javax.crypto.CipherInputStream;

        $r4 = $r0.<com.app.copticreader.r: javax.crypto.Cipher c>;

        specialinvoke $r5.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r1, $r4);

        return $r5;
    }

    public final java.lang.String a(java.lang.String)
    {
        com.app.copticreader.r $r0;
        java.lang.String $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.spec.IvParameterSpec $r3;
        javax.crypto.Cipher $r4;
        byte[] $r5;
        java.io.ByteArrayOutputStream $r6;
        int varReplacer1982, varReplacer1983;

        nop;

        $r0 := @this: com.app.copticreader.r;

        $r1 := @parameter0: java.lang.String;

        $r4 = $r0.<com.app.copticreader.r: javax.crypto.Cipher c>;

        $r2 = $r0.<com.app.copticreader.r: javax.crypto.spec.SecretKeySpec b>;

        $r3 = $r0.<com.app.copticreader.r: javax.crypto.spec.IvParameterSpec a>;

        varReplacer1982 = 1;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1982, $r2, $r3);

        $r4 = $r0.<com.app.copticreader.r: javax.crypto.Cipher c>;

        $r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r5 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

        varReplacer1983 = 0;

        $r5 = staticinvoke <android.util.Base64: byte[] encode(byte[],int)>($r5, varReplacer1983);

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[])>($r5);

        $r1 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public final java.lang.String b(java.lang.String)
    {
        com.app.copticreader.r $r0;
        java.lang.String $r1, varReplacer1811;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.spec.IvParameterSpec $r3;
        javax.crypto.Cipher $r4;
        byte[] $r5;
        java.io.ByteArrayOutputStream $r6, r12;
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11;
        com.app.copticreader.q r13;
        java.lang.Exception r14;
        javax.crypto.IllegalBlockSizeException r15;
        javax.crypto.BadPaddingException r16;
        java.io.IOException r17;
        int varReplacer1809, varReplacer1810;

        nop;

        $r0 := @this: com.app.copticreader.r;

        $r1 := @parameter0: java.lang.String;

        $r4 = $r0.<com.app.copticreader.r: javax.crypto.Cipher c>;

        $r2 = $r0.<com.app.copticreader.r: javax.crypto.spec.SecretKeySpec b>;

        $r3 = $r0.<com.app.copticreader.r: javax.crypto.spec.IvParameterSpec a>;

     label01:
        varReplacer1810 = 2;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1810, $r2, $r3);

     label02:
        $r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        varReplacer1809 = 0;

        $r5 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r5, varReplacer1809);

     label03:
        $r4 = $r0.<com.app.copticreader.r: javax.crypto.Cipher c>;

     label04:
        $r5 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

     label05:
        r12 = new java.io.ByteArrayOutputStream;

        $r6 = r12;

     label06:
        specialinvoke r12.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[])>($r5);

        $r1 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

     label07:
        return $r1;

     label08:
        $r7 := @caughtexception;

        r13 = new com.app.copticreader.q;

        r14 = (java.lang.Exception) $r7;

        specialinvoke r13.<com.app.copticreader.q: void <init>(java.lang.Exception)>(r14);

        throw r13;

     label09:
        $r8 := @caughtexception;

        r13 = new com.app.copticreader.q;

        r14 = (java.lang.Exception) $r8;

        specialinvoke r13.<com.app.copticreader.q: void <init>(java.lang.Exception)>(r14);

        throw r13;

     label10:
        $r9 := @caughtexception;

        r15 = (javax.crypto.IllegalBlockSizeException) $r9;

        virtualinvoke r15.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

     label11:
        varReplacer1811 = "";

        return varReplacer1811;

     label12:
        $r10 := @caughtexception;

        r16 = (javax.crypto.BadPaddingException) $r10;

        virtualinvoke r16.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label11;

     label13:
        $r11 := @caughtexception;

        r17 = (java.io.IOException) $r11;

        virtualinvoke r17.<java.io.IOException: void printStackTrace()>();

        goto label11;

        catch java.security.InvalidKeyException from label01 to label02 with label08;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label09;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label10;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label10;
        catch javax.crypto.IllegalBlockSizeException from label06 to label07 with label10;
        catch javax.crypto.BadPaddingException from label02 to label03 with label12;
        catch javax.crypto.BadPaddingException from label04 to label05 with label12;
        catch javax.crypto.BadPaddingException from label06 to label07 with label12;
        catch java.io.IOException from label02 to label03 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.io.IOException from label06 to label07 with label13;
    }
}
