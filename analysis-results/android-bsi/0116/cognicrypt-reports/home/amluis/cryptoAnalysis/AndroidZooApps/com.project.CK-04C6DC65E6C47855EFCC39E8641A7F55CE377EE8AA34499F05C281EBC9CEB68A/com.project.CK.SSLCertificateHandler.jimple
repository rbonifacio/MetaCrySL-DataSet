public class com.project.CK.SSLCertificateHandler extends java.lang.Object
{
    protected static final java.lang.String TAG;

    public void <init>()
    {
        com.project.CK.SSLCertificateHandler $r0;

        $r0 := @this: com.project.CK.SSLCertificateHandler;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void nuke()
    {
        java.lang.Object[] $r0;
        com.project.CK.SSLCertificateHandler$1 $r1, r7;
        javax.net.ssl.SSLContext $r2;
        java.security.SecureRandom $r3, r8;
        javax.net.ssl.SSLSocketFactory $r4;
        com.project.CK.SSLCertificateHandler$2 $r5, r9;
        java.lang.Exception $r6;
        javax.net.ssl.TrustManager[] r10;
        javax.net.ssl.HostnameVerifier r11;
        null_type varReplacer1219;
        java.lang.String varReplacer1220;

     label1:
        nop;

        $r0 = newarray (javax.net.ssl.TrustManager)[1];

     label2:
        r7 = new com.project.CK.SSLCertificateHandler$1;

        $r1 = r7;

     label3:
        specialinvoke r7.<com.project.CK.SSLCertificateHandler$1: void <init>()>();

        $r0[0] = $r1;

        varReplacer1220 = "SSL";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1220);

     label4:
        r8 = new java.security.SecureRandom;

        $r3 = r8;

     label5:
        specialinvoke r8.<java.security.SecureRandom: void <init>()>();

        r10 = (javax.net.ssl.TrustManager[]) $r0;

        varReplacer1219 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1219, r10, $r3);

        $r4 = virtualinvoke $r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        staticinvoke <javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>($r4);

     label6:
        r9 = new com.project.CK.SSLCertificateHandler$2;

        $r5 = r9;

     label7:
        specialinvoke r9.<com.project.CK.SSLCertificateHandler$2: void <init>()>();

        r11 = (javax.net.ssl.HostnameVerifier) $r5;

        staticinvoke <javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)>(r11);

     label8:
        return;

     label9:
        $r6 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label9;
        catch java.lang.Exception from label3 to label4 with label9;
        catch java.lang.Exception from label5 to label6 with label9;
        catch java.lang.Exception from label7 to label8 with label9;
    }
}
