public class cc.dkmproxy.framework.utils.StringUtil extends java.lang.Object
{
    private static java.lang.String sLogTag;

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        nop;

        $r1 = class "Lcc/dkmproxy/framework/utils/StringUtil;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <cc.dkmproxy.framework.utils.StringUtil: java.lang.String sLogTag> = $r0;

        return;
    }

    public void <init>()
    {
        cc.dkmproxy.framework.utils.StringUtil $r0;

        $r0 := @this: cc.dkmproxy.framework.utils.StringUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final java.lang.String MD5(java.lang.String)
    {
        java.lang.String $r0, varReplacer370;
        byte $b0, $b5;
        java.lang.Exception $r1;
        int $i1, $i2, $i3, $i4;
        char[] $r2, $r3;
        byte[] $r4;
        java.security.MessageDigest $r5;
        char $c6;
        null_type varReplacer369;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r2 = newarray (char)[16];

        $r2[0] = 48;

        $r2[1] = 49;

        $r2[2] = 50;

        $r2[3] = 51;

        $r2[4] = 52;

        $r2[5] = 53;

        $r2[6] = 54;

        $r2[7] = 55;

        $r2[8] = 56;

        $r2[9] = 57;

        $r2[10] = 97;

        $r2[11] = 98;

        $r2[12] = 99;

        $r2[13] = 100;

        $r2[14] = 101;

        $r2[15] = 102;

     label01:
        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        varReplacer370 = "MD5";

        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer370);

        virtualinvoke $r5.<java.security.MessageDigest: void update(byte[])>($r4);

        $r4 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>();

        $i1 = lengthof $r4;

     label02:
        $i2 = $i1 * 2;

     label03:
        $r3 = newarray (char)[$i2];

     label04:
        $i2 = 0;

        $i3 = 0;

     label05:
        if $i2 < $i1 goto label08;

        $r0 = new java.lang.String;

     label06:
        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r3);

     label07:
        return $r0;

     label08:
        $b0 = $r4[$i2];

     label09:
        $i4 = $i3 + 1;

        $b5 = $b0 >>> 4;

        $b5 = $b5 & 15;

     label10:
        $c6 = $r2[$b5];

        $r3[$i3] = $c6;

     label11:
        $i3 = $i4 + 1;

        $b0 = $b0 & 15;

     label12:
        $c6 = $r2[$b0];

        $r3[$i4] = $c6;

     label13:
        $i2 = $i2 + 1;

        goto label05;

     label14:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        varReplacer369 = null;

        return varReplacer369;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label04 with label14;
        catch java.lang.Exception from label06 to label07 with label14;
        catch java.lang.Exception from label08 to label09 with label14;
        catch java.lang.Exception from label10 to label11 with label14;
        catch java.lang.Exception from label12 to label13 with label14;
    }

    public static final java.lang.String getStackMsg(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.lang.StackTraceElement $r1;
        java.lang.StringBuffer $r2;
        java.lang.StackTraceElement[] $r3;
        int $i0, $i1;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: java.lang.Throwable;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r3;

        if $i0 < $i1 goto label2;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label2:
        $r1 = $r3[$i0];

        $r5 = new java.lang.StringBuilder;

        $r4 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String toString()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i0 = $i0 + 1;

        goto label1;
    }

    public static final java.util.Map jsonToMap(org.json.JSONObject)
    {
        org.json.JSONObject $r0, $r6;
        org.json.JSONException $r1;
        java.lang.Object $r2, $r4;
        java.util.Iterator $r3, $r7;
        boolean $z0;
        java.lang.String $r5;
        java.util.Map $r8, r11;
        org.json.JSONArray $r9;
        int $i0, $i1;
        java.util.HashMap r10;

        $r0 := @parameter0: org.json.JSONObject;

        r10 = new java.util.HashMap;

        $r2 = r10;

        specialinvoke r10.<java.util.HashMap: void <init>()>();

        $r3 = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        $r8 = (java.util.Map) $r2;

        return $r8;

     label02:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

     label03:
        $r4 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>($r5);

     label04:
        $z0 = $r4 instanceof java.lang.String;

        if $z0 == 0 goto label08;

        $r8 = (java.util.Map) $r2;

     label05:
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

     label06:
        goto label01;

     label07:
        $r1 := @caughtexception;

        virtualinvoke $r1.<org.json.JSONException: void printStackTrace()>();

        goto label01;

     label08:
        $z0 = $r4 instanceof org.json.JSONObject;

        if $z0 == 0 goto label15;

        $r6 = (org.json.JSONObject) $r4;

     label09:
        $r7 = virtualinvoke $r6.<org.json.JSONObject: java.util.Iterator keys()>();

        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label10:
        if $z0 == 0 goto label01;

     label11:
        $r8 = staticinvoke <cc.dkmproxy.framework.utils.StringUtil: java.util.Map jsonToMap(org.json.JSONObject)>($r6);

     label12:
        r11 = (java.util.Map) $r2;

     label13:
        $r8 = staticinvoke <cc.dkmproxy.framework.utils.StringUtil: java.util.Map setMap(java.util.Map,java.util.Map)>($r8, r11);

     label14:
        $r2 = $r8;

        goto label01;

     label15:
        $z0 = $r4 instanceof org.json.JSONArray;

        if $z0 == 0 goto label25;

        $r9 = (org.json.JSONArray) $r4;

        $i0 = 0;

     label16:
        $i1 = virtualinvoke $r9.<org.json.JSONArray: int length()>();

     label17:
        if $i0 >= $i1 goto label01;

     label18:
        $r6 = virtualinvoke $r9.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        $r7 = virtualinvoke $r6.<org.json.JSONObject: java.util.Iterator keys()>();

        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label19:
        if $z0 == 0 goto label24;

     label20:
        $r8 = staticinvoke <cc.dkmproxy.framework.utils.StringUtil: java.util.Map jsonToMap(org.json.JSONObject)>($r6);

     label21:
        r11 = (java.util.Map) $r2;

     label22:
        $r8 = staticinvoke <cc.dkmproxy.framework.utils.StringUtil: java.util.Map setMap(java.util.Map,java.util.Map)>($r8, r11);

     label23:
        $r2 = $r8;

     label24:
        $i0 = $i0 + 1;

        goto label16;

     label25:
        $r8 = (java.util.Map) $r2;

     label26:
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

     label27:
        goto label01;

        catch org.json.JSONException from label03 to label04 with label07;
        catch org.json.JSONException from label05 to label06 with label07;
        catch org.json.JSONException from label09 to label10 with label07;
        catch org.json.JSONException from label11 to label12 with label07;
        catch org.json.JSONException from label13 to label14 with label07;
        catch org.json.JSONException from label16 to label17 with label07;
        catch org.json.JSONException from label18 to label19 with label07;
        catch org.json.JSONException from label20 to label21 with label07;
        catch org.json.JSONException from label22 to label23 with label07;
        catch org.json.JSONException from label26 to label27 with label07;
    }

    public static final java.lang.String parseResultParam(java.lang.String)
    {
        java.lang.String $r0, $r13;
        java.lang.Throwable $r1, $r9, $r10, $r14;
        org.json.JSONObject $r2, r18;
        org.xml.sax.InputSource $r3, r17;
        javax.xml.parsers.DocumentBuilderFactory $r4;
        javax.xml.parsers.DocumentBuilder $r5, $r6;
        org.w3c.dom.Document $r7, $r8;
        org.w3c.dom.Node $r11;
        org.w3c.dom.NodeList $r12;
        int $i0, $i1;
        org.json.JSONException $r15;
        java.io.StringReader r16;
        javax.xml.parsers.ParserConfigurationException r19;
        java.io.IOException r20;
        org.xml.sax.SAXException r21;
        org.w3c.dom.DOMException r22;

        $r0 := @parameter0: java.lang.String;

        $r4 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        $r5 = null;

     label01:
        $r6 = virtualinvoke $r4.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

     label02:
        $r5 = $r6;

     label03:
        r16 = new java.io.StringReader;

        specialinvoke r16.<java.io.StringReader: void <init>(java.lang.String)>($r0);

        r17 = new org.xml.sax.InputSource;

        $r3 = r17;

        specialinvoke r17.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r16);

        $r7 = null;

     label04:
        $r8 = virtualinvoke $r5.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r3);

     label05:
        $r7 = $r8;

     label06:
        if $r7 != null goto label10;

        return "";

     label07:
        $r1 := @caughtexception;

        r19 = (javax.xml.parsers.ParserConfigurationException) $r1;

        virtualinvoke r19.<javax.xml.parsers.ParserConfigurationException: void printStackTrace()>();

        goto label03;

     label08:
        $r9 := @caughtexception;

        r20 = (java.io.IOException) $r9;

        virtualinvoke r20.<java.io.IOException: void printStackTrace()>();

        goto label06;

     label09:
        $r10 := @caughtexception;

        r21 = (org.xml.sax.SAXException) $r10;

        virtualinvoke r21.<org.xml.sax.SAXException: void printStackTrace()>();

        goto label06;

     label10:
        $r11 = interfaceinvoke $r7.<org.w3c.dom.Document: org.w3c.dom.Node getFirstChild()>();

        if $r11 != null goto label11;

        return "";

     label11:
        r18 = new org.json.JSONObject;

        $r2 = r18;

        specialinvoke r18.<org.json.JSONObject: void <init>()>();

        $r12 = interfaceinvoke $r11.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = 0;

     label12:
        $i1 = interfaceinvoke $r12.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 < $i1 goto label13;

        $r0 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String toString()>();

        return $r0;

     label13:
        $r11 = interfaceinvoke $r12.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>($i0);

        if $r11 == null goto label18;

     label14:
        $r0 = interfaceinvoke $r11.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r11 = interfaceinvoke $r11.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label15:
        if $r11 == null goto label19;

     label16:
        $r13 = interfaceinvoke $r11.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label17:
        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r0, $r13);

     label18:
        $i0 = $i0 + 1;

        goto label12;

     label19:
        $r13 = "";

        goto label17;

     label20:
        $r14 := @caughtexception;

        r22 = (org.w3c.dom.DOMException) $r14;

        virtualinvoke r22.<org.w3c.dom.DOMException: void printStackTrace()>();

        goto label18;

     label21:
        $r15 := @caughtexception;

        virtualinvoke $r15.<org.json.JSONException: void printStackTrace()>();

        goto label18;

        catch javax.xml.parsers.ParserConfigurationException from label01 to label02 with label07;
        catch java.io.IOException from label04 to label05 with label08;
        catch org.xml.sax.SAXException from label04 to label05 with label09;
        catch org.w3c.dom.DOMException from label14 to label15 with label20;
        catch org.w3c.dom.DOMException from label16 to label17 with label20;
        catch org.w3c.dom.DOMException from label17 to label18 with label20;
        catch org.json.JSONException from label14 to label15 with label21;
        catch org.json.JSONException from label16 to label17 with label21;
        catch org.json.JSONException from label17 to label18 with label21;
    }

    public static java.util.Map setMap(java.util.Map, java.util.Map)
    {
        java.util.Map $r0, r8;
        java.lang.Object $r1, $r4;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.String $r5, $r6;
        java.util.HashMap r7;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Map;

        if $r1 != null goto label1;

        r7 = new java.util.HashMap;

        $r1 = r7;

        specialinvoke r7.<java.util.HashMap: void <init>()>();

     label1:
        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $r0 = (java.util.Map) $r1;

        return $r0;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $r4 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r6 = (java.lang.String) $r4;

        r8 = (java.util.Map) $r1;

        interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        goto label2;
    }

    public static final java.lang.String sortParamMap(java.util.Map)
    {
        java.util.Map $r0;
        java.util.ArrayList $r1;
        java.util.Set $r2;
        cc.dkmproxy.framework.utils.StringUtil$MapComparator $r3;
        java.lang.String $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        java.util.Map$Entry $r6;
        boolean $z0;
        java.lang.StringBuilder $r7;
        java.lang.Object[] $r8;

        $r0 := @parameter0: java.util.Map;

        $r1 = new java.util.ArrayList;

        $r2 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = new cc.dkmproxy.framework.utils.StringUtil$MapComparator;

        specialinvoke $r3.<cc.dkmproxy.framework.utils.StringUtil$MapComparator: void <init>(cc.dkmproxy.framework.utils.StringUtil$MapComparator)>(null);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r1, $r3);

        $r4 = "";

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < $i1 goto label2;

        return $r4;

     label2:
        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.util.Map$Entry) $r5;

        virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z0 == 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r8 = newarray (java.lang.Object)[2];

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8[0] = $r5;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8[1] = $r5;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s=%s", $r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r7 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r8 = newarray (java.lang.Object)[2];

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8[0] = $r5;

        $r5 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8[1] = $r5;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("&%s=%s", $r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;
    }

    public static final java.lang.String spliceString(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.String;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label3;

     label1:
        if $r2 != null goto label2;

        $r2 = "";

     label2:
        return $r2;

     label3:
        if $r2 == null goto label4;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        return $r1;
    }

    public static final java.lang.String toBase64fromString(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r1, 0);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "");

        return $r0;
    }
}
