public class jcifs.smb.SigningDigest extends java.lang.Object implements jcifs.smb.SmbConstants
{
    static jcifs.util.LogStream log;
    private boolean bypass;
    private java.security.MessageDigest digest;
    private byte[] macSigningKey;
    private int signSequence;
    private int updates;

    static void <clinit>()
    {
        jcifs.util.LogStream $r0;

        nop;

        $r0 = staticinvoke <jcifs.util.LogStream: jcifs.util.LogStream getInstance()>();

        <jcifs.smb.SigningDigest: jcifs.util.LogStream log> = $r0;

        return;
    }

    public void <init>(jcifs.smb.SmbTransport, jcifs.smb.NtlmPasswordAuthentication) throws jcifs.smb.SmbException
    {
        jcifs.smb.SigningDigest $r0;
        jcifs.smb.SmbTransport $r1;
        jcifs.smb.NtlmPasswordAuthentication $r2;
        java.security.MessageDigest $r3;
        int $i0;
        byte[] $r4, $r6;
        jcifs.smb.SmbTransport$ServerData $r5;
        jcifs.util.LogStream $r7;
        java.lang.StringBuilder $r8, r12;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        java.lang.Exception $r11;
        jcifs.smb.SmbException r13;
        java.security.NoSuchAlgorithmException r14;

        $r0 := @this: jcifs.smb.SigningDigest;

        $r1 := @parameter0: jcifs.smb.SmbTransport;

        $r2 := @parameter1: jcifs.smb.NtlmPasswordAuthentication;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<jcifs.smb.SigningDigest: boolean bypass> = 0;

     label01:
        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

     label02:
        $r0.<jcifs.smb.SigningDigest: java.security.MessageDigest digest> = $r3;

        $i0 = <jcifs.smb.SigningDigest: int LM_COMPATIBILITY>;

        lookupswitch($i0)
        {
            case 0: goto label07;
            case 1: goto label07;
            case 2: goto label07;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label10;
            default: goto label03;
        };

     label03:
        $r4 = newarray (byte)[40];

        $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey> = $r4;

        $r5 = $r1.<jcifs.smb.SmbTransport: jcifs.smb.SmbTransport$ServerData server>;

        $r4 = $r5.<jcifs.smb.SmbTransport$ServerData: byte[] encryptionKey>;

        $r6 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        virtualinvoke $r2.<jcifs.smb.NtlmPasswordAuthentication: void getUserSessionKey(byte[],byte[],int)>($r4, $r6, 0);

        $r5 = $r1.<jcifs.smb.SmbTransport: jcifs.smb.SmbTransport$ServerData server>;

        $r4 = $r5.<jcifs.smb.SmbTransport$ServerData: byte[] encryptionKey>;

        $r4 = virtualinvoke $r2.<jcifs.smb.NtlmPasswordAuthentication: byte[] getUnicodeHash(byte[])>($r4);

        $r6 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r6, 16, 24);

     label04:
        $r7 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i0 = <jcifs.util.LogStream: int level>;

        if $i0 < 5 goto label12;

        $r7 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LM_COMPATIBILITY=");

        $i0 = <jcifs.smb.SigningDigest: int LM_COMPATIBILITY>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<jcifs.util.LogStream: void println(java.lang.String)>($r9);

        $r7 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $r4 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        $r6 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        $i0 = lengthof $r6;

        staticinvoke <jcifs.util.Hexdump: void hexdump(java.io.PrintStream,byte[],int,int)>($r7, $r4, 0, $i0);

        return;

     label05:
        $r10 := @caughtexception;

        $r7 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i0 = <jcifs.util.LogStream: int level>;

        if $i0 <= 0 goto label06;

        $r7 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        r14 = (java.security.NoSuchAlgorithmException) $r10;

        virtualinvoke r14.<java.security.NoSuchAlgorithmException: void printStackTrace(java.io.PrintStream)>($r7);

     label06:
        r13 = new jcifs.smb.SmbException;

        specialinvoke r13.<jcifs.smb.SmbException: void <init>(java.lang.String,java.lang.Throwable)>("MD5", $r10);

        throw r13;

     label07:
        $r4 = newarray (byte)[40];

        $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey> = $r4;

        $r5 = $r1.<jcifs.smb.SmbTransport: jcifs.smb.SmbTransport$ServerData server>;

        $r4 = $r5.<jcifs.smb.SmbTransport$ServerData: byte[] encryptionKey>;

        $r6 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        virtualinvoke $r2.<jcifs.smb.NtlmPasswordAuthentication: void getUserSessionKey(byte[],byte[],int)>($r4, $r6, 0);

        $r5 = $r1.<jcifs.smb.SmbTransport: jcifs.smb.SmbTransport$ServerData server>;

        $r4 = $r5.<jcifs.smb.SmbTransport$ServerData: byte[] encryptionKey>;

        $r4 = virtualinvoke $r2.<jcifs.smb.NtlmPasswordAuthentication: byte[] getUnicodeHash(byte[])>($r4);

        $r6 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r6, 16, 24);

     label08:
        goto label04;

     label09:
        $r11 := @caughtexception;

        r13 = new jcifs.smb.SmbException;

        specialinvoke r13.<jcifs.smb.SmbException: void <init>(java.lang.String,java.lang.Throwable)>("", $r11);

        throw r13;

     label10:
        $r4 = newarray (byte)[16];

        $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey> = $r4;

        $r5 = $r1.<jcifs.smb.SmbTransport: jcifs.smb.SmbTransport$ServerData server>;

        $r4 = $r5.<jcifs.smb.SmbTransport$ServerData: byte[] encryptionKey>;

        $r6 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        virtualinvoke $r2.<jcifs.smb.NtlmPasswordAuthentication: void getUserSessionKey(byte[],byte[],int)>($r4, $r6, 0);

     label11:
        goto label04;

     label12:
        return;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label09;
    }

    public void <init>(byte[], boolean) throws jcifs.smb.SmbException
    {
        jcifs.smb.SigningDigest $r0;
        byte[] $r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.security.MessageDigest $r3;
        jcifs.util.LogStream $r4;
        int $i0, varReplacer5693, varReplacer5695, varReplacer5696, varReplacer5697;
        jcifs.smb.SmbException r5;
        java.security.NoSuchAlgorithmException r6;
        java.lang.String varReplacer5691, varReplacer5692, varReplacer5694;

        nop;

        $r0 := @this: jcifs.smb.SigningDigest;

        $r1 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        varReplacer5693 = 0;

        $r0.<jcifs.smb.SigningDigest: boolean bypass> = varReplacer5693;

     label1:
        varReplacer5694 = "MD5";

        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer5694);

     label2:
        $r0.<jcifs.smb.SigningDigest: java.security.MessageDigest digest> = $r3;

        $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey> = $r1;

        $r0.<jcifs.smb.SigningDigest: boolean bypass> = $z0;

        varReplacer5696 = 0;

        $r0.<jcifs.smb.SigningDigest: int updates> = varReplacer5696;

        varReplacer5695 = 0;

        $r0.<jcifs.smb.SigningDigest: int signSequence> = varReplacer5695;

        $r4 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i0 = <jcifs.util.LogStream: int level>;

        if $i0 < 5 goto label5;

        $r4 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        varReplacer5691 = "macSigningKey:";

        virtualinvoke $r4.<jcifs.util.LogStream: void println(java.lang.String)>(varReplacer5691);

        $r4 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i0 = lengthof $r1;

        varReplacer5697 = 0;

        staticinvoke <jcifs.util.Hexdump: void hexdump(java.io.PrintStream,byte[],int,int)>($r4, $r1, varReplacer5697, $i0);

        return;

     label3:
        $r2 := @caughtexception;

        $r4 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i0 = <jcifs.util.LogStream: int level>;

        if $i0 <= 0 goto label4;

        $r4 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        r6 = (java.security.NoSuchAlgorithmException) $r2;

        virtualinvoke r6.<java.security.NoSuchAlgorithmException: void printStackTrace(java.io.PrintStream)>($r4);

     label4:
        r5 = new jcifs.smb.SmbException;

        varReplacer5692 = "MD5";

        specialinvoke r5.<jcifs.smb.SmbException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer5692, $r2);

        throw r5;

     label5:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public byte[] digest()
    {
        jcifs.smb.SigningDigest $r0;
        byte[] $r1;
        java.security.MessageDigest $r2;
        jcifs.util.LogStream $r3;
        int $i0, varReplacer5979, varReplacer5981;
        java.lang.String varReplacer5980;

        nop;

        $r0 := @this: jcifs.smb.SigningDigest;

        $r2 = $r0.<jcifs.smb.SigningDigest: java.security.MessageDigest digest>;

        $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

        $r3 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i0 = <jcifs.util.LogStream: int level>;

        if $i0 < 5 goto label1;

        $r3 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        varReplacer5980 = "digest: ";

        virtualinvoke $r3.<jcifs.util.LogStream: void println(java.lang.String)>(varReplacer5980);

        $r3 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i0 = lengthof $r1;

        varReplacer5979 = 0;

        staticinvoke <jcifs.util.Hexdump: void hexdump(java.io.PrintStream,byte[],int,int)>($r3, $r1, varReplacer5979, $i0);

        $r3 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        virtualinvoke $r3.<jcifs.util.LogStream: void flush()>();

     label1:
        varReplacer5981 = 0;

        $r0.<jcifs.smb.SigningDigest: int updates> = varReplacer5981;

        return $r1;
    }

    void sign(byte[], int, int, jcifs.smb.ServerMessageBlock, jcifs.smb.ServerMessageBlock)
    {
        jcifs.smb.SigningDigest $r0;
        byte[] $r1, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, varReplacer5968, varReplacer5969, varReplacer5970, varReplacer5971, varReplacer5972, varReplacer5973, varReplacer5974;
        jcifs.smb.ServerMessageBlock $r2, $r3;
        java.lang.Exception $r4;
        long $l5;
        boolean $z0;
        java.lang.String $r7;
        jcifs.util.LogStream $r8;
        java.lang.Throwable $r9;

        nop;

        $r0 := @this: jcifs.smb.SigningDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: jcifs.smb.ServerMessageBlock;

        $r3 := @parameter4: jcifs.smb.ServerMessageBlock;

        $i2 = $r0.<jcifs.smb.SigningDigest: int signSequence>;

        $r2.<jcifs.smb.ServerMessageBlock: int signSeq> = $i2;

        if $r3 == null goto label01;

        $i2 = $r0.<jcifs.smb.SigningDigest: int signSequence>;

        $i2 = $i2 + 1;

        $r3.<jcifs.smb.ServerMessageBlock: int signSeq> = $i2;

        varReplacer5968 = 0;

        $r3.<jcifs.smb.ServerMessageBlock: boolean verifyFailed> = varReplacer5968;

     label01:
        $r5 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        $r6 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

     label02:
        $i2 = lengthof $r6;

     label03:
        varReplacer5969 = 0;

        virtualinvoke $r0.<jcifs.smb.SigningDigest: void update(byte[],int,int)>($r5, varReplacer5969, $i2);

     label04:
        $i2 = $i0 + 14;

        $i3 = 0;

     label05:
        if $i3 >= 8 goto label08;

        $i4 = $i2 + $i3;

     label06:
        $r1[$i4] = 0;

     label07:
        $i3 = $i3 + 1;

        goto label05;

     label08:
        $i3 = $r0.<jcifs.smb.SigningDigest: int signSequence>;

     label09:
        $l5 = (long) $i3;

     label10:
        staticinvoke <jcifs.smb.ServerMessageBlock: void writeInt4(long,byte[],int)>($l5, $r1, $i2);

        virtualinvoke $r0.<jcifs.smb.SigningDigest: void update(byte[],int,int)>($r1, $i0, $i1);

        $r5 = virtualinvoke $r0.<jcifs.smb.SigningDigest: byte[] digest()>();

        varReplacer5970 = 0;

        varReplacer5971 = 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, varReplacer5970, $r1, $i2, varReplacer5971);

        $z0 = $r0.<jcifs.smb.SigningDigest: boolean bypass>;

     label11:
        if $z0 == 0 goto label15;

     label12:
        varReplacer5974 = 0;

        $r0.<jcifs.smb.SigningDigest: boolean bypass> = varReplacer5974;

     label13:
        $r7 = "BSRSPYL ";

     label14:
        $r5 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>();

        varReplacer5972 = 0;

        varReplacer5973 = 8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, varReplacer5972, $r1, $i2, varReplacer5973);

     label15:
        $i0 = $r0.<jcifs.smb.SigningDigest: int signSequence>;

     label16:
        $i0 = $i0 + 2;

        $r0.<jcifs.smb.SigningDigest: int signSequence> = $i0;

        return;

     label17:
        $r4 := @caughtexception;

     label18:
        $r8 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i0 = <jcifs.util.LogStream: int level>;

     label19:
        if $i0 <= 0 goto label21;

     label20:
        $r8 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace(java.io.PrintStream)>($r8);

     label21:
        $i0 = $r0.<jcifs.smb.SigningDigest: int signSequence>;

        goto label16;

     label22:
        $r9 := @caughtexception;

        $i0 = $r0.<jcifs.smb.SigningDigest: int signSequence>;

        $i0 = $i0 + 2;

        $r0.<jcifs.smb.SigningDigest: int signSequence> = $i0;

        throw $r9;

        catch java.lang.Exception from label01 to label04 with label17;
        catch java.lang.Exception from label06 to label07 with label17;
        catch java.lang.Exception from label08 to label09 with label17;
        catch java.lang.Exception from label10 to label11 with label17;
        catch java.lang.Exception from label12 to label13 with label17;
        catch java.lang.Exception from label14 to label15 with label17;
        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
    }

    public java.lang.String toString()
    {
        jcifs.smb.SigningDigest $r0;
        java.lang.StringBuilder $r1;
        int $i0;
        byte[] $r2, $r3;
        java.lang.String $r4;

        $r0 := @this: jcifs.smb.SigningDigest;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LM_COMPATIBILITY=");

        $i0 = <jcifs.smb.SigningDigest: int LM_COMPATIBILITY>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MacSigningKey=");

        $r2 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        $r3 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        $i0 = lengthof $r3;

        $r4 = staticinvoke <jcifs.util.Hexdump: java.lang.String toHexString(byte[],int,int)>($r2, 0, $i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void update(byte[], int, int)
    {
        jcifs.smb.SigningDigest $r0;
        byte[] $r1;
        int $i0, $i1, $i2, varReplacer5978;
        jcifs.util.LogStream $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, varReplacer5975, varReplacer5976, varReplacer5977;
        java.security.MessageDigest $r5;

        nop;

        $r0 := @this: jcifs.smb.SigningDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i2 = <jcifs.util.LogStream: int level>;

        if $i2 < 5 goto label1;

        $r2 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        varReplacer5975 = "update: ";

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5975);

        $i2 = $r0.<jcifs.smb.SigningDigest: int updates>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        varReplacer5977 = " ";

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5977);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer5976 = ":";

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5976);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<jcifs.util.LogStream: void println(java.lang.String)>($r4);

        $r2 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        varReplacer5978 = 256;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, varReplacer5978);

        staticinvoke <jcifs.util.Hexdump: void hexdump(java.io.PrintStream,byte[],int,int)>($r2, $r1, $i0, $i2);

        $r2 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        virtualinvoke $r2.<jcifs.util.LogStream: void flush()>();

     label1:
        if $i1 != 0 goto label2;

        return;

     label2:
        $r5 = $r0.<jcifs.smb.SigningDigest: java.security.MessageDigest digest>;

        virtualinvoke $r5.<java.security.MessageDigest: void update(byte[],int,int)>($r1, $i0, $i1);

        $i0 = $r0.<jcifs.smb.SigningDigest: int updates>;

        $i0 = $i0 + 1;

        $r0.<jcifs.smb.SigningDigest: int updates> = $i0;

        return;
    }

    boolean verify(byte[], int, jcifs.smb.ServerMessageBlock)
    {
        jcifs.smb.SigningDigest $r0;
        byte[] $r1, $r3, $r4;
        int $i0, $i1, $i2, $i5;
        jcifs.smb.ServerMessageBlock $r2;
        long $l3;
        byte $b4, $b6;
        jcifs.smb.SmbComReadAndXResponse $r5;
        jcifs.util.LogStream $r6;

        $r0 := @this: jcifs.smb.SigningDigest;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: jcifs.smb.ServerMessageBlock;

        $r3 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        $r4 = $r0.<jcifs.smb.SigningDigest: byte[] macSigningKey>;

        $i2 = lengthof $r4;

        virtualinvoke $r0.<jcifs.smb.SigningDigest: void update(byte[],int,int)>($r3, 0, $i2);

        virtualinvoke $r0.<jcifs.smb.SigningDigest: void update(byte[],int,int)>($r1, $i0, 14);

        $i2 = $i0 + 14;

        $r3 = newarray (byte)[8];

        $i1 = $r2.<jcifs.smb.ServerMessageBlock: int signSeq>;

        $l3 = (long) $i1;

        staticinvoke <jcifs.smb.ServerMessageBlock: void writeInt4(long,byte[],int)>($l3, $r3, 0);

        $i1 = lengthof $r3;

        virtualinvoke $r0.<jcifs.smb.SigningDigest: void update(byte[],int,int)>($r3, 0, $i1);

        $i2 = $i2 + 8;

        $b4 = $r2.<jcifs.smb.ServerMessageBlock: byte command>;

        if $b4 != 46 goto label4;

        $r5 = (jcifs.smb.SmbComReadAndXResponse) $r2;

        $i1 = $r2.<jcifs.smb.ServerMessageBlock: int length>;

        $i5 = $r5.<jcifs.smb.SmbComReadAndXResponse: int dataLength>;

        $i1 = $i1 - $i5;

        $i1 = $i1 + -14;

        $i1 = $i1 + -8;

        virtualinvoke $r0.<jcifs.smb.SigningDigest: void update(byte[],int,int)>($r1, $i2, $i1);

        $r3 = $r5.<jcifs.smb.SmbComReadAndXResponse: byte[] b>;

        $i1 = $r5.<jcifs.smb.SmbComReadAndXResponse: int off>;

        $i2 = $r5.<jcifs.smb.SmbComReadAndXResponse: int dataLength>;

        virtualinvoke $r0.<jcifs.smb.SigningDigest: void update(byte[],int,int)>($r3, $i1, $i2);

     label1:
        $r3 = virtualinvoke $r0.<jcifs.smb.SigningDigest: byte[] digest()>();

        $i2 = 0;

     label2:
        if $i2 >= 8 goto label6;

        $b4 = $r3[$i2];

        $i1 = $i0 + 14;

        $i1 = $i1 + $i2;

        $b6 = $r1[$i1];

        if $b4 == $b6 goto label5;

        $r6 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i2 = <jcifs.util.LogStream: int level>;

        if $i2 < 2 goto label3;

        $r6 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        virtualinvoke $r6.<jcifs.util.LogStream: void println(java.lang.String)>("signature verification failure");

        $r6 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        staticinvoke <jcifs.util.Hexdump: void hexdump(java.io.PrintStream,byte[],int,int)>($r6, $r3, 0, 8);

        $r6 = <jcifs.smb.SigningDigest: jcifs.util.LogStream log>;

        $i0 = $i0 + 14;

        staticinvoke <jcifs.util.Hexdump: void hexdump(java.io.PrintStream,byte[],int,int)>($r6, $r1, $i0, 8);

     label3:
        $r2.<jcifs.smb.ServerMessageBlock: boolean verifyFailed> = 1;

        return 1;

     label4:
        $i1 = $r2.<jcifs.smb.ServerMessageBlock: int length>;

        $i1 = $i1 + -14;

        $i1 = $i1 + -8;

        virtualinvoke $r0.<jcifs.smb.SigningDigest: void update(byte[],int,int)>($r1, $i2, $i1);

        goto label1;

     label5:
        $i2 = $i2 + 1;

        goto label2;

     label6:
        $r2.<jcifs.smb.ServerMessageBlock: boolean verifyFailed> = 0;

        return 0;
    }
}
