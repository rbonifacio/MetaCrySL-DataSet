public class com.valentus.network.NetworkService extends java.lang.Object
{
    private static final com.squareup.okhttp.MediaType JSON;
    private java.lang.String mMethod;
    private com.valentus.interfaces.INetworkEvent networkEvent;
    private java.lang.String service;

    static void <clinit>()
    {
        com.squareup.okhttp.MediaType $r0;
        java.lang.String varReplacer330;

        nop;

        varReplacer330 = "application/json; charset=utf-8";

        $r0 = staticinvoke <com.squareup.okhttp.MediaType: com.squareup.okhttp.MediaType parse(java.lang.String)>(varReplacer330);

        <com.valentus.network.NetworkService: com.squareup.okhttp.MediaType JSON> = $r0;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, com.valentus.interfaces.INetworkEvent)
    {
        com.valentus.network.NetworkService $r0;
        java.lang.String $r1, $r2, varReplacer344;
        com.valentus.interfaces.INetworkEvent $r3;

        nop;

        $r0 := @this: com.valentus.network.NetworkService;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.valentus.interfaces.INetworkEvent;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.valentus.network.NetworkService: java.lang.String service> = $r1;

        varReplacer344 = "post";

        $r0.<com.valentus.network.NetworkService: java.lang.String mMethod> = varReplacer344;

        $r0.<com.valentus.network.NetworkService: com.valentus.interfaces.INetworkEvent networkEvent> = $r3;

        return;
    }

    static com.valentus.interfaces.INetworkEvent access$100(com.valentus.network.NetworkService)
    {
        com.valentus.network.NetworkService $r0;
        com.valentus.interfaces.INetworkEvent r1;

        nop;

        $r0 := @parameter0: com.valentus.network.NetworkService;

        r1 = $r0.<com.valentus.network.NetworkService: com.valentus.interfaces.INetworkEvent networkEvent>;

        return r1;
    }

    static java.lang.String access$200(com.valentus.network.NetworkService)
    {
        com.valentus.network.NetworkService $r0;
        java.lang.String r1;

        nop;

        $r0 := @parameter0: com.valentus.network.NetworkService;

        r1 = $r0.<com.valentus.network.NetworkService: java.lang.String service>;

        return r1;
    }

    static java.lang.String access$202(com.valentus.network.NetworkService, java.lang.String)
    {
        com.valentus.network.NetworkService $r0;
        java.lang.String $r1;

        nop;

        $r0 := @parameter0: com.valentus.network.NetworkService;

        $r1 := @parameter1: java.lang.String;

        $r0.<com.valentus.network.NetworkService: java.lang.String service> = $r1;

        return $r1;
    }

    static java.lang.String access$300(com.valentus.network.NetworkService)
    {
        com.valentus.network.NetworkService $r0;
        java.lang.String r1;

        nop;

        $r0 := @parameter0: com.valentus.network.NetworkService;

        r1 = $r0.<com.valentus.network.NetworkService: java.lang.String mMethod>;

        return r1;
    }

    public static com.squareup.okhttp.OkHttpClient addSSLTLS(com.squareup.okhttp.OkHttpClient, android.content.Context)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        android.content.Context $r1;
        java.lang.Exception $r2;
        java.util.ArrayList $r3;
        com.squareup.okhttp.TlsVersion $r4;
        int $i0, varReplacer369, varReplacer373;
        java.security.KeyStore $r5;
        android.content.res.Resources $r6;
        java.io.InputStream $r7;
        java.lang.String $r8, varReplacer363, varReplacer364, varReplacer365, varReplacer366, varReplacer370, varReplacer374;
        char[] $r9;
        javax.net.ssl.SSLContext $r10;
        javax.net.ssl.TrustManagerFactory $r11;
        javax.net.ssl.TrustManager[] $r12;
        com.valentus.network.Tls12SocketFactory $r13;
        javax.net.ssl.SSLSocketFactory $r14;
        com.squareup.okhttp.ConnectionSpec$Builder $r15;
        com.squareup.okhttp.ConnectionSpec $r16;
        com.squareup.okhttp.TlsVersion[] $r17;
        null_type varReplacer367, varReplacer368, varReplacer371, varReplacer372;

        nop;

        $r0 := @parameter0: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter1: android.content.Context;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 15 goto label17;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 22 goto label17;

     label01:
        varReplacer364 = "BKS";

        $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer364);

        $r6 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        varReplacer373 = 2131099649;

        $r7 = virtualinvoke $r6.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(varReplacer373);

     label02:
        $r8 = "Valenstus@123";

     label03:
        $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r5.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r7, $r9);

        varReplacer374 = "TLSv1.2";

        $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer374);

        $r8 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r11 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r8);

        virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r5);

        $r12 = virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        varReplacer367 = null;

        varReplacer368 = null;

        virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer367, $r12, varReplacer367);

     label04:
        $r13 = new com.valentus.network.Tls12SocketFactory;

     label05:
        $r14 = virtualinvoke $r10.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        specialinvoke $r13.<com.valentus.network.Tls12SocketFactory: void <init>(javax.net.ssl.SSLSocketFactory)>($r14);

        virtualinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setSslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r13);

     label06:
        $r15 = new com.squareup.okhttp.ConnectionSpec$Builder;

        $r16 = <com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.ConnectionSpec MODERN_TLS>;

     label07:
        specialinvoke $r15.<com.squareup.okhttp.ConnectionSpec$Builder: void <init>(com.squareup.okhttp.ConnectionSpec)>($r16);

        $r17 = newarray (com.squareup.okhttp.TlsVersion)[1];

     label08:
        $r4 = <com.squareup.okhttp.TlsVersion: com.squareup.okhttp.TlsVersion TLS_1_2>;

     label09:
        $r17[0] = $r4;

        $r15 = virtualinvoke $r15.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec$Builder tlsVersions(com.squareup.okhttp.TlsVersion[])>($r17);

        $r16 = virtualinvoke $r15.<com.squareup.okhttp.ConnectionSpec$Builder: com.squareup.okhttp.ConnectionSpec build()>();

     label10:
        $r3 = new java.util.ArrayList;

     label11:
        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r16);

     label12:
        $r16 = <com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.ConnectionSpec COMPATIBLE_TLS>;

     label13:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r16);

     label14:
        $r16 = <com.squareup.okhttp.ConnectionSpec: com.squareup.okhttp.ConnectionSpec CLEARTEXT>;

     label15:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r16);

        virtualinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setConnectionSpecs(java.util.List)>($r3);

     label16:
        return $r0;

     label17:
        varReplacer370 = "BKS";

        $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer370);

        $r6 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        varReplacer369 = 2131099649;

        $r7 = virtualinvoke $r6.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(varReplacer369);

     label18:
        $r8 = "Valenstus@123";

     label19:
        $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r5.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r7, $r9);

        varReplacer363 = "TLS";

        $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer363);

        $r8 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r11 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r8);

        virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r5);

        $r12 = virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        varReplacer371 = null;

        varReplacer372 = null;

        virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer371, $r12, varReplacer371);

     label20:
        $r13 = new com.valentus.network.Tls12SocketFactory;

     label21:
        $r14 = virtualinvoke $r10.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        specialinvoke $r13.<com.valentus.network.Tls12SocketFactory: void <init>(javax.net.ssl.SSLSocketFactory)>($r14);

        virtualinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setSslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r13);

     label22:
        return $r0;

     label23:
        $r2 := @caughtexception;

        varReplacer365 = "OkHttpTLSCompat";

        varReplacer366 = "Error while setting TLS 1.2";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(varReplacer365, varReplacer366, $r2);

        return $r0;

        catch java.lang.Exception from label01 to label02 with label23;
        catch java.lang.Exception from label03 to label04 with label23;
        catch java.lang.Exception from label05 to label06 with label23;
        catch java.lang.Exception from label07 to label08 with label23;
        catch java.lang.Exception from label09 to label10 with label23;
        catch java.lang.Exception from label11 to label12 with label23;
        catch java.lang.Exception from label13 to label14 with label23;
        catch java.lang.Exception from label15 to label16 with label23;
        catch java.lang.Exception from label17 to label18 with label23;
        catch java.lang.Exception from label19 to label20 with label23;
        catch java.lang.Exception from label21 to label22 with label23;
    }

    private static java.lang.String convertStreamToString(java.io.InputStream)
    {
        java.io.InputStream $r0;
        java.io.BufferedReader $r1, r11;
        java.lang.StringBuilder $r2, $r4, r12;
        java.lang.String $r3;
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9;
        java.io.InputStreamReader r10;
        java.io.IOException r13;

        $r0 := @parameter0: java.io.InputStream;

        r11 = new java.io.BufferedReader;

        $r1 = r11;

        r10 = new java.io.InputStreamReader;

        specialinvoke r10.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r0);

        specialinvoke r11.<java.io.BufferedReader: void <init>(java.io.Reader)>(r10);

        $r4 = new java.lang.StringBuilder;

        $r2 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

     label01:
        $r3 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

     label02:
        if $r3 == null goto label11;

     label03:
        r12 = new java.lang.StringBuilder;

     label04:
        $r4 = r12;

     label05:
        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label06:
        goto label01;

     label07:
        $r5 := @caughtexception;

     label08:
        r13 = (java.io.IOException) $r5;

        virtualinvoke r13.<java.io.IOException: void printStackTrace()>();

     label09:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label10:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label11:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label12:
        goto label10;

     label13:
        $r6 := @caughtexception;

        r13 = (java.io.IOException) $r6;

        virtualinvoke r13.<java.io.IOException: void printStackTrace()>();

        goto label10;

     label14:
        $r7 := @caughtexception;

        r13 = (java.io.IOException) $r7;

        virtualinvoke r13.<java.io.IOException: void printStackTrace()>();

        goto label10;

     label15:
        $r8 := @caughtexception;

     label16:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label17:
        throw $r8;

     label18:
        $r9 := @caughtexception;

        r13 = (java.io.IOException) $r9;

        virtualinvoke r13.<java.io.IOException: void printStackTrace()>();

        goto label17;

        catch java.io.IOException from label01 to label02 with label07;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.io.IOException from label09 to label10 with label14;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label16 to label17 with label18;
    }

    private javax.net.ssl.SSLSocketFactory getPinnedCertSslSocketFactory(android.content.Context)
    {
        com.valentus.network.NetworkService $r0;
        android.content.Context $r1;
        java.lang.Exception $r2;
        java.security.KeyStore $r3;
        android.content.res.Resources $r4;
        java.io.InputStream $r5;
        java.lang.String $r6;
        char[] $r7;
        javax.net.ssl.SSLContext $r8;
        javax.net.ssl.TrustManagerFactory $r9;
        javax.net.ssl.TrustManager[] $r10;
        javax.net.ssl.SSLSocketFactory $r11;

        $r0 := @this: com.valentus.network.NetworkService;

        $r1 := @parameter0: android.content.Context;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MyApp", "ssl");

        $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("BKS");

        $r4 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(2131099649);

     label2:
        $r6 = "Valenstus@123";

     label3:
        $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r5, $r7);

        $r8 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLSv1.2");

        $r6 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r9 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r6);

        virtualinvoke $r9.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r3);

        $r10 = virtualinvoke $r9.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        virtualinvoke $r8.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r10, null);

        $r11 = virtualinvoke $r8.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label4:
        return $r11;

     label5:
        $r2 := @caughtexception;

        $r6 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MyApp", $r6, $r2);

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void call(java.util.Map)
    {
        com.valentus.network.NetworkService $r0;
        java.util.Map $r1;
        com.valentus.network.NetworkService$NetworkTask $r2;
        java.util.Map[] $r3;
        null_type varReplacer345;

        nop;

        $r0 := @this: com.valentus.network.NetworkService;

        $r1 := @parameter0: java.util.Map;

        $r2 = new com.valentus.network.NetworkService$NetworkTask;

        varReplacer345 = null;

        specialinvoke $r2.<com.valentus.network.NetworkService$NetworkTask: void <init>(com.valentus.network.NetworkService,com.valentus.network.NetworkService$1)>($r0, varReplacer345);

        $r3 = newarray (java.util.Map)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<com.valentus.network.NetworkService$NetworkTask: android.os.AsyncTask execute(java.lang.Object[])>($r3);

        return;
    }

    public void setService(java.lang.String)
    {
        com.valentus.network.NetworkService $r0;
        java.lang.String $r1;

        $r0 := @this: com.valentus.network.NetworkService;

        $r1 := @parameter0: java.lang.String;

        $r0.<com.valentus.network.NetworkService: java.lang.String service> = $r1;

        return;
    }
}
