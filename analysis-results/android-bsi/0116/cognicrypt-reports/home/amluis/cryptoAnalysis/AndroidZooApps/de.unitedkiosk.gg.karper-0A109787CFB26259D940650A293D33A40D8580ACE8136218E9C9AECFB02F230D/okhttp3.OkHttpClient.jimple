public final class okhttp3.OkHttpClient extends java.lang.Object implements java.lang.Cloneable, okhttp3.Call$Factory
{
    private static final java.util.List DEFAULT_CONNECTION_SPECS;
    private static final java.util.List DEFAULT_PROTOCOLS;
    final okhttp3.Authenticator authenticator;
    final okhttp3.Cache cache;
    final okhttp3.CertificatePinner certificatePinner;
    final int connectTimeout;
    final okhttp3.ConnectionPool connectionPool;
    final java.util.List connectionSpecs;
    final okhttp3.CookieJar cookieJar;
    final okhttp3.Dispatcher dispatcher;
    final okhttp3.Dns dns;
    final boolean followRedirects;
    final boolean followSslRedirects;
    final javax.net.ssl.HostnameVerifier hostnameVerifier;
    final java.util.List interceptors;
    final okhttp3.internal.InternalCache internalCache;
    final java.util.List networkInterceptors;
    final java.util.List protocols;
    final java.net.Proxy proxy;
    final okhttp3.Authenticator proxyAuthenticator;
    final java.net.ProxySelector proxySelector;
    final int readTimeout;
    final boolean retryOnConnectionFailure;
    final javax.net.SocketFactory socketFactory;
    final javax.net.ssl.SSLSocketFactory sslSocketFactory;
    final int writeTimeout;

    static void <clinit>()
    {
        okhttp3.Protocol[] $r0;
        okhttp3.Protocol $r1;
        java.util.List $r2;
        okhttp3.ConnectionSpec[] $r3;
        okhttp3.ConnectionSpec $r4;
        okhttp3.OkHttpClient$1 $r5;

        nop;

        $r0 = newarray (okhttp3.Protocol)[3];

        $r1 = <okhttp3.Protocol: okhttp3.Protocol HTTP_2>;

        $r0[0] = $r1;

        $r1 = <okhttp3.Protocol: okhttp3.Protocol SPDY_3>;

        $r0[1] = $r1;

        $r1 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_1>;

        $r0[2] = $r1;

        $r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r0);

        <okhttp3.OkHttpClient: java.util.List DEFAULT_PROTOCOLS> = $r2;

        $r3 = newarray (okhttp3.ConnectionSpec)[3];

        $r4 = <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec MODERN_TLS>;

        $r3[0] = $r4;

        $r4 = <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec COMPATIBLE_TLS>;

        $r3[1] = $r4;

        $r4 = <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec CLEARTEXT>;

        $r3[2] = $r4;

        $r2 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.lang.Object[])>($r3);

        <okhttp3.OkHttpClient: java.util.List DEFAULT_CONNECTION_SPECS> = $r2;

        $r5 = new okhttp3.OkHttpClient$1;

        specialinvoke $r5.<okhttp3.OkHttpClient$1: void <init>()>();

        <okhttp3.internal.Internal: okhttp3.internal.Internal instance> = $r5;

        return;
    }

    public void <init>()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.OkHttpClient$Builder $r1;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 = new okhttp3.OkHttpClient$Builder;

        specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>();

        specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1);

        return;
    }

    private void <init>(okhttp3.OkHttpClient$Builder)
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.OkHttpClient$Builder $r1;
        okhttp3.Dispatcher $r2;
        java.net.Proxy $r3;
        java.util.List $r4;
        java.net.ProxySelector $r5;
        okhttp3.CookieJar $r6;
        okhttp3.Cache $r7;
        okhttp3.internal.InternalCache $r8;
        javax.net.SocketFactory $r9;
        javax.net.ssl.SSLSocketFactory $r10;
        javax.net.ssl.HostnameVerifier $r11;
        okhttp3.CertificatePinner $r12;
        okhttp3.Authenticator $r13;
        okhttp3.ConnectionPool $r14;
        okhttp3.Dns $r15;
        boolean $z0;
        int $i0;
        javax.net.ssl.SSLContext $r16;
        java.lang.Throwable $r17;
        java.lang.AssertionError $r18;
        java.lang.String varReplacer2969;
        null_type varReplacer2970, varReplacer2971, varReplacer2972;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 := @parameter0: okhttp3.OkHttpClient$Builder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Dispatcher dispatcher>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher> = $r2;

        $r3 = $r1.<okhttp3.OkHttpClient$Builder: java.net.Proxy proxy>;

        $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy> = $r3;

        $r4 = $r1.<okhttp3.OkHttpClient$Builder: java.util.List protocols>;

        $r0.<okhttp3.OkHttpClient: java.util.List protocols> = $r4;

        $r4 = $r1.<okhttp3.OkHttpClient$Builder: java.util.List connectionSpecs>;

        $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs> = $r4;

        $r4 = $r1.<okhttp3.OkHttpClient$Builder: java.util.List interceptors>;

        $r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r4);

        $r0.<okhttp3.OkHttpClient: java.util.List interceptors> = $r4;

        $r4 = $r1.<okhttp3.OkHttpClient$Builder: java.util.List networkInterceptors>;

        $r4 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>($r4);

        $r0.<okhttp3.OkHttpClient: java.util.List networkInterceptors> = $r4;

        $r5 = $r1.<okhttp3.OkHttpClient$Builder: java.net.ProxySelector proxySelector>;

        $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector> = $r5;

        $r6 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.CookieJar cookieJar>;

        $r0.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar> = $r6;

        $r7 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Cache cache>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Cache cache> = $r7;

        $r8 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.internal.InternalCache internalCache>;

        $r0.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache> = $r8;

        $r9 = $r1.<okhttp3.OkHttpClient$Builder: javax.net.SocketFactory socketFactory>;

        $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory> = $r9;

        $r10 = $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r10 == null goto label2;

        $r10 = $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r10;

     label1:
        $r11 = $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r11;

        $r12 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.CertificatePinner certificatePinner>;

        $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner> = $r12;

        $r13 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator proxyAuthenticator>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator> = $r13;

        $r13 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator authenticator>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator authenticator> = $r13;

        $r14 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.ConnectionPool connectionPool>;

        $r0.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool> = $r14;

        $r15 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Dns dns>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns> = $r15;

        $z0 = $r1.<okhttp3.OkHttpClient$Builder: boolean followSslRedirects>;

        $r0.<okhttp3.OkHttpClient: boolean followSslRedirects> = $z0;

        $z0 = $r1.<okhttp3.OkHttpClient$Builder: boolean followRedirects>;

        $r0.<okhttp3.OkHttpClient: boolean followRedirects> = $z0;

        $z0 = $r1.<okhttp3.OkHttpClient$Builder: boolean retryOnConnectionFailure>;

        $r0.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure> = $z0;

        $i0 = $r1.<okhttp3.OkHttpClient$Builder: int connectTimeout>;

        $r0.<okhttp3.OkHttpClient: int connectTimeout> = $i0;

        $i0 = $r1.<okhttp3.OkHttpClient$Builder: int readTimeout>;

        $r0.<okhttp3.OkHttpClient: int readTimeout> = $i0;

        $i0 = $r1.<okhttp3.OkHttpClient$Builder: int writeTimeout>;

        $r0.<okhttp3.OkHttpClient: int writeTimeout> = $i0;

        return;

     label2:
        varReplacer2969 = "TLS";

        $r16 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2969);

        varReplacer2970 = null;

        varReplacer2971 = null;

        varReplacer2972 = null;

        virtualinvoke $r16.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2970, varReplacer2970, varReplacer2970);

        $r10 = virtualinvoke $r16.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label3:
        $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r10;

        goto label1;

     label4:
        $r17 := @caughtexception;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

        catch java.security.GeneralSecurityException from label2 to label3 with label4;
    }

    void <init>(okhttp3.OkHttpClient$Builder, okhttp3.OkHttpClient$1)
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.OkHttpClient$Builder $r1;
        okhttp3.OkHttpClient$1 $r2;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 := @parameter0: okhttp3.OkHttpClient$Builder;

        $r2 := @parameter1: okhttp3.OkHttpClient$1;

        specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1);

        return;
    }

    static java.util.List access$000()
    {
        java.util.List r0;

        nop;

        r0 = <okhttp3.OkHttpClient: java.util.List DEFAULT_PROTOCOLS>;

        return r0;
    }

    static java.util.List access$100()
    {
        java.util.List r0;

        nop;

        r0 = <okhttp3.OkHttpClient: java.util.List DEFAULT_CONNECTION_SPECS>;

        return r0;
    }

    public okhttp3.Authenticator authenticator()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.Authenticator r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator authenticator>;

        return r1;
    }

    public okhttp3.Cache cache()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.Cache r1;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: okhttp3.Cache cache>;

        return r1;
    }

    public okhttp3.CertificatePinner certificatePinner()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.CertificatePinner r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner certificatePinner>;

        return r1;
    }

    public int connectTimeoutMillis()
    {
        okhttp3.OkHttpClient $r0;
        int i0;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        i0 = $r0.<okhttp3.OkHttpClient: int connectTimeout>;

        return i0;
    }

    public okhttp3.ConnectionPool connectionPool()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.ConnectionPool r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool>;

        return r1;
    }

    public java.util.List connectionSpecs()
    {
        okhttp3.OkHttpClient $r0;
        java.util.List r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: java.util.List connectionSpecs>;

        return r1;
    }

    public okhttp3.CookieJar cookieJar()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.CookieJar r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar>;

        return r1;
    }

    public okhttp3.Dispatcher dispatcher()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.Dispatcher r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher>;

        return r1;
    }

    public okhttp3.Dns dns()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.Dns r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: okhttp3.Dns dns>;

        return r1;
    }

    public boolean followRedirects()
    {
        okhttp3.OkHttpClient $r0;
        boolean z0;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        z0 = $r0.<okhttp3.OkHttpClient: boolean followRedirects>;

        return z0;
    }

    public boolean followSslRedirects()
    {
        okhttp3.OkHttpClient $r0;
        boolean z0;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        z0 = $r0.<okhttp3.OkHttpClient: boolean followSslRedirects>;

        return z0;
    }

    public javax.net.ssl.HostnameVerifier hostnameVerifier()
    {
        okhttp3.OkHttpClient $r0;
        javax.net.ssl.HostnameVerifier r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        return r1;
    }

    public java.util.List interceptors()
    {
        okhttp3.OkHttpClient $r0;
        java.util.List r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: java.util.List interceptors>;

        return r1;
    }

    okhttp3.internal.InternalCache internalCache()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.Cache $r1;
        okhttp3.internal.InternalCache r2;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 = $r0.<okhttp3.OkHttpClient: okhttp3.Cache cache>;

        if $r1 == null goto label1;

        $r1 = $r0.<okhttp3.OkHttpClient: okhttp3.Cache cache>;

        r2 = $r1.<okhttp3.Cache: okhttp3.internal.InternalCache internalCache>;

        return r2;

     label1:
        r2 = $r0.<okhttp3.OkHttpClient: okhttp3.internal.InternalCache internalCache>;

        return r2;
    }

    public java.util.List networkInterceptors()
    {
        okhttp3.OkHttpClient $r0;
        java.util.List r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: java.util.List networkInterceptors>;

        return r1;
    }

    public okhttp3.OkHttpClient$Builder newBuilder()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.OkHttpClient$Builder $r1;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 = new okhttp3.OkHttpClient$Builder;

        specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>(okhttp3.OkHttpClient)>($r0);

        return $r1;
    }

    public okhttp3.Call newCall(okhttp3.Request)
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.Request $r1;
        okhttp3.RealCall $r2;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 := @parameter0: okhttp3.Request;

        $r2 = new okhttp3.RealCall;

        specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1);

        return $r2;
    }

    public java.util.List protocols()
    {
        okhttp3.OkHttpClient $r0;
        java.util.List r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: java.util.List protocols>;

        return r1;
    }

    public java.net.Proxy proxy()
    {
        okhttp3.OkHttpClient $r0;
        java.net.Proxy r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: java.net.Proxy proxy>;

        return r1;
    }

    public okhttp3.Authenticator proxyAuthenticator()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.Authenticator r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator proxyAuthenticator>;

        return r1;
    }

    public java.net.ProxySelector proxySelector()
    {
        okhttp3.OkHttpClient $r0;
        java.net.ProxySelector r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: java.net.ProxySelector proxySelector>;

        return r1;
    }

    public int readTimeoutMillis()
    {
        okhttp3.OkHttpClient $r0;
        int i0;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        i0 = $r0.<okhttp3.OkHttpClient: int readTimeout>;

        return i0;
    }

    public boolean retryOnConnectionFailure()
    {
        okhttp3.OkHttpClient $r0;
        boolean z0;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        z0 = $r0.<okhttp3.OkHttpClient: boolean retryOnConnectionFailure>;

        return z0;
    }

    public javax.net.SocketFactory socketFactory()
    {
        okhttp3.OkHttpClient $r0;
        javax.net.SocketFactory r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory socketFactory>;

        return r1;
    }

    public javax.net.ssl.SSLSocketFactory sslSocketFactory()
    {
        okhttp3.OkHttpClient $r0;
        javax.net.ssl.SSLSocketFactory r1;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        r1 = $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        return r1;
    }

    public int writeTimeoutMillis()
    {
        okhttp3.OkHttpClient $r0;
        int i0;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        i0 = $r0.<okhttp3.OkHttpClient: int writeTimeout>;

        return i0;
    }
}
