public class com.danikula.videocache.ProxyCacheUtils extends java.lang.Object
{
    static final int DEFAULT_BUFFER_SIZE;
    static final java.lang.String LOG_TAG;
    static final int MAX_ARRAY_PREVIEW;

    public void <init>()
    {
        com.danikula.videocache.ProxyCacheUtils $r0;

        $r0 := @this: com.danikula.videocache.ProxyCacheUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void assertBuffer(byte[], long, int)
    {
        byte[] $r0;
        long $l0;
        int $i1, $i3;
        boolean $z0, $z1;
        byte $b2;

        $r0 := @parameter0: byte[];

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $z0 = 1;

        staticinvoke <com.danikula.videocache.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r0, "Buffer must be not null!");

        $b2 = $l0 cmp 0L;

        if $b2 < 0 goto label3;

        $z1 = 1;

     label1:
        staticinvoke <com.danikula.videocache.Preconditions: void checkArgument(boolean,java.lang.String)>($z1, "Data offset must be positive!");

        if $i1 < 0 goto label4;

        $i3 = lengthof $r0;

        if $i1 > $i3 goto label4;

     label2:
        staticinvoke <com.danikula.videocache.Preconditions: void checkArgument(boolean,java.lang.String)>($z0, "Length must be in range [0..buffer.length]");

        return;

     label3:
        $z1 = 0;

        goto label1;

     label4:
        $z0 = 0;

        goto label2;
    }

    private static java.lang.String bytesToHexString(byte[])
    {
        byte[] $r0;
        byte $b0;
        java.lang.StringBuffer $r1;
        int $i1, $i2;
        java.lang.String $r2, varReplacer3150;
        java.lang.Object[] $r3;
        java.lang.Byte $r4;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i1 = lengthof $r0;

        $i2 = 0;

     label1:
        if $i2 < $i1 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label2:
        $b0 = $r0[$i2];

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        $r3[0] = $r4;

        varReplacer3150 = "%02x";

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(varReplacer3150, $r3);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i2 = $i2 + 1;

        goto label1;
    }

    static void close(java.io.Closeable)
    {
        java.io.Closeable $r0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: java.io.Closeable;

        if $r0 == null goto label4;

     label1:
        interfaceinvoke $r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ProxyCache", "Error closing resource", $r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.lang.String computeMD5(java.lang.String)
    {
        java.lang.String $r0, varReplacer3149;
        java.lang.Throwable $r1;
        java.security.MessageDigest $r2;
        byte[] $r3;
        java.lang.IllegalStateException $r4;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer3149 = "MD5";

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3149);

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

        $r0 = staticinvoke <com.danikula.videocache.ProxyCacheUtils: java.lang.String bytesToHexString(byte[])>($r3);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r1);

        throw $r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    static java.lang.String decode(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1;
        java.lang.RuntimeException $r2;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r0, "utf-8");

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error decoding url", $r1);

        throw $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    static java.lang.String encode(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1;
        java.lang.RuntimeException $r2;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "utf-8");

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error encoding url", $r1);

        throw $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    static java.lang.String getSupposablyMime(java.lang.String)
    {
        java.lang.String $r0;
        android.webkit.MimeTypeMap $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>();

        $r0 = staticinvoke <android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>($r0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r0 = virtualinvoke $r1.<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>($r0);

        return $r0;
    }

    static java.lang.String preview(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 0);

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(16, $i1);

        $r0 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r0, 0, $i1);

        $r1 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r0);

        if $i1 >= $i0 goto label1;

        $r2 = new java.lang.StringBuilder;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ...]");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return $r1;
    }
}
