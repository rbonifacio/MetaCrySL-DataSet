public class com.amazon.insights.validate.EncryptionValidator extends java.lang.Object
{
    private final java.lang.String encryptionAlgorithm;
    private final java.lang.String secretKey;

    public void <init>(java.lang.String, java.lang.String)
    {
        com.amazon.insights.validate.EncryptionValidator $r0;
        java.lang.String $r1, $r2, varReplacer1591, varReplacer1592;

        nop;

        $r0 := @this: com.amazon.insights.validate.EncryptionValidator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        varReplacer1591 = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF";

        $r0.<com.amazon.insights.validate.EncryptionValidator: java.lang.String secretKey> = varReplacer1591;

        varReplacer1592 = "AES";

        $r0.<com.amazon.insights.validate.EncryptionValidator: java.lang.String encryptionAlgorithm> = varReplacer1592;

        return;
    }

    public void validate()
    {
        com.amazon.insights.validate.EncryptionValidator $r0;
        java.lang.String $r1, $r3, varReplacer1181, varReplacer1182, varReplacer1183, varReplacer1184, varReplacer1185, varReplacer1186, varReplacer1187, varReplacer1188, varReplacer1189, varReplacer1190, varReplacer1193;
        javax.crypto.spec.SecretKeySpec $r2;
        byte[] $r4;
        javax.crypto.Cipher $r5;
        boolean $z0;
        com.amazon.insights.impl.InitializationException $r6;
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, $r12;
        int varReplacer1191, varReplacer1192;

        nop;

        $r0 := @this: com.amazon.insights.validate.EncryptionValidator;

        $r1 = "!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";

        $r2 = new javax.crypto.spec.SecretKeySpec;

        $r3 = $r0.<com.amazon.insights.validate.EncryptionValidator: java.lang.String secretKey>;

     label01:
        varReplacer1186 = "UTF-8";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer1186);

     label02:
        $r3 = $r0.<com.amazon.insights.validate.EncryptionValidator: java.lang.String encryptionAlgorithm>;

     label03:
        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, $r3);

        $r3 = virtualinvoke $r2.<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()>();

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r3);

        varReplacer1192 = 1;

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1192, $r2);

        varReplacer1182 = "UTF-8";

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer1182);

        $r4 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        $r1 = virtualinvoke $r2.<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()>();

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r1);

        varReplacer1191 = 2;

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1191, $r2);

        $r4 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

     label04:
        $r1 = new java.lang.String;

     label05:
        varReplacer1184 = "UTF-8";

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, varReplacer1184);

        varReplacer1183 = "!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer1183);

     label06:
        if $z0 != 0 goto label15;

        $r6 = new com.amazon.insights.impl.InitializationException;

     label07:
        varReplacer1187 = "Could not encrypt and decrypt string with AES";

        specialinvoke $r6.<com.amazon.insights.impl.InitializationException: void <init>(java.lang.String)>(varReplacer1187);

     label08:
        throw $r6;

     label09:
        $r7 := @caughtexception;

        $r6 = new com.amazon.insights.impl.InitializationException;

        varReplacer1188 = "UTF-8 encoding is not supported";

        specialinvoke $r6.<com.amazon.insights.impl.InitializationException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1188, $r7);

        throw $r6;

     label10:
        $r8 := @caughtexception;

        $r6 = new com.amazon.insights.impl.InitializationException;

        varReplacer1189 = "No Provider for AES";

        specialinvoke $r6.<com.amazon.insights.impl.InitializationException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1189, $r8);

        throw $r6;

     label11:
        $r9 := @caughtexception;

        $r6 = new com.amazon.insights.impl.InitializationException;

        varReplacer1181 = "No Such Padding AES";

        specialinvoke $r6.<com.amazon.insights.impl.InitializationException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1181, $r9);

        throw $r6;

     label12:
        $r10 := @caughtexception;

        $r6 = new com.amazon.insights.impl.InitializationException;

        varReplacer1185 = "Invalid Key for AES";

        specialinvoke $r6.<com.amazon.insights.impl.InitializationException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1185, $r10);

        throw $r6;

     label13:
        $r11 := @caughtexception;

        $r6 = new com.amazon.insights.impl.InitializationException;

        varReplacer1190 = "Illegal Block size for AES";

        specialinvoke $r6.<com.amazon.insights.impl.InitializationException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1190, $r11);

        throw $r6;

     label14:
        $r12 := @caughtexception;

        $r6 = new com.amazon.insights.impl.InitializationException;

        varReplacer1193 = "Bad Padding for AES";

        specialinvoke $r6.<com.amazon.insights.impl.InitializationException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1193, $r12);

        throw $r6;

     label15:
        return;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label09;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label09;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label09;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label10;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label10;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label10;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label10;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label11;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label11;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label11;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label11;
        catch java.security.InvalidKeyException from label01 to label02 with label12;
        catch java.security.InvalidKeyException from label03 to label04 with label12;
        catch java.security.InvalidKeyException from label05 to label06 with label12;
        catch java.security.InvalidKeyException from label07 to label08 with label12;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label13;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label13;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label13;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label13;
        catch javax.crypto.BadPaddingException from label01 to label02 with label14;
        catch javax.crypto.BadPaddingException from label03 to label04 with label14;
        catch javax.crypto.BadPaddingException from label05 to label06 with label14;
        catch javax.crypto.BadPaddingException from label07 to label08 with label14;
    }
}
