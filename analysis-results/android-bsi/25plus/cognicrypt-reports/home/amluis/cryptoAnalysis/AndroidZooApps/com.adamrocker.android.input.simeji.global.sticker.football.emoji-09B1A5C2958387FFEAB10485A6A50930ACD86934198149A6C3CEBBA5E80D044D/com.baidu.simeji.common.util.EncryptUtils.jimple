public class com.baidu.simeji.common.util.EncryptUtils extends java.lang.Object
{

    public void <init>()
    {
        com.baidu.simeji.common.util.EncryptUtils $r0;

        $r0 := @this: com.baidu.simeji.common.util.EncryptUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] encryptAes(java.lang.String)
    {
        java.lang.String $r0, $r5, varReplacer196, varReplacer197, varReplacer199, varReplacer202;
        int $i0, $i1, $i2, varReplacer198, varReplacer203, varReplacer204;
        java.lang.Throwable $r1, $r8, $r9, $r10, $r11, $r12;
        byte[] $r2, $r6;
        javax.crypto.spec.SecretKeySpec $r3, r13;
        com.baidu.ipcs.das.common.DasJniAgent $r4;
        boolean $z0;
        javax.crypto.Cipher $r7;
        byte $b3;
        java.security.NoSuchAlgorithmException r14;
        java.security.InvalidKeyException r15;
        javax.crypto.NoSuchPaddingException r16;
        javax.crypto.IllegalBlockSizeException r17;
        javax.crypto.BadPaddingException r18;
        java.io.UnsupportedEncodingException r19;
        null_type varReplacer200, varReplacer201;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r4 = staticinvoke <com.baidu.ipcs.das.common.DasJniAgent: com.baidu.ipcs.das.common.DasJniAgent getInstance()>();

        if $r4 == null goto label03;

        $r5 = virtualinvoke $r4.<com.baidu.ipcs.das.common.DasJniAgent: java.lang.String dasPubKey()>();

     label01:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5);

        if $z0 != 0 goto label02;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label04;

     label02:
        varReplacer200 = null;

        return varReplacer200;

     label03:
        $r5 = null;

        goto label01;

     label04:
        varReplacer197 = "utf-8";

        $r2 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer197);

        varReplacer196 = "utf-8";

        $r6 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer196);

     label05:
        r13 = new javax.crypto.spec.SecretKeySpec;

        $r3 = r13;

     label06:
        varReplacer202 = "AES";

        specialinvoke r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer202);

        varReplacer199 = "AES/ECB/NoPadding";

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer199);

        $i1 = virtualinvoke $r7.<javax.crypto.Cipher: int getBlockSize()>();

     label07:
        $i0 = lengthof $r6;

        $i2 = $i0 % $i1;

        if $i2 == 0 goto label12;

        $i2 = $i0 % $i1;

        $i1 = $i1 - $i2;

        $i1 = $i0 + $i1;

     label08:
        $i0 = lengthof $r6;

        $i0 = $i1 - $i0;

        $r2 = newarray (byte)[$i1];

        $i1 = lengthof $r6;

     label09:
        varReplacer203 = 0;

        varReplacer204 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, varReplacer203, $r2, varReplacer203, $i1);

     label10:
        $i1 = 0;

     label11:
        if $i1 >= $i0 goto label13;

        $i2 = lengthof $r6;

        $i2 = $i2 + $i1;

        $b3 = (byte) $i0;

        $r2[$i2] = $b3;

        $i1 = $i1 + 1;

        goto label11;

     label12:
        $i1 = $i0 + $i1;

        goto label08;

     label13:
        varReplacer198 = 1;

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer198, $r3);

        $r6 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

     label14:
        return $r6;

     label15:
        $r1 := @caughtexception;

        r14 = (java.security.NoSuchAlgorithmException) $r1;

        virtualinvoke r14.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label16:
        varReplacer201 = null;

        return varReplacer201;

     label17:
        $r8 := @caughtexception;

        r15 = (java.security.InvalidKeyException) $r8;

        virtualinvoke r15.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label16;

     label18:
        $r9 := @caughtexception;

        r16 = (javax.crypto.NoSuchPaddingException) $r9;

        virtualinvoke r16.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label16;

     label19:
        $r10 := @caughtexception;

        r17 = (javax.crypto.IllegalBlockSizeException) $r10;

        virtualinvoke r17.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label16;

     label20:
        $r11 := @caughtexception;

        r18 = (javax.crypto.BadPaddingException) $r11;

        virtualinvoke r18.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label16;

     label21:
        $r12 := @caughtexception;

        r19 = (java.io.UnsupportedEncodingException) $r12;

        virtualinvoke r19.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label16;

        catch java.security.NoSuchAlgorithmException from label04 to label05 with label15;
        catch java.security.NoSuchAlgorithmException from label06 to label07 with label15;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label15;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label15;
        catch java.security.InvalidKeyException from label04 to label05 with label17;
        catch java.security.InvalidKeyException from label06 to label07 with label17;
        catch java.security.InvalidKeyException from label09 to label10 with label17;
        catch java.security.InvalidKeyException from label13 to label14 with label17;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label18;
        catch javax.crypto.NoSuchPaddingException from label06 to label07 with label18;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label18;
        catch javax.crypto.NoSuchPaddingException from label13 to label14 with label18;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label19;
        catch javax.crypto.IllegalBlockSizeException from label06 to label07 with label19;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label19;
        catch javax.crypto.IllegalBlockSizeException from label13 to label14 with label19;
        catch javax.crypto.BadPaddingException from label04 to label05 with label20;
        catch javax.crypto.BadPaddingException from label06 to label07 with label20;
        catch javax.crypto.BadPaddingException from label09 to label10 with label20;
        catch javax.crypto.BadPaddingException from label13 to label14 with label20;
        catch java.io.UnsupportedEncodingException from label04 to label05 with label21;
        catch java.io.UnsupportedEncodingException from label06 to label07 with label21;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label21;
        catch java.io.UnsupportedEncodingException from label13 to label14 with label21;
    }
}
