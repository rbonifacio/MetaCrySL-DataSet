public class com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    private static final int evictionTimePeriod;
    private final int AdobeCommonCacheCriticalCount;
    private final int AdobeCommonCacheNormalCount;
    private java.lang.String cacheAdobeId;
    private java.lang.String cacheDir;
    private boolean cacheFrozen;
    private int cacheMisses;
    private java.lang.String cacheName;
    private long currentDiskCacheSize;
    private final java.util.Comparator dateComparator;
    private final java.util.Map diskCacheAccessTimes;
    private final java.util.Map diskCacheCreateTimes;
    private int diskCacheHits;
    private final java.util.Map diskCacheObjectSizes;
    private double diskCacheSize;
    private final java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock;
    private com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies evictionPolicy;
    private final java.util.concurrent.ExecutorService executorService;
    private final java.util.Comparator lruComparator;
    private com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache;
    private int memCacheHits;
    private double memCacheSize;
    private final java.util.Comparator numberComparator;
    private java.util.concurrent.ScheduledFuture repeatingTimer;
    private final java.util.concurrent.ScheduledExecutorService scheduledExecutorService;
    private boolean useDiskCaching;
    private final boolean verboseDebugging;

    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;

        nop;

        $r0 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    void <init>(java.util.concurrent.ExecutorService)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.util.concurrent.ExecutorService $r1;
        java.util.concurrent.ScheduledExecutorService $r2;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$1 $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$2 $r4;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$3 $r5;
        java.util.concurrent.ConcurrentHashMap $r6;
        java.util.concurrent.locks.ReentrantReadWriteLock $r7;
        int varReplacer2362, varReplacer2363, varReplacer2365, varReplacer2366;
        long varReplacer2364;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        varReplacer2362 = 3;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int AdobeCommonCacheNormalCount> = varReplacer2362;

        varReplacer2363 = 10;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int AdobeCommonCacheCriticalCount> = varReplacer2363;

        varReplacer2366 = 1;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean verboseDebugging> = varReplacer2366;

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>();

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledExecutorService scheduledExecutorService> = $r2;

        varReplacer2365 = 1;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean useDiskCaching> = varReplacer2365;

        varReplacer2364 = 0L;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize> = varReplacer2364;

        $r3 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$1;

        specialinvoke $r3.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$1: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)>($r0);

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Comparator lruComparator> = $r3;

        $r4 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$2;

        specialinvoke $r4.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$2: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)>($r0);

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Comparator numberComparator> = $r4;

        $r5 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$3;

        specialinvoke $r5.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$3: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)>($r0);

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Comparator dateComparator> = $r5;

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheCreateTimes> = $r6;

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheAccessTimes> = $r6;

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes> = $r6;

        $r7 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock> = $r7;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ExecutorService executorService> = $r1;

        return;
    }

    static java.util.concurrent.locks.ReentrantReadWriteLock access$000(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.util.concurrent.locks.ReentrantReadWriteLock r1;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        return r1;
    }

    static java.io.File access$100(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1;
        java.io.File $r2;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.io.File getCacheDirectoryForGuid(java.lang.String)>($r1);

        return $r2;
    }

    static long access$1000(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        long l0;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        l0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        return l0;
    }

    static int access$1100(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        int $i0;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $i0 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int getNormalEvictionThreshold()>();

        return $i0;
    }

    static void access$1200(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheEviction()>();

        return;
    }

    static void access$1300(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void stopRepeatingTimer()>();

        return;
    }

    static boolean access$1400(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        boolean z0;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen>;

        return z0;
    }

    static void access$200(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance, com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler, android.os.Handler)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler $r1;
        android.os.Handler $r2;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter1: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler;

        $r2 := @parameter2: android.os.Handler;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void callMissHandler(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler)>($r1, $r2);

        return;
    }

    static void access$300(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance, java.lang.String, java.lang.String, long)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2;
        long $l0;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $l0 := @parameter3: long;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void logDiskCacheHit(java.lang.String,java.lang.String,long)>($r1, $r2, $l0);

        return;
    }

    static java.lang.String access$400(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance, java.lang.String, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r1 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r2);

        return $r1;
    }

    static void access$500(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance, java.io.File, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.io.File $r1;
        java.lang.String $r2;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.lang.String;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void addEntryToCacheMetadata(java.io.File,java.lang.String)>($r1, $r2);

        return;
    }

    static void access$600(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance, com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler, android.os.Handler, java.lang.Object, com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler $r1;
        android.os.Handler $r2;
        java.lang.Object $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation $r4;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter1: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler;

        $r2 := @parameter2: android.os.Handler;

        $r3 := @parameter3: java.lang.Object;

        $r4 := @parameter4: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void callHitHandler(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler,java.lang.Object,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation)>($r1, $r2, $r3, $r4);

        return;
    }

    static double access$700(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        double d0;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        d0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double memCacheSize>;

        return d0;
    }

    static com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache access$800(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache r1;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache>;

        return r1;
    }

    static void access$900(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1;

        $r0 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r1);

        return;
    }

    private void addEntryToCacheMetadata(java.io.File, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.io.File $r1;
        java.lang.String $r2, varReplacer2420;
        long $l0, $l1, $l2, $l3;
        java.util.Map $r3;
        boolean $z0;
        java.lang.Long $r4;
        int $i4;
        byte $b5;
        java.lang.StringBuilder $r5;
        java.text.DateFormat $r6;
        java.util.Date $r7;
        java.util.concurrent.ScheduledFuture $r8;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $l0 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        $l1 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        $l2 = virtualinvoke $r1.<java.io.File: long length()>();

        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $l3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $l3 = $l3 + $l2;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize> = $l3;

     label1:
        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheAccessTimes>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheCreateTimes>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen>;

        if $z0 != 0 goto label2;

        $l0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $i4 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int getNormalEvictionThreshold()>();

        $l1 = (long) $i4;

        $b5 = $l0 cmp $l1;

        if $b5 <= 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        varReplacer2420 = "Sync eviction event at ";

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2420);

        $r6 = staticinvoke <java.text.SimpleDateFormat: java.text.DateFormat getInstance()>();

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        $r2 = virtualinvoke $r6.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r2);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheEviction()>();

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledFuture repeatingTimer>;

        if $r8 != null goto label2;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void startRepeatingTimer()>();

     label2:
        return;
    }

    private void cacheEviction()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        long $l0, $l2;
        int $i1;
        byte $b3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType $r1;
        java.lang.Integer $r2;
        java.lang.Object[] $r3;
        java.lang.String $r4, varReplacer2385, varReplacer2386;
        java.lang.Long $r5;
        int[] $r6;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies $r7;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $l0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $i1 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int getCriticalEvictionThreshold()>();

        $l2 = (long) $i1;

        $b3 = $l0 cmp $l2;

        if $b3 <= 0 goto label5;

        $r1 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType AdobeCommonCacheCriticalEviction>;

        $i1 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int getCriticalEvictionThreshold()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label1:
        $r3 = newarray (java.lang.Object)[3];

        $r4 = virtualinvoke $r1.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType: java.lang.String toString()>();

        $r3[0] = $r4;

        $l0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3[1] = $r5;

        $r3[2] = $r2;

        varReplacer2386 = "%s eviction: %d > %d";

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(varReplacer2386, $r3);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r4);

        $r6 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$11: int[] $SwitchMap$com$adobe$creativesdk$foundation$internal$cache$AdobeCommonCachePolicies>;

        $r7 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies evictionPolicy>;

        $i1 = virtualinvoke $r7.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies: int ordinal()>();

        $i1 = $r6[$i1];

        lookupswitch($i1)
        {
            case 1: goto label6;
            default: goto label2;
        };

     label2:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void lruEviction(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType)>($r1);

     label3:
        $l0 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long getCurrentDiskCacheSize()>();

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize> = $l0;

        $r3 = newarray (java.lang.Object)[3];

        $l0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3[0] = $r5;

        $r3[1] = $r2;

        $l0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $l2 = (long) $i1;

        $b3 = $l0 cmp $l2;

        if $b3 <= 0 goto label7;

        $r4 = "UNORDERED";

     label4:
        $r3[2] = $r4;

        varReplacer2385 = "After eviction: %d - %d are %s";

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(varReplacer2385, $r3);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r4);

        return;

     label5:
        $r1 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType AdobeCommonCacheNormalEviction>;

        $i1 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int getNormalEvictionThreshold()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        goto label1;

     label6:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void largeObjectFirstEviction(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType)>($r1);

        goto label3;

     label7:
        $r4 = "in order";

        goto label4;
    }

    private void cacheLog(java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r3;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r2;
        java.lang.Class $r4;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r4 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r3 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r2, $r3, $r1);

        return;
    }

    private void callHitHandler(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler, android.os.Handler, java.lang.Object, com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler $r1;
        android.os.Handler $r2;
        java.lang.Object $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation $r4;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$10 $r5;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$9 $r6;
        java.lang.Thread $r7;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler;

        $r2 := @parameter1: android.os.Handler;

        $r3 := @parameter2: java.lang.Object;

        $r4 := @parameter3: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation;

        if $r2 == null goto label1;

        $r6 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$9;

        specialinvoke $r6.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$9: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,java.lang.Object,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation)>($r0, $r1, $r3, $r4);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        return;

     label1:
        $r7 = new java.lang.Thread;

        $r5 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$10;

        specialinvoke $r5.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$10: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,java.lang.Object,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation)>($r0, $r1, $r3, $r4);

        specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r5);

        virtualinvoke $r7.<java.lang.Thread: void start()>();

        return;
    }

    private void callMissHandler(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler, android.os.Handler)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler $r1;
        android.os.Handler $r2;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$8 $r3;
        int $i0;
        java.lang.Thread $r4;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler;

        $r2 := @parameter1: android.os.Handler;

        $i0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int cacheMisses>;

        $i0 = $i0 + 1;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int cacheMisses> = $i0;

        $r3 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$8;

        specialinvoke $r3.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$8: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler)>($r0, $r1);

        if $r2 == null goto label1;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;

     label1:
        $r4 = new java.lang.Thread;

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable)>($r3);

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        return;
    }

    private void clearMemCache()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache $r1;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache>;

        virtualinvoke $r1.<com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache: void evictAll()>();

        return;
    }

    private java.io.File getCacheDirectoryForGuid(java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r3;
        java.io.File $r2;
        boolean $z0;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r4;
        java.lang.Class $r5;
        java.lang.StringBuilder $r6;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r3, $r1);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label1;

        $r4 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

        $r5 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r1 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Folder creation not successful for path ");

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r4, $r1, $r3);

     label1:
        return $r2;
    }

    private java.lang.String getCacheKey(java.lang.String, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r2 != null goto label1;

        return $r1;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = <java.io.File: java.lang.String separator>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    private int getCriticalEvictionThreshold()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        double $d0;
        int $i0;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $d0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double diskCacheSize>;

        $d0 = 0.95 * $d0;

        $i0 = (int) $d0;

        return $i0;
    }

    private long getCurrentDiskCacheSize()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        long $l0, $l1;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry $r5;
        java.lang.Long $r6;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $l0 = 0L;

        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.lang.Long) $r4;

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $l0 = $l0 + $l1;

        goto label1;

     label2:
        return $l0;
    }

    private java.util.List getEntrySetsSortedByValue(java.util.Map, java.util.Comparator)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.util.Map $r1;
        java.util.Comparator $r2;
        java.util.ArrayList $r3;
        java.util.Set $r4;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: java.util.Comparator;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r3, $r2);

        return $r3;
    }

    private void getImageFromDiskWithGUID(java.lang.String, java.lang.String, java.util.EnumSet, com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler, android.os.Handler)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2;
        java.util.EnumSet $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler $r4;
        android.os.Handler $r5;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$6 $r6;
        java.util.Date $r7;
        boolean $z0;
        java.util.concurrent.ExecutorService $r8;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.EnumSet;

        $r4 := @parameter3: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler;

        $r5 := @parameter4: android.os.Handler;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean useDiskCaching>;

        if $z0 == 0 goto label1;

        $r6 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$6;

        specialinvoke $r6.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$6: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance,java.lang.String,java.lang.String,android.os.Handler,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,java.util.Date,java.util.EnumSet)>($r0, $r1, $r2, $r5, $r4, $r7, $r3);

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ExecutorService executorService>;

        interfaceinvoke $r8.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r6);

        return;

     label1:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void callMissHandler(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler)>($r4, $r5);

        return;
    }

    private int getNormalEvictionThreshold()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        double $d0;
        int $i0;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $d0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double diskCacheSize>;

        $d0 = 0.85 * $d0;

        $i0 = (int) $d0;

        return $i0;
    }

    private java.lang.Object getObjectFromDiskWithGUID(java.lang.String, java.lang.String, java.util.EnumSet)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2, $r14, $r16;
        java.util.EnumSet $r3;
        java.util.Date $r4, $r8, r35;
        java.io.FileInputStream $r5, $r18, r33;
        java.io.File $r6, $r17, r32;
        java.io.ObjectInputStream $r7, $r19, r34;
        java.lang.Object $r9, $r20;
        boolean $z0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r10;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r11;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r12;
        java.lang.Class $r13;
        java.lang.StringBuilder $r15, r31;
        int $i0;
        long $l1, $l2;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions $r21;
        double $d0;
        byte $b3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache $r22;
        java.lang.Throwable $r23, $r24, $r25, $r26, $r28, $r29, $r30;
        java.lang.ClassNotFoundException $r27;
        java.io.IOException r36;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.EnumSet;

        $r4 = new java.util.Date;

        $r8 = $r4;

        specialinvoke $r4.<java.util.Date: void <init>()>();

        $r9 = null;

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean useDiskCaching>;

        if $z0 == 0 goto label92;

     label01:
        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label02:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label03:
        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r31 = new java.lang.StringBuilder;

     label04:
        $r15 = r31;

     label05:
        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got Read lock in getObjectFromDiskWithGUID.Current lock count ");

        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r12, $r14, $r16);

        r32 = new java.io.File;

     label06:
        $r6 = r32;

     label07:
        $r17 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.io.File getCacheDirectoryForGuid(java.lang.String)>($r1);

        specialinvoke r32.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, $r2);

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

     label08:
        if $z0 != 0 goto label15;

     label09:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label10:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label11:
        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r31 = new java.lang.StringBuilder;

     label12:
        $r15 = r31;

     label13:
        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disk Miss for key ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r12, $r1, $r2);

     label14:
        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read lock released in getObjectFromDiskWithGUID.Holding ");

        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r12, $r1, $r2);

        return null;

     label15:
        $r18 = null;

        $r19 = null;

     label16:
        r33 = new java.io.FileInputStream;

     label17:
        $r5 = r33;

     label18:
        specialinvoke r33.<java.io.FileInputStream: void <init>(java.io.File)>($r6);

     label19:
        r34 = new java.io.ObjectInputStream;

     label20:
        $r7 = r34;

     label21:
        specialinvoke r34.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r5);

     label22:
        $r20 = virtualinvoke $r7.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label23:
        r35 = new java.util.Date;

     label24:
        $r4 = r35;

     label25:
        specialinvoke r35.<java.util.Date: void <init>()>();

        $l1 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l2 = virtualinvoke $r8.<java.util.Date: long getTime()>();

     label26:
        $l1 = $l1 - $l2;

     label27:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void logDiskCacheHit(java.lang.String,java.lang.String,long)>($r1, $r2, $l1);

        $r14 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r2);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void addEntryToCacheMetadata(java.io.File,java.lang.String)>($r6, $r14);

     label28:
        $r9 = $r20;

     label29:
        $r21 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions AdobeCommonCacheKeepInMemoryCache>;

     label30:
        $z0 = virtualinvoke $r3.<java.util.EnumSet: boolean contains(java.lang.Object)>($r21);

     label31:
        if $z0 == 0 goto label36;

     label32:
        $d0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double memCacheSize>;

     label33:
        $b3 = $d0 cmpl 0.0;

        if $b3 <= 0 goto label36;

     label34:
        $r22 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache>;

     label35:
        $r1 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke $r22.<com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r20);

     label36:
        if $r5 == null goto label38;

     label37:
        virtualinvoke $r5.<java.io.FileInputStream: void close()>();

     label38:
        if $r7 == null goto label40;

     label39:
        virtualinvoke $r7.<java.io.ObjectInputStream: void close()>();

     label40:
        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read lock released in getObjectFromDiskWithGUID.Holding ");

        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r12, $r1, $r2);

        return $r9;

     label41:
        $r23 := @caughtexception;

     label42:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label43:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label44:
        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r36 = (java.io.IOException) $r23;

        $r2 = virtualinvoke r36.<java.io.IOException: java.lang.String getMessage()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r1, $r2, $r23);

     label45:
        goto label40;

     label46:
        $r24 := @caughtexception;

     label47:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label48:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label49:
        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r1, "Unable to read map from cache", $r24);

     label50:
        if $r18 == null goto label52;

     label51:
        virtualinvoke $r18.<java.io.FileInputStream: void close()>();

     label52:
        if $r19 == null goto label40;

     label53:
        virtualinvoke $r19.<java.io.ObjectInputStream: void close()>();

     label54:
        goto label40;

     label55:
        $r25 := @caughtexception;

     label56:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label57:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label58:
        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r36 = (java.io.IOException) $r25;

        $r2 = virtualinvoke r36.<java.io.IOException: java.lang.String getMessage()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r1, $r2, $r25);

     label59:
        goto label40;

     label60:
        $r26 := @caughtexception;

        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read lock released in getObjectFromDiskWithGUID.Holding ");

        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r12, $r1, $r2);

        throw $r26;

     label61:
        $r27 := @caughtexception;

     label62:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label63:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label64:
        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r1, "Unable to read map from cache", $r27);

     label65:
        if $r18 == null goto label67;

     label66:
        virtualinvoke $r18.<java.io.FileInputStream: void close()>();

     label67:
        if $r19 == null goto label40;

     label68:
        virtualinvoke $r19.<java.io.ObjectInputStream: void close()>();

     label69:
        goto label40;

     label70:
        $r28 := @caughtexception;

     label71:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label72:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label73:
        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r36 = (java.io.IOException) $r28;

        $r2 = virtualinvoke r36.<java.io.IOException: java.lang.String getMessage()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r1, $r2, $r28);

     label74:
        goto label40;

     label75:
        $r29 := @caughtexception;

     label76:
        if $r18 == null goto label78;

     label77:
        virtualinvoke $r18.<java.io.FileInputStream: void close()>();

     label78:
        if $r19 == null goto label80;

     label79:
        virtualinvoke $r19.<java.io.ObjectInputStream: void close()>();

     label80:
        throw $r29;

     label81:
        $r30 := @caughtexception;

     label82:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label83:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label84:
        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        r36 = (java.io.IOException) $r30;

        $r2 = virtualinvoke r36.<java.io.IOException: java.lang.String getMessage()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r1, $r2, $r30);

     label85:
        goto label80;

     label86:
        $r29 := @caughtexception;

        $r18 = $r5;

        goto label76;

     label87:
        $r29 := @caughtexception;

        $r19 = $r7;

        $r18 = $r5;

        goto label76;

     label88:
        $r27 := @caughtexception;

        $r18 = $r5;

        goto label62;

     label89:
        $r27 := @caughtexception;

        $r19 = $r7;

        $r18 = $r5;

        goto label62;

     label90:
        $r24 := @caughtexception;

        $r18 = $r5;

        goto label47;

     label91:
        $r24 := @caughtexception;

        $r19 = $r7;

        $r18 = $r5;

        goto label47;

     label92:
        return null;

        catch java.lang.Throwable from label01 to label02 with label60;
        catch java.lang.Throwable from label03 to label04 with label60;
        catch java.lang.Throwable from label05 to label06 with label60;
        catch java.lang.Throwable from label07 to label08 with label60;
        catch java.lang.Throwable from label09 to label10 with label60;
        catch java.lang.Throwable from label11 to label12 with label60;
        catch java.lang.Throwable from label13 to label14 with label60;
        catch java.io.IOException from label18 to label19 with label46;
        catch java.lang.ClassNotFoundException from label18 to label19 with label61;
        catch java.lang.Throwable from label16 to label17 with label75;
        catch java.lang.Throwable from label18 to label19 with label75;
        catch java.io.IOException from label21 to label22 with label90;
        catch java.lang.ClassNotFoundException from label21 to label22 with label88;
        catch java.lang.Throwable from label19 to label20 with label86;
        catch java.lang.Throwable from label21 to label22 with label86;
        catch java.io.IOException from label22 to label23 with label91;
        catch java.io.IOException from label25 to label26 with label91;
        catch java.io.IOException from label27 to label28 with label91;
        catch java.io.IOException from label30 to label31 with label91;
        catch java.io.IOException from label35 to label36 with label91;
        catch java.lang.ClassNotFoundException from label22 to label23 with label89;
        catch java.lang.ClassNotFoundException from label25 to label26 with label89;
        catch java.lang.ClassNotFoundException from label27 to label28 with label89;
        catch java.lang.ClassNotFoundException from label30 to label31 with label89;
        catch java.lang.ClassNotFoundException from label35 to label36 with label89;
        catch java.lang.Throwable from label22 to label24 with label87;
        catch java.lang.Throwable from label25 to label26 with label87;
        catch java.lang.Throwable from label27 to label28 with label87;
        catch java.lang.Throwable from label29 to label31 with label87;
        catch java.lang.Throwable from label32 to label33 with label87;
        catch java.lang.Throwable from label34 to label36 with label87;
        catch java.io.IOException from label37 to label38 with label41;
        catch java.io.IOException from label39 to label40 with label41;
        catch java.lang.Throwable from label37 to label38 with label60;
        catch java.lang.Throwable from label39 to label40 with label60;
        catch java.lang.Throwable from label42 to label43 with label60;
        catch java.lang.Throwable from label44 to label45 with label60;
        catch java.lang.Throwable from label47 to label48 with label75;
        catch java.lang.Throwable from label49 to label50 with label75;
        catch java.io.IOException from label51 to label52 with label55;
        catch java.io.IOException from label53 to label54 with label55;
        catch java.lang.Throwable from label51 to label52 with label60;
        catch java.lang.Throwable from label53 to label54 with label60;
        catch java.lang.Throwable from label56 to label57 with label60;
        catch java.lang.Throwable from label58 to label59 with label60;
        catch java.lang.Throwable from label62 to label63 with label75;
        catch java.lang.Throwable from label64 to label65 with label75;
        catch java.io.IOException from label66 to label67 with label70;
        catch java.io.IOException from label68 to label69 with label70;
        catch java.lang.Throwable from label66 to label67 with label60;
        catch java.lang.Throwable from label68 to label69 with label60;
        catch java.lang.Throwable from label71 to label72 with label60;
        catch java.lang.Throwable from label73 to label74 with label60;
        catch java.io.IOException from label77 to label78 with label81;
        catch java.io.IOException from label79 to label80 with label81;
        catch java.lang.Throwable from label77 to label78 with label60;
        catch java.lang.Throwable from label79 to label80 with label60;
        catch java.lang.Throwable from label80 to label81 with label60;
        catch java.lang.Throwable from label82 to label83 with label60;
        catch java.lang.Throwable from label84 to label85 with label60;
    }

    private void getObjectFromDiskWithGUID(java.lang.String, java.lang.String, java.util.EnumSet, com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler, android.os.Handler)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2;
        java.util.EnumSet $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler $r4;
        android.os.Handler $r5;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$4 $r6;
        java.util.Date $r7;
        boolean $z0;
        java.util.concurrent.ExecutorService $r8;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.EnumSet;

        $r4 := @parameter3: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler;

        $r5 := @parameter4: android.os.Handler;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean useDiskCaching>;

        if $z0 == 0 goto label1;

        $r6 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$4;

        specialinvoke $r6.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$4: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance,java.lang.String,java.lang.String,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler,java.util.Date,java.util.EnumSet)>($r0, $r1, $r2, $r4, $r5, $r7, $r3);

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ExecutorService executorService>;

        interfaceinvoke $r8.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r6);

        return;

     label1:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void callMissHandler(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler)>($r4, $r5);

        return;
    }

    private void initDiskCacheMetadata()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.io.File $r1;
        java.lang.RuntimeException $r2;
        java.lang.String $r3, $r9, varReplacer2376, varReplacer2378, varReplacer2380, varReplacer2381, varReplacer2382, varReplacer2384;
        boolean $z0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r5;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r6;
        java.lang.Class $r7;
        java.lang.StringBuilder $r8;
        int $i0, $i1, varReplacer2377, varReplacer2379, varReplacer2383;
        org.apache.commons.io.filefilter.IOFileFilter $r10, $r11;
        java.util.Collection $r12;
        java.util.List $r13;
        java.util.Iterator $r14;
        java.lang.Object $r15;
        java.lang.Throwable $r16;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

        if $r3 == null goto label01;

        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        varReplacer2382 = "Cannot create the disk cache metadata.  Non-existent disk cache.";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2382);

     label02:
        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        varReplacer2377 = 1;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen> = varReplacer2377;

        $r6 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label03:
        $r7 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label04:
        $r3 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        varReplacer2380 = "Got Read lock in initDiskCacheMetadata.Current lock count ";

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2380);

        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r6, $r3, $r9);

        $r1 = new java.io.File;

        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r3);

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

     label05:
        if $z0 != 0 goto label11;

     label06:
        $z0 = virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

     label07:
        if $z0 != 0 goto label11;

     label08:
        $r6 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label09:
        $r7 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label10:
        $r3 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        varReplacer2384 = "Error creating disk cache. Folder creation not successful";

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r6, $r3, varReplacer2384);

     label11:
        $r10 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r11 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

     label12:
        $r12 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r1, $r10, $r11);

        $r13 = (java.util.List) $r12;

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

     label14:
        if $z0 == 0 goto label27;

     label15:
        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.io.File) $r15;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

     label16:
        if $z0 != 0 goto label13;

     label17:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isHidden()>();

     label18:
        if $z0 != 0 goto label13;

     label19:
        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheName>;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>($r9);

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheName>;

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

     label20:
        $i0 = $i1 + $i0;

        $i0 = $i0 + 1;

     label21:
        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void addEntryToCacheMetadata(java.io.File,java.lang.String)>($r1, $r3);

     label22:
        goto label13;

     label23:
        $r2 := @caughtexception;

     label24:
        $r6 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label25:
        $r7 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label26:
        $r3 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        varReplacer2378 = "Error initializing disk cache";

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r6, $r3, varReplacer2378, $r2);

     label27:
        varReplacer2383 = 0;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen> = varReplacer2383;

        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r6 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r7 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r3 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        varReplacer2376 = "Read lock released in initDiskCacheMetadata.Holding ";

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2376);

        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r6, $r3, $r9);

        return;

     label28:
        $r16 := @caughtexception;

        varReplacer2379 = 0;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen> = varReplacer2379;

        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r6 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r7 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r3 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        varReplacer2381 = "Read lock released in initDiskCacheMetadata.Holding ";

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2381);

        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r6, $r3, $r9);

        throw $r16;

        catch java.lang.Throwable from label02 to label03 with label28;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.lang.RuntimeException from label12 to label14 with label23;
        catch java.lang.RuntimeException from label15 to label16 with label23;
        catch java.lang.RuntimeException from label17 to label18 with label23;
        catch java.lang.RuntimeException from label19 to label20 with label23;
        catch java.lang.RuntimeException from label21 to label22 with label23;
        catch java.lang.Throwable from label11 to label14 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label21 to label22 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
    }

    private void largeObjectFirstEviction(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType $r1, $r4;
        java.lang.Throwable $r2, $r19;
        java.io.File $r3;
        byte $b0;
        java.lang.Integer $r5, $r7;
        java.util.Map $r6;
        int $i1, $i2;
        java.util.Comparator $r8;
        java.util.List $r9;
        java.util.concurrent.locks.ReentrantReadWriteLock $r10;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r11;
        java.lang.Object $r12;
        java.util.Map$Entry $r13;
        java.lang.String $r14, $r16, varReplacer2411, varReplacer2412;
        java.lang.StringBuilder $r15;
        boolean $z0;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r17;
        java.lang.Class $r18;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType;

        $r4 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType AdobeCommonCacheCriticalEviction>;

        if $r1 != $r4 goto label15;

        $b0 = 10;

     label01:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b0);

        $r6 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes>;

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes>;

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Comparator numberComparator>;

        $r9 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.List getEntrySetsSortedByValue(java.util.Map,java.util.Comparator)>($r6, $r8);

     label02:
        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label03:
        $i1 = 0;

     label04:
        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label05:
        if $i1 >= $i2 goto label22;

     label06:
        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

     label07:
        if $i1 >= $i2 goto label22;

     label08:
        $r12 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i1);

        $r13 = (java.util.Map$Entry) $r12;

        $r12 = interfaceinvoke $r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.String) $r12;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        $r3 = new java.io.File;

     label10:
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r16);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

     label11:
        if $z0 == 0 goto label13;

     label12:
        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r3);

        varReplacer2411 = "LSF";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void notifyDiskCacheEviction(java.lang.String,java.lang.String)>($r14, varReplacer2411);

     label13:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void removeEntryFromCacheMetadata(java.lang.String)>($r14);

     label14:
        $i1 = $i1 + 1;

        goto label04;

     label15:
        $b0 = 3;

        goto label01;

     label16:
        $r2 := @caughtexception;

     label17:
        $r17 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label18:
        $r18 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label19:
        $r14 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        varReplacer2412 = "Could not remove cached file";

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r17, $r14, varReplacer2412, $r2);

     label20:
        goto label14;

     label21:
        $r19 := @caughtexception;

        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r19;

     label22:
        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.io.IOException from label10 to label11 with label16;
        catch java.io.IOException from label12 to label14 with label16;
        catch java.lang.Throwable from label09 to label11 with label21;
        catch java.lang.Throwable from label12 to label14 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
    }

    private void logDiskCacheHit(java.lang.String, java.lang.String, long)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2, $r5;
        long $l0;
        int $i1;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r3;
        java.lang.Class $r4;
        java.lang.StringBuilder $r6;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int diskCacheHits>;

        $i1 = $i1 + 1;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int diskCacheHits> = $i1;

        $r3 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r4 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disk cache hit for key:");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with guid ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and latency ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r3, $r5, $r1);

        return;
    }

    private void logMemCacheHit(java.lang.String, java.lang.String, long)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2, $r5;
        long $l0;
        int $i1;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r3;
        java.lang.Class $r4;
        java.lang.StringBuilder $r6;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int memCacheHits>;

        $i1 = $i1 + 1;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int memCacheHits> = $i1;

        $r3 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r4 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mem cache hit for key:");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with guid ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and latency ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r3, $r5, $r1);

        return;
    }

    private void lruEviction(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType $r1, $r3;
        java.io.File $r2;
        byte $b0;
        java.lang.Integer $r4, $r6;
        java.util.Map $r5;
        int $i1, $i2;
        java.util.Comparator $r7;
        java.util.List $r8;
        java.util.concurrent.locks.ReentrantReadWriteLock $r9;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r10;
        java.lang.Object $r11;
        java.util.Map$Entry $r12;
        java.lang.String $r13, $r14, $r18, varReplacer2407, varReplacer2408, varReplacer2409, varReplacer2410;
        boolean $z0;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r15;
        java.lang.Class $r16;
        java.lang.StringBuilder $r17;
        java.lang.Throwable $r19;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType;

        $r3 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheEvictionType AdobeCommonCacheCriticalEviction>;

        if $r1 != $r3 goto label19;

        $b0 = 10;

     label01:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b0);

        $r5 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheAccessTimes>;

        $i1 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheAccessTimes>;

        $r7 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Comparator lruComparator>;

        $r8 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.List getEntrySetsSortedByValue(java.util.Map,java.util.Comparator)>($r5, $r7);

     label02:
        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label03:
        $i1 = 0;

     label04:
        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label05:
        if $i1 >= $i2 goto label25;

     label06:
        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label07:
        if $i1 >= $i2 goto label25;

     label08:
        $r11 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i1);

        $r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke $r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r11;

        $r2 = new java.io.File;

        $r14 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r14, $r13);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

     label09:
        if $z0 == 0 goto label20;

     label10:
        $z0 = virtualinvoke $r2.<java.io.File: boolean delete()>();

        varReplacer2409 = "LRU";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void notifyDiskCacheEviction(java.lang.String,java.lang.String)>($r13, varReplacer2409);

     label11:
        if $z0 != 0 goto label15;

     label12:
        $r15 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label13:
        $r16 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label14:
        $r14 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        varReplacer2408 = "Could not remove cached file in disk";

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2408);

        $r18 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r15, $r14, $r18);

     label15:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void removeEntryFromCacheMetadata(java.lang.String)>($r13);

        $r15 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label16:
        $r16 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label17:
        $r13 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        varReplacer2407 = "Removing file in cache : ";

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2407);

        $r14 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r14 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r15, $r13, $r14);

     label18:
        $i1 = $i1 + 1;

        goto label04;

     label19:
        $b0 = 3;

        goto label01;

     label20:
        $r15 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label21:
        $r16 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label22:
        $r14 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        varReplacer2410 = "File doesn\'t exist in disk: ";

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2410);

        $r18 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r15, $r14, $r18);

     label23:
        goto label15;

     label24:
        $r19 := @caughtexception;

        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r19;

     label25:
        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

        catch java.lang.Throwable from label02 to label03 with label24;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label10 to label11 with label24;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label14 to label16 with label24;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
    }

    private void notifyDiskCacheEviction(java.lang.String, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2, $r5, varReplacer2413, varReplacer2414;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r3;
        java.lang.Class $r4;
        java.lang.StringBuilder $r6;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r4 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer2413 = "Disk cache eviction for key:";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2413);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        varReplacer2414 = ".Type: ";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2414);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r3, $r5, $r1);

        return;
    }

    private void printDiskCacheMetadata()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r2;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r3;
        java.lang.Class $r4;
        java.lang.String $r5, $r7, varReplacer2387, varReplacer2388, varReplacer2389, varReplacer2390, varReplacer2391, varReplacer2392, varReplacer2393, varReplacer2394, varReplacer2395, varReplacer2396, varReplacer2397, varReplacer2398, varReplacer2399, varReplacer2400, varReplacer2401, varReplacer2402;
        java.lang.StringBuilder $r6;
        int $i0;
        long $l1;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies $r8, $r9;
        java.util.Map $r10;
        java.util.Comparator $r11;
        java.util.List $r12;
        java.util.Iterator $r13;
        boolean $z0;
        java.lang.Object $r14;
        java.util.Map$Entry $r15;
        java.lang.Throwable $r16;
        java.text.DateFormat $r17;
        java.util.Date $r18;
        java.lang.Long $r19;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

     label01:
        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r3 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label02:
        $r4 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label03:
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer2389 = "Got Read lock in printDiskCacheMetadata.Current lock count ";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2389);

        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r3, $r5, $r7);

        varReplacer2401 = "============================================";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2401);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer2387 = "Disk Cache Size:";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2387);

        $l1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer2390 = "Disk Cache Location: ";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2390);

        $r5 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r5);

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies evictionPolicy>;

        $r9 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies AdobeCommonCacheEvictionLSF>;

     label04:
        if $r8 != $r9 goto label11;

     label05:
        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes>;

        $r11 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Comparator numberComparator>;

        $r12 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.List getEntrySetsSortedByValue(java.util.Map,java.util.Comparator)>($r10, $r11);

        varReplacer2392 = "============================================";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2392);

        varReplacer2398 = "Eviction Policy: Large Size First";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2398);

        varReplacer2402 = "Sorted Object Size Dictionary";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2402);

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z0 == 0 goto label11;

     label08:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (java.util.Map$Entry) $r14;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r14 = interfaceinvoke $r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (java.lang.String) $r14;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        varReplacer2391 = " : ";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2391);

        $r14 = interfaceinvoke $r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        varReplacer2399 = "bytes";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2399);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r5);

     label09:
        goto label06;

     label10:
        $r16 := @caughtexception;

        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r3 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r4 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer2396 = "Read lock released in printDiskCacheMetadata.Holding ";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2396);

        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r3, $r5, $r7);

        throw $r16;

     label11:
        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies evictionPolicy>;

        $r9 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies AdobeCommonCacheEvictionLRU>;

     label12:
        if $r8 != $r9 goto label18;

     label13:
        $r10 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheAccessTimes>;

        $r11 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Comparator numberComparator>;

        $r12 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.List getEntrySetsSortedByValue(java.util.Map,java.util.Comparator)>($r10, $r11);

        varReplacer2388 = "============================================";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2388);

        varReplacer2393 = "Eviction Policy: Least Recently Used";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2393);

        varReplacer2394 = "Sorted Access Times Dictionary";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2394);

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

     label15:
        if $z0 == 0 goto label18;

     label16:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (java.util.Map$Entry) $r14;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r14 = interfaceinvoke $r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (java.lang.String) $r14;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        varReplacer2395 = " : ";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2395);

        $r17 = staticinvoke <java.text.DateFormat: java.text.DateFormat getInstance()>();

        $r18 = new java.util.Date;

        $r14 = interfaceinvoke $r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.Long) $r14;

        $l1 = virtualinvoke $r19.<java.lang.Long: long longValue()>();

        specialinvoke $r18.<java.util.Date: void <init>(long)>($l1);

        $r5 = virtualinvoke $r17.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r18);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r5);

     label17:
        goto label14;

     label18:
        varReplacer2397 = "";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2397);

     label19:
        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r3 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r4 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer2400 = "Read lock released in printDiskCacheMetadata.Holding ";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2400);

        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r3, $r5, $r7);

        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label13 to label15 with label10;
        catch java.lang.Throwable from label16 to label17 with label10;
        catch java.lang.Throwable from label18 to label19 with label10;
    }

    private void removeEntryFromCacheMetadata(java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r6, varReplacer2415, varReplacer2416, varReplacer2417;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l0, $l1, $l2, $l3;
        java.lang.Object[] $r5;
        int $i4;
        byte $b5;
        java.util.concurrent.ScheduledFuture $r7;
        java.lang.StringBuilder $r8;
        java.text.DateFormat $r9;
        java.util.Date $r10;
        java.lang.Integer $r11;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheCreateTimes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Long) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheAccessTimes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Long) $r3;

        $l2 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r5 = newarray (java.lang.Object)[5];

        $l3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r5[0] = $r4;

        $r5[1] = $r1;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r5[2] = $r4;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r5[3] = $r4;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5[4] = $r4;

        varReplacer2415 = "( %d ): Deleted metadata from %s: (AT: %s) (CT: %s) (Sz: %d)";

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(varReplacer2415, $r5);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r6);

        $l0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $r2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Long) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $l0 = $l0 - $l1;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize> = $l0;

        $r2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheAccessTimes>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheCreateTimes>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.Map diskCacheObjectSizes>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $l0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $i4 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int getNormalEvictionThreshold()>();

        $l1 = (long) $i4;

        $b5 = $l0 cmp $l1;

        if $b5 >= 0 goto label1;

        $r7 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledFuture repeatingTimer>;

        if $r7 == null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        varReplacer2417 = "===== Sync stop timer at ";

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2417);

        $r9 = staticinvoke <java.text.SimpleDateFormat: java.text.DateFormat getInstance()>();

        $r10 = new java.util.Date;

        specialinvoke $r10.<java.util.Date: void <init>()>();

        $r1 = virtualinvoke $r9.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r10);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r1);

        $r5 = newarray (java.lang.Object)[2];

        $l0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5[0] = $r4;

        $i4 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int getNormalEvictionThreshold()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r5[1] = $r11;

        varReplacer2416 = "Stopping eviction timer: %d < %d";

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(varReplacer2416, $r5);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r1);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void stopRepeatingTimer()>();

     label1:
        return;
    }

    private void setImageToDisk(android.graphics.Bitmap, java.lang.String, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        android.graphics.Bitmap $r1;
        java.lang.String $r2, $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$7 $r4;
        boolean $z0;
        java.lang.Thread $r5;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen>;

        if $z0 == 0 goto label1;

        return;

     label1:
        if $r1 == null goto label2;

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean useDiskCaching>;

        if $z0 == 0 goto label2;

        $r5 = new java.lang.Thread;

        $r4 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$7;

        specialinvoke $r4.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$7: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance,java.lang.String,java.lang.String,android.graphics.Bitmap)>($r0, $r2, $r3, $r1);

        specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r4);

        virtualinvoke $r5.<java.lang.Thread: void start()>();

     label2:
        return;
    }

    private void setObjectToDisk(java.lang.Object, java.lang.String, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.Object $r1;
        java.lang.String $r2, $r3, $r14, $r16;
        java.io.FileOutputStream $r4, $r7;
        java.io.ObjectOutputStream $r5, $r8;
        java.io.File $r6, $r11;
        boolean $z0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r9;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r10;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r12;
        java.lang.Class $r13;
        java.lang.StringBuilder $r15;
        java.lang.Throwable $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen>;

        if $z0 != 0 goto label58;

        $z0 = $r1 instanceof java.io.Serializable;

        if $z0 != 0 goto label01;

        return;

     label01:
        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean useDiskCaching>;

        if $z0 == 0 goto label58;

        $r7 = null;

        $r8 = null;

     label02:
        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

     label03:
        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label04:
        $r6 = new java.io.File;

     label05:
        $r11 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.io.File getCacheDirectoryForGuid(java.lang.String)>($r2);

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, $r3);

     label06:
        $r4 = new java.io.FileOutputStream;

     label07:
        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

     label08:
        $r5 = new java.io.ObjectOutputStream;

     label09:
        specialinvoke $r5.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r4);

     label10:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label11:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label12:
        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

     label13:
        $r15 = new java.lang.StringBuilder;

     label14:
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to disk cache");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r12, $r14, $r16);

        virtualinvoke $r5.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r1);

        $r2 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r2, $r3);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void addEntryToCacheMetadata(java.io.File,java.lang.String)>($r6, $r2);

     label15:
        if $r5 == null goto label17;

     label16:
        virtualinvoke $r5.<java.io.ObjectOutputStream: void close()>();

     label17:
        if $r4 == null goto label19;

     label18:
        virtualinvoke $r4.<java.io.FileOutputStream: void close()>();

     label19:
        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

     label20:
        $r17 := @caughtexception;

     label21:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label22:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label23:
        $r2 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r2, "Error closing stream", $r17);

     label24:
        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

     label25:
        $r18 := @caughtexception;

        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r18;

     label26:
        $r19 := @caughtexception;

     label27:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label28:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label29:
        $r2 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r2, "Error serializing map", $r19);

     label30:
        if $r8 == null goto label32;

     label31:
        virtualinvoke $r8.<java.io.ObjectOutputStream: void close()>();

     label32:
        if $r7 == null goto label34;

     label33:
        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

     label34:
        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

     label35:
        $r20 := @caughtexception;

     label36:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label37:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label38:
        $r2 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r2, "Error closing stream", $r20);

     label39:
        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

     label40:
        $r21 := @caughtexception;

        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r21;

     label41:
        $r22 := @caughtexception;

     label42:
        if $r8 == null goto label44;

     label43:
        virtualinvoke $r8.<java.io.ObjectOutputStream: void close()>();

     label44:
        if $r7 == null goto label46;

     label45:
        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

     label46:
        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

     label47:
        throw $r22;

     label48:
        $r23 := @caughtexception;

     label49:
        $r12 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label50:
        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label51:
        $r2 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r12, $r2, "Error closing stream", $r23);

     label52:
        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        goto label47;

     label53:
        $r24 := @caughtexception;

        $r9 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r24;

     label54:
        $r22 := @caughtexception;

        $r7 = $r4;

        goto label42;

     label55:
        $r22 := @caughtexception;

        $r8 = $r5;

        $r7 = $r4;

        goto label42;

     label56:
        $r19 := @caughtexception;

        $r7 = $r4;

        goto label27;

     label57:
        $r19 := @caughtexception;

        $r8 = $r5;

        $r7 = $r4;

        goto label27;

     label58:
        return;

        catch java.io.IOException from label03 to label04 with label26;
        catch java.io.IOException from label05 to label06 with label26;
        catch java.io.IOException from label07 to label08 with label26;
        catch java.lang.Throwable from label02 to label08 with label41;
        catch java.io.IOException from label09 to label10 with label56;
        catch java.lang.Throwable from label08 to label10 with label54;
        catch java.io.IOException from label12 to label13 with label57;
        catch java.io.IOException from label14 to label15 with label57;
        catch java.lang.Throwable from label10 to label11 with label55;
        catch java.lang.Throwable from label12 to label15 with label55;
        catch java.io.IOException from label16 to label17 with label20;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label27 to label28 with label41;
        catch java.lang.Throwable from label29 to label30 with label41;
        catch java.io.IOException from label31 to label32 with label35;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.lang.Throwable from label31 to label32 with label40;
        catch java.lang.Throwable from label33 to label34 with label40;
        catch java.lang.Throwable from label36 to label37 with label40;
        catch java.lang.Throwable from label38 to label39 with label40;
        catch java.io.IOException from label43 to label44 with label48;
        catch java.io.IOException from label45 to label46 with label48;
        catch java.lang.Throwable from label43 to label44 with label53;
        catch java.lang.Throwable from label45 to label46 with label53;
        catch java.lang.Throwable from label49 to label50 with label53;
        catch java.lang.Throwable from label51 to label52 with label53;
    }

    private void startRepeatingTimer()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ScheduledFuture $r2;
        java.util.concurrent.ScheduledExecutorService $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$5 $r4;
        int varReplacer2421;
        long varReplacer2422, varReplacer2423;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledFuture repeatingTimer>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledFuture repeatingTimer>;

        varReplacer2421 = 0;

        interfaceinvoke $r2.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(varReplacer2421);

     label1:
        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledExecutorService scheduledExecutorService>;

        $r4 = new com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$5;

        specialinvoke $r4.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance$5: void <init>(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance)>($r0);

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        varReplacer2422 = 0L;

        varReplacer2423 = 60000L;

        $r2 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r4, varReplacer2422, varReplacer2423, $r1);

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledFuture repeatingTimer> = $r2;

        return;
    }

    private void stopRepeatingTimer()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.util.concurrent.ScheduledFuture $r1;
        int varReplacer2418;
        null_type varReplacer2419;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledFuture repeatingTimer>;

        if $r1 == null goto label1;

        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledFuture repeatingTimer>;

        varReplacer2418 = 0;

        interfaceinvoke $r1.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(varReplacer2418);

     label1:
        varReplacer2419 = null;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledFuture repeatingTimer> = varReplacer2419;

        return;
    }

    public void addImage(android.graphics.Bitmap, java.lang.String, java.lang.String, java.util.EnumSet)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        android.graphics.Bitmap $r1;
        java.lang.String $r2, $r3, $r7;
        java.util.EnumSet $r4;
        boolean $z0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions $r5;
        double $d0;
        byte $b0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache $r6;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.util.EnumSet;

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions AdobeCommonCacheKeepInMemoryCache>;

        $z0 = virtualinvoke $r4.<java.util.EnumSet: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $d0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double memCacheSize>;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $r6 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache>;

        $r7 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r2, $r3);

        virtualinvoke $r6.<com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r1);

     label2:
        $r5 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions AdobeCommonCacheKeepOnDiskCache>;

        $z0 = virtualinvoke $r4.<java.util.EnumSet: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $d0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double diskCacheSize>;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label3;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void setImageToDisk(android.graphics.Bitmap,java.lang.String,java.lang.String)>($r1, $r2, $r3);

     label3:
        return;
    }

    public void addObject(java.lang.Object, java.lang.String, java.lang.String, java.util.EnumSet)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.Object $r1;
        java.lang.String $r2, $r3, $r7;
        java.util.EnumSet $r4;
        boolean $z0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions $r5;
        double $d0;
        byte $b0;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache $r6;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.util.EnumSet;

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions AdobeCommonCacheKeepInMemoryCache>;

        $z0 = virtualinvoke $r4.<java.util.EnumSet: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $d0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double memCacheSize>;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label2;

        $r6 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache>;

        $r7 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r2, $r3);

        virtualinvoke $r6.<com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r1);

     label2:
        $r5 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheOptions AdobeCommonCacheKeepOnDiskCache>;

        $z0 = virtualinvoke $r4.<java.util.EnumSet: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $d0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double diskCacheSize>;

        $b0 = $d0 cmpl 0.0;

        if $b0 <= 0 goto label3;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void setObjectToDisk(java.lang.Object,java.lang.String,java.lang.String)>($r1, $r2, $r3);

     label3:
        return;
    }

    public void clear()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.Throwable $r1, $r10;
        java.io.File $r2;
        java.util.concurrent.ScheduledFuture $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r5;
        java.lang.String $r6;
        java.lang.StringBuilder $r7;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r8;
        java.lang.Class $r9;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void clearMemCache()>();

        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.ScheduledFuture repeatingTimer>;

        if $r3 == null goto label01;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void stopRepeatingTimer()>();

     label01:
        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

     label02:
        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label03:
        $r2 = new java.io.File;

        $r6 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

     label04:
        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r6);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r2);

     label05:
        $r7 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cache with cache name ");

     label07:
        $r6 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheName>;

     label08:
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deleted from location ");

     label09:
        $r6 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

     label10:
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r6);

     label11:
        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

     label12:
        $r1 := @caughtexception;

     label13:
        $r8 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label14:
        $r9 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label15:
        $r6 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r8, $r6, "Error deleting cache directory", $r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete cache ");

        $r6 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheName>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from location ");

        $r6 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r6);

     label16:
        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

     label17:
        $r10 := @caughtexception;

        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r10;

        catch java.io.IOException from label02 to label03 with label12;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label01 to label11 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    public void configureCache(java.lang.String, java.lang.String, java.lang.String, int, double, com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies, boolean)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2, $r3, varReplacer2367, varReplacer2368, varReplacer2370, varReplacer2372, varReplacer2373, varReplacer2374;
        int $i0, varReplacer2369, varReplacer2371;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies $r4;
        boolean $z0;
        long $l1, $l3;
        double $d0, $d1;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache $r5;
        java.lang.StringBuilder $r6;
        java.security.MessageDigest $r7;
        byte[] $r8;
        byte $b2;
        java.lang.AssertionError $r9;
        java.lang.Throwable $r10, $r12;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r11;
        java.lang.Class $r13;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $d0 := @parameter4: double;

        $r4 := @parameter5: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies;

        $z0 := @parameter6: boolean;

        if $r2 != null goto label01;

        varReplacer2370 = "Cannot configure a cache without an adobeID";

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>(varReplacer2370);

        return;

     label01:
        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheName> = $r1;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheAdobeId> = $r2;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCachePolicies evictionPolicy> = $r4;

        $r5 = new com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache;

        specialinvoke $r5.<com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache: void <init>(int)>($i0);

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache> = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        varReplacer2368 = "SHA-1";

        $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2368);

     label03:
        varReplacer2374 = "UTF-8";

        $r8 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer2374);

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r8);

     label04:
        $r8 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>();

        $r1 = staticinvoke <com.adobe.creativesdk.foundation.internal.utils.Util: java.lang.String bytesToHexString(byte[])>($r8);

     label05:
        if $z0 == 0 goto label24;

        $r6 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        varReplacer2369 = 55;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(varReplacer2369);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        $r6 = new java.lang.StringBuilder;

     label08:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label09:
        $r2 = <java.io.File: java.lang.String separator>;

     label10:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label11:
        $r1 = <java.io.File: java.lang.String separator>;

     label12:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label13:
        $r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheName>;

     label14:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir> = $r1;

        if $i0 > 200 goto label27;

        $d1 = (double) $i0;

     label16:
        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double memCacheSize> = $d1;

        $b2 = $d0 cmpg 2.68435456E8;

        if $b2 > 0 goto label28;

     label17:
        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double diskCacheSize> = $d0;

     label18:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void clearMemCache()>();

     label19:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void initDiskCacheMetadata()>();

        $z0 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean $assertionsDisabled>;

        if $z0 != 0 goto label29;

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen>;

        if $z0 == 0 goto label29;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label20:
        $r10 := @caughtexception;

        $r11 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label21:
        varReplacer2372 = "AdobeCommonCache::configureCache";

        varReplacer2373 = "ConfigureCache failed because of encoding exception";

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r11, varReplacer2372, varReplacer2373, $r10);

     label22:
        goto label04;

     label23:
        $r12 := @caughtexception;

        $r11 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level WARN>;

        $r13 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        varReplacer2367 = "MD5 Hash not available. Using unencrypted string";

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r11, $r1, varReplacer2367, $r12);

        goto label19;

     label24:
        $r6 = new java.lang.StringBuilder;

     label25:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        varReplacer2371 = 56;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(varReplacer2371);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label26:
        goto label07;

     label27:
        $d1 = 200.0;

        goto label16;

     label28:
        $d0 = 2.68435456E8;

        goto label17;

     label29:
        $l3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $i0 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int getNormalEvictionThreshold()>();

        $l1 = (long) $i0;

        $b2 = $l3 cmp $l1;

        if $b2 <= 0 goto label30;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheEviction()>();

     label30:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void printDiskCacheMetadata()>();

        return;

        catch java.security.NoSuchAlgorithmException from label02 to label03 with label23;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label20;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label23;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label23;
        catch java.security.NoSuchAlgorithmException from label06 to label07 with label23;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label23;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label23;
        catch java.security.NoSuchAlgorithmException from label12 to label13 with label23;
        catch java.security.NoSuchAlgorithmException from label14 to label15 with label23;
        catch java.security.NoSuchAlgorithmException from label18 to label19 with label23;
        catch java.security.NoSuchAlgorithmException from label21 to label22 with label23;
        catch java.security.NoSuchAlgorithmException from label25 to label26 with label23;
    }

    public boolean containsItemWithGUID(java.lang.String, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2, $r5;
        java.io.File $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache $r4;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7;
        java.util.concurrent.locks.ReentrantReadWriteLock $r8;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r9;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r10;
        java.lang.Class $r11;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r12;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache>;

        $r5 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r2);

        $r6 = virtualinvoke $r4.<com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache: java.lang.Object get(java.lang.Object)>($r5);

        if $r6 == null goto label1;

        return 1;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r5 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheDir>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = <java.io.File: java.lang.String separator>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r1 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r10 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label3:
        $r11 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label4:
        $r2 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got Read lock in containsItemWithGUID.Current lock count ");

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r10, $r2, $r5);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

     label5:
        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r10 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r11 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r1 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Released read lock in containsItemWithGUID.Current lock count ");

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r10, $r1, $r2);

        return $z0;

     label6:
        $r12 := @caughtexception;

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r10 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r11 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r1 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Released read lock in containsItemWithGUID.Current lock count ");

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $i0 = virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r10, $r1, $r2);

        throw $r12;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        specialinvoke $r0.<java.lang.Object: void finalize()>();

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void clearMemCache()>();

        return;
    }

    public void freezeCache(boolean)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        boolean $z0;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $z0 := @parameter0: boolean;

        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen> = $z0;

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean useDiskCaching> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public java.lang.String getCacheAdobeId()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        r1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String cacheAdobeId>;

        return r1;
    }

    public void getImageFromGUID(java.lang.String, java.lang.String, java.util.EnumSet, com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler, android.os.Handler)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2;
        java.util.EnumSet $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler $r4;
        android.os.Handler $r5;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation $r6;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.EnumSet;

        $r4 := @parameter3: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler;

        $r5 := @parameter4: android.os.Handler;

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r6 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation AdobeCommonCacheHitLocationMemory>;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void callHitHandler(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler,java.lang.Object,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation)>($r4, $r5, null, $r6);

        return;

     label2:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void getImageFromDiskWithGUID(java.lang.String,java.lang.String,java.util.EnumSet,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler)>($r1, $r2, $r3, $r4, $r5);

        return;
    }

    public java.lang.Object getObjectFromGUID(java.lang.String, java.lang.String, java.util.EnumSet)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2, $r5;
        java.util.EnumSet $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache $r4;
        java.lang.Object $r6;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.EnumSet;

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        return null;

     label2:
        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache>;

        $r5 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r2);

        $r6 = virtualinvoke $r4.<com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache: java.lang.Object get(java.lang.Object)>($r5);

        if $r6 != null goto label3;

        $r6 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.Object getObjectFromDiskWithGUID(java.lang.String,java.lang.String,java.util.EnumSet)>($r1, $r2, $r3);

     label3:
        return $r6;
    }

    public void getObjectFromGUID(java.lang.String, java.lang.String, java.util.EnumSet, com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler, android.os.Handler)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2, $r9;
        java.util.EnumSet $r3;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler $r4;
        android.os.Handler $r5;
        long $l0, $l1;
        java.util.Date $r6, $r11;
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation $r7;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache $r8;
        java.lang.Object $r10;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.EnumSet;

        $r4 := @parameter3: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler;

        $r5 := @parameter4: android.os.Handler;

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r7 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation AdobeCommonCacheHitLocationMemory>;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void callHitHandler(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler,java.lang.Object,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation)>($r4, $r5, null, $r7);

        return;

     label2:
        $r6 = new java.util.Date;

        specialinvoke $r6.<java.util.Date: void <init>()>();

        $r8 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache>;

        $r9 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r2);

        $r10 = virtualinvoke $r8.<com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache: java.lang.Object get(java.lang.Object)>($r9);

        if $r10 == null goto label3;

        $r11 = new java.util.Date;

        specialinvoke $r11.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r11.<java.util.Date: long getTime()>();

        $l1 = virtualinvoke $r6.<java.util.Date: long getTime()>();

        $l0 = $l0 - $l1;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void logMemCacheHit(java.lang.String,java.lang.String,long)>($r1, $r2, $l0);

        $r7 = <com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation AdobeCommonCacheHitLocationMemory>;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void callHitHandler(com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler,java.lang.Object,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHitLocation)>($r4, $r5, $r10, $r7);

        return;

     label3:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void getObjectFromDiskWithGUID(java.lang.String,java.lang.String,java.util.EnumSet,com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheHandler,android.os.Handler)>($r1, $r2, $r3, $r4, $r5);

        return;
    }

    public java.util.Date getTimestampForGUID(java.lang.String, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2;
        java.io.File $r3, $r4;
        boolean $z0;
        java.util.Date $r5;
        long $l0;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.io.File;

        $r4 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.io.File getCacheDirectoryForGuid(java.lang.String)>($r1);

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r2);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r5 = new java.util.Date;

        $l0 = virtualinvoke $r3.<java.io.File: long lastModified()>();

        specialinvoke $r5.<java.util.Date: void <init>(long)>($l0);

        return $r5;

     label1:
        return null;
    }

    protected void logCacheMiss(java.lang.String, java.lang.Integer)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r5;
        java.lang.Integer $r2;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r3;
        java.lang.Class $r4;
        java.lang.StringBuilder $r6;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Integer;

        $r3 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

        $r4 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cache miss for path:");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with latency ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r3, $r5, $r1);

        return;
    }

    protected void printStatistics()
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        int $i0, $i1;
        double $d0, $d1, $d2, $d3;
        java.lang.Object[] $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;
        long $l2;
        java.lang.Long $r5;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>("=====================================================");

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>("Cache Stats:");

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>("");

        $i0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int memCacheHits>;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int diskCacheHits>;

        $i0 = $i0 + $i1;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int cacheMisses>;

        $i0 = $i0 + $i1;

        $d1 = 0.0;

        $d2 = 0.0;

        $d3 = 0.0;

        if $i0 == 0 goto label1;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int memCacheHits>;

        $d1 = (double) $i1;

        $d1 = 100.0 * $d1;

        $d2 = (double) $i0;

        $d1 = $d1 / $d2;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int diskCacheHits>;

        $d2 = (double) $i1;

        $d2 = 100.0 * $d2;

        $d3 = (double) $i0;

        $d2 = $d2 / $d3;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int cacheMisses>;

        $d3 = (double) $i1;

        $d3 = 100.0 * $d3;

        $d0 = (double) $i0;

        $d3 = $d3 / $d0;

     label1:
        $d0 = $d1 + $d2;

        $d0 = $d0 + $d3;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = "Memory cache hit rate:";

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r1[1] = $r2;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int memCacheHits>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[2] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %6.2f%% %6d", $r1);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r4);

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = "Disk cache hit rate:";

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r1[1] = $r2;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int diskCacheHits>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[2] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %6.2f%% %6d", $r1);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r4);

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = "Cache miss rate:";

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r1[1] = $r2;

        $i1 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: int cacheMisses>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[2] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %6.2f%% %6d", $r1);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r4);

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = "Total:";

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[1] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[2] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %6.2f%% %6d", $r1);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r4);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>("");

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>("");

        $r1 = newarray (java.lang.Object)[2];

        $l2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $d1 = (double) $l2;

        $d1 = 100.0 * $d1;

        $d2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: double diskCacheSize>;

        $d1 = $d1 / $d2;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r1[0] = $r2;

        $l2 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: long currentDiskCacheSize>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[1] = $r5;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Disk Cache Usage: %6.2f%% %d bytes", $r1);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>($r4);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>("");

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>("=====================================================");

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void cacheLog(java.lang.String)>("");

        return;
    }

    public void removeItemWithGUID(java.lang.String, java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r2, $r5, $r12;
        boolean $z0;
        java.io.File $r3, $r6;
        com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock $r7;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r8;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r9;
        java.lang.Class $r10;
        java.lang.StringBuilder $r11;
        java.lang.Throwable $r13;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r3 = null;

        if $r2 == null goto label15;

        $r4 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache memCache>;

        $r5 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke $r4.<com.adobe.creativesdk.foundation.internal.cache.AdobeMemCache: java.lang.Object remove(java.lang.Object)>($r5);

        $r3 = new java.io.File;

        $r6 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.io.File getCacheDirectoryForGuid(java.lang.String)>($r1);

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r2);

     label02:
        $r7 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

     label03:
        if $r3 == null goto label14;

     label04:
        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

     label05:
        if $z0 == 0 goto label14;

     label06:
        $r9 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level INFO>;

     label07:
        $r10 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label08:
        $r5 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from disk cache");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r9, $r5, $r12);

        $z0 = virtualinvoke $r3.<java.io.File: boolean delete()>();

     label09:
        if $z0 != 0 goto label13;

     label10:
        $r9 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label11:
        $r10 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label12:
        $r5 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot delete file ");

        $r12 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String)>($r9, $r5, $r12);

     label13:
        $r1 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r2);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void removeEntryFromCacheMetadata(java.lang.String)>($r1);

     label14:
        $r7 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

     label15:
        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void clearMemCache()>();

        goto label02;

     label16:
        $r13 := @caughtexception;

        $r7 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label14 with label16;
    }

    public void removeSetWithGUID(java.lang.String)
    {
        com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance $r0;
        java.lang.String $r1, $r13;
        java.lang.Throwable $r2, $r14;
        boolean $z0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r4;
        java.io.File $r5, $r12;
        org.apache.commons.io.filefilter.IOFileFilter $r6, $r7;
        java.util.Collection $r8;
        java.util.List $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        com.adobe.creativesdk.foundation.internal.utils.logging.Level $r15;
        java.lang.Class $r16;

        $r0 := @this: com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance;

        $r1 := @parameter0: java.lang.String;

        $z0 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: boolean cacheFrozen>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        $r5 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.io.File getCacheDirectoryForGuid(java.lang.String)>($r1);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void clearMemCache()>();

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

     label02:
        if $z0 == 0 goto label16;

     label03:
        $z0 = virtualinvoke $r5.<java.io.File: boolean isDirectory()>();

     label04:
        if $z0 == 0 goto label16;

     label05:
        $r6 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r7 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r8 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r5, $r6, $r7);

        $r9 = (java.util.List) $r8;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z0 == 0 goto label15;

     label08:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.io.File) $r11;

        $r13 = virtualinvoke $r12.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r12.<java.io.File: boolean isDirectory()>();

     label09:
        if $z0 != 0 goto label06;

     label10:
        $z0 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("modified-data");

     label11:
        if $z0 != 0 goto label06;

     label12:
        $r13 = specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.lang.String getCacheKey(java.lang.String,java.lang.String)>($r1, $r13);

        specialinvoke $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: void removeEntryFromCacheMetadata(java.lang.String)>($r13);

     label13:
        goto label06;

     label14:
        $r14 := @caughtexception;

        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r14;

     label15:
        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r5);

     label16:
        $r3 = $r0.<com.adobe.creativesdk.foundation.internal.cache.AdobeCommonCacheInstance: java.util.concurrent.locks.ReentrantReadWriteLock diskReadWriteLock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

     label17:
        $r2 := @caughtexception;

     label18:
        $r15 = <com.adobe.creativesdk.foundation.internal.utils.logging.Level: com.adobe.creativesdk.foundation.internal.utils.logging.Level ERROR>;

     label19:
        $r16 = class "Lcom/adobe/creativesdk/foundation/internal/cache/AdobeCommonCacheInstance;";

     label20:
        $r1 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.adobe.creativesdk.foundation.internal.utils.logging.AdobeLogger: void log(com.adobe.creativesdk.foundation.internal.utils.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable)>($r15, $r1, "Error deleting directory from cache", $r2);

     label21:
        goto label16;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label18 to label19 with label14;
        catch java.lang.Throwable from label20 to label21 with label14;
    }
}
