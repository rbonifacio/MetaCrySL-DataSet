public class okhttp3.OkHttpClient extends java.lang.Object implements java.lang.Cloneable, okhttp3.Call$Factory
{
    private static final java.util.List A;
    private static final java.util.List z;
    final okhttp3.Dispatcher a;
    public final java.net.Proxy b;
    public final java.util.List c;
    public final java.util.List d;
    final java.util.List e;
    final java.util.List f;
    public final java.net.ProxySelector g;
    public final okhttp3.CookieJar h;
    public final okhttp3.Cache i;
    final okhttp3.internal.cache.InternalCache j;
    public final javax.net.SocketFactory k;
    public final javax.net.ssl.SSLSocketFactory l;
    final okhttp3.internal.tls.CertificateChainCleaner m;
    public final javax.net.ssl.HostnameVerifier n;
    public final okhttp3.CertificatePinner o;
    public final okhttp3.Authenticator p;
    public final okhttp3.Authenticator q;
    public final okhttp3.ConnectionPool r;
    public final okhttp3.Dns s;
    public final boolean t;
    public final boolean u;
    public final boolean v;
    public final int w;
    public final int x;
    public final int y;

    static void <clinit>()
    {
        okhttp3.Protocol[] $r0;
        okhttp3.Protocol $r1;
        java.util.List $r2;
        okhttp3.ConnectionSpec[] $r3;
        okhttp3.ConnectionSpec $r4;
        okhttp3.OkHttpClient$1 $r5;

        nop;

        $r0 = newarray (okhttp3.Protocol)[3];

        $r1 = <okhttp3.Protocol: okhttp3.Protocol HTTP_2>;

        $r0[0] = $r1;

        $r1 = <okhttp3.Protocol: okhttp3.Protocol SPDY_3>;

        $r0[1] = $r1;

        $r1 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_1>;

        $r0[2] = $r1;

        $r2 = staticinvoke <okhttp3.internal.Util: java.util.List a(java.lang.Object[])>($r0);

        <okhttp3.OkHttpClient: java.util.List z> = $r2;

        $r3 = newarray (okhttp3.ConnectionSpec)[3];

        $r4 = <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec a>;

        $r3[0] = $r4;

        $r4 = <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec b>;

        $r3[1] = $r4;

        $r4 = <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec c>;

        $r3[2] = $r4;

        $r2 = staticinvoke <okhttp3.internal.Util: java.util.List a(java.lang.Object[])>($r3);

        <okhttp3.OkHttpClient: java.util.List A> = $r2;

        $r5 = new okhttp3.OkHttpClient$1;

        specialinvoke $r5.<okhttp3.OkHttpClient$1: void <init>()>();

        <okhttp3.internal.Internal: okhttp3.internal.Internal a> = $r5;

        return;
    }

    public void <init>()
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.OkHttpClient$Builder $r1;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 = new okhttp3.OkHttpClient$Builder;

        specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>();

        specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1);

        return;
    }

    private void <init>(okhttp3.OkHttpClient$Builder)
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.OkHttpClient$Builder $r1;
        okhttp3.Dispatcher $r2;
        java.net.Proxy $r3;
        java.util.List $r4;
        java.net.ProxySelector $r5;
        okhttp3.CookieJar $r6;
        okhttp3.Cache $r7;
        okhttp3.internal.cache.InternalCache $r8;
        javax.net.SocketFactory $r9;
        java.util.Iterator $r10;
        boolean $z0, $z1;
        java.lang.Object $r11;
        okhttp3.ConnectionSpec $r12;
        javax.net.ssl.SSLSocketFactory $r13;
        okhttp3.internal.tls.CertificateChainCleaner $r14, $r17;
        javax.net.ssl.HostnameVerifier $r15;
        okhttp3.CertificatePinner $r16, $r18;
        okhttp3.Authenticator $r19;
        okhttp3.ConnectionPool $r20;
        okhttp3.Dns $r21;
        int $i0;
        javax.net.ssl.X509TrustManager $r22;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 := @parameter0: okhttp3.OkHttpClient$Builder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Dispatcher a>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Dispatcher a> = $r2;

        $r3 = $r1.<okhttp3.OkHttpClient$Builder: java.net.Proxy b>;

        $r0.<okhttp3.OkHttpClient: java.net.Proxy b> = $r3;

        $r4 = $r1.<okhttp3.OkHttpClient$Builder: java.util.List c>;

        $r0.<okhttp3.OkHttpClient: java.util.List c> = $r4;

        $r4 = $r1.<okhttp3.OkHttpClient$Builder: java.util.List d>;

        $r0.<okhttp3.OkHttpClient: java.util.List d> = $r4;

        $r4 = $r1.<okhttp3.OkHttpClient$Builder: java.util.List e>;

        $r4 = staticinvoke <okhttp3.internal.Util: java.util.List a(java.util.List)>($r4);

        $r0.<okhttp3.OkHttpClient: java.util.List e> = $r4;

        $r4 = $r1.<okhttp3.OkHttpClient$Builder: java.util.List f>;

        $r4 = staticinvoke <okhttp3.internal.Util: java.util.List a(java.util.List)>($r4);

        $r0.<okhttp3.OkHttpClient: java.util.List f> = $r4;

        $r5 = $r1.<okhttp3.OkHttpClient$Builder: java.net.ProxySelector g>;

        $r0.<okhttp3.OkHttpClient: java.net.ProxySelector g> = $r5;

        $r6 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.CookieJar h>;

        $r0.<okhttp3.OkHttpClient: okhttp3.CookieJar h> = $r6;

        $r7 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Cache i>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Cache i> = $r7;

        $r8 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.internal.cache.InternalCache j>;

        $r0.<okhttp3.OkHttpClient: okhttp3.internal.cache.InternalCache j> = $r8;

        $r9 = $r1.<okhttp3.OkHttpClient$Builder: javax.net.SocketFactory k>;

        $r0.<okhttp3.OkHttpClient: javax.net.SocketFactory k> = $r9;

        $r4 = $r0.<okhttp3.OkHttpClient: java.util.List d>;

        $r10 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $z0 = 0;

     label01:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (okhttp3.ConnectionSpec) $r11;

        if $z0 != 0 goto label02;

        $z0 = $r12.<okhttp3.ConnectionSpec: boolean d>;

        if $z0 == 0 goto label04;

     label02:
        $z0 = 1;

     label03:
        goto label01;

     label04:
        $z0 = 0;

        goto label03;

     label05:
        $r13 = $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory l>;

        if $r13 != null goto label06;

        if $z0 != 0 goto label09;

     label06:
        $r13 = $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory l>;

        $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory l> = $r13;

        $r14 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.internal.tls.CertificateChainCleaner m>;

        $r0.<okhttp3.OkHttpClient: okhttp3.internal.tls.CertificateChainCleaner m> = $r14;

     label07:
        $r15 = $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.HostnameVerifier n>;

        $r0.<okhttp3.OkHttpClient: javax.net.ssl.HostnameVerifier n> = $r15;

        $r16 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.CertificatePinner o>;

        $r14 = $r0.<okhttp3.OkHttpClient: okhttp3.internal.tls.CertificateChainCleaner m>;

        $r17 = $r16.<okhttp3.CertificatePinner: okhttp3.internal.tls.CertificateChainCleaner c>;

        if $r17 == $r14 goto label10;

        $r18 = new okhttp3.CertificatePinner;

        $r4 = $r16.<okhttp3.CertificatePinner: java.util.List b>;

        specialinvoke $r18.<okhttp3.CertificatePinner: void <init>(java.util.List,okhttp3.internal.tls.CertificateChainCleaner)>($r4, $r14);

     label08:
        $r0.<okhttp3.OkHttpClient: okhttp3.CertificatePinner o> = $r18;

        $r19 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator p>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator p> = $r19;

        $r19 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator q>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Authenticator q> = $r19;

        $r20 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.ConnectionPool r>;

        $r0.<okhttp3.OkHttpClient: okhttp3.ConnectionPool r> = $r20;

        $r21 = $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Dns s>;

        $r0.<okhttp3.OkHttpClient: okhttp3.Dns s> = $r21;

        $z0 = $r1.<okhttp3.OkHttpClient$Builder: boolean t>;

        $r0.<okhttp3.OkHttpClient: boolean t> = $z0;

        $z0 = $r1.<okhttp3.OkHttpClient$Builder: boolean u>;

        $r0.<okhttp3.OkHttpClient: boolean u> = $z0;

        $z0 = $r1.<okhttp3.OkHttpClient$Builder: boolean v>;

        $r0.<okhttp3.OkHttpClient: boolean v> = $z0;

        $i0 = $r1.<okhttp3.OkHttpClient$Builder: int w>;

        $r0.<okhttp3.OkHttpClient: int w> = $i0;

        $i0 = $r1.<okhttp3.OkHttpClient$Builder: int x>;

        $r0.<okhttp3.OkHttpClient: int x> = $i0;

        $i0 = $r1.<okhttp3.OkHttpClient$Builder: int y>;

        $r0.<okhttp3.OkHttpClient: int y> = $i0;

        return;

     label09:
        $r22 = staticinvoke <okhttp3.OkHttpClient: javax.net.ssl.X509TrustManager c()>();

        $r13 = staticinvoke <okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory a(javax.net.ssl.X509TrustManager)>($r22);

        $r0.<okhttp3.OkHttpClient: javax.net.ssl.SSLSocketFactory l> = $r13;

        $r14 = staticinvoke <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner a(javax.net.ssl.X509TrustManager)>($r22);

        $r0.<okhttp3.OkHttpClient: okhttp3.internal.tls.CertificateChainCleaner m> = $r14;

        goto label07;

     label10:
        $r18 = $r16;

        goto label08;
    }

    public void <init>(okhttp3.OkHttpClient$Builder, byte)
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.OkHttpClient$Builder $r1;
        byte $b0;

        nop;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 := @parameter0: okhttp3.OkHttpClient$Builder;

        $b0 := @parameter1: byte;

        specialinvoke $r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1);

        return;
    }

    static java.util.List a()
    {
        java.util.List r0;

        nop;

        r0 = <okhttp3.OkHttpClient: java.util.List z>;

        return r0;
    }

    private static javax.net.ssl.SSLSocketFactory a(javax.net.ssl.X509TrustManager)
    {
        javax.net.ssl.X509TrustManager $r0;
        javax.net.ssl.SSLContext $r1;
        java.lang.Object[] $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        java.lang.Throwable $r4;
        java.lang.AssertionError r5;
        javax.net.ssl.TrustManager[] r6;
        java.lang.String varReplacer6543;
        null_type varReplacer6544, varReplacer6545;

        nop;

        $r0 := @parameter0: javax.net.ssl.X509TrustManager;

     label1:
        varReplacer6543 = "TLS";

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer6543);

     label2:
        $r2 = newarray (javax.net.ssl.TrustManager)[1];

        $r2[0] = $r0;

        r6 = (javax.net.ssl.TrustManager[]) $r2;

     label3:
        varReplacer6544 = null;

        varReplacer6545 = null;

        virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer6544, r6, varReplacer6544);

        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

        r5 = new java.lang.AssertionError;

        specialinvoke r5.<java.lang.AssertionError: void <init>()>();

        throw r5;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }

    static java.util.List b()
    {
        java.util.List r0;

        nop;

        r0 = <okhttp3.OkHttpClient: java.util.List A>;

        return r0;
    }

    private static javax.net.ssl.X509TrustManager c()
    {
        java.lang.String $r0, varReplacer6546;
        javax.net.ssl.TrustManagerFactory $r1;
        javax.net.ssl.TrustManager[] $r2;
        int $i0;
        javax.net.ssl.TrustManager $r3;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r6;
        java.lang.AssertionError $r7;
        javax.net.ssl.X509TrustManager $r8;
        null_type varReplacer6547;

     label1:
        nop;

        $r0 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r0);

        varReplacer6547 = null;

        virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer6547);

        $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

     label2:
        $i0 = lengthof $r2;

        if $i0 != 1 goto label3;

        $r3 = $r2[0];

        $z0 = $r3 instanceof javax.net.ssl.X509TrustManager;

        if $z0 != 0 goto label7;

     label3:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

     label4:
        varReplacer6546 = "Unexpected default trust managers:";

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer6546);

        $r0 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

     label5:
        throw $r4;

     label6:
        $r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label7:
        $r3 = $r2[0];

        $r8 = (javax.net.ssl.X509TrustManager) $r3;

        return $r8;

        catch java.security.GeneralSecurityException from label1 to label2 with label6;
        catch java.security.GeneralSecurityException from label4 to label5 with label6;
    }

    public final okhttp3.Call a(okhttp3.Request)
    {
        okhttp3.OkHttpClient $r0;
        okhttp3.Request $r1;
        okhttp3.RealCall $r2;

        $r0 := @this: okhttp3.OkHttpClient;

        $r1 := @parameter0: okhttp3.Request;

        $r2 = new okhttp3.RealCall;

        specialinvoke $r2.<okhttp3.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request)>($r0, $r1);

        return $r2;
    }
}
