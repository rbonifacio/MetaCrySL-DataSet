public class com.esri.core.internal.io.handler.m extends java.lang.Object
{

    public void <init>()
    {
        com.esri.core.internal.io.handler.m $r0;

        $r0 := @this: com.esri.core.internal.io.handler.m;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.net.ssl.SSLContext a()
    {
        com.esri.core.internal.io.handler.f $r0, r5;
        javax.net.ssl.SSLContext $r1;
        java.lang.Object[] $r2;
        java.lang.Exception $r3;
        java.lang.String $r4, varReplacer3264;
        java.io.IOException r6;
        javax.net.ssl.TrustManager[] r7;
        null_type varReplacer3262, varReplacer3263, varReplacer3265;

     label1:
        nop;

        varReplacer3264 = "TLS";

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3264);

        $r2 = newarray (javax.net.ssl.TrustManager)[1];

     label2:
        r5 = new com.esri.core.internal.io.handler.f;

        $r0 = r5;

     label3:
        varReplacer3265 = null;

        specialinvoke r5.<com.esri.core.internal.io.handler.f: void <init>(java.security.KeyStore)>(varReplacer3265);

        $r2[0] = $r0;

        r7 = (javax.net.ssl.TrustManager[]) $r2;

        varReplacer3262 = null;

        varReplacer3263 = null;

        virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3262, r7, varReplacer3262);

     label4:
        return $r1;

     label5:
        $r3 := @caughtexception;

        r6 = new java.io.IOException;

        $r4 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke r6.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw r6;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static javax.net.ssl.SSLContext a(java.security.KeyStore, java.lang.String, java.security.KeyStore)
    {
        java.security.KeyStore $r0, $r2;
        java.lang.String $r1;
        javax.net.ssl.KeyManager[] $r3;
        javax.net.ssl.TrustManager[] $r4;
        javax.net.ssl.SSLContext $r5;
        java.lang.Exception $r6;
        java.io.IOException $r7;

        $r0 := @parameter0: java.security.KeyStore;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.security.KeyStore;

        $r3 = null;

        if $r0 == null goto label2;

     label1:
        $r3 = staticinvoke <com.esri.core.internal.io.handler.m: javax.net.ssl.KeyManager[] a(java.security.KeyStore,java.lang.String)>($r0, $r1);

     label2:
        $r4 = staticinvoke <com.esri.core.internal.io.handler.m: javax.net.ssl.TrustManager[] a(java.security.KeyStore)>($r2);

        $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r3, $r4, null);

     label3:
        return $r5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.io.IOException;

        $r1 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    private static javax.net.ssl.KeyManager[] a(java.security.KeyStore, java.lang.String)
    {
        java.security.KeyStore $r0;
        java.lang.String $r1, $r3;
        java.lang.IllegalArgumentException $r2;
        javax.net.ssl.KeyManagerFactory $r4;
        char[] $r5;
        javax.net.ssl.KeyManager[] $r6;

        $r0 := @parameter0: java.security.KeyStore;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keystore may not be null");

        throw $r2;

     label1:
        $r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r4 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r3);

        if $r1 == null goto label3;

        $r5 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

     label2:
        virtualinvoke $r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r0, $r5);

        $r6 = virtualinvoke $r4.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        return $r6;

     label3:
        $r5 = null;

        goto label2;
    }

    private static javax.net.ssl.TrustManager[] a(java.security.KeyStore)
    {
        java.security.KeyStore $r0;
        java.lang.Object[] $r1;
        com.esri.core.internal.io.handler.f r2;
        javax.net.ssl.TrustManager[] r3;

        $r0 := @parameter0: java.security.KeyStore;

        r2 = new com.esri.core.internal.io.handler.f;

        specialinvoke r2.<com.esri.core.internal.io.handler.f: void <init>(java.security.KeyStore)>($r0);

        $r1 = newarray (javax.net.ssl.TrustManager)[1];

        $r1[0] = r2;

        r3 = (javax.net.ssl.TrustManager[]) $r1;

        return r3;
    }
}
