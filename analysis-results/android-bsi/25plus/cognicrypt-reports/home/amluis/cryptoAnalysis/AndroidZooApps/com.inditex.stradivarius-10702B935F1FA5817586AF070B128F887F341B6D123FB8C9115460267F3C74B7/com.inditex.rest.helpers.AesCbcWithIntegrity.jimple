final class com.inditex.rest.helpers.AesCbcWithIntegrity extends java.lang.Object
{
    private static final int AES_KEY_LENGTH_BITS;
    private static final int BASE64_FLAGS;
    private static final java.lang.String CIPHER;
    private static final java.lang.String CIPHER_TRANSFORMATION;
    private static final java.lang.String HMAC_ALGORITHM;
    private static final int HMAC_KEY_LENGTH_BITS;
    private static final int IV_LENGTH_BYTES;
    private static final java.lang.String PBE_ALGORITHM;
    private static final int PBE_ITERATION_COUNT;
    private static final int PBE_SALT_LENGTH_BITS;
    private static final java.util.concurrent.atomic.AtomicBoolean PRNG_FIXED;
    private static final java.lang.String RANDOM_ALGORITHM;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicBoolean $r0;
        int varReplacer16494;

        nop;

        $r0 = new java.util.concurrent.atomic.AtomicBoolean;

        varReplacer16494 = 0;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(varReplacer16494);

        <com.inditex.rest.helpers.AesCbcWithIntegrity: java.util.concurrent.atomic.AtomicBoolean PRNG_FIXED> = $r0;

        return;
    }

    private void <init>()
    {
        com.inditex.rest.helpers.AesCbcWithIntegrity $r0;

        $r0 := @this: com.inditex.rest.helpers.AesCbcWithIntegrity;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static byte[] access$000(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, varReplacer16551;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        varReplacer16551 = 0;

        $r0 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] copyOfRange(byte[],int,int)>($r0, varReplacer16551, $i1);

        return $r0;
    }

    public static boolean constantTimeEq(byte[], byte[])
    {
        byte[] $r0, $r1;
        int $i0, $i1, varReplacer17184, varReplacer17185, varReplacer17186;
        byte $b2, $b3, $b4;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        varReplacer17185 = 0;

        return varReplacer17185;

     label1:
        $b2 = 0;

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $b3 = $r0[$i0];

        $b4 = $r1[$i0];

        $b3 = $b3 ^ $b4;

        $b2 = $b2 | $b3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        if $b2 != 0 goto label4;

        varReplacer17186 = 1;

        return varReplacer17186;

     label4:
        varReplacer17184 = 0;

        return varReplacer17184;
    }

    private static byte[] copyOfRange(byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, varReplacer16552, varReplacer16553;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = $i1 - 0;

        $r1 = newarray (byte)[$i1];

        varReplacer16552 = 0;

        varReplacer16553 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer16552, $r1, varReplacer16552, $i1);

        return $r1;
    }

    public static byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac, com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys) throws java.security.GeneralSecurityException
    {
        com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac $r0;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r1;
        javax.crypto.spec.IvParameterSpec $r2;
        byte[] $r3, $r4;
        javax.crypto.SecretKey $r5;
        boolean $z0;
        javax.crypto.Cipher $r6;
        java.security.GeneralSecurityException $r7;
        java.lang.String varReplacer17181, varReplacer17182;
        int varReplacer17183;

        nop;

        $r0 := @parameter0: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac;

        $r1 := @parameter1: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        $r3 = virtualinvoke $r0.<com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac: byte[] getIv()>();

        $r4 = virtualinvoke $r0.<com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac: byte[] getCipherText()>();

        $r3 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac: byte[] ivCipherConcat(byte[],byte[])>($r3, $r4);

        $r5 = virtualinvoke $r1.<com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys: javax.crypto.SecretKey getIntegrityKey()>();

        $r3 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>($r3, $r5);

        $r4 = virtualinvoke $r0.<com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac: byte[] getMac()>();

        $z0 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: boolean constantTimeEq(byte[],byte[])>($r3, $r4);

        if $z0 == 0 goto label1;

        varReplacer17182 = "AES/CBC/PKCS5Padding";

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer17182);

        $r5 = virtualinvoke $r1.<com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys: javax.crypto.SecretKey getConfidentialityKey()>();

        $r2 = new javax.crypto.spec.IvParameterSpec;

        $r3 = virtualinvoke $r0.<com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac: byte[] getIv()>();

        specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3);

        varReplacer17183 = 2;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer17183, $r5, $r2);

        $r3 = virtualinvoke $r0.<com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac: byte[] getCipherText()>();

        $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        return $r3;

     label1:
        $r7 = new java.security.GeneralSecurityException;

        varReplacer17181 = "MAC stored in civ does not match computed MAC.";

        specialinvoke $r7.<java.security.GeneralSecurityException: void <init>(java.lang.String)>(varReplacer17181);

        throw $r7;
    }

    public static java.lang.String decryptString(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac, com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys) throws java.io.UnsupportedEncodingException, java.security.GeneralSecurityException
    {
        com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac $r0;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r1;
        java.lang.String $r2, varReplacer17179;

        nop;

        $r0 := @parameter0: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac;

        $r1 := @parameter1: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        varReplacer17179 = "UTF-8";

        $r2 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: java.lang.String decryptString(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys,java.lang.String)>($r0, $r1, varReplacer17179);

        return $r2;
    }

    public static java.lang.String decryptString(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac, com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys, java.lang.String) throws java.io.UnsupportedEncodingException, java.security.GeneralSecurityException
    {
        com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac $r0;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r1;
        java.lang.String $r2, $r3, varReplacer17180;
        byte[] $r4;

        nop;

        $r0 := @parameter0: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac;

        $r1 := @parameter1: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        $r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.String;

        $r4 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>($r0, $r1);

        varReplacer17180 = "UTF-8";

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, varReplacer17180);

        return $r3;
    }

    public static com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(java.lang.String, com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys) throws java.io.UnsupportedEncodingException, java.security.GeneralSecurityException
    {
        java.lang.String $r0, varReplacer16508;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r1;
        com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac $r2;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        varReplacer16508 = "UTF-8";

        $r2 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(java.lang.String,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys,java.lang.String)>($r0, $r1, varReplacer16508);

        return $r2;
    }

    public static com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(java.lang.String, com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys, java.lang.String) throws java.io.UnsupportedEncodingException, java.security.GeneralSecurityException
    {
        java.lang.String $r0, $r2, varReplacer16512;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r1;
        byte[] $r3;
        com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac $r4;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        $r2 := @parameter2: java.lang.String;

        varReplacer16512 = "UTF-8";

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer16512);

        $r4 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>($r3, $r1);

        return $r4;
    }

    public static com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[], com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r3, $r6;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r1;
        javax.crypto.spec.IvParameterSpec $r2;
        javax.crypto.Cipher $r4;
        javax.crypto.SecretKey $r5;
        com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac $r7;
        java.lang.String varReplacer16513;
        int varReplacer16514;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        $r3 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] generateIv()>();

        varReplacer16513 = "AES/CBC/PKCS5Padding";

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer16513);

        $r5 = virtualinvoke $r1.<com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys: javax.crypto.SecretKey getConfidentialityKey()>();

        $r2 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3);

        varReplacer16514 = 1;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer16514, $r5, $r2);

        $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] getIV()>();

        $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        $r6 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac: byte[] ivCipherConcat(byte[],byte[])>($r3, $r0);

        $r5 = virtualinvoke $r1.<com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys: javax.crypto.SecretKey getIntegrityKey()>();

        $r6 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>($r6, $r5);

        $r7 = new com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac;

        specialinvoke $r7.<com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac: void <init>(byte[],byte[],byte[])>($r0, $r3, $r6);

        return $r7;
    }

    private static void fixPrng()
    {
        java.util.concurrent.atomic.AtomicBoolean $r0;
        boolean $z0;
        java.lang.Throwable $r1;
        int varReplacer16511;

        nop;

        $r0 = <com.inditex.rest.helpers.AesCbcWithIntegrity: java.util.concurrent.atomic.AtomicBoolean PRNG_FIXED>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label6;

        entermonitor class "Lcom/inditex/rest/helpers/AesCbcWithIntegrity$PrngFixes;";

     label1:
        $r0 = <com.inditex.rest.helpers.AesCbcWithIntegrity: java.util.concurrent.atomic.AtomicBoolean PRNG_FIXED>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label2;

        staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity$PrngFixes: void apply()>();

        $r0 = <com.inditex.rest.helpers.AesCbcWithIntegrity: java.util.concurrent.atomic.AtomicBoolean PRNG_FIXED>;

        varReplacer16511 = 1;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(varReplacer16511);

     label2:
        exitmonitor class "Lcom/inditex/rest/helpers/AesCbcWithIntegrity$PrngFixes;";

     label3:
        return;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Lcom/inditex/rest/helpers/AesCbcWithIntegrity$PrngFixes;";

     label5:
        throw $r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static byte[] generateIv() throws java.security.GeneralSecurityException
    {
        byte[] $r0;
        int varReplacer16536;

        nop;

        varReplacer16536 = 16;

        $r0 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] randomBytes(int)>(varReplacer16536);

        return $r0;
    }

    public static com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey() throws java.security.GeneralSecurityException
    {
        javax.crypto.spec.SecretKeySpec $r0;
        javax.crypto.KeyGenerator $r1;
        javax.crypto.SecretKey $r2;
        byte[] $r3;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r4;
        java.lang.String varReplacer16504, varReplacer16505;
        int varReplacer16506, varReplacer16507;

        nop;

        staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: void fixPrng()>();

        varReplacer16504 = "AES";

        $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer16504);

        varReplacer16506 = 256;

        virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(int)>(varReplacer16506);

        $r2 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        varReplacer16507 = 32;

        $r3 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] randomBytes(int)>(varReplacer16507);

        $r0 = new javax.crypto.spec.SecretKeySpec;

        varReplacer16505 = "HmacSHA256";

        specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16505);

        $r4 = new com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        specialinvoke $r4.<com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys: void <init>(javax.crypto.SecretKey,javax.crypto.SecretKey)>($r2, $r0);

        return $r4;
    }

    public static com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String, java.lang.String) throws java.security.GeneralSecurityException
    {
        java.lang.String $r0, $r1;
        byte[] $r2;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r1, 2);

        $r3 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>($r0, $r2);

        return $r3;
    }

    public static com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String, byte[]) throws java.security.GeneralSecurityException
    {
        java.lang.String $r0;
        byte[] $r1, $r8;
        javax.crypto.spec.SecretKeySpec $r2, $r3;
        javax.crypto.spec.PBEKeySpec $r4;
        char[] $r5;
        javax.crypto.SecretKeyFactory $r6;
        javax.crypto.SecretKey $r7;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r9;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: void fixPrng()>();

        $r4 = new javax.crypto.spec.PBEKeySpec;

        $r5 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r1, 10000, 512);

        $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1");

        $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4);

        $r8 = interfaceinvoke $r7.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r1 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] copyOfRange(byte[],int,int)>($r8, 0, 32);

        $r8 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] copyOfRange(byte[],int,int)>($r8, 32, 64);

        $r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

        $r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "HmacSHA256");

        $r9 = new com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        specialinvoke $r9.<com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys: void <init>(javax.crypto.SecretKey,javax.crypto.SecretKey)>($r2, $r3);

        return $r9;
    }

    public static byte[] generateMac(byte[], javax.crypto.SecretKey) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        byte[] $r0;
        javax.crypto.SecretKey $r1;
        javax.crypto.Mac $r2;
        java.lang.String varReplacer16532;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: javax.crypto.SecretKey;

        varReplacer16532 = "HmacSHA256";

        $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer16532);

        virtualinvoke $r2.<javax.crypto.Mac: void init(java.security.Key)>($r1);

        $r0 = virtualinvoke $r2.<javax.crypto.Mac: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    public static byte[] generateSalt() throws java.security.GeneralSecurityException
    {
        byte[] $r0;

        $r0 = staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] randomBytes(int)>(256);

        return $r0;
    }

    public static java.lang.String keyString(com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)
    {
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r0;
        java.lang.String $r1;

        $r0 := @parameter0: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        $r1 = virtualinvoke $r0.<com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys: java.lang.String toString()>();

        return $r1;
    }

    public static com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String) throws java.security.InvalidKeyException
    {
        java.lang.String $r0, varReplacer16495, varReplacer16497, varReplacer16498, varReplacer16499, varReplacer16500, varReplacer16502;
        java.lang.String[] $r1;
        int $i0, varReplacer16496, varReplacer16501, varReplacer16503;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3, $r5;
        java.security.InvalidKeyException $r4;
        com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys $r6;
        javax.crypto.spec.SecretKeySpec $r7, $r8;

        nop;

        $r0 := @parameter0: java.lang.String;

        varReplacer16500 = ":";

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer16500);

        $i0 = lengthof $r1;

        if $i0 == 2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        varReplacer16495 = "Cannot parse aesKey:hmacKey";

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer16495);

        throw $r2;

     label1:
        $r0 = $r1[0];

        varReplacer16496 = 2;

        $r3 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r0, varReplacer16496);

        $i0 = lengthof $r3;

        if $i0 == 32 goto label2;

        $r4 = new java.security.InvalidKeyException;

        varReplacer16497 = "Base64 decoded key is not 256 bytes";

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>(varReplacer16497);

        throw $r4;

     label2:
        $r0 = $r1[1];

        varReplacer16503 = 2;

        $r5 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r0, varReplacer16503);

        $i0 = lengthof $r5;

        if $i0 == 32 goto label3;

        $r4 = new java.security.InvalidKeyException;

        varReplacer16498 = "Base64 decoded key is not 256 bytes";

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>(varReplacer16498);

        throw $r4;

     label3:
        $r6 = new com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys;

        $r7 = new javax.crypto.spec.SecretKeySpec;

        $i0 = lengthof $r3;

        varReplacer16501 = 0;

        varReplacer16502 = "AES";

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer16501, $i0, varReplacer16502);

        $r8 = new javax.crypto.spec.SecretKeySpec;

        varReplacer16499 = "HmacSHA256";

        specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer16499);

        specialinvoke $r6.<com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys: void <init>(javax.crypto.SecretKey,javax.crypto.SecretKey)>($r7, $r8);

        return $r6;
    }

    private static byte[] randomBytes(int) throws java.security.GeneralSecurityException
    {
        int $i0;
        byte[] $r0;
        java.security.SecureRandom $r1;
        java.lang.String varReplacer16509, varReplacer16510;

        nop;

        $i0 := @parameter0: int;

        staticinvoke <com.inditex.rest.helpers.AesCbcWithIntegrity: void fixPrng()>();

        varReplacer16509 = "SHA1PRNG";

        varReplacer16510 = "Crypto";

        $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer16509, varReplacer16510);

        $r0 = newarray (byte)[$i0];

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0);

        return $r0;
    }

    public static java.lang.String saltString(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r0, 2);

        return $r1;
    }
}
