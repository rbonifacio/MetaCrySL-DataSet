Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: varReplacer945
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer945)
		Method: <com.worklight.utils.SecurityUtils: java.io.InputStream decryptData(java.io.InputStream,byte[])>
		SHA-256: a359378605a4e6842be59f507120b1a61db5a303c2f60db11e080053d02a4bee
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer943)
		Method: <com.worklight.utils.SecurityUtils: java.io.InputStream decryptData(java.io.InputStream,byte[])>
		SHA-256: 33bf0335b5f40ad533d2f81f49e1cf36397699fd5d30c98b940d1392e98650c4
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.CipherInputStream
		Statement: specialinvoke $r2.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r0, $r4)
		Method: <com.worklight.utils.SecurityUtils: java.io.InputStream decryptData(java.io.InputStream,byte[])>
		SHA-256: 1a00442bc8a659def77cd20b039e8ea8fd7fbf8cecea2dc767c1ad62a4eeeba6
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer945)
		Method: <com.worklight.utils.SecurityUtils: java.io.InputStream decryptData(java.io.InputStream,byte[])>
		SHA-256: cc5bc0069c37bf349686b88de994279db7ee74b226441e5624a0a7fa580d257d
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.worklight.utils.SecurityUtils: byte[] hashData(byte[],java.lang.String)>
		SHA-256: cfbd0db549cc688aba74372d3db5ee362a178ca789cd1fa512fe2b65154ccde9
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer100)
		Method: <com.worklight.common.security.PRNGFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: 7aaaf65c44c51a6966183b7a5a9311c1363acd302646c091cb7ce81e5194b6ba
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.worklight.common.security.PRNGFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: 87337823ba78b3cd832175897f47461de564d31a83b3ee130b2fa70551711f04
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer435)
		Method: <com.worklight.location.internal.deviceContextPiggybacker.DeviceContextPiggybacker: void <init>(com.worklight.location.internal.DeviceContextImpl)>
		SHA-256: ebda344547ac50c1fdf972b41db345f395c6fb8a52de1d214386b5982cca4438
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer886)
		Method: <com.worklight.utils.SecurityUtils: byte[] hashData(byte[],java.lang.String)>
		SHA-256: a2595386ed139aca86980ebc7d79c0373241c194734c38abbdffd73ad3529cd5
		Secure: false

Findings in Java Class: com.worklight.utils.SecurityUtils

	 in Method: byte[] hashData(byte[],java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #a2595386ed139aca86980ebc7d79c0373241c194734c38abbdffd73ad3529cd5)
			First parameter (with value "SHA-1") should be any of {SHA256, SHA384, SHA-256, SHA-512, SHA-384, SHA512}
			at statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer886)


	 in Method: java.io.InputStream decryptData(java.io.InputStream,byte[])
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #33bf0335b5f40ad533d2f81f49e1cf36397699fd5d30c98b940d1392e98650c4)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: specialinvoke $r2.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r0, $r4)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #33bf0335b5f40ad533d2f81f49e1cf36397699fd5d30c98b940d1392e98650c4)
			First parameter (with value "AES") should be any of AES/{OFB, CBC, CTS, CTR, CFB}
			at statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer943)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer945)


Findings in Java Class: com.worklight.androidgap.PrepackagedAssetsManager

	 in Method: boolean unzipAssetsToLocalCopy()
		IncompleteOperationError violating CrySL rule for javax.crypto.CipherInputStream (on Object #1a00442bc8a659def77cd20b039e8ea8fd7fbf8cecea2dc767c1ad62a4eeeba6)
			Operation on object of type javax.crypto.CipherInputStream object not completed. Expected call to read
			at statement: staticinvoke <com.worklight.nativeandroid.common.WLUtils: void unpack(java.io.InputStream,java.io.File)>($r9, $r11)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 9

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 2
	RequiredPredicateError: 1
	IncompleteOperationError: 2
=====================================================================