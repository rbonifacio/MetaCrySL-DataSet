public class com.loopj.android.http.MySSLSocketFactory extends org.apache.http.conn.ssl.SSLSocketFactory
{
    javax.net.ssl.SSLContext sslContext;

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        com.loopj.android.http.MySSLSocketFactory $r0;
        java.security.KeyStore $r1;
        javax.net.ssl.SSLContext $r2;
        java.lang.Object[] $r3;
        com.loopj.android.http.MySSLSocketFactory$1 r4;
        javax.net.ssl.TrustManager[] r5;
        java.lang.String varReplacer1856;
        null_type varReplacer1857, varReplacer1858;

        nop;

        $r0 := @this: com.loopj.android.http.MySSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        specialinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore)>($r1);

        varReplacer1856 = "TLS";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1856);

        $r0.<com.loopj.android.http.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext> = $r2;

        r4 = new com.loopj.android.http.MySSLSocketFactory$1;

        specialinvoke r4.<com.loopj.android.http.MySSLSocketFactory$1: void <init>(com.loopj.android.http.MySSLSocketFactory)>($r0);

        $r2 = $r0.<com.loopj.android.http.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r3 = newarray (javax.net.ssl.TrustManager)[1];

        $r3[0] = r4;

        r5 = (javax.net.ssl.TrustManager[]) $r3;

        varReplacer1857 = null;

        varReplacer1858 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1857, r5, varReplacer1857);

        return;
    }

    public static org.apache.http.conn.ssl.SSLSocketFactory getFixedSocketFactory()
    {
        java.lang.Throwable $r0;
        com.loopj.android.http.MySSLSocketFactory $r1;
        java.security.KeyStore $r2;
        org.apache.http.conn.ssl.X509HostnameVerifier $r3;
        org.apache.http.conn.ssl.SSLSocketFactory $r4;

     label1:
        nop;

        $r1 = new com.loopj.android.http.MySSLSocketFactory;

        $r2 = staticinvoke <com.loopj.android.http.MySSLSocketFactory: java.security.KeyStore getKeystore()>();

        specialinvoke $r1.<com.loopj.android.http.MySSLSocketFactory: void <init>(java.security.KeyStore)>($r2);

        $r3 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER>;

        virtualinvoke $r1.<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>($r3);

     label2:
        return $r1;

     label3:
        $r0 := @caughtexception;

        virtualinvoke $r0.<java.lang.Throwable: void printStackTrace()>();

        $r4 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>();

        return $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.security.KeyStore getKeystore()
    {
        java.lang.Throwable $r0;
        java.security.KeyStore $r1, $r3;
        java.lang.String $r2;
        null_type varReplacer1854, varReplacer1855;

        nop;

        $r1 = null;

     label1:
        $r2 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r2);

     label2:
        $r1 = $r3;

     label3:
        varReplacer1854 = null;

        varReplacer1855 = null;

        virtualinvoke $r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer1854, varReplacer1854);

     label4:
        return $r3;

     label5:
        $r0 := @caughtexception;

        virtualinvoke $r0.<java.lang.Throwable: void printStackTrace()>();

        return $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static java.security.KeyStore getKeystoreOfCA(java.io.InputStream)
    {
        java.io.InputStream $r0;
        java.io.BufferedInputStream $r1, $r2, r15;
        java.security.cert.Certificate $r3, $r5;
        java.security.cert.CertificateFactory $r4;
        java.lang.String $r6;
        java.security.KeyStore $r7, $r8;
        java.lang.Throwable $r9, $r10, $r11, $r12, $r13;
        java.lang.Exception $r14;
        java.io.IOException r16;
        java.security.cert.CertificateException r17;

        $r0 := @parameter0: java.io.InputStream;

        $r2 = null;

        $r3 = null;

     label01:
        $r4 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label02:
        r15 = new java.io.BufferedInputStream;

     label03:
        $r1 = r15;

     label04:
        specialinvoke r15.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r0);

     label05:
        $r5 = virtualinvoke $r4.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1);

     label06:
        $r3 = $r5;

        if $r1 == null goto label08;

     label07:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label08:
        $r6 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r7 = null;

     label09:
        $r8 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r6);

     label10:
        $r7 = $r8;

     label11:
        virtualinvoke $r8.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, null);

        virtualinvoke $r8.<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)>("ca", $r3);

     label12:
        return $r8;

     label13:
        $r9 := @caughtexception;

        r16 = (java.io.IOException) $r9;

        virtualinvoke r16.<java.io.IOException: void printStackTrace()>();

        goto label08;

     label14:
        $r10 := @caughtexception;

     label15:
        r17 = (java.security.cert.CertificateException) $r10;

        virtualinvoke r17.<java.security.cert.CertificateException: void printStackTrace()>();

     label16:
        if $r2 == null goto label08;

     label17:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label18:
        goto label08;

     label19:
        $r11 := @caughtexception;

        r16 = (java.io.IOException) $r11;

        virtualinvoke r16.<java.io.IOException: void printStackTrace()>();

        goto label08;

     label20:
        $r12 := @caughtexception;

     label21:
        if $r2 == null goto label23;

     label22:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label23:
        throw $r12;

     label24:
        $r13 := @caughtexception;

        r16 = (java.io.IOException) $r13;

        virtualinvoke r16.<java.io.IOException: void printStackTrace()>();

        goto label23;

     label25:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

        return $r7;

     label26:
        $r12 := @caughtexception;

        $r2 = $r1;

        goto label21;

     label27:
        $r10 := @caughtexception;

        $r2 = $r1;

        goto label15;

        catch java.security.cert.CertificateException from label01 to label02 with label14;
        catch java.security.cert.CertificateException from label04 to label05 with label14;
        catch java.lang.Throwable from label01 to label03 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.security.cert.CertificateException from label05 to label06 with label27;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.lang.Exception from label09 to label10 with label25;
        catch java.lang.Exception from label11 to label12 with label25;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.IOException from label22 to label23 with label24;
    }

    public static org.apache.http.impl.client.DefaultHttpClient getNewHttpClient(java.security.KeyStore)
    {
        java.security.KeyStore $r0;
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager $r1;
        java.lang.Exception $r2;
        org.apache.http.params.BasicHttpParams $r3;
        org.apache.http.conn.scheme.SchemeRegistry $r4;
        com.loopj.android.http.MySSLSocketFactory $r5;
        org.apache.http.conn.scheme.PlainSocketFactory $r6;
        org.apache.http.conn.scheme.Scheme $r7;
        org.apache.http.HttpVersion $r8;
        org.apache.http.impl.client.DefaultHttpClient $r9;

        $r0 := @parameter0: java.security.KeyStore;

        $r5 = new com.loopj.android.http.MySSLSocketFactory;

     label01:
        specialinvoke $r5.<com.loopj.android.http.MySSLSocketFactory: void <init>(java.security.KeyStore)>($r0);

     label02:
        $r4 = new org.apache.http.conn.scheme.SchemeRegistry;

     label03:
        specialinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: void <init>()>();

     label04:
        $r7 = new org.apache.http.conn.scheme.Scheme;

     label05:
        $r6 = staticinvoke <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>();

        specialinvoke $r7.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>("http", $r6, 80);

        virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r7);

     label06:
        $r7 = new org.apache.http.conn.scheme.Scheme;

     label07:
        specialinvoke $r7.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>("https", $r5, 443);

        virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r7);

     label08:
        $r3 = new org.apache.http.params.BasicHttpParams;

     label09:
        specialinvoke $r3.<org.apache.http.params.BasicHttpParams: void <init>()>();

     label10:
        $r8 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label11:
        staticinvoke <org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)>($r3, $r8);

        staticinvoke <org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)>($r3, "UTF-8");

     label12:
        $r1 = new org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

     label13:
        specialinvoke $r1.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>($r3, $r4);

     label14:
        $r9 = new org.apache.http.impl.client.DefaultHttpClient;

     label15:
        specialinvoke $r9.<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>($r1, $r3);

     label16:
        return $r9;

     label17:
        $r2 := @caughtexception;

        $r9 = new org.apache.http.impl.client.DefaultHttpClient;

        specialinvoke $r9.<org.apache.http.impl.client.DefaultHttpClient: void <init>()>();

        return $r9;

        catch java.lang.Exception from label01 to label02 with label17;
        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Exception from label05 to label06 with label17;
        catch java.lang.Exception from label07 to label08 with label17;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Exception from label11 to label12 with label17;
        catch java.lang.Exception from label13 to label14 with label17;
        catch java.lang.Exception from label15 to label16 with label17;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        com.loopj.android.http.MySSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3;

        $r0 := @this: com.loopj.android.http.MySSLSocketFactory;

        $r1 = $r0.<com.loopj.android.http.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        return $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException
    {
        com.loopj.android.http.MySSLSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        javax.net.ssl.SSLContext $r3;
        javax.net.ssl.SSLSocketFactory $r4;

        $r0 := @this: com.loopj.android.http.MySSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = $r0.<com.loopj.android.http.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r1 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);

        return $r1;
    }

    public void fixHttpsURLConnection()
    {
        com.loopj.android.http.MySSLSocketFactory $r0;
        javax.net.ssl.SSLSocketFactory $r1;
        javax.net.ssl.SSLContext $r2;

        $r0 := @this: com.loopj.android.http.MySSLSocketFactory;

        $r2 = $r0.<com.loopj.android.http.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r1 = virtualinvoke $r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        staticinvoke <javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>($r1);

        return;
    }
}
