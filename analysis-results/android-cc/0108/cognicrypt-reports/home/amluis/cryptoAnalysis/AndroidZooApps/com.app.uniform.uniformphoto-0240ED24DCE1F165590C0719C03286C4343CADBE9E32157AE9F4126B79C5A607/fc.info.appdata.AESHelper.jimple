public class fc.info.appdata.AESHelper extends java.lang.Object
{
    private static final java.lang.String CIPHER_ALGORITHM;
    private static final java.lang.String DELIMITER;
    private static final int ITERATION_COUNT;
    private static final int KEY_LENGTH;
    private static final java.lang.String PBKDF2_DERIVATION_ALGORITHM;
    private static final int PKCS5_SALT_LENGTH;
    private static final java.security.SecureRandom random;

    static void <clinit>()
    {
        java.security.SecureRandom $r0;

        nop;

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        <fc.info.appdata.AESHelper: java.security.SecureRandom random> = $r0;

        return;
    }

    public void <init>()
    {
        fc.info.appdata.AESHelper $r0;

        $r0 := @this: fc.info.appdata.AESHelper;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String decrypt(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer627, varReplacer628, varReplacer629, varReplacer630;
        javax.crypto.spec.IvParameterSpec $r2;
        java.lang.String[] $r3;
        int $i0, varReplacer631;
        java.lang.IllegalArgumentException $r4;
        byte[] $r5, $r6, $r7;
        javax.crypto.SecretKey $r8;
        javax.crypto.Cipher $r9;
        java.lang.Throwable $r10, $r12;
        java.lang.RuntimeException $r11;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        varReplacer629 = "]";

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer629);

        $i0 = lengthof $r3;

        if $i0 == 3 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        varReplacer627 = "Invalid encypted text format";

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer627);

        throw $r4;

     label1:
        $r1 = $r3[0];

        $r5 = staticinvoke <fc.info.appdata.AESHelper: byte[] fromBase64(java.lang.String)>($r1);

        $r1 = $r3[1];

        $r6 = staticinvoke <fc.info.appdata.AESHelper: byte[] fromBase64(java.lang.String)>($r1);

        $r1 = $r3[2];

        $r7 = staticinvoke <fc.info.appdata.AESHelper: byte[] fromBase64(java.lang.String)>($r1);

        $r8 = staticinvoke <fc.info.appdata.AESHelper: javax.crypto.SecretKey deriveKey(java.lang.String,byte[])>($r0, $r5);

     label2:
        varReplacer630 = "AES/CBC/PKCS5Padding";

        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer630);

     label3:
        $r2 = new javax.crypto.spec.IvParameterSpec;

     label4:
        specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6);

        varReplacer631 = 2;

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer631, $r8, $r2);

        $r5 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r7);

     label5:
        $r0 = new java.lang.String;

     label6:
        varReplacer628 = "UTF-8";

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, varReplacer628);

     label7:
        return $r0;

     label8:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label9:
        $r12 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw $r11;

        catch java.security.GeneralSecurityException from label2 to label3 with label8;
        catch java.security.GeneralSecurityException from label4 to label5 with label8;
        catch java.security.GeneralSecurityException from label6 to label7 with label8;
        catch java.io.UnsupportedEncodingException from label2 to label3 with label9;
        catch java.io.UnsupportedEncodingException from label4 to label5 with label9;
        catch java.io.UnsupportedEncodingException from label6 to label7 with label9;
    }

    private static javax.crypto.SecretKey deriveKey(java.lang.String, byte[])
    {
        java.lang.String $r0, varReplacer632, varReplacer633;
        byte[] $r1;
        java.lang.Throwable $r2;
        javax.crypto.spec.PBEKeySpec $r3;
        char[] $r4;
        javax.crypto.SecretKeyFactory $r5;
        javax.crypto.SecretKey $r6;
        javax.crypto.spec.SecretKeySpec $r7;
        java.lang.RuntimeException $r8;
        int varReplacer634, varReplacer635;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r3 = new javax.crypto.spec.PBEKeySpec;

     label1:
        $r4 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        varReplacer634 = 1000;

        varReplacer635 = 128;

        specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r4, $r1, varReplacer634, varReplacer635);

        varReplacer633 = "PBKDF2WithHmacSHA1";

        $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer633);

        $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3);

        $r1 = interfaceinvoke $r6.<javax.crypto.SecretKey: byte[] getEncoded()>();

     label2:
        $r7 = new javax.crypto.spec.SecretKeySpec;

     label3:
        varReplacer632 = "AES";

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer632);

     label4:
        return $r7;

     label5:
        $r2 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r8;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }

    public static java.lang.String encrypt(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        javax.crypto.spec.IvParameterSpec $r2;
        byte[] $r3, $r6, $r7;
        javax.crypto.SecretKey $r4;
        javax.crypto.Cipher $r5;
        int $i0;
        java.lang.Object[] $r8;
        java.lang.Throwable $r9, $r11;
        java.lang.RuntimeException $r10;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = staticinvoke <fc.info.appdata.AESHelper: byte[] generateSalt()>();

        $r4 = staticinvoke <fc.info.appdata.AESHelper: javax.crypto.SecretKey deriveKey(java.lang.String,byte[])>($r0, $r3);

     label01:
        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int getBlockSize()>();

        $r6 = staticinvoke <fc.info.appdata.AESHelper: byte[] generateIv(int)>($i0);

     label02:
        $r2 = new javax.crypto.spec.IvParameterSpec;

     label03:
        specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6);

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r4, $r2);

        $r7 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r7 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r7);

     label04:
        if $r3 == null goto label13;

        $r8 = newarray (java.lang.Object)[5];

     label05:
        $r0 = staticinvoke <fc.info.appdata.AESHelper: java.lang.String toBase64(byte[])>($r3);

     label06:
        $r8[0] = $r0;

        $r8[1] = "]";

     label07:
        $r0 = staticinvoke <fc.info.appdata.AESHelper: java.lang.String toBase64(byte[])>($r6);

     label08:
        $r8[2] = $r0;

        $r8[3] = "]";

     label09:
        $r0 = staticinvoke <fc.info.appdata.AESHelper: java.lang.String toBase64(byte[])>($r7);

     label10:
        $r8[4] = $r0;

     label11:
        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s%s%s%s%s", $r8);

     label12:
        return $r0;

     label13:
        $r8 = newarray (java.lang.Object)[3];

     label14:
        $r0 = staticinvoke <fc.info.appdata.AESHelper: java.lang.String toBase64(byte[])>($r6);

     label15:
        $r8[0] = $r0;

        $r8[1] = "]";

     label16:
        $r0 = staticinvoke <fc.info.appdata.AESHelper: java.lang.String toBase64(byte[])>($r7);

     label17:
        $r8[2] = $r0;

     label18:
        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s%s%s", $r8);

     label19:
        return $r0;

     label20:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label21:
        $r11 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r10;

        catch java.security.GeneralSecurityException from label01 to label02 with label20;
        catch java.security.GeneralSecurityException from label03 to label04 with label20;
        catch java.security.GeneralSecurityException from label05 to label06 with label20;
        catch java.security.GeneralSecurityException from label07 to label08 with label20;
        catch java.security.GeneralSecurityException from label09 to label10 with label20;
        catch java.security.GeneralSecurityException from label11 to label12 with label20;
        catch java.security.GeneralSecurityException from label14 to label15 with label20;
        catch java.security.GeneralSecurityException from label16 to label17 with label20;
        catch java.security.GeneralSecurityException from label18 to label19 with label20;
        catch java.io.UnsupportedEncodingException from label01 to label02 with label21;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label21;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label21;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label21;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label21;
        catch java.io.UnsupportedEncodingException from label11 to label12 with label21;
        catch java.io.UnsupportedEncodingException from label14 to label15 with label21;
        catch java.io.UnsupportedEncodingException from label16 to label17 with label21;
        catch java.io.UnsupportedEncodingException from label18 to label19 with label21;
    }

    private static byte[] fromBase64(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        int varReplacer636;

        nop;

        $r0 := @parameter0: java.lang.String;

        varReplacer636 = 2;

        $r1 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r0, varReplacer636);

        return $r1;
    }

    private static byte[] generateIv(int)
    {
        int $i0;
        byte[] $r0;
        java.security.SecureRandom $r1;

        $i0 := @parameter0: int;

        $r0 = newarray (byte)[$i0];

        $r1 = <fc.info.appdata.AESHelper: java.security.SecureRandom random>;

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0);

        return $r0;
    }

    private static byte[] generateSalt()
    {
        byte[] $r0;
        java.security.SecureRandom $r1;

        $r0 = newarray (byte)[32];

        $r1 = <fc.info.appdata.AESHelper: java.security.SecureRandom random>;

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0);

        return $r0;
    }

    private static java.lang.String toBase64(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r0, 2);

        return $r1;
    }
}
