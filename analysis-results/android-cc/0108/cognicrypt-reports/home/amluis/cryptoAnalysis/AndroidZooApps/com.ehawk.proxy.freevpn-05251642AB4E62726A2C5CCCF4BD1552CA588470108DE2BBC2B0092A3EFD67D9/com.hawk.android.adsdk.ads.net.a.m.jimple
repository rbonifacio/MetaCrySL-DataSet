public class com.hawk.android.adsdk.ads.net.a.m extends java.lang.Object
{
    private static java.util.concurrent.atomic.AtomicReference a;
    private static javax.net.ssl.HostnameVerifier b;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        null_type varReplacer8731, varReplacer8732;

        nop;

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        varReplacer8731 = null;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(varReplacer8731);

        <com.hawk.android.adsdk.ads.net.a.m: java.util.concurrent.atomic.AtomicReference a> = $r0;

        varReplacer8732 = null;

        <com.hawk.android.adsdk.ads.net.a.m: javax.net.ssl.HostnameVerifier b> = varReplacer8732;

        return;
    }

    public static javax.net.ssl.SSLContext a()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;
        javax.net.ssl.SSLContext $r2;
        null_type varReplacer8733;
        java.lang.String varReplacer8734;

        nop;

        $r0 = <com.hawk.android.adsdk.ads.net.a.m: java.util.concurrent.atomic.AtomicReference a>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r1 == null goto label1;

        $r0 = <com.hawk.android.adsdk.ads.net.a.m: java.util.concurrent.atomic.AtomicReference a>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (javax.net.ssl.SSLContext) $r1;

        return $r2;

     label1:
        varReplacer8734 = "TLS";

        $r2 = staticinvoke <com.hawk.android.adsdk.ads.net.a.m: javax.net.ssl.SSLContext a(java.lang.String)>(varReplacer8734);

        staticinvoke <com.hawk.android.adsdk.ads.net.a.m: void a(javax.net.ssl.SSLContext)>($r2);

        $r0 = <com.hawk.android.adsdk.ads.net.a.m: java.util.concurrent.atomic.AtomicReference a>;

        varReplacer8733 = null;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(varReplacer8733, $r2);

        $r0 = <com.hawk.android.adsdk.ads.net.a.m: java.util.concurrent.atomic.AtomicReference a>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (javax.net.ssl.SSLContext) $r1;

        return $r2;
    }

    private static javax.net.ssl.SSLContext a(java.lang.String)
    {
        java.lang.String $r0, varReplacer8736;
        javax.net.ssl.SSLContext $r1;
        java.lang.Throwable $r2;
        null_type varReplacer8737;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer8736 = "TLS";

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer8736);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        staticinvoke <com.hawk.android.adsdk.ads.e.d: void b(java.lang.Throwable)>($r2);

        varReplacer8737 = null;

        return varReplacer8737;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private static void a(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext $r0;
        java.lang.Object[] $r1;
        java.security.SecureRandom $r2, r5;
        java.lang.Throwable $r3;
        com.hawk.android.adsdk.ads.net.a.m$1 r4;
        javax.net.ssl.TrustManager[] r6;
        null_type varReplacer8735;

        nop;

        $r0 := @parameter0: javax.net.ssl.SSLContext;

        if $r0 != null goto label1;

        return;

     label1:
        $r1 = newarray (javax.net.ssl.TrustManager)[1];

        r4 = new com.hawk.android.adsdk.ads.net.a.m$1;

     label2:
        specialinvoke r4.<com.hawk.android.adsdk.ads.net.a.m$1: void <init>()>();

     label3:
        $r1[0] = r4;

        r5 = new java.security.SecureRandom;

        $r2 = r5;

     label4:
        specialinvoke r5.<java.security.SecureRandom: void <init>()>();

     label5:
        r6 = (javax.net.ssl.TrustManager[]) $r1;

     label6:
        varReplacer8735 = null;

        virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer8735, r6, $r2);

     label7:
        return;

     label8:
        $r3 := @caughtexception;

        staticinvoke <com.hawk.android.adsdk.ads.e.d: void b(java.lang.Throwable)>($r3);

        return;

        catch java.security.KeyManagementException from label2 to label3 with label8;
        catch java.security.KeyManagementException from label4 to label5 with label8;
        catch java.security.KeyManagementException from label6 to label7 with label8;
    }

    public static javax.net.ssl.HostnameVerifier b()
    {
        javax.net.ssl.HostnameVerifier $r0;
        com.hawk.android.adsdk.ads.net.a.m$2 $r1;

        nop;

        $r0 = <com.hawk.android.adsdk.ads.net.a.m: javax.net.ssl.HostnameVerifier b>;

        if $r0 == null goto label1;

        $r0 = <com.hawk.android.adsdk.ads.net.a.m: javax.net.ssl.HostnameVerifier b>;

        return $r0;

     label1:
        $r1 = new com.hawk.android.adsdk.ads.net.a.m$2;

        specialinvoke $r1.<com.hawk.android.adsdk.ads.net.a.m$2: void <init>()>();

        <com.hawk.android.adsdk.ads.net.a.m: javax.net.ssl.HostnameVerifier b> = $r1;

        $r0 = <com.hawk.android.adsdk.ads.net.a.m: javax.net.ssl.HostnameVerifier b>;

        return $r0;
    }
}
