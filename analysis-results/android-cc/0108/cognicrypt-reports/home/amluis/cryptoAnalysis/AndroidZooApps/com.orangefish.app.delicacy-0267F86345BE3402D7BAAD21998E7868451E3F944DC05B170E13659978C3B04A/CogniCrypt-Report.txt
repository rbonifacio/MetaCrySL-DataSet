Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8273)
		Method: <com.aotter.net.trek.util.CryptLib: java.lang.String SHA256(java.lang.String,int)>
		SHA-256: ccfd42b464b58a1ebff2968856ac2df057788c551c5e3856e48db99b33956d86
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.android.gms.internal.zzpx: java.lang.String zzbb(java.lang.String)>
		SHA-256: bdbb92e6f960385509aefd190497c89a8c421e1717a727a6ba55a04508029dc2
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.orangefish.app.delicacy.common.DeviceUtils: java.lang.String md5Digest(java.lang.String)>
		SHA-256: cb1d11221f2b5016db70e888bfd2c803552a3a3860e1da5477f7e0688924de11
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.ad2iction.common.util.Utils: java.lang.String sha1(java.lang.String)>
		SHA-256: 864fc1206ef4cfac2e2ec37efe9eb488de423498448d6803e73a9756af5f5359
		Secure: false
	Object:
		Variable: varReplacer4443
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer4443)
		Method: <com.taiwanmobile.pt.util.AES: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 743b98f9299c732af3bc46544810b89e59e2eee5bef1e96c18ed01800f440382
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer11265)
		Method: <com.google.android.gms.internal.zzpx: java.lang.String zzbb(java.lang.String)>
		SHA-256: 39cfdcf0d0e0aee5c957d043abd6dc1305e877af9d931a72c3b1dcbea1005d59
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r2)
		Method: <com.loopj.android.http.MySSLSocketFactory: java.security.KeyStore getKeystore()>
		SHA-256: d011df71b400b4926b84dec0cad6ffb90a5bd3d26c43a5974bec9e614ef5edf5
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer11222)
		Method: <com.orangefish.app.delicacy.billing.util.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: c4fe34fc4b2a149ef0c94482f15beb890c22c5006caaee6782172090eda86a2d
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer916)
		Method: <com.loopj.android.http.MySSLSocketFactory: void <init>(java.security.KeyStore)>
		SHA-256: 716b72ca96b4778ada11a1d3bead3cff543951f924c1b5cc8c282433a57083eb
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.aotter.net.trek.util.CryptLib: java.lang.String generateRandomIV(int)>
		SHA-256: bce6a960f9593742bc9d3724ef3ef94ca4717b64ca7629b803a8a8b3751bf5a2
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $z0 = virtualinvoke $r4.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.orangefish.app.delicacy.billing.util.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: c678472b4c19c53650e756c77dab364889209724da847a2f30c698a83517174f
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2784)
		Method: <com.orangefish.app.delicacy.common.DeviceUtils: java.lang.String md5Digest(java.lang.String)>
		SHA-256: c2f8b5d6f394bfc9a15538e3c94740eefad7f891f23e151138456b5c093ee05a
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.aotter.net.trek.util.CryptLib: java.lang.String SHA256(java.lang.String,int)>
		SHA-256: 3857e96df8cbaae0e0896622f697199650addec91795faec2774977c70bda817
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1432)
		Method: <com.ad2iction.common.util.Utils: java.lang.String sha1(java.lang.String)>
		SHA-256: 7847926e973db66d76d88911b886168f0bb4342907d8b39cc2b5c302403eefb0
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer4443)
		Method: <com.taiwanmobile.pt.util.AES: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: ad3a53ab4c3fbc94cb2e91a6eb5825626e2b9766c96495bc818ca566f1bdb15
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4)
		Method: <com.taiwanmobile.pt.util.AES: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 4960ed5964cf30795399c629fbbb244079be57d50bc606bf35e1410625ae5772
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <com.aotter.net.trek.util.CryptLib: java.lang.String generateRandomIV(int)>
		SHA-256: 9574bfc9fd9247d48baf4ccd204eca445e1376f67b6c9074c1106c1bbd450e8d
		Secure: true
	Object:
		Variable: $r0
		Type: javax.net.ssl.SSLContext
		Statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer906)
		Method: <cz.msebera.android.httpclient.conn.ssl.SSLContexts: javax.net.ssl.SSLContext createDefault()>
		SHA-256: 9c420d67a0fcd5ebbbff497382009bd962d2bc18d60cf46070af010c05123d74
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r1)
		Method: <cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: javax.net.ssl.SSLContext build()>
		SHA-256: 1f15fdcda9b923b07ad2fb0fff591155d212c798860f8dee84a8c357e9a78696
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4440)
		Method: <com.taiwanmobile.pt.util.AES: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 8f7eda7fbf246141e6ed3f5ce5da5a12c967dc49f1641f40a91aa4e86362f055
		Secure: false

Findings in Java Class: cz.msebera.android.httpclient.conn.ssl.SSLContexts

	 in Method: javax.net.ssl.SSLContext createDefault()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer903, varReplacer903, varReplacer903)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer903, varReplacer903, varReplacer903)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #9c420d67a0fcd5ebbbff497382009bd962d2bc18d60cf46070af010c05123d74)
			First parameter (with value "TLS") should be any of {Insecure}
			at statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer906)


Findings in Java Class: com.loopj.android.http.MySSLSocketFactory

	 in Method: void <init>(java.security.KeyStore)
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #716b72ca96b4778ada11a1d3bead3cff543951f924c1b5cc8c282433a57083eb)
			First parameter (with value "TLS") should be any of {Insecure}
			at statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer916)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer917, r5, varReplacer917)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer917, r5, varReplacer917)


Findings in Java Class: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder

	 in Method: javax.net.ssl.SSLContext build()
		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #1f15fdcda9b923b07ad2fb0fff591155d212c798860f8dee84a8c357e9a78696)
			First parameter (with value "TLS") should be any of {Insecure}
			at statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r1)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r5, $r7, $r8)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r5, $r7, $r8)


Findings in Java Class: com.ad2iction.common.util.Utils

	 in Method: java.lang.String sha1(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #7847926e973db66d76d88911b886168f0bb4342907d8b39cc2b5c302403eefb0)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1432)


Findings in Java Class: com.orangefish.app.delicacy.common.DeviceUtils

	 in Method: java.lang.String md5Digest(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #c2f8b5d6f394bfc9a15538e3c94740eefad7f891f23e151138456b5c093ee05a)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2784)


Findings in Java Class: com.taiwanmobile.pt.util.AES

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4439, $r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer4443)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #8f7eda7fbf246141e6ed3f5ce5da5a12c967dc49f1641f40a91aa4e86362f055)
			First parameter (with value "AES") should be any of AES/{OFB, CBC, CTS, CTR, CFB}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4440)


Findings in Java Class: com.orangefish.app.delicacy.billing.util.Security

	 in Method: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0)

		ConstraintError violating CrySL rule for java.security.Signature (on Object #c4fe34fc4b2a149ef0c94482f15beb890c22c5006caaee6782172090eda86a2d)
			First parameter (with value "SHA1withRSA") should be any of {SHA1withDSA, SHA256withDSA, NONEwithDSA, SHA256withRSA}
			at statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer11222)


Findings in Java Class: com.google.android.gms.internal.zzpx

	 in Method: java.lang.String zzbb(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #39cfdcf0d0e0aee5c957d043abd6dc1305e877af9d931a72c3b1dcbea1005d59)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer11265)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 20

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 9
	ConstraintError: 8
=====================================================================