public class com.dpmaker.pro.DHKeyAgreement extends java.lang.Object
{
    private static final java.math.BigInteger skip1024Base;
    private static final java.math.BigInteger skip1024Modulus;
    private static final byte[] skip1024ModulusBytes;

    static void <clinit>()
    {
        byte[] $r0;
        java.math.BigInteger $r1;
        int varReplacer3175;

        nop;

        $r0 = newarray (byte)[128];

        $r0[0] = -12;

        $r0[1] = -120;

        $r0[2] = -3;

        $r0[3] = 88;

        $r0[4] = 78;

        $r0[5] = 73;

        $r0[6] = -37;

        $r0[7] = -51;

        $r0[8] = 32;

        $r0[9] = -76;

        $r0[10] = -99;

        $r0[11] = -28;

        $r0[12] = -111;

        $r0[13] = 7;

        $r0[14] = 54;

        $r0[15] = 107;

        $r0[16] = 51;

        $r0[17] = 108;

        $r0[18] = 56;

        $r0[19] = 13;

        $r0[20] = 69;

        $r0[21] = 29;

        $r0[22] = 15;

        $r0[23] = 124;

        $r0[24] = -120;

        $r0[25] = -77;

        $r0[26] = 28;

        $r0[27] = 124;

        $r0[28] = 91;

        $r0[29] = 45;

        $r0[30] = -114;

        $r0[31] = -10;

        $r0[32] = -13;

        $r0[33] = -55;

        $r0[34] = 35;

        $r0[35] = -64;

        $r0[36] = 67;

        $r0[37] = -16;

        $r0[38] = -91;

        $r0[39] = 91;

        $r0[40] = 24;

        $r0[41] = -115;

        $r0[42] = -114;

        $r0[43] = -69;

        $r0[44] = 85;

        $r0[45] = -116;

        $r0[46] = -72;

        $r0[47] = 93;

        $r0[48] = 56;

        $r0[49] = -45;

        $r0[50] = 52;

        $r0[51] = -3;

        $r0[52] = 124;

        $r0[53] = 23;

        $r0[54] = 87;

        $r0[55] = 67;

        $r0[56] = -93;

        $r0[57] = 29;

        $r0[58] = 24;

        $r0[59] = 108;

        $r0[60] = -34;

        $r0[61] = 51;

        $r0[62] = 33;

        $r0[63] = 44;

        $r0[64] = -75;

        $r0[65] = 42;

        $r0[66] = -1;

        $r0[67] = 60;

        $r0[68] = -31;

        $r0[69] = -79;

        $r0[70] = 41;

        $r0[71] = 64;

        $r0[72] = 24;

        $r0[73] = 17;

        $r0[74] = -115;

        $r0[75] = 124;

        $r0[76] = -124;

        $r0[77] = -89;

        $r0[78] = 10;

        $r0[79] = 114;

        $r0[80] = -42;

        $r0[81] = -122;

        $r0[82] = -60;

        $r0[83] = 3;

        $r0[84] = 25;

        $r0[85] = -56;

        $r0[86] = 7;

        $r0[87] = 41;

        $r0[88] = 122;

        $r0[89] = -54;

        $r0[90] = -107;

        $r0[91] = 12;

        $r0[92] = -39;

        $r0[93] = -106;

        $r0[94] = -97;

        $r0[95] = -85;

        $r0[96] = -48;

        $r0[97] = 10;

        $r0[98] = 80;

        $r0[99] = -101;

        $r0[100] = 2;

        $r0[101] = 70;

        $r0[102] = -45;

        $r0[103] = 8;

        $r0[104] = 61;

        $r0[105] = 102;

        $r0[106] = -92;

        $r0[107] = 93;

        $r0[108] = 65;

        $r0[109] = -97;

        $r0[110] = -100;

        $r0[111] = 124;

        $r0[112] = -67;

        $r0[113] = -119;

        $r0[114] = 75;

        $r0[115] = 34;

        $r0[116] = 25;

        $r0[117] = 38;

        $r0[118] = -70;

        $r0[119] = -85;

        $r0[120] = -94;

        $r0[121] = 94;

        $r0[122] = -61;

        $r0[123] = 85;

        $r0[124] = -23;

        $r0[125] = 47;

        $r0[126] = 120;

        $r0[127] = -57;

        <com.dpmaker.pro.DHKeyAgreement: byte[] skip1024ModulusBytes> = $r0;

        $r1 = new java.math.BigInteger;

        $r0 = <com.dpmaker.pro.DHKeyAgreement: byte[] skip1024ModulusBytes>;

        varReplacer3175 = 1;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(varReplacer3175, $r0);

        <com.dpmaker.pro.DHKeyAgreement: java.math.BigInteger skip1024Modulus> = $r1;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <com.dpmaker.pro.DHKeyAgreement: java.math.BigInteger skip1024Base> = $r1;

        return;
    }

    private void <init>()
    {
        com.dpmaker.pro.DHKeyAgreement $r0;

        $r0 := @this: com.dpmaker.pro.DHKeyAgreement;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String DHCryptHashBASE64(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, $r8, $r14, varReplacer3176, varReplacer3177, varReplacer3178, varReplacer3180, varReplacer3182, varReplacer3185, varReplacer3186, varReplacer3187, varReplacer3188, varReplacer3189, varReplacer3190, varReplacer3193, varReplacer3194, varReplacer3195, varReplacer3196, varReplacer3197, varReplacer3199, varReplacer3200, varReplacer3202, varReplacer3203, varReplacer3204, varReplacer3205, varReplacer3207, varReplacer3208, varReplacer3209, varReplacer3210, varReplacer3211, varReplacer3213, varReplacer3214, varReplacer3215, varReplacer3216, varReplacer3217, varReplacer3218, varReplacer3219, varReplacer3220, varReplacer3221, varReplacer3222, varReplacer3224, varReplacer3225, varReplacer3226, varReplacer3227, varReplacer3228, varReplacer3230, varReplacer3231;
        java.util.ArrayList $r2, r38;
        byte $b0, $b4;
        java.lang.StringBuffer $r3, r37;
        java.lang.Throwable $r4;
        short $s1;
        java.security.SecureRandom $r5, $r11;
        java.lang.StringBuilder $r6, $r12, $r15;
        int $i2, $i3, $i6, $i7, varReplacer3179, varReplacer3181, varReplacer3183, varReplacer3184, varReplacer3191, varReplacer3192, varReplacer3198, varReplacer3201, varReplacer3206, varReplacer3212, varReplacer3223, varReplacer3229;
        byte[] $r7, $r30, $r36;
        char[] $r9;
        char $c5;
        java.io.PrintStream $r10;
        java.lang.Integer $r13;
        java.lang.Object $r16;
        boolean $z0;
        java.security.AlgorithmParameterGenerator $r17;
        java.security.AlgorithmParameters $r18;
        java.security.spec.AlgorithmParameterSpec $r19;
        javax.crypto.spec.DHParameterSpec $r20, r41;
        java.security.KeyPairGenerator $r21;
        java.security.KeyPair $r22;
        javax.crypto.KeyAgreement $r23, $r28;
        java.security.PrivateKey $r24;
        java.security.PublicKey $r25, $r29;
        java.security.KeyFactory $r26;
        javax.crypto.interfaces.DHPublicKey $r27;
        java.math.BigInteger $r31, $r32;
        javax.crypto.SecretKey $r33, $r34;
        javax.crypto.Cipher $r35;
        java.security.spec.X509EncodedKeySpec r39;
        java.lang.Exception r40;
        javax.crypto.ShortBufferException r42;

        nop;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 = "";

        $i2 = 0;

     label01:
        $r7 = <com.dpmaker.pro.DHKeyAgreement: byte[] skip1024ModulusBytes>;

        $i3 = lengthof $r7;

        if $i2 >= $i3 goto label03;

        $r7 = <com.dpmaker.pro.DHKeyAgreement: byte[] skip1024ModulusBytes>;

        $r8 = staticinvoke <com.dpmaker.pro.DHKeyAgreement: java.lang.String toHexString(byte[])>($r7);

        virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r8);

        $r7 = <com.dpmaker.pro.DHKeyAgreement: byte[] skip1024ModulusBytes>;

        $b0 = $r7[$i2];

        r37 = new java.lang.StringBuffer;

        $r3 = r37;

        specialinvoke r37.<java.lang.StringBuffer: void <init>()>();

        $r7 = <com.dpmaker.pro.DHKeyAgreement: byte[] skip1024ModulusBytes>;

        $i3 = lengthof $r7;

        $r7 = <com.dpmaker.pro.DHKeyAgreement: byte[] skip1024ModulusBytes>;

        $b4 = $r7[$i2];

        staticinvoke <com.dpmaker.pro.DHKeyAgreement: void byte2hex(byte,java.lang.StringBuffer)>($b4, $r3);

        $i3 = $i3 + -1;

        if $i2 >= $i3 goto label02;

        varReplacer3197 = ":";

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(varReplacer3197);

     label02:
        $r9 = newarray (char)[16];

        $r9[0] = 48;

        $r9[1] = 49;

        $r9[2] = 50;

        $r9[3] = 51;

        $r9[4] = 52;

        $r9[5] = 53;

        $r9[6] = 54;

        $r9[7] = 55;

        $r9[8] = 56;

        $r9[9] = 57;

        $r9[10] = 65;

        $r9[11] = 66;

        $r9[12] = 67;

        $r9[13] = 68;

        $r9[14] = 69;

        $r9[15] = 70;

        $s1 = $b0 & 240;

        $s1 = $s1 >> 4;

        $b0 = $b0 & 15;

        $c5 = $r9[$s1];

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        $c5 = $r9[$b0];

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        $i2 = $i2 + 1;

        goto label01;

     label03:
        $r10 = <java.lang.System: java.io.PrintStream err>;

        varReplacer3185 = "DHKeyAgreement usage: ";

        virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>(varReplacer3185);

        $r10 = <java.lang.System: java.io.PrintStream err>;

        varReplacer3224 = "[-gen]";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3224);

        varReplacer3217 = "HASH128";

        varReplacer3218 = "";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer3217, varReplacer3218);

        r38 = new java.util.ArrayList;

        $r2 = r38;

        specialinvoke r38.<java.util.ArrayList: void <init>()>();

        $r11 = new java.security.SecureRandom;

        $r5 = $r11;

        specialinvoke $r11.<java.security.SecureRandom: void <init>()>();

        $r15 = new java.lang.StringBuilder;

        $r6 = $r15;

        $r1 = "0STu47DHW56CP8JUVG3ABc1sIMtKefgXEYZabL9kNQR2FxopqjdOyhL9ABnrvwz";

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i2);

        $i2 = 0;

     label04:
        $r1 = "0STu47DHW56CP8JUVG3ABc1sIMtKefgXEYZabL9kNQR2FxopqjdOyhL9ABnrvwz";

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label05;

        $r1 = "0STu47DHW56CP8JUVG3ABc1sIMtKefgXEYZabL9kNQR2FxopqjdOyhL9ABnrvwz";

        $r8 = "0STu47DHW56CP8JUVG3ABc1sIMtKefgXEYZabL9kNQR2FxopqjdOyhL9ABnrvwz";

        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i3 = virtualinvoke $r5.<java.security.SecureRandom: int nextInt(int)>($i3);

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $i2 = $i2 + 1;

        goto label04;

     label05:
        $r1 = "2p9sSeJjqXoOhtBDyq3FxYDLPJhQqBzOokbHbXJkAwE22n93T90C321LO9KhOCy";

        $i2 = 0;

     label06:
        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label09;

        $r8 = "2p9sSeJjqXoOhtBDyq3FxYDLPJhQqBzOokbHbXJkAwE22n93T90C321LO9KhOCy";

        $c5 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($i2);

        $i3 = $c5 + 64;

        $i6 = 0;

     label07:
        $r5 = new java.security.SecureRandom;

        specialinvoke $r5.<java.security.SecureRandom: void <init>()>();

        $r15 = new java.lang.StringBuilder;

        $r8 = "0STu47DABcJUVG35LB2FxP8COWrEAvYZatsbnvfXL9NQRdw1IM9k6pqgjHKeyhoz";

        $i7 = virtualinvoke $r8.<java.lang.String: int length()>();

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i7);

        if $i6 != 36 goto label08;

        $i3 = $i3 * 32;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        $i2 = $i2 + 1;

        goto label06;

     label08:
        $i6 = $i6 + 1;

        goto label07;

     label09:
        $i2 = 0;

     label10:
        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label13;

        $r8 = "2p9sSeJjqXoOhtBDyq3FxYDLPJhQqBzOokbHbXJkAwE22n93T90C321LO9KhOCy";

        $c5 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($i2);

        $i3 = $c5 + 64;

        $i6 = 0;

     label11:
        $r5 = new java.security.SecureRandom;

        specialinvoke $r5.<java.security.SecureRandom: void <init>()>();

        $r15 = new java.lang.StringBuilder;

        $r8 = "JUVcvDB2A0S375LTuCxQRZa9NAOP84tGBLdwjnvfXy6kFWrEHKepqh1IM9bsYgoz";

        $i7 = virtualinvoke $r8.<java.lang.String: int length()>();

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i7);

        if $i6 != 96 goto label12;

        $i3 = $i3 * 32;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r2.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, $r13);

        $i2 = $i2 + 1;

        goto label10;

     label12:
        $i6 = $i6 + 1;

        goto label11;

     label13:
        $r8 = "";

        $i2 = 0;

     label14:
        $i3 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i3 = $i3 / 2;

        if $i2 >= $i3 goto label17;

        $r14 = "2p9sSeJjqXoOhtBDyq3FxYDLPJhQqBzOokbHbXJkAwE22n93T90C321LO9KhOCy";

        virtualinvoke $r14.<java.lang.String: char charAt(int)>($i2);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        varReplacer3176 = "";

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3176);

        $r16 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r8 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = 0;

     label15:
        $r5 = new java.security.SecureRandom;

        specialinvoke $r5.<java.security.SecureRandom: void <init>()>();

        $r15 = new java.lang.StringBuilder;

        $i6 = virtualinvoke $r1.<java.lang.String: int length()>();

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(int)>($i6);

        if $i3 != 96 goto label16;

        $i2 = $i2 + 1;

        goto label14;

     label16:
        $i3 = $i3 + 1;

        goto label15;

     label17:
        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer3187 = "HASH64";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(varReplacer3187, $r1);

        $r1 = "";

        $i2 = 0;

     label18:
        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i3 = $i3 / 3;

        if $i2 >= $i3 goto label19;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        varReplacer3178 = "";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3178);

        $c5 = virtualinvoke $r8.<java.lang.String: char charAt(int)>($i2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = $i2 + 1;

        goto label18;

     label19:
        <com.dpmaker.pro.activities.SplashActivity: java.lang.String OAUTH_TOCKEN> = $r1;

        <com.dpmaker.pro.DownloadService: java.lang.String OAUTH_TOCKEN> = $r1;

        varReplacer3211 = "GENERATE_DH_PARAMS";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer3211);

        if $z0 == 0 goto label23;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3215 = "Creating Diffie-Hellman parameters (takes VERY long) ...";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3215);

        varReplacer3214 = "DH";

        $r17 = staticinvoke <java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String)>(varReplacer3214);

        varReplacer3212 = 512;

        virtualinvoke $r17.<java.security.AlgorithmParameterGenerator: void init(int)>(varReplacer3212);

        $r18 = virtualinvoke $r17.<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameters generateParameters()>();

        $r19 = virtualinvoke $r18.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "Ljavax/crypto/spec/DHParameterSpec;");

        $r20 = (javax.crypto.spec.DHParameterSpec) $r19;

        $r1 = "2p9sSeJjqXoOhtBDyq3FxYDLPJhQqBzOokbHbXJkAwE22n93T90C321LO9KhOCy";

        varReplacer3198 = 32;

        virtualinvoke $r1.<java.lang.String: int codePointBefore(int)>(varReplacer3198);

     label20:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3220 = "ALICE: Generate DH keypair ...";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3220);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        varReplacer3186 = "DH";

        $r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3186);

        varReplacer3190 = "2p9sSeJjqXoOhtBDyq3FxYDLPJhQqBzOokbHbXJkAwE22n93T90C321LO9KhOCy";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3190);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>($r1);

        virtualinvoke $r21.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r20);

        $r22 = virtualinvoke $r21.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3199 = "ALICE: Initialization ...";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3199);

        varReplacer3200 = "DH";

        $r23 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>(varReplacer3200);

        $r24 = virtualinvoke $r22.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke $r23.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r24);

        $r25 = virtualinvoke $r22.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r7 = interfaceinvoke $r25.<java.security.PublicKey: byte[] getEncoded()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        varReplacer3226 = "DH";

        $r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3226);

        varReplacer3205 = "2p9sSeJjqXoOhtBDyq3FxYDLPJhQqBzOokbHbXJkAwE22n93T90C321LO9KhOCy";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3205);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r1);

        r39 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r39.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r7);

        $r25 = virtualinvoke $r26.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r39);

        $r27 = (javax.crypto.interfaces.DHPublicKey) $r25;

        $r20 = interfaceinvoke $r27.<javax.crypto.interfaces.DHPublicKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3207 = "BOB: Generate DH keypair ...";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3207);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        varReplacer3225 = "DH";

        $r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3225);

        varReplacer3193 = "2p9sSeJjqXoOhtBDyq3FxYDLPJhQqBzOokbHbXJkAwE22n93T90C321LO9KhOCy";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3193);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>($r1);

        virtualinvoke $r21.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r20);

        $r22 = virtualinvoke $r21.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3221 = "BOB: Initialization ...";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3221);

        varReplacer3227 = "DH";

        $r28 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>(varReplacer3227);

        $r24 = virtualinvoke $r22.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke $r28.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r24);

        $r29 = virtualinvoke $r22.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r7 = interfaceinvoke $r29.<java.security.PublicKey: byte[] getEncoded()>();

        varReplacer3194 = "DH";

        $r26 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer3194);

        r39 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r39.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r7);

        $r29 = virtualinvoke $r26.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r39);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3180 = "ALICE: Execute PHASE1 ...";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3180);

        varReplacer3229 = 1;

        virtualinvoke $r23.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r29, varReplacer3229);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3195 = "BOB: Execute PHASE1 ...";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3195);

        varReplacer3183 = 1;

        virtualinvoke $r28.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r25, varReplacer3183);

        $r7 = virtualinvoke $r23.<javax.crypto.KeyAgreement: byte[] generateSecret()>();

        $i2 = lengthof $r7;

        $r30 = newarray (byte)[$i2];

     label21:
        varReplacer3184 = 1;

        virtualinvoke $r28.<javax.crypto.KeyAgreement: int generateSecret(byte[],int)>($r30, varReplacer3184);

     label22:
        varReplacer3206 = 0;

        virtualinvoke $r28.<javax.crypto.KeyAgreement: int generateSecret(byte[],int)>($r30, varReplacer3206);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        varReplacer3188 = "Alice secret: ";

        $r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3188);

        $r1 = staticinvoke <com.dpmaker.pro.DHKeyAgreement: java.lang.String toHexString(byte[])>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        varReplacer3222 = "Bob secret: ";

        $r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3222);

        $r1 = staticinvoke <com.dpmaker.pro.DHKeyAgreement: java.lang.String toHexString(byte[])>($r30);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r7, $r30);

        if $z0 != 0 goto label25;

        r40 = new java.lang.Exception;

        varReplacer3228 = "Shared secrets differ";

        specialinvoke r40.<java.lang.Exception: void <init>(java.lang.String)>(varReplacer3228);

        throw r40;

     label23:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3209 = "Using SKIP Diffie-Hellman parameters";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3209);

        r41 = new javax.crypto.spec.DHParameterSpec;

        $r20 = r41;

        $r31 = <com.dpmaker.pro.DHKeyAgreement: java.math.BigInteger skip1024Modulus>;

        $r32 = <com.dpmaker.pro.DHKeyAgreement: java.math.BigInteger skip1024Base>;

        specialinvoke r41.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r31, $r32);

        goto label20;

     label24:
        $r4 := @caughtexception;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        r42 = (javax.crypto.ShortBufferException) $r4;

        $r1 = virtualinvoke r42.<javax.crypto.ShortBufferException: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r1);

        goto label22;

     label25:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3210 = "Shared secrets are the same";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3210);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3203 = "Return shared secret as SecretKey object ...";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3203);

        varReplacer3181 = 1;

        virtualinvoke $r28.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r25, varReplacer3181);

        varReplacer3230 = "DES";

        $r33 = virtualinvoke $r28.<javax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)>(varReplacer3230);

        varReplacer3192 = 1;

        virtualinvoke $r23.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r29, varReplacer3192);

        varReplacer3213 = "DES";

        $r34 = virtualinvoke $r23.<javax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)>(varReplacer3213);

        varReplacer3202 = "DES/ECB/PKCS5Padding";

        $r35 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3202);

        varReplacer3201 = 1;

        virtualinvoke $r35.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3201, $r33);

        $r1 = "This is just an example";

        $r7 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r30 = virtualinvoke $r35.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r7);

        varReplacer3189 = "DES/ECB/PKCS5Padding";

        $r35 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3189);

        varReplacer3179 = 2;

        virtualinvoke $r35.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3179, $r34);

        $r30 = virtualinvoke $r35.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r30);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r7, $r30);

        if $z0 != 0 goto label26;

        r40 = new java.lang.Exception;

        varReplacer3219 = "DES in CBC mode recovered text is different from cleartext";

        specialinvoke r40.<java.lang.Exception: void <init>(java.lang.String)>(varReplacer3219);

        throw r40;

     label26:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3216 = "DES in ECB mode recovered text is same as cleartext";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3216);

        varReplacer3231 = "DES/CBC/PKCS5Padding";

        $r35 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3231);

        varReplacer3223 = 1;

        virtualinvoke $r35.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3223, $r33);

        $r1 = "This is just an example";

        $r7 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r30 = virtualinvoke $r35.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r7);

        $r18 = virtualinvoke $r35.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>();

        $r36 = virtualinvoke $r18.<java.security.AlgorithmParameters: byte[] getEncoded()>();

        varReplacer3177 = "DES";

        $r18 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>(varReplacer3177);

        virtualinvoke $r18.<java.security.AlgorithmParameters: void init(byte[])>($r36);

        varReplacer3204 = "DES/CBC/PKCS5Padding";

        $r35 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3204);

        varReplacer3191 = 2;

        virtualinvoke $r35.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(varReplacer3191, $r34, $r18);

        $r30 = virtualinvoke $r35.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r30);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r7, $r30);

        if $z0 != 0 goto label27;

        r40 = new java.lang.Exception;

        varReplacer3208 = "DES in CBC mode recovered text is different from cleartext";

        specialinvoke r40.<java.lang.Exception: void <init>(java.lang.String)>(varReplacer3208);

        throw r40;

     label27:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        varReplacer3182 = "DES in CBC mode recovered text is same as cleartext";

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(varReplacer3182);

        varReplacer3196 = "";

        return varReplacer3196;

        catch javax.crypto.ShortBufferException from label21 to label22 with label24;
    }

    private static void byte2hex(byte, java.lang.StringBuffer)
    {
        byte $b0;
        java.lang.StringBuffer $r0;
        char[] $r1;
        short $s1;
        char $c2;

        nop;

        $b0 := @parameter0: byte;

        $r0 := @parameter1: java.lang.StringBuffer;

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        $s1 = $b0 & 240;

        $s1 = $s1 >> 4;

        $b0 = $b0 & 15;

        $c2 = $r1[$s1];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $c2 = $r1[$b0];

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] $r0;
        java.lang.Exception $r1;
        com.dpmaker.pro.DHKeyAgreement $r2;
        java.lang.String $r3;
        int $i0;
        java.io.PrintStream $r4;
        java.lang.StringBuilder $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.String[];

        $r3 = "USE_SKIP_DH_PARAMS";

        $r2 = new com.dpmaker.pro.DHKeyAgreement;

     label01:
        specialinvoke $r2.<com.dpmaker.pro.DHKeyAgreement: void <init>()>();

        $i0 = lengthof $r0;

     label02:
        if $i0 <= 1 goto label07;

     label03:
        specialinvoke $r2.<com.dpmaker.pro.DHKeyAgreement: void usage()>();

     label04:
        $r1 = new java.lang.Exception;

     label05:
        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("Wrong number of command options");

        throw $r1;

     label06:
        $r1 := @caughtexception;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r3);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;

     label07:
        $i0 = lengthof $r0;

     label08:
        if $i0 != 1 goto label15;

     label09:
        $r3 = $r0[0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-gen");

     label10:
        if $z0 != 0 goto label14;

     label11:
        specialinvoke $r2.<com.dpmaker.pro.DHKeyAgreement: void usage()>();

     label12:
        $r1 = new java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized flag: ");

        $r3 = $r0[0];

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>($r3);

        throw $r1;

     label14:
        $r3 = "GENERATE_DH_PARAMS";

     label15:
        specialinvoke $r2.<com.dpmaker.pro.DHKeyAgreement: void run(java.lang.String)>($r3);

     label16:
        return;

        catch java.lang.Exception from label01 to label02 with label06;
        catch java.lang.Exception from label03 to label04 with label06;
        catch java.lang.Exception from label05 to label06 with label06;
        catch java.lang.Exception from label07 to label08 with label06;
        catch java.lang.Exception from label09 to label10 with label06;
        catch java.lang.Exception from label11 to label12 with label06;
        catch java.lang.Exception from label13 to label14 with label06;
        catch java.lang.Exception from label15 to label16 with label06;
    }

    private void run(java.lang.String) throws java.lang.Exception
    {
        com.dpmaker.pro.DHKeyAgreement $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.Throwable $r2;
        boolean $z0;
        java.io.PrintStream $r3;
        java.security.AlgorithmParameterGenerator $r4;
        java.security.AlgorithmParameters $r5;
        java.security.spec.AlgorithmParameterSpec $r6;
        javax.crypto.spec.DHParameterSpec $r7, r29;
        java.security.KeyPairGenerator $r8;
        java.security.KeyPair $r9;
        javax.crypto.KeyAgreement $r10, $r16;
        java.security.PrivateKey $r11;
        java.security.PublicKey $r12, $r17;
        byte[] $r13, $r18, $r25;
        java.security.KeyFactory $r14;
        javax.crypto.interfaces.DHPublicKey $r15;
        java.lang.StringBuilder $r19, r27;
        java.math.BigInteger $r20, $r21;
        javax.crypto.SecretKey $r22, $r23;
        javax.crypto.Cipher $r24;
        java.security.spec.X509EncodedKeySpec r26;
        java.lang.Exception r28;
        javax.crypto.ShortBufferException r30;

        $r0 := @this: com.dpmaker.pro.DHKeyAgreement;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("GENERATE_DH_PARAMS");

        if $z0 == 0 goto label4;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Creating Diffie-Hellman parameters (takes VERY long) ...");

        $r4 = staticinvoke <java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String)>("DH");

        virtualinvoke $r4.<java.security.AlgorithmParameterGenerator: void init(int)>(512);

        $r5 = virtualinvoke $r4.<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameters generateParameters()>();

        $r6 = virtualinvoke $r5.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "Ljavax/crypto/spec/DHParameterSpec;");

        $r7 = (javax.crypto.spec.DHParameterSpec) $r6;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("ALICE: Generate DH keypair ...");

        $r8 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("DH");

        virtualinvoke $r8.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r7);

        $r9 = virtualinvoke $r8.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("ALICE: Initialization ...");

        $r10 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>("DH");

        $r11 = virtualinvoke $r9.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke $r10.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r11);

        $r12 = virtualinvoke $r9.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r13 = interfaceinvoke $r12.<java.security.PublicKey: byte[] getEncoded()>();

        $r14 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("DH");

        r26 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r26.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r13);

        $r12 = virtualinvoke $r14.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r26);

        $r15 = (javax.crypto.interfaces.DHPublicKey) $r12;

        $r7 = interfaceinvoke $r15.<javax.crypto.interfaces.DHPublicKey: javax.crypto.spec.DHParameterSpec getParams()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("BOB: Generate DH keypair ...");

        $r8 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("DH");

        virtualinvoke $r8.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r7);

        $r9 = virtualinvoke $r8.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("BOB: Initialization ...");

        $r16 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>("DH");

        $r11 = virtualinvoke $r9.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke $r16.<javax.crypto.KeyAgreement: void init(java.security.Key)>($r11);

        $r17 = virtualinvoke $r9.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r13 = interfaceinvoke $r17.<java.security.PublicKey: byte[] getEncoded()>();

        $r14 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("DH");

        r26 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r26.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r13);

        $r17 = virtualinvoke $r14.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r26);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("ALICE: Execute PHASE1 ...");

        virtualinvoke $r10.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r17, 1);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("BOB: Execute PHASE1 ...");

        virtualinvoke $r16.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r12, 1);

        $r13 = virtualinvoke $r10.<javax.crypto.KeyAgreement: byte[] generateSecret()>();

        $i0 = lengthof $r13;

        $r18 = newarray (byte)[$i0];

     label2:
        virtualinvoke $r16.<javax.crypto.KeyAgreement: int generateSecret(byte[],int)>($r18, 1);

     label3:
        virtualinvoke $r16.<javax.crypto.KeyAgreement: int generateSecret(byte[],int)>($r18, 0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Alice secret: ");

        $r1 = staticinvoke <com.dpmaker.pro.DHKeyAgreement: java.lang.String toHexString(byte[])>($r13);

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bob secret: ");

        $r1 = staticinvoke <com.dpmaker.pro.DHKeyAgreement: java.lang.String toHexString(byte[])>($r18);

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r13, $r18);

        if $z0 != 0 goto label6;

        r28 = new java.lang.Exception;

        specialinvoke r28.<java.lang.Exception: void <init>(java.lang.String)>("Shared secrets differ");

        throw r28;

     label4:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Using SKIP Diffie-Hellman parameters");

        r29 = new javax.crypto.spec.DHParameterSpec;

        $r7 = r29;

        $r20 = <com.dpmaker.pro.DHKeyAgreement: java.math.BigInteger skip1024Modulus>;

        $r21 = <com.dpmaker.pro.DHKeyAgreement: java.math.BigInteger skip1024Base>;

        specialinvoke r29.<javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r20, $r21);

        goto label1;

     label5:
        $r2 := @caughtexception;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        r30 = (javax.crypto.ShortBufferException) $r2;

        $r1 = virtualinvoke r30.<javax.crypto.ShortBufferException: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        goto label3;

     label6:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Shared secrets are the same");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Return shared secret as SecretKey object ...");

        virtualinvoke $r16.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r12, 1);

        $r22 = virtualinvoke $r16.<javax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)>("DES");

        virtualinvoke $r10.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>($r17, 1);

        $r23 = virtualinvoke $r10.<javax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)>("DES");

        $r24 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/PKCS5Padding");

        virtualinvoke $r24.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r22);

        $r1 = "This is just an example";

        $r13 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r18 = virtualinvoke $r24.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r13);

        $r24 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/PKCS5Padding");

        virtualinvoke $r24.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r23);

        $r18 = virtualinvoke $r24.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r18);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r13, $r18);

        if $z0 != 0 goto label7;

        r28 = new java.lang.Exception;

        specialinvoke r28.<java.lang.Exception: void <init>(java.lang.String)>("DES in CBC mode recovered text is different from cleartext");

        throw r28;

     label7:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("DES in ECB mode recovered text is same as cleartext");

        $r24 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/CBC/PKCS5Padding");

        virtualinvoke $r24.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r22);

        $r1 = "This is just an example";

        $r13 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r18 = virtualinvoke $r24.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r13);

        $r5 = virtualinvoke $r24.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>();

        $r25 = virtualinvoke $r5.<java.security.AlgorithmParameters: byte[] getEncoded()>();

        $r5 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)>("DES");

        virtualinvoke $r5.<java.security.AlgorithmParameters: void init(byte[])>($r25);

        $r24 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/CBC/PKCS5Padding");

        virtualinvoke $r24.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(2, $r23, $r5);

        $r18 = virtualinvoke $r24.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r18);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r13, $r18);

        if $z0 != 0 goto label8;

        r28 = new java.lang.Exception;

        specialinvoke r28.<java.lang.Exception: void <init>(java.lang.String)>("DES in CBC mode recovered text is different from cleartext");

        throw r28;

     label8:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("DES in CBC mode recovered text is same as cleartext");

        return;

        catch javax.crypto.ShortBufferException from label2 to label3 with label5;
    }

    public static java.lang.String toHexString(byte[])
    {
        byte[] $r0;
        java.lang.StringBuffer $r1;
        int $i0, $i1, $i3;
        java.lang.String $r2, varReplacer3232;
        byte $b2;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = $r0[$i1];

        staticinvoke <com.dpmaker.pro.DHKeyAgreement: void byte2hex(byte,java.lang.StringBuffer)>($b2, $r1);

        $i3 = $i0 + -1;

        if $i1 >= $i3 goto label2;

        varReplacer3232 = ":";

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(varReplacer3232);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private void usage()
    {
        com.dpmaker.pro.DHKeyAgreement $r0;
        java.io.PrintStream $r1;

        $r0 := @this: com.dpmaker.pro.DHKeyAgreement;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("DHKeyAgreement usage: ");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("[-gen]");

        return;
    }
}
