public class kr.co.nexon.mdev.crypt.NXCrypto extends java.lang.Object
{
    private static final int AES_KEY_SIZE;
    private static final java.lang.String ALGORITHM_AES;
    private static final java.lang.String ALGORITHM_HMAC_SHA_256;
    private static final java.lang.String ALGORITHM_RSA;
    private static final java.lang.String CHARSET_UTF_8;
    public static final int CIPHER_DECRYPT_MODE;
    public static final int CIPHER_ENCRYPT_MODE;
    private static final java.lang.String CIPHER_TRANSFORMATION_AES;
    private static final java.lang.String CIPHER_TRANSFORMATION_RSA;
    private static final int RSA_EXPONENT_RADIX;
    private static final int RSA_MODULUS_RADIX;

    public void <init>()
    {
        kr.co.nexon.mdev.crypt.NXCrypto $r0;

        $r0 := @this: kr.co.nexon.mdev.crypt.NXCrypto;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] cipherWithAES128(java.lang.String, byte[], int) throws java.lang.Exception
    {
        java.lang.String $r0, varReplacer1971;
        byte[] $r1, $r2;
        int $i0, varReplacer1970;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        varReplacer1971 = "UTF-8";

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer1971);

        varReplacer1970 = 1;

        $r1 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] cipherWithAES128(byte[],byte[],int)>($r2, $r1, varReplacer1970);

        return $r1;
    }

    private static byte[] cipherWithAES128(byte[], byte[], int) throws java.lang.Exception
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, varReplacer1974, varReplacer1975, varReplacer1977;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.Cipher $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9;
        null_type varReplacer1973;
        java.lang.String varReplacer1976, varReplacer1978;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        if $r0 == null goto label01;

        if $r1 == null goto label01;

        if $i0 == 1 goto label02;

        if $i0 == 2 goto label02;

     label01:
        varReplacer1973 = null;

        return varReplacer1973;

     label02:
        $r2 = newarray (byte)[16];

        $i1 = lengthof $r0;

     label03:
        varReplacer1977 = 16;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, varReplacer1977);

        varReplacer1974 = 0;

        varReplacer1975 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer1974, $r2, varReplacer1974, $i1);

     label04:
        $r3 = new javax.crypto.spec.SecretKeySpec;

     label05:
        varReplacer1978 = "AES";

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer1978);

        varReplacer1976 = "AES/ECB/PKCS5Padding";

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1976);

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>($i0, $r3);

        $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label06:
        return $r0;

     label07:
        $r5 := @caughtexception;

        throw $r5;

     label08:
        $r6 := @caughtexception;

        throw $r6;

     label09:
        $r7 := @caughtexception;

        throw $r7;

     label10:
        $r8 := @caughtexception;

        throw $r8;

     label11:
        $r9 := @caughtexception;

        throw $r9;

        catch java.security.NoSuchAlgorithmException from label03 to label04 with label07;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label07;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label08;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label08;
        catch java.security.InvalidKeyException from label03 to label04 with label09;
        catch java.security.InvalidKeyException from label05 to label06 with label09;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label10;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label10;
        catch javax.crypto.BadPaddingException from label03 to label04 with label11;
        catch javax.crypto.BadPaddingException from label05 to label06 with label11;
    }

    public static byte[] decryptWithAES128(java.lang.String, byte[]) throws java.lang.Exception
    {
        java.lang.String $r0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r1 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] cipherWithAES128(java.lang.String,byte[],int)>($r0, $r1, 2);

        return $r1;
    }

    public static byte[] decryptWithAES128(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        int varReplacer7681;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        varReplacer7681 = 2;

        $r0 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] cipherWithAES128(byte[],byte[],int)>($r0, $r1, varReplacer7681);

        return $r0;
    }

    public static java.lang.String decryptWithAES128ToHex(java.lang.String, byte[]) throws java.lang.Exception
    {
        java.lang.String $r0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r1 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] cipherWithAES128(java.lang.String,byte[],int)>($r0, $r1, 2);

        $r0 = staticinvoke <kr.co.nexon.mdev.util.NXByteUtil: java.lang.String bytesToHexString(byte[])>($r1);

        return $r0;
    }

    public static java.lang.String decryptWithAES128ToHex(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r0 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] cipherWithAES128(byte[],byte[],int)>($r0, $r1, 2);

        $r2 = staticinvoke <kr.co.nexon.mdev.util.NXByteUtil: java.lang.String bytesToHexString(byte[])>($r0);

        return $r2;
    }

    public static byte[] encodeHmacSha256(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, varReplacer7032, varReplacer7033, varReplacer7034, varReplacer7035;
        javax.crypto.spec.SecretKeySpec $r2;
        java.lang.NullPointerException $r3;
        byte[] $r4;
        javax.crypto.Mac $r5;
        java.lang.Throwable $r6, $r7, $r8;
        java.lang.Exception $r9;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r2 = new javax.crypto.spec.SecretKeySpec;

     label2:
        varReplacer7032 = "UTF-8";

        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer7032);

        varReplacer7034 = "HmacSHA256";

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer7034);

        varReplacer7033 = "HmacSHA256";

        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer7033);

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r2);

        varReplacer7035 = "UTF-8";

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer7035);

        $r4 = virtualinvoke $r5.<javax.crypto.Mac: byte[] doFinal(byte[])>($r4);

     label3:
        return $r4;

     label4:
        $r6 := @caughtexception;

        throw $r6;

     label5:
        $r7 := @caughtexception;

        throw $r7;

     label6:
        $r8 := @caughtexception;

        throw $r8;

     label7:
        $r9 := @caughtexception;

        throw $r9;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
        catch java.io.UnsupportedEncodingException from label2 to label3 with label5;
        catch java.security.InvalidKeyException from label2 to label3 with label6;
        catch java.lang.Exception from label2 to label3 with label7;
    }

    public static java.lang.String encodeHmacSha256ToHexString(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, varReplacer7031;
        byte[] $r2;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        varReplacer7031 = "NexonUser";

        $r2 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] encodeHmacSha256(java.lang.String,java.lang.String)>(varReplacer7031, $r1);

        $r0 = staticinvoke <kr.co.nexon.mdev.util.NXByteUtil: java.lang.String bytesToHexString(byte[])>($r2);

        return $r0;
    }

    public static byte[] encryptWithAES128(java.lang.String, byte[]) throws java.lang.Exception
    {
        java.lang.String $r0;
        byte[] $r1;
        int varReplacer1966;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        varReplacer1966 = 1;

        $r1 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] cipherWithAES128(java.lang.String,byte[],int)>($r0, $r1, varReplacer1966);

        return $r1;
    }

    public static byte[] encryptWithAES128(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        int varReplacer7473;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        varReplacer7473 = 1;

        $r0 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] cipherWithAES128(byte[],byte[],int)>($r0, $r1, varReplacer7473);

        return $r0;
    }

    public static java.lang.String encryptWithAES128ToHex(java.lang.String, byte[]) throws java.lang.Exception
    {
        java.lang.String $r0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r1 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] cipherWithAES128(java.lang.String,byte[],int)>($r0, $r1, 1);

        $r0 = staticinvoke <kr.co.nexon.mdev.util.NXByteUtil: java.lang.String bytesToHexString(byte[])>($r1);

        return $r0;
    }

    public static java.lang.String encryptWithAES128ToHex(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r0 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] cipherWithAES128(byte[],byte[],int)>($r0, $r1, 1);

        $r2 = staticinvoke <kr.co.nexon.mdev.util.NXByteUtil: java.lang.String bytesToHexString(byte[])>($r0);

        return $r2;
    }

    public static byte[] encryptWithRSA(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, $r2;
        java.math.BigInteger $r3, $r4;
        java.security.spec.RSAPublicKeySpec $r5;
        java.lang.NullPointerException $r6;
        java.security.KeyFactory $r7;
        java.security.PublicKey $r8;
        java.security.interfaces.RSAPublicKey $r9;
        javax.crypto.Cipher $r10;
        byte[] $r11;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.Exception $r18;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r0 == null goto label01;

        if $r1 == null goto label01;

        if $r2 != null goto label02;

     label01:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label02:
        $r3 = new java.math.BigInteger;

     label03:
        specialinvoke $r3.<java.math.BigInteger: void <init>(java.lang.String,int)>($r1, 16);

     label04:
        $r4 = new java.math.BigInteger;

     label05:
        specialinvoke $r4.<java.math.BigInteger: void <init>(java.lang.String,int)>($r0, 16);

        $r7 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

     label06:
        $r5 = new java.security.spec.RSAPublicKeySpec;

     label07:
        specialinvoke $r5.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r3, $r4);

        $r8 = virtualinvoke $r7.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r5);

     label08:
        $r9 = (java.security.interfaces.RSAPublicKey) $r8;

     label09:
        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r9);

        $r11 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        $r11 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r11);

     label10:
        return $r11;

     label11:
        $r12 := @caughtexception;

        throw $r12;

     label12:
        $r13 := @caughtexception;

        throw $r13;

     label13:
        $r14 := @caughtexception;

        throw $r14;

     label14:
        $r15 := @caughtexception;

        throw $r15;

     label15:
        $r16 := @caughtexception;

        throw $r16;

     label16:
        $r17 := @caughtexception;

        throw $r17;

     label17:
        $r18 := @caughtexception;

        throw $r18;

        catch java.security.NoSuchAlgorithmException from label03 to label04 with label11;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label11;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label11;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label11;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label12;
        catch java.security.spec.InvalidKeySpecException from label05 to label06 with label12;
        catch java.security.spec.InvalidKeySpecException from label07 to label08 with label12;
        catch java.security.spec.InvalidKeySpecException from label09 to label10 with label12;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label13;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label13;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label13;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label13;
        catch java.security.InvalidKeyException from label03 to label04 with label14;
        catch java.security.InvalidKeyException from label05 to label06 with label14;
        catch java.security.InvalidKeyException from label07 to label08 with label14;
        catch java.security.InvalidKeyException from label09 to label10 with label14;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label15;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label15;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label15;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label15;
        catch javax.crypto.BadPaddingException from label03 to label04 with label16;
        catch javax.crypto.BadPaddingException from label05 to label06 with label16;
        catch javax.crypto.BadPaddingException from label07 to label08 with label16;
        catch javax.crypto.BadPaddingException from label09 to label10 with label16;
        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Exception from label05 to label06 with label17;
        catch java.lang.Exception from label07 to label10 with label17;
    }

    public static java.lang.String encryptWithRSAToHexString(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, $r2;
        byte[] $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <kr.co.nexon.mdev.crypt.NXCrypto: byte[] encryptWithRSA(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        $r0 = staticinvoke <kr.co.nexon.mdev.util.NXByteUtil: java.lang.String bytesToHexString(byte[])>($r3);

        return $r0;
    }
}
