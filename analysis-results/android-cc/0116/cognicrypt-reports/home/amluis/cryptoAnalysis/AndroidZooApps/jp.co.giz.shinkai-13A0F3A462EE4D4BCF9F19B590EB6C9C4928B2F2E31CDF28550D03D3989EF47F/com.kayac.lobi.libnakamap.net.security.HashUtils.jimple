public class com.kayac.lobi.libnakamap.net.security.HashUtils extends java.lang.Object
{

    private void <init>()
    {
        com.kayac.lobi.libnakamap.net.security.HashUtils $r0;

        $r0 := @this: com.kayac.lobi.libnakamap.net.security.HashUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String hmacSha1(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r3, varReplacer252, varReplacer253;
        byte $b0;
        int $i1, $i2, $i4;
        javax.crypto.spec.SecretKeySpec $r2, r9;
        byte[] $r4;
        javax.crypto.Mac $r5;
        short $s3;
        java.lang.StringBuilder $r6, r10;
        java.lang.Throwable $r7, $r8;
        java.security.NoSuchAlgorithmException r11;
        java.security.InvalidKeyException r12;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = "";

        r9 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r9;

     label01:
        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        varReplacer253 = "HmacSHA1";

        specialinvoke r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer253);

        $r0 = virtualinvoke $r2.<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()>();

        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r0);

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r2);

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r4 = virtualinvoke $r5.<javax.crypto.Mac: byte[] doFinal(byte[])>($r4);

     label02:
        $i1 = lengthof $r4;

        $i2 = 0;

     label03:
        if $i2 >= $i1 goto label15;

        $b0 = $r4[$i2];

        $s3 = $b0 & 255;

     label04:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s3);

     label05:
        $r1 = $r0;

     label06:
        $i4 = virtualinvoke $r0.<java.lang.String: int length()>();

     label07:
        if $i4 != 1 goto label10;

        r10 = new java.lang.StringBuilder;

        $r6 = r10;

     label08:
        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        varReplacer252 = "0";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer252);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        $r1 = $r0;

     label10:
        r10 = new java.lang.StringBuilder;

        $r6 = r10;

     label11:
        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label12:
        $r3 = $r0;

        $i2 = $i2 + 1;

        goto label03;

     label13:
        $r7 := @caughtexception;

        r11 = (java.security.NoSuchAlgorithmException) $r7;

        virtualinvoke r11.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        staticinvoke <junit.framework.Assert: void fail()>();

        return $r3;

     label14:
        $r8 := @caughtexception;

        r12 = (java.security.InvalidKeyException) $r8;

        virtualinvoke r12.<java.security.InvalidKeyException: void printStackTrace()>();

        staticinvoke <junit.framework.Assert: void fail()>();

     label15:
        return $r3;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label13;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label13;
        catch java.security.NoSuchAlgorithmException from label06 to label07 with label13;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label13;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label13;
        catch java.security.InvalidKeyException from label01 to label02 with label14;
        catch java.security.InvalidKeyException from label04 to label05 with label14;
        catch java.security.InvalidKeyException from label06 to label07 with label14;
        catch java.security.InvalidKeyException from label08 to label09 with label14;
        catch java.security.InvalidKeyException from label11 to label12 with label14;
    }
}
