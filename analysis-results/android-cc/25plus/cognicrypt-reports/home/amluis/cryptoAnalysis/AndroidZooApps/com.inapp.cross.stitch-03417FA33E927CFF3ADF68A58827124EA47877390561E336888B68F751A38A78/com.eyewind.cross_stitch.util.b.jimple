public class com.eyewind.cross_stitch.util.b extends java.lang.Object
{
    private static java.lang.String a;
    private static byte[] b;

    static void <clinit>()
    {
        byte[] $r0;
        int $i0, $i1;
        byte $b2;
        java.lang.String varReplacer367;

        nop;

        varReplacer367 = "eyewind_";

        <com.eyewind.cross_stitch.util.b: java.lang.String a> = varReplacer367;

        $r0 = newarray (byte)[256];

        <com.eyewind.cross_stitch.util.b: byte[] b> = $r0;

        $i0 = 0;

     label1:
        if $i0 >= 256 goto label2;

        $r0 = <com.eyewind.cross_stitch.util.b: byte[] b>;

        $r0[$i0] = -1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 65;

     label3:
        if $i0 > 90 goto label4;

        $r0 = <com.eyewind.cross_stitch.util.b: byte[] b>;

        $i1 = $i0 + -65;

        $b2 = (byte) $i1;

        $r0[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $i0 = 97;

     label5:
        if $i0 > 122 goto label6;

        $r0 = <com.eyewind.cross_stitch.util.b: byte[] b>;

        $i1 = $i0 + 26;

        $i1 = $i1 + -97;

        $b2 = (byte) $i1;

        $r0[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = 48;

     label7:
        if $i0 > 57 goto label8;

        $r0 = <com.eyewind.cross_stitch.util.b: byte[] b>;

        $i1 = $i0 + 52;

        $i1 = $i1 + -48;

        $b2 = (byte) $i1;

        $r0[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label7;

     label8:
        $r0 = <com.eyewind.cross_stitch.util.b: byte[] b>;

        $r0[43] = 62;

        $r0 = <com.eyewind.cross_stitch.util.b: byte[] b>;

        $r0[47] = 63;

        return;
    }

    public static java.lang.String a(java.io.InputStream)
    {
        java.io.InputStream $r0;
        char[] $r1;
        java.lang.String $r2;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.eyewind.cross_stitch.util.b: char[] e(java.io.InputStream)>($r0);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);

        $r2 = staticinvoke <com.eyewind.cross_stitch.util.b: java.lang.String a(java.lang.String)>($r2);

        return $r2;
    }

    public static java.lang.String a(java.lang.String)
    {
        java.lang.String $r0, varReplacer368;

        nop;

        $r0 := @parameter0: java.lang.String;

        varReplacer368 = "UTF-8";

        $r0 = staticinvoke <com.eyewind.cross_stitch.util.b: java.lang.String a(java.lang.String,java.lang.String)>($r0, varReplacer368);

        return $r0;
    }

    public static java.lang.String a(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer371;
        char[] $r2;
        byte[] $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        $r3 = staticinvoke <com.eyewind.cross_stitch.util.b: byte[] a(char[])>($r2);

        $r3 = staticinvoke <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>($r3);

        $r0 = new java.lang.String;

        varReplacer371 = "UTF-8";

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, varReplacer371);

        return $r0;
    }

    public static void a(java.io.File, byte[])
    {
        java.io.File $r0;
        byte[] $r1;
        java.io.FileOutputStream $r2, $r3;
        java.io.BufferedOutputStream $r4;
        java.lang.Exception $r5, $r8;
        java.io.PrintStream $r6;
        java.lang.Throwable $r7;

        nop;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: byte[];

        $r3 = null;

     label01:
        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

     label02:
        $r4 = new java.io.BufferedOutputStream;

        specialinvoke $r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r2);

     label03:
        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r1);

     label04:
        if $r4 == null goto label06;

     label05:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label06:
        if $r2 == null goto label19;

     label07:
        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label08:
        return;

     label09:
        $r5 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>($r5);

        return;

     label10:
        $r7 := @caughtexception;

        $r4 = null;

     label11:
        if $r4 == null goto label13;

     label12:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label13:
        if $r3 == null goto label15;

     label14:
        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label15:
        throw $r7;

     label16:
        $r8 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>($r8);

        goto label15;

     label17:
        $r7 := @caughtexception;

        $r4 = null;

        $r3 = $r2;

        goto label11;

     label18:
        $r7 := @caughtexception;

        $r3 = $r2;

        goto label11;

     label19:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label12 to label13 with label16;
        catch java.lang.Exception from label14 to label15 with label16;
    }

    private static byte[] a()
    {
        java.security.SecureRandom $r0, r6;
        javax.crypto.KeyGenerator $r1, $r2;
        javax.crypto.SecretKey $r3;
        byte[] $r4;
        java.lang.Throwable $r5;
        java.security.NoSuchAlgorithmException r7;
        java.lang.String varReplacer381;

        nop;

        r6 = new java.security.SecureRandom;

        $r0 = r6;

        specialinvoke r6.<java.security.SecureRandom: void <init>()>();

        $r1 = null;

     label1:
        varReplacer381 = "DES";

        $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer381);

     label2:
        $r1 = $r2;

     label3:
        virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(java.security.SecureRandom)>($r0);

        $r3 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        $r4 = interfaceinvoke $r3.<javax.crypto.SecretKey: byte[] getEncoded()>();

        return $r4;

     label4:
        $r5 := @caughtexception;

        r7 = (java.security.NoSuchAlgorithmException) $r5;

        virtualinvoke r7.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label3;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
    }

    private static byte[] a(byte[])
    {
        byte[] $r0, $r4;
        java.security.SecureRandom $r1, r17;
        javax.crypto.spec.DESKeySpec $r2, r18;
        java.lang.String $r3, varReplacer372, varReplacer374;
        javax.crypto.SecretKeyFactory $r5;
        javax.crypto.SecretKey $r6;
        javax.crypto.Cipher $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.security.InvalidKeyException r19;
        java.security.NoSuchAlgorithmException r20;
        java.security.spec.InvalidKeySpecException r21;
        javax.crypto.NoSuchPaddingException r22;
        java.lang.IllegalStateException r23;
        javax.crypto.IllegalBlockSizeException r24;
        javax.crypto.BadPaddingException r25;
        null_type varReplacer373, varReplacer375, varReplacer377;
        int varReplacer376;

        nop;

        $r0 := @parameter0: byte[];

        r17 = new java.security.SecureRandom;

        $r1 = r17;

        specialinvoke r17.<java.security.SecureRandom: void <init>()>();

        staticinvoke <com.eyewind.cross_stitch.util.b: byte[] a()>();

        r18 = new javax.crypto.spec.DESKeySpec;

        $r2 = r18;

        $r3 = <com.eyewind.cross_stitch.util.b: java.lang.String a>;

     label01:
        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        specialinvoke r18.<javax.crypto.spec.DESKeySpec: void <init>(byte[])>($r4);

     label02:
        varReplacer374 = "DES";

        $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer374);

     label03:
        $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2);

     label04:
        varReplacer372 = "DES";

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer372);

     label05:
        varReplacer376 = 2;

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer376, $r6, $r1);

     label06:
        $r0 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label07:
        return $r0;

     label08:
        $r8 := @caughtexception;

        r19 = (java.security.InvalidKeyException) $r8;

        virtualinvoke r19.<java.security.InvalidKeyException: void printStackTrace()>();

        $r2 = null;

        goto label02;

     label09:
        $r9 := @caughtexception;

        r20 = (java.security.NoSuchAlgorithmException) $r9;

        virtualinvoke r20.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        $r5 = null;

        goto label03;

     label10:
        $r10 := @caughtexception;

        r21 = (java.security.spec.InvalidKeySpecException) $r10;

        virtualinvoke r21.<java.security.spec.InvalidKeySpecException: void printStackTrace()>();

        $r6 = null;

        goto label04;

     label11:
        $r11 := @caughtexception;

        r20 = (java.security.NoSuchAlgorithmException) $r11;

        virtualinvoke r20.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        $r7 = null;

        goto label05;

     label12:
        $r12 := @caughtexception;

        r22 = (javax.crypto.NoSuchPaddingException) $r12;

        virtualinvoke r22.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        $r7 = null;

        goto label05;

     label13:
        $r13 := @caughtexception;

        r19 = (java.security.InvalidKeyException) $r13;

        virtualinvoke r19.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label06;

     label14:
        $r14 := @caughtexception;

        r23 = (java.lang.IllegalStateException) $r14;

        virtualinvoke r23.<java.lang.IllegalStateException: void printStackTrace()>();

        varReplacer377 = null;

        return varReplacer377;

     label15:
        $r15 := @caughtexception;

        r24 = (javax.crypto.IllegalBlockSizeException) $r15;

        virtualinvoke r24.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        varReplacer375 = null;

        return varReplacer375;

     label16:
        $r16 := @caughtexception;

        r25 = (javax.crypto.BadPaddingException) $r16;

        virtualinvoke r25.<javax.crypto.BadPaddingException: void printStackTrace()>();

        varReplacer373 = null;

        return varReplacer373;

        catch java.security.InvalidKeyException from label01 to label02 with label08;
        catch java.security.NoSuchAlgorithmException from label02 to label03 with label09;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label10;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label11;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label12;
        catch java.security.InvalidKeyException from label05 to label06 with label13;
        catch java.lang.IllegalStateException from label06 to label07 with label14;
        catch javax.crypto.IllegalBlockSizeException from label06 to label07 with label15;
        catch javax.crypto.BadPaddingException from label06 to label07 with label16;
    }

    private static byte[] a(char[])
    {
        char[] $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i6, $i7;
        char $c4;
        byte $b5;
        java.lang.Error $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, varReplacer378, varReplacer379, varReplacer380;

        nop;

        $r0 := @parameter0: char[];

        $i0 = 0;

        $i1 = lengthof $r0;

        $i2 = 0;

     label01:
        $i3 = lengthof $r0;

        if $i2 >= $i3 goto label04;

        $c4 = $r0[$i2];

        if $c4 > 255 goto label02;

        $r1 = <com.eyewind.cross_stitch.util.b: byte[] b>;

        $c4 = $r0[$i2];

        $b5 = $r1[$c4];

        if $b5 >= 0 goto label03;

     label02:
        $i1 = $i1 + -1;

     label03:
        $i2 = $i2 + 1;

        goto label01;

     label04:
        $i2 = $i1 / 4;

        $i2 = $i2 * 3;

        $i3 = $i1 % 4;

        if $i3 != 3 goto label05;

        $i2 = $i2 + 2;

     label05:
        $i1 = $i1 % 4;

        if $i1 != 2 goto label06;

        $i2 = $i2 + 1;

     label06:
        $r1 = newarray (byte)[$i2];

        $i1 = 0;

        $i2 = 0;

        $i3 = 0;

     label07:
        $i6 = lengthof $r0;

        if $i0 >= $i6 goto label11;

        $c4 = $r0[$i0];

        if $c4 <= 255 goto label10;

        $b5 = -1;

     label08:
        if $b5 < 0 goto label09;

        $i2 = $i2 << 6;

        $i3 = $i3 + 6;

        $i2 = $i2 | $b5;

        if $i3 < 8 goto label12;

        $i3 = $i3 + -8;

        $i7 = $i2 >> $i3;

        $i7 = $i7 & 255;

        $b5 = (byte) $i7;

        $r1[$i1] = $b5;

        $i1 = $i1 + 1;

     label09:
        $i0 = $i0 + 1;

        goto label07;

     label10:
        $r2 = <com.eyewind.cross_stitch.util.b: byte[] b>;

        $c4 = $r0[$i0];

        $b5 = $r2[$c4];

        goto label08;

     label11:
        $i0 = lengthof $r1;

        if $i1 == $i0 goto label13;

        $r3 = new java.lang.Error;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer379 = "Miscalculated data length (wrote ";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer379);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        varReplacer380 = " instead of ";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer380);

        $i0 = lengthof $r1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer378 = ")";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer378);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>($r5);

        throw $r3;

     label12:
        goto label09;

     label13:
        return $r1;
    }

    public static byte[] b(java.io.InputStream)
    {
        java.io.InputStream $r0;
        byte[] $r1;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.eyewind.cross_stitch.util.b: byte[] d(java.io.InputStream)>($r0);

        $r1 = staticinvoke <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>($r1);

        return $r1;
    }

    private static byte[] b(byte[])
    {
        byte[] $r0, $r4;
        java.security.SecureRandom $r1, r17;
        javax.crypto.spec.DESKeySpec $r2, r18;
        java.lang.String $r3, varReplacer3662, varReplacer3663;
        javax.crypto.SecretKeyFactory $r5;
        javax.crypto.SecretKey $r6;
        javax.crypto.Cipher $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.security.InvalidKeyException r19;
        java.security.NoSuchAlgorithmException r20;
        java.security.spec.InvalidKeySpecException r21;
        javax.crypto.NoSuchPaddingException r22;
        java.lang.IllegalStateException r23;
        javax.crypto.IllegalBlockSizeException r24;
        javax.crypto.BadPaddingException r25;
        int varReplacer3658;
        null_type varReplacer3659, varReplacer3660, varReplacer3661;

        nop;

        $r0 := @parameter0: byte[];

        staticinvoke <com.eyewind.cross_stitch.util.b: byte[] a()>();

        r17 = new java.security.SecureRandom;

        $r1 = r17;

        specialinvoke r17.<java.security.SecureRandom: void <init>()>();

        r18 = new javax.crypto.spec.DESKeySpec;

        $r2 = r18;

        $r3 = <com.eyewind.cross_stitch.util.b: java.lang.String a>;

     label01:
        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        specialinvoke r18.<javax.crypto.spec.DESKeySpec: void <init>(byte[])>($r4);

     label02:
        varReplacer3663 = "DES";

        $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer3663);

     label03:
        $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2);

     label04:
        varReplacer3662 = "DES";

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3662);

     label05:
        varReplacer3658 = 1;

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer3658, $r6, $r1);

     label06:
        $r0 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label07:
        return $r0;

     label08:
        $r8 := @caughtexception;

        r19 = (java.security.InvalidKeyException) $r8;

        virtualinvoke r19.<java.security.InvalidKeyException: void printStackTrace()>();

        $r2 = null;

        goto label02;

     label09:
        $r9 := @caughtexception;

        r20 = (java.security.NoSuchAlgorithmException) $r9;

        virtualinvoke r20.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        $r5 = null;

        goto label03;

     label10:
        $r10 := @caughtexception;

        r21 = (java.security.spec.InvalidKeySpecException) $r10;

        virtualinvoke r21.<java.security.spec.InvalidKeySpecException: void printStackTrace()>();

        $r6 = null;

        goto label04;

     label11:
        $r11 := @caughtexception;

        r20 = (java.security.NoSuchAlgorithmException) $r11;

        virtualinvoke r20.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        $r7 = null;

        goto label05;

     label12:
        $r12 := @caughtexception;

        r22 = (javax.crypto.NoSuchPaddingException) $r12;

        virtualinvoke r22.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        $r7 = null;

        goto label05;

     label13:
        $r13 := @caughtexception;

        r19 = (java.security.InvalidKeyException) $r13;

        virtualinvoke r19.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label06;

     label14:
        $r14 := @caughtexception;

        r23 = (java.lang.IllegalStateException) $r14;

        virtualinvoke r23.<java.lang.IllegalStateException: void printStackTrace()>();

        varReplacer3661 = null;

        return varReplacer3661;

     label15:
        $r15 := @caughtexception;

        r24 = (javax.crypto.IllegalBlockSizeException) $r15;

        virtualinvoke r24.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        varReplacer3659 = null;

        return varReplacer3659;

     label16:
        $r16 := @caughtexception;

        r25 = (javax.crypto.BadPaddingException) $r16;

        virtualinvoke r25.<javax.crypto.BadPaddingException: void printStackTrace()>();

        varReplacer3660 = null;

        return varReplacer3660;

        catch java.security.InvalidKeyException from label01 to label02 with label08;
        catch java.security.NoSuchAlgorithmException from label02 to label03 with label09;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label10;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label11;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label12;
        catch java.security.InvalidKeyException from label05 to label06 with label13;
        catch java.lang.IllegalStateException from label06 to label07 with label14;
        catch javax.crypto.IllegalBlockSizeException from label06 to label07 with label15;
        catch javax.crypto.BadPaddingException from label06 to label07 with label16;
    }

    public static byte[] c(java.io.InputStream)
    {
        java.io.InputStream $r0;
        byte[] $r1;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.eyewind.cross_stitch.util.b: byte[] d(java.io.InputStream)>($r0);

        $r1 = staticinvoke <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>($r1);

        return $r1;
    }

    public static byte[] d(java.io.InputStream)
    {
        java.io.InputStream $r0;
        java.io.ByteArrayOutputStream $r1;
        java.io.BufferedInputStream $r2;
        byte[] $r3;
        int $i0, varReplacer2893;
        java.lang.Throwable $r4;
        java.lang.Exception $r5, $r7;
        java.io.PrintStream $r6;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label01:
        $r2 = new java.io.BufferedInputStream;

        specialinvoke $r2.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r0);

     label02:
        $r3 = newarray (byte)[16384];

     label03:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r3);

     label04:
        if $i0 == -1 goto label13;

        if $i0 <= 0 goto label03;

     label05:
        varReplacer2893 = 0;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r3, varReplacer2893, $i0);

     label06:
        goto label03;

     label07:
        $r4 := @caughtexception;

     label08:
        if $r2 == null goto label10;

     label09:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label10:
        if $r1 == null goto label12;

     label11:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void close()>();

     label12:
        throw $r4;

     label13:
        $r3 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label14:
        if $r2 == null goto label16;

     label15:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label16:
        if $r1 == null goto label22;

     label17:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void close()>();

     label18:
        return $r3;

     label19:
        $r5 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>($r5);

        return $r3;

     label20:
        $r7 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>($r7);

        goto label12;

     label21:
        $r4 := @caughtexception;

        $r2 = null;

        goto label08;

     label22:
        return $r3;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label02 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label20;
        catch java.lang.Exception from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label07;
        catch java.lang.Exception from label15 to label16 with label19;
        catch java.lang.Exception from label17 to label18 with label19;
    }

    private static char[] e(java.io.InputStream)
    {
        java.io.InputStream $r0;
        java.io.InputStreamReader $r1, $r3;
        java.io.CharArrayWriter $r2;
        java.io.BufferedReader $r4;
        char[] $r5;
        int $i0, varReplacer543;
        java.lang.Throwable $r6;
        java.lang.Exception $r7, $r9;
        java.io.PrintStream $r8;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $r3 = null;

        $r2 = new java.io.CharArrayWriter;

        specialinvoke $r2.<java.io.CharArrayWriter: void <init>()>();

     label01:
        $r1 = new java.io.InputStreamReader;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r0);

     label02:
        $r4 = new java.io.BufferedReader;

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

     label03:
        $r5 = newarray (char)[16384];

     label04:
        $i0 = virtualinvoke $r4.<java.io.Reader: int read(char[])>($r5);

     label05:
        if $i0 == -1 goto label16;

        if $i0 <= 0 goto label04;

     label06:
        varReplacer543 = 0;

        virtualinvoke $r2.<java.io.CharArrayWriter: void write(char[],int,int)>($r5, varReplacer543, $i0);

     label07:
        goto label04;

     label08:
        $r6 := @caughtexception;

        $r3 = $r1;

     label09:
        if $r2 == null goto label11;

     label10:
        virtualinvoke $r2.<java.io.CharArrayWriter: void close()>();

     label11:
        if $r4 == null goto label13;

     label12:
        virtualinvoke $r4.<java.io.Reader: void close()>();

     label13:
        if $r3 == null goto label15;

     label14:
        virtualinvoke $r3.<java.io.Reader: void close()>();

     label15:
        throw $r6;

     label16:
        if $r2 == null goto label18;

     label17:
        virtualinvoke $r2.<java.io.CharArrayWriter: void close()>();

     label18:
        if $r4 == null goto label20;

     label19:
        virtualinvoke $r4.<java.io.Reader: void close()>();

     label20:
        if $r1 == null goto label22;

     label21:
        virtualinvoke $r1.<java.io.Reader: void close()>();

     label22:
        $r5 = virtualinvoke $r2.<java.io.CharArrayWriter: char[] toCharArray()>();

        return $r5;

     label23:
        $r7 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.Object)>($r7);

        goto label22;

     label24:
        $r9 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.Object)>($r9);

        goto label15;

     label25:
        $r6 := @caughtexception;

        $r4 = null;

        goto label09;

     label26:
        $r6 := @caughtexception;

        $r4 = null;

        $r3 = $r1;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Exception from label10 to label11 with label24;
        catch java.lang.Exception from label12 to label13 with label24;
        catch java.lang.Exception from label14 to label15 with label24;
        catch java.lang.Exception from label17 to label18 with label23;
        catch java.lang.Exception from label19 to label20 with label23;
        catch java.lang.Exception from label21 to label22 with label23;
    }
}
