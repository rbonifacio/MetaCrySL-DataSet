public class Orion.Soft.d extends java.lang.Object
{

    public static java.lang.String a(java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer5929;
        byte[] $r2, $r3;
        java.lang.Exception $r4;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = "b0ng0z0";

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <Orion.Soft.d: byte[] b(byte[])>($r2);

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <Orion.Soft.d: byte[] a(byte[],byte[])>($r2, $r3);

        $r0 = staticinvoke <Orion.Soft.d: java.lang.String a(byte[])>($r2);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        varReplacer5929 = "";

        return varReplacer5929;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String a(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        byte[] $r2, $r3;
        java.lang.Exception $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <Orion.Soft.d: byte[] b(byte[])>($r2);

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <Orion.Soft.d: byte[] a(byte[],byte[])>($r2, $r3);

        $r0 = staticinvoke <Orion.Soft.d: java.lang.String a(byte[])>($r2);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        return "";

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String a(byte[])
    {
        byte[] $r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2, varReplacer5930;
        int $i0, $i1;
        byte $b2;

        nop;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        varReplacer5930 = "";

        return varReplacer5930;

     label1:
        $r1 = new java.lang.StringBuffer;

        $i0 = lengthof $r0;

        $i0 = $i0 * 2;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i0);

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 < $i1 goto label3;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label3:
        $b2 = $r0[$i0];

        staticinvoke <Orion.Soft.d: void a(java.lang.StringBuffer,byte)>($r1, $b2);

        $i0 = $i0 + 1;

        goto label2;
    }

    private static void a(java.lang.StringBuffer, byte)
    {
        java.lang.StringBuffer $r0;
        byte $b0, $b1;
        java.lang.String $r1;
        char $c2;

        nop;

        $r0 := @parameter0: java.lang.StringBuffer;

        $b0 := @parameter1: byte;

        $r1 = "0123456789ABCDEF";

        $b1 = $b0 >> 4;

        $b1 = $b1 & 15;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($b1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r1 = "0123456789ABCDEF";

        $b0 = $b0 & 15;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($b0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        return;
    }

    private static byte[] a(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.Cipher $r3;
        java.lang.String varReplacer5931, varReplacer5932;
        int varReplacer5933;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = new javax.crypto.spec.SecretKeySpec;

        varReplacer5932 = "AES";

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer5932);

        varReplacer5931 = "AES";

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer5931);

        varReplacer5933 = 1;

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer5933, $r2);

        $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

        return $r0;
    }

    public static java.lang.String b(java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer494;
        byte[] $r2, $r3;
        java.lang.Exception $r4;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = "b0ng0z0";

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <Orion.Soft.d: byte[] b(byte[])>($r2);

        $r3 = staticinvoke <Orion.Soft.d: byte[] c(java.lang.String)>($r0);

        $r2 = staticinvoke <Orion.Soft.d: byte[] b(byte[],byte[])>($r2, $r3);

     label2:
        $r0 = new java.lang.String;

     label3:
        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

     label4:
        return $r0;

     label5:
        $r4 := @caughtexception;

        varReplacer494 = "";

        return varReplacer494;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static byte[] b(byte[]) throws java.lang.Exception
    {
        byte[] $r0;
        javax.crypto.spec.SecretKeySpec $r1;
        java.security.MessageDigest $r2;
        java.lang.String varReplacer501, varReplacer502;

        nop;

        $r0 := @parameter0: byte[];

        varReplacer502 = "MD5";

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer502);

        $r0 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r0);

        $r1 = new javax.crypto.spec.SecretKeySpec;

        varReplacer501 = "AES";

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer501);

        $r0 = virtualinvoke $r1.<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>();

        return $r0;
    }

    private static byte[] b(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.Cipher $r3;
        int varReplacer497;
        java.lang.String varReplacer498, varReplacer499;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = new javax.crypto.spec.SecretKeySpec;

        varReplacer499 = "AES";

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer499);

        varReplacer498 = "AES";

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer498);

        varReplacer497 = 2;

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer497, $r2);

        $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

        return $r0;
    }

    public static byte[] c(java.lang.String)
    {
        java.lang.String $r0, $r2;
        int $i0, $i1, $i2, $i3, varReplacer500;
        byte[] $r1;
        java.lang.Integer $r3;
        byte $b4;

        nop;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 / 2;

        $r1 = newarray (byte)[$i0];

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r1;

     label2:
        $i2 = $i1 * 2;

        $i3 = $i1 * 2;

        $i3 = $i3 + 2;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        varReplacer500 = 16;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r2, varReplacer500);

        $b4 = virtualinvoke $r3.<java.lang.Integer: byte byteValue()>();

        $r1[$i1] = $b4;

        $i1 = $i1 + 1;

        goto label1;
    }
}
