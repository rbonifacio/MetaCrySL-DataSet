public class at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster extends java.lang.Object implements javax.net.ssl.TrustManager, javax.net.ssl.X509TrustManager
{
    private static final java.util.logging.Logger LOGGER;
    private static final java.lang.String SSL_FAILED;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        nop;

        $r0 = class "Lat/generalsolutions/contwise/maps/service/ajax/AllCertificatesAndHostsTruster;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster: java.util.logging.Logger LOGGER> = $r2;

        return;
    }

    public void <init>()
    {
        at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster $r0;

        nop;

        $r0 := @this: at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void apply()
    {
        java.lang.Exception $r0;
        java.lang.Object[] $r1;
        javax.net.ssl.SSLContext $r2;
        java.security.SecureRandom $r3, r9;
        javax.net.ssl.SSLSocketFactory $r4;
        at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster$1 $r5, r10;
        java.util.logging.Logger $r6;
        java.util.logging.Level $r7;
        at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster r8;
        javax.net.ssl.TrustManager[] r11;
        java.lang.String varReplacer226, varReplacer228;
        null_type varReplacer227;

        nop;

        $r1 = newarray (javax.net.ssl.TrustManager)[1];

        r8 = new at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster;

        specialinvoke r8.<at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster: void <init>()>();

        $r1[0] = r8;

     label1:
        varReplacer226 = "SSL";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer226);

     label2:
        r9 = new java.security.SecureRandom;

        $r3 = r9;

     label3:
        specialinvoke r9.<java.security.SecureRandom: void <init>()>();

        r11 = (javax.net.ssl.TrustManager[]) $r1;

        varReplacer227 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer227, r11, $r3);

        $r4 = virtualinvoke $r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        staticinvoke <javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>($r4);

     label4:
        r10 = new at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster$1;

        $r5 = r10;

     label5:
        specialinvoke r10.<at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster$1: void <init>()>();

        staticinvoke <javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)>($r5);

     label6:
        return;

     label7:
        $r0 := @caughtexception;

        $r6 = <at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster: java.util.logging.Logger LOGGER>;

        $r7 = <java.util.logging.Level: java.util.logging.Level INFO>;

        varReplacer228 = "Unable to initialize the Trust Manager to trust all the SSL certificates and HTTPS hosts.";

        virtualinvoke $r6.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r7, varReplacer228);

        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public final void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster $r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2;

        $r0 := @this: at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        return;
    }

    public final void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster $r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2;

        $r0 := @this: at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        return;
    }

    public final java.security.cert.X509Certificate[] getAcceptedIssuers()
    {
        at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster $r0;
        java.security.cert.X509Certificate[] $r1;

        $r0 := @this: at.generalsolutions.contwise.maps.service.ajax.AllCertificatesAndHostsTruster;

        $r1 = newarray (java.security.cert.X509Certificate)[0];

        return $r1;
    }
}
