public class com.amazonaws.services.s3.AmazonS3Client extends com.amazonaws.AmazonWebServiceClient implements com.amazonaws.services.s3.AmazonS3
{
    public static final java.lang.String S3_SERVICE_NAME;
    private static final java.lang.String S3_SIGNER;
    private static final java.lang.String S3_V4_SIGNER;
    private static final com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory bucketConfigurationXmlFactory;
    private static org.apache.commons.logging.Log log;
    private static final com.amazonaws.services.s3.model.transform.RequestPaymentConfigurationXmlFactory requestPaymentConfigurationXmlFactory;
    private final com.amazonaws.auth.AWSCredentialsProvider awsCredentialsProvider;
    private com.amazonaws.services.s3.S3ClientOptions clientOptions;
    volatile java.lang.String clientRegion;
    private final com.amazonaws.services.s3.internal.S3ErrorResponseHandler errorResponseHandler;
    private final com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;
        com.amazonaws.services.s3.metrics.S3ServiceMetric[] $r1;
        java.util.List $r2;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r3;
        com.amazonaws.services.s3.model.transform.RequestPaymentConfigurationXmlFactory $r4;
        java.lang.String varReplacer931, varReplacer932;

        nop;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/amazonaws/services/s3/AmazonS3Client;");

        <com.amazonaws.services.s3.AmazonS3Client: org.apache.commons.logging.Log log> = $r0;

        $r1 = staticinvoke <com.amazonaws.services.s3.metrics.S3ServiceMetric: com.amazonaws.services.s3.metrics.S3ServiceMetric[] values()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        staticinvoke <com.amazonaws.metrics.AwsSdkMetrics: boolean addAll(java.util.Collection)>($r2);

        varReplacer931 = "S3SignerType";

        staticinvoke <com.amazonaws.auth.SignerFactory: void registerSigner(java.lang.String,java.lang.Class)>(varReplacer931, class "Lcom/amazonaws/services/s3/internal/S3Signer;");

        varReplacer932 = "AWSS3V4SignerType";

        staticinvoke <com.amazonaws.auth.SignerFactory: void registerSigner(java.lang.String,java.lang.Class)>(varReplacer932, class "Lcom/amazonaws/services/s3/internal/AWSS3V4Signer;");

        $r3 = new com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory;

        specialinvoke $r3.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: void <init>()>();

        <com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory bucketConfigurationXmlFactory> = $r3;

        $r4 = new com.amazonaws.services.s3.model.transform.RequestPaymentConfigurationXmlFactory;

        specialinvoke $r4.<com.amazonaws.services.s3.model.transform.RequestPaymentConfigurationXmlFactory: void <init>()>();

        <com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.transform.RequestPaymentConfigurationXmlFactory requestPaymentConfigurationXmlFactory> = $r4;

        return;
    }

    public void <init>()
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.auth.DefaultAWSCredentialsProviderChain $r1;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 = new com.amazonaws.auth.DefaultAWSCredentialsProviderChain;

        specialinvoke $r1.<com.amazonaws.auth.DefaultAWSCredentialsProviderChain: void <init>()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentialsProvider)>($r1);

        return;
    }

    public void <init>(com.amazonaws.ClientConfiguration)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.ClientConfiguration $r1;
        com.amazonaws.auth.DefaultAWSCredentialsProviderChain $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.ClientConfiguration;

        $r2 = new com.amazonaws.auth.DefaultAWSCredentialsProviderChain;

        specialinvoke $r2.<com.amazonaws.auth.DefaultAWSCredentialsProviderChain: void <init>()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentialsProvider,com.amazonaws.ClientConfiguration)>($r2, $r1);

        return;
    }

    public void <init>(com.amazonaws.auth.AWSCredentials)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.auth.AWSCredentials $r1;
        com.amazonaws.ClientConfiguration $r2;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.auth.AWSCredentials;

        $r2 = new com.amazonaws.ClientConfiguration;

        specialinvoke $r2.<com.amazonaws.ClientConfiguration: void <init>()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentials,com.amazonaws.ClientConfiguration)>($r1, $r2);

        return;
    }

    public void <init>(com.amazonaws.auth.AWSCredentials, com.amazonaws.ClientConfiguration)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.auth.AWSCredentials $r1;
        com.amazonaws.ClientConfiguration $r2;
        com.amazonaws.internal.StaticCredentialsProvider $r3;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.auth.AWSCredentials;

        $r2 := @parameter1: com.amazonaws.ClientConfiguration;

        $r3 = new com.amazonaws.internal.StaticCredentialsProvider;

        specialinvoke $r3.<com.amazonaws.internal.StaticCredentialsProvider: void <init>(com.amazonaws.auth.AWSCredentials)>($r1);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentialsProvider,com.amazonaws.ClientConfiguration)>($r3, $r2);

        return;
    }

    public void <init>(com.amazonaws.auth.AWSCredentialsProvider)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.auth.AWSCredentialsProvider $r1;
        com.amazonaws.ClientConfiguration $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.auth.AWSCredentialsProvider;

        $r2 = new com.amazonaws.ClientConfiguration;

        specialinvoke $r2.<com.amazonaws.ClientConfiguration: void <init>()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentialsProvider,com.amazonaws.ClientConfiguration)>($r1, $r2);

        return;
    }

    public void <init>(com.amazonaws.auth.AWSCredentialsProvider, com.amazonaws.ClientConfiguration)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.auth.AWSCredentialsProvider $r1;
        com.amazonaws.ClientConfiguration $r2;
        com.amazonaws.http.UrlHttpClient $r3;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.auth.AWSCredentialsProvider;

        $r2 := @parameter1: com.amazonaws.ClientConfiguration;

        $r3 = new com.amazonaws.http.UrlHttpClient;

        specialinvoke $r3.<com.amazonaws.http.UrlHttpClient: void <init>(com.amazonaws.ClientConfiguration)>($r2);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void <init>(com.amazonaws.auth.AWSCredentialsProvider,com.amazonaws.ClientConfiguration,com.amazonaws.http.HttpClient)>($r1, $r2, $r3);

        return;
    }

    public void <init>(com.amazonaws.auth.AWSCredentialsProvider, com.amazonaws.ClientConfiguration, com.amazonaws.http.HttpClient)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.auth.AWSCredentialsProvider $r1;
        com.amazonaws.ClientConfiguration $r2;
        com.amazonaws.http.HttpClient $r3;
        com.amazonaws.services.s3.internal.S3ErrorResponseHandler $r4;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r5;
        com.amazonaws.services.s3.S3ClientOptions $r6;
        null_type varReplacer1841;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.auth.AWSCredentialsProvider;

        $r2 := @parameter1: com.amazonaws.ClientConfiguration;

        $r3 := @parameter2: com.amazonaws.http.HttpClient;

        specialinvoke $r0.<com.amazonaws.AmazonWebServiceClient: void <init>(com.amazonaws.ClientConfiguration,com.amazonaws.http.HttpClient)>($r2, $r3);

        $r4 = new com.amazonaws.services.s3.internal.S3ErrorResponseHandler;

        specialinvoke $r4.<com.amazonaws.services.s3.internal.S3ErrorResponseHandler: void <init>()>();

        $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3ErrorResponseHandler errorResponseHandler> = $r4;

        $r5 = new com.amazonaws.services.s3.internal.S3XmlResponseHandler;

        varReplacer1841 = null;

        specialinvoke $r5.<com.amazonaws.services.s3.internal.S3XmlResponseHandler: void <init>(com.amazonaws.transform.Unmarshaller)>(varReplacer1841);

        $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler> = $r5;

        $r6 = new com.amazonaws.services.s3.S3ClientOptions;

        specialinvoke $r6.<com.amazonaws.services.s3.S3ClientOptions: void <init>()>();

        $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.S3ClientOptions clientOptions> = $r6;

        $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.auth.AWSCredentialsProvider awsCredentialsProvider> = $r1;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void init()>();

        return;
    }

    public void <init>(com.amazonaws.auth.AWSCredentialsProvider, com.amazonaws.ClientConfiguration, com.amazonaws.metrics.RequestMetricCollector)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.auth.AWSCredentialsProvider $r1;
        com.amazonaws.ClientConfiguration $r2;
        com.amazonaws.metrics.RequestMetricCollector $r3;
        com.amazonaws.http.UrlHttpClient $r4;
        com.amazonaws.services.s3.internal.S3ErrorResponseHandler $r5;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r6;
        com.amazonaws.services.s3.S3ClientOptions $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.auth.AWSCredentialsProvider;

        $r2 := @parameter1: com.amazonaws.ClientConfiguration;

        $r3 := @parameter2: com.amazonaws.metrics.RequestMetricCollector;

        $r4 = new com.amazonaws.http.UrlHttpClient;

        specialinvoke $r4.<com.amazonaws.http.UrlHttpClient: void <init>(com.amazonaws.ClientConfiguration)>($r2);

        specialinvoke $r0.<com.amazonaws.AmazonWebServiceClient: void <init>(com.amazonaws.ClientConfiguration,com.amazonaws.http.HttpClient,com.amazonaws.metrics.RequestMetricCollector)>($r2, $r4, $r3);

        $r5 = new com.amazonaws.services.s3.internal.S3ErrorResponseHandler;

        specialinvoke $r5.<com.amazonaws.services.s3.internal.S3ErrorResponseHandler: void <init>()>();

        $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3ErrorResponseHandler errorResponseHandler> = $r5;

        $r6 = new com.amazonaws.services.s3.internal.S3XmlResponseHandler;

        specialinvoke $r6.<com.amazonaws.services.s3.internal.S3XmlResponseHandler: void <init>(com.amazonaws.transform.Unmarshaller)>(null);

        $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler> = $r6;

        $r7 = new com.amazonaws.services.s3.S3ClientOptions;

        specialinvoke $r7.<com.amazonaws.services.s3.S3ClientOptions: void <init>()>();

        $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.S3ClientOptions clientOptions> = $r7;

        $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.auth.AWSCredentialsProvider awsCredentialsProvider> = $r1;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void init()>();

        return;
    }

    private static void addAclHeaders(com.amazonaws.Request, com.amazonaws.services.s3.model.AccessControlList)
    {
        com.amazonaws.Request $r0;
        com.amazonaws.services.s3.model.AccessControlList $r1;
        java.lang.StringBuilder $r2, $r14;
        java.util.HashMap $r3;
        com.amazonaws.services.s3.model.Permission $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.Grant $r8;
        java.util.LinkedList $r9;
        java.util.Collection $r10;
        com.amazonaws.services.s3.model.Grantee $r11;
        com.amazonaws.services.s3.model.Permission[] $r12;
        int $i0, $i1;
        java.lang.String $r13, $r15, varReplacer1144, varReplacer1145, varReplacer1146, varReplacer1147;

        nop;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: com.amazonaws.services.s3.model.AccessControlList;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.AccessControlList: java.util.Set getGrants()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.amazonaws.services.s3.model.Grant) $r7;

        $r4 = virtualinvoke $r8.<com.amazonaws.services.s3.model.Grant: com.amazonaws.services.s3.model.Permission getPermission()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label02;

        $r4 = virtualinvoke $r8.<com.amazonaws.services.s3.model.Grant: com.amazonaws.services.s3.model.Permission getPermission()>();

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r9);

     label02:
        $r4 = virtualinvoke $r8.<com.amazonaws.services.s3.model.Grant: com.amazonaws.services.s3.model.Permission getPermission()>();

        $r7 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r10 = (java.util.Collection) $r7;

        $r11 = virtualinvoke $r8.<com.amazonaws.services.s3.model.Grant: com.amazonaws.services.s3.model.Grantee getGrantee()>();

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>($r11);

        goto label01;

     label03:
        $r12 = staticinvoke <com.amazonaws.services.s3.model.Permission: com.amazonaws.services.s3.model.Permission[] values()>();

        $i0 = lengthof $r12;

        $i1 = 0;

     label04:
        if $i1 >= $i0 goto label10;

        $r4 = $r12[$i1];

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r10 = (java.util.Collection) $r7;

        $z0 = 0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r6 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.amazonaws.services.s3.model.Grantee) $r7;

        if $z0 != 0 goto label07;

        $z0 = 1;

     label06:
        $r13 = interfaceinvoke $r11.<com.amazonaws.services.s3.model.Grantee: java.lang.String getTypeIdentifier()>();

        $r14 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        varReplacer1145 = "=";

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1145);

        varReplacer1147 = "\"";

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1147);

        $r13 = interfaceinvoke $r11.<com.amazonaws.services.s3.model.Grantee: java.lang.String getIdentifier()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        varReplacer1146 = "\"";

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1146);

        goto label05;

     label07:
        varReplacer1144 = ", ";

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1144);

        goto label06;

     label08:
        $r13 = virtualinvoke $r4.<com.amazonaws.services.s3.model.Permission: java.lang.String getHeaderName()>();

        $r15 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>($r13, $r15);

     label09:
        $i1 = $i1 + 1;

        goto label04;

     label10:
        return;
    }

    private static void addDateHeader(com.amazonaws.Request, java.lang.String, java.util.Date)
    {
        com.amazonaws.Request $r0;
        java.lang.String $r1, $r3;
        java.util.Date $r2;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.Date;

        if $r2 == null goto label1;

        $r3 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: java.lang.String formatRfc822Date(java.util.Date)>($r2);

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>($r1, $r3);

     label1:
        return;
    }

    private static void addHeaderIfNotNull(com.amazonaws.Request, java.lang.String, java.lang.String)
    {
        com.amazonaws.Request $r0;
        java.lang.String $r1, $r2;

        nop;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r2 == null goto label1;

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>($r1, $r2);

     label1:
        return;
    }

    private static void addResponseHeaderParameters(com.amazonaws.Request, com.amazonaws.services.s3.model.ResponseHeaderOverrides)
    {
        com.amazonaws.Request $r0;
        com.amazonaws.services.s3.model.ResponseHeaderOverrides $r1;
        java.lang.String $r2;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: com.amazonaws.services.s3.model.ResponseHeaderOverrides;

        if $r1 == null goto label6;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getCacheControl()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getCacheControl()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("response-cache-control", $r2);

     label1:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getContentDisposition()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getContentDisposition()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("response-content-disposition", $r2);

     label2:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getContentEncoding()>();

        if $r2 == null goto label3;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getContentEncoding()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("response-content-encoding", $r2);

     label3:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getContentLanguage()>();

        if $r2 == null goto label4;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getContentLanguage()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("response-content-language", $r2);

     label4:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getContentType()>();

        if $r2 == null goto label5;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getContentType()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("response-content-type", $r2);

     label5:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getExpires()>();

        if $r2 == null goto label6;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ResponseHeaderOverrides: java.lang.String getExpires()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("response-expires", $r2);

     label6:
        return;
    }

    private static void addStringListHeader(com.amazonaws.Request, java.lang.String, java.util.List)
    {
        com.amazonaws.Request $r0;
        java.lang.String $r1, $r3;
        java.util.List $r2;
        boolean $z0;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.List;

        if $r2 == null goto label1;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: java.lang.String join(java.util.List)>($r2);

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>($r1, $r3);

     label1:
        return;
    }

    private void assertParameterNotNull(java.lang.Object, java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        return;
    }

    private void beforeRequest(com.amazonaws.Request)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.Request $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.amazonaws.handlers.RequestHandler2 $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.util.List requestHandler2s>;

        if $r2 == null goto label2;

        $r2 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.util.List requestHandler2s>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.amazonaws.handlers.RequestHandler2) $r4;

        virtualinvoke $r5.<com.amazonaws.handlers.RequestHandler2: void beforeRequest(com.amazonaws.Request)>($r1);

        goto label1;

     label2:
        return;
    }

    private long calculateContentLength(java.io.InputStream)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.io.InputStream $r1;
        byte[] $r2;
        java.lang.Throwable $r3;
        int $i0, varReplacer1637;
        long $l1, $l2;
        com.amazonaws.AmazonClientException $r4;
        java.lang.String varReplacer1636;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.io.InputStream;

        $l1 = 0L;

        $r2 = newarray (byte)[8192];

        varReplacer1637 = -1;

        virtualinvoke $r1.<java.io.InputStream: void mark(int)>(varReplacer1637);

     label1:
        $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>($r2);

     label2:
        if $i0 == -1 goto label3;

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        goto label1;

     label3:
        virtualinvoke $r1.<java.io.InputStream: void reset()>();

     label4:
        return $l1;

     label5:
        $r3 := @caughtexception;

        $r4 = new com.amazonaws.AmazonClientException;

        varReplacer1636 = "Could not calculate content length.";

        specialinvoke $r4.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1636, $r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    private void configRequest(com.amazonaws.Request, java.lang.String, java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.Request $r1;
        java.lang.String $r2, $r3, $r10, varReplacer1779, varReplacer1780, varReplacer1781, varReplacer1782, varReplacer1783, varReplacer1784, varReplacer1785, varReplacer1786;
        com.amazonaws.services.s3.S3ClientOptions $r4;
        boolean $z0;
        com.amazonaws.AmazonWebServiceRequest $r5;
        java.lang.StringBuilder $r6;
        com.amazonaws.ClientConfiguration $r7;
        com.amazonaws.Protocol $r8;
        java.net.URI $r9;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.S3ClientOptions clientOptions>;

        $z0 = virtualinvoke $r4.<com.amazonaws.services.s3.S3ClientOptions: boolean isAccelerateModeEnabled()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r1.<com.amazonaws.Request: com.amazonaws.AmazonWebServiceRequest getOriginalRequest()>();

        $z0 = $r5 instanceof com.amazonaws.services.s3.model.S3AccelerateUnsupported;

        if $z0 != 0 goto label3;

        $z0 = staticinvoke <com.amazonaws.services.s3.internal.BucketNameUtils: boolean isDNSBucketName(java.lang.String)>($r2);

        if $z0 == 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.ClientConfiguration clientConfiguration>;

        $r8 = virtualinvoke $r7.<com.amazonaws.ClientConfiguration: com.amazonaws.Protocol getProtocol()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        varReplacer1783 = "://";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1783);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        varReplacer1780 = ".";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1780);

        varReplacer1784 = "s3-accelerate.amazonaws.com";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1784);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r2);

        interfaceinvoke $r1.<com.amazonaws.Request: void setEndpoint(java.net.URI)>($r9);

        if $r3 == null goto label2;

        varReplacer1779 = "/";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer1779);

        if $z0 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer1785 = "/";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1785);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        interfaceinvoke $r1.<com.amazonaws.Request: void setResourcePath(java.lang.String)>($r2);

        return;

     label2:
        $r2 = $r3;

        goto label1;

     label3:
        $r4 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.S3ClientOptions clientOptions>;

        $z0 = virtualinvoke $r4.<com.amazonaws.services.s3.S3ClientOptions: boolean isPathStyleAccess()>();

        if $z0 != 0 goto label5;

        $z0 = staticinvoke <com.amazonaws.services.s3.internal.BucketNameUtils: boolean isDNSBucketName(java.lang.String)>($r2);

        if $z0 == 0 goto label5;

        $r9 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URI endpoint>;

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getHost()>();

        $z0 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: boolean validIP(java.lang.String)>($r10);

        if $z0 != 0 goto label5;

        $r9 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URI convertToVirtualHostEndpoint(java.lang.String)>($r2);

        interfaceinvoke $r1.<com.amazonaws.Request: void setEndpoint(java.net.URI)>($r9);

        if $r3 == null goto label4;

        varReplacer1781 = "/";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer1781);

        if $z0 == 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer1786 = "/";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1786);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        interfaceinvoke $r1.<com.amazonaws.Request: void setResourcePath(java.lang.String)>($r3);

        return;

     label5:
        $r9 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URI endpoint>;

        interfaceinvoke $r1.<com.amazonaws.Request: void setEndpoint(java.net.URI)>($r9);

        if $r2 == null goto label8;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        varReplacer1782 = "/";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1782);

        if $r3 == null goto label7;

        $r2 = $r3;

     label6:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<com.amazonaws.Request: void setResourcePath(java.lang.String)>($r2);

        return;

     label7:
        $r2 = "";

        goto label6;

     label8:
        return;
    }

    private java.net.URI convertToVirtualHostEndpoint(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r6, varReplacer1815, varReplacer1816, varReplacer1817;
        java.lang.Throwable $r2;
        java.net.URI $r3, $r5;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new java.net.URI;

        $r4 = new java.lang.StringBuilder;

     label1:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

     label2:
        $r5 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URI endpoint>;

     label3:
        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String getScheme()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer1816 = "://";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1816);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        varReplacer1817 = ".";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1817);

     label4:
        $r5 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URI endpoint>;

     label5:
        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String getAuthority()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r6);

     label6:
        return $r3;

     label7:
        $r2 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer1815 = "Invalid bucket name: ";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1815);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r2);

        throw $r7;

        catch java.net.URISyntaxException from label1 to label2 with label7;
        catch java.net.URISyntaxException from label3 to label4 with label7;
        catch java.net.URISyntaxException from label5 to label6 with label7;
    }

    private void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor, int)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.event.ProgressListenerCallbackExecutor $r1;
        int $i0;
        com.amazonaws.event.ProgressEvent $r2;
        long varReplacer1632;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.event.ProgressListenerCallbackExecutor;

        $i0 := @parameter1: int;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = new com.amazonaws.event.ProgressEvent;

        varReplacer1632 = 0L;

        specialinvoke $r2.<com.amazonaws.event.ProgressEvent: void <init>(long)>(varReplacer1632);

        virtualinvoke $r2.<com.amazonaws.event.ProgressEvent: void setEventCode(int)>($i0);

        virtualinvoke $r1.<com.amazonaws.event.ProgressListenerCallbackExecutor: void progressChanged(com.amazonaws.event.ProgressEvent)>($r2);

        return;
    }

    private com.amazonaws.services.s3.model.AccessControlList getAcl(java.lang.String, java.lang.String, java.lang.String, com.amazonaws.AmazonWebServiceRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.AmazonWebServiceRequest $r4;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.AccessControlList $r8;
        com.amazonaws.services.s3.model.GenericBucketRequest r9;
        com.amazonaws.services.s3.model.transform.Unmarshallers$AccessControlListUnmarshaller r10;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.amazonaws.AmazonWebServiceRequest;

        if $r4 != null goto label1;

        r9 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        $r4 = r9;

        specialinvoke r9.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

     label1:
        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, $r2, $r4, $r5);

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("acl", null);

        if $r3 == null goto label2;

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versionId", $r3);

     label2:
        r10 = new com.amazonaws.services.s3.model.transform.Unmarshallers$AccessControlListUnmarshaller;

        specialinvoke r10.<com.amazonaws.services.s3.model.transform.Unmarshallers$AccessControlListUnmarshaller: void <init>()>();

        $r7 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r6, r10, $r1, $r2);

        $r8 = (com.amazonaws.services.s3.model.AccessControlList) $r7;

        return $r8;
    }

    private com.amazonaws.services.s3.model.RequestPaymentConfiguration getBucketRequestPayment(com.amazonaws.services.s3.model.GetRequestPaymentConfigurationRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetRequestPaymentConfigurationRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.model.transform.Unmarshallers$RequestPaymentConfigurationUnmarshaller $r5;
        java.lang.Object $r6;
        com.amazonaws.services.s3.model.RequestPaymentConfiguration $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetRequestPaymentConfigurationRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetRequestPaymentConfigurationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified while getting the Request Payment Configuration.");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("requestPayment", null);

        interfaceinvoke $r4.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r5 = new com.amazonaws.services.s3.model.transform.Unmarshallers$RequestPaymentConfigurationUnmarshaller;

        specialinvoke $r5.<com.amazonaws.services.s3.model.transform.Unmarshallers$RequestPaymentConfigurationUnmarshaller: void <init>()>();

        $r6 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        $r7 = (com.amazonaws.services.s3.model.RequestPaymentConfiguration) $r6;

        return $r7;
    }

    private void init()
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.handlers.HandlerChainFactory $r1;
        java.lang.String $r2, varReplacer1848, varReplacer1849;
        java.util.List $r3, $r4;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r2 = <com.amazonaws.services.s3.internal.Constants: java.lang.String S3_HOSTNAME>;

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setEndpoint(java.lang.String)>($r2);

        $r1 = new com.amazonaws.handlers.HandlerChainFactory;

        specialinvoke $r1.<com.amazonaws.handlers.HandlerChainFactory: void <init>()>();

        $r3 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.util.List requestHandler2s>;

        varReplacer1848 = "/com/amazonaws/services/s3/request.handlers";

        $r4 = virtualinvoke $r1.<com.amazonaws.handlers.HandlerChainFactory: java.util.List newRequestHandlerChain(java.lang.String)>(varReplacer1848);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r3 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.util.List requestHandler2s>;

        varReplacer1849 = "/com/amazonaws/services/s3/request.handler2s";

        $r4 = virtualinvoke $r1.<com.amazonaws.handlers.HandlerChainFactory: java.util.List newRequestHandler2Chain(java.lang.String)>(varReplacer1849);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    private java.lang.Object invoke(com.amazonaws.Request, com.amazonaws.http.HttpResponseHandler, java.lang.String, java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.Request $r1;
        com.amazonaws.http.HttpResponseHandler $r2;
        java.lang.String $r3, $r4, varReplacer1633, varReplacer1634, varReplacer1635;
        com.amazonaws.AmazonWebServiceRequest $r5;
        com.amazonaws.http.ExecutionContext $r6;
        com.amazonaws.util.AWSRequestMetrics $r7;
        com.amazonaws.util.AWSRequestMetrics$Field $r8;
        com.amazonaws.Response $r9, $r17;
        int $i0;
        java.util.Map $r10;
        boolean $z0;
        com.amazonaws.auth.AWSCredentialsProvider $r11;
        com.amazonaws.auth.AWSCredentials $r12, $r13;
        com.amazonaws.auth.Signer $r14;
        com.amazonaws.http.AmazonHttpClient $r15;
        com.amazonaws.services.s3.internal.S3ErrorResponseHandler $r16;
        java.lang.Object $r18;
        java.lang.Throwable $r19;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 := @parameter1: com.amazonaws.http.HttpResponseHandler;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 = interfaceinvoke $r1.<com.amazonaws.Request: com.amazonaws.AmazonWebServiceRequest getOriginalRequest()>();

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.http.ExecutionContext createExecutionContext(com.amazonaws.AmazonWebServiceRequest)>($r5);

        $r7 = virtualinvoke $r6.<com.amazonaws.http.ExecutionContext: com.amazonaws.util.AWSRequestMetrics getAwsRequestMetrics()>();

        interfaceinvoke $r1.<com.amazonaws.Request: void setAWSRequestMetrics(com.amazonaws.util.AWSRequestMetrics)>($r7);

        $r8 = <com.amazonaws.util.AWSRequestMetrics$Field: com.amazonaws.util.AWSRequestMetrics$Field ClientExecuteTime>;

        virtualinvoke $r7.<com.amazonaws.util.AWSRequestMetrics: void startEvent(com.amazonaws.metrics.MetricType)>($r8);

        $r9 = null;

     label01:
        $i0 = $r0.<com.amazonaws.services.s3.AmazonS3Client: int timeOffset>;

        interfaceinvoke $r1.<com.amazonaws.Request: void setTimeOffset(int)>($i0);

        $r10 = interfaceinvoke $r1.<com.amazonaws.Request: java.util.Map getHeaders()>();

        varReplacer1633 = "Content-Type";

        $z0 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(varReplacer1633);

     label02:
        if $z0 != 0 goto label04;

     label03:
        varReplacer1634 = "Content-Type";

        varReplacer1635 = "application/x-www-form-urlencoded; charset=utf-8";

        interfaceinvoke $r1.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1634, varReplacer1635);

     label04:
        $r11 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.auth.AWSCredentialsProvider awsCredentialsProvider>;

        $r12 = interfaceinvoke $r11.<com.amazonaws.auth.AWSCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>();

     label05:
        $r13 = virtualinvoke $r5.<com.amazonaws.AmazonWebServiceRequest: com.amazonaws.auth.AWSCredentials getRequestCredentials()>();

     label06:
        if $r13 == null goto label08;

     label07:
        $r12 = virtualinvoke $r5.<com.amazonaws.AmazonWebServiceRequest: com.amazonaws.auth.AWSCredentials getRequestCredentials()>();

     label08:
        $r14 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.auth.Signer createSigner(com.amazonaws.Request,java.lang.String,java.lang.String)>($r1, $r3, $r4);

        virtualinvoke $r6.<com.amazonaws.http.ExecutionContext: void setSigner(com.amazonaws.auth.Signer)>($r14);

        virtualinvoke $r6.<com.amazonaws.http.ExecutionContext: void setCredentials(com.amazonaws.auth.AWSCredentials)>($r12);

        $r15 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.http.AmazonHttpClient client>;

        $r16 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3ErrorResponseHandler errorResponseHandler>;

        $r17 = virtualinvoke $r15.<com.amazonaws.http.AmazonHttpClient: com.amazonaws.Response execute(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,com.amazonaws.http.HttpResponseHandler,com.amazonaws.http.ExecutionContext)>($r1, $r2, $r16, $r6);

     label09:
        $r9 = $r17;

     label10:
        $r18 = virtualinvoke $r17.<com.amazonaws.Response: java.lang.Object getAwsResponse()>();

     label11:
        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void endClientExecution(com.amazonaws.util.AWSRequestMetrics,com.amazonaws.Request,com.amazonaws.Response)>($r7, $r1, $r17);

        return $r18;

     label12:
        $r19 := @caughtexception;

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void endClientExecution(com.amazonaws.util.AWSRequestMetrics,com.amazonaws.Request,com.amazonaws.Response)>($r7, $r1, $r9);

        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    private java.lang.Object invoke(com.amazonaws.Request, com.amazonaws.transform.Unmarshaller, java.lang.String, java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.Request $r1;
        com.amazonaws.transform.Unmarshaller $r2;
        java.lang.String $r3, $r4;
        java.lang.Object $r5;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 := @parameter1: com.amazonaws.transform.Unmarshaller;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r6 = new com.amazonaws.services.s3.internal.S3XmlResponseHandler;

        specialinvoke $r6.<com.amazonaws.services.s3.internal.S3XmlResponseHandler: void <init>(com.amazonaws.transform.Unmarshaller)>($r2);

        $r5 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r1, $r6, $r3, $r4);

        return $r5;
    }

    protected static void populateRequestMetadata(com.amazonaws.Request, com.amazonaws.services.s3.model.ObjectMetadata)
    {
        com.amazonaws.Request $r0;
        com.amazonaws.services.s3.model.ObjectMetadata $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r4, $r9, varReplacer1134, varReplacer1135, varReplacer1136, varReplacer1137, varReplacer1138;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.util.Set $r6;
        java.util.Iterator $r7;
        java.util.Map$Entry $r8;
        java.util.Date $r10;
        java.lang.StringBuilder $r11;

        nop;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: com.amazonaws.services.s3.model.ObjectMetadata;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectMetadata: java.util.Map getRawMetadata()>();

        varReplacer1136 = "x-amz-server-side-encryption-aws-kms-key-id";

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(varReplacer1136);

        if $r3 == null goto label1;

        $r4 = "aws:kms";

        varReplacer1134 = "x-amz-server-side-encryption";

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(varReplacer1134);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        varReplacer1138 = "If you specify a KMS key id for server side encryption, you must also set the SSEAlgorithm to ObjectMetadata.KMS_SERVER_SIDE_ENCRYPTION";

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer1138);

        throw $r5;

     label1:
        if $r2 == null goto label3;

        $r6 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r3;

        $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = (java.lang.String) $r3;

        $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>($r4, $r9);

        goto label2;

     label3:
        $r10 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectMetadata: java.util.Date getHttpExpiresDate()>();

        if $r10 == null goto label4;

        $r4 = staticinvoke <com.amazonaws.util.DateUtils: java.lang.String formatRFC822Date(java.util.Date)>($r10);

        varReplacer1135 = "Expires";

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1135, $r4);

     label4:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectMetadata: java.util.Map getUserMetadata()>();

        if $r2 == null goto label8;

        $r6 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r3;

        $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r3;

        $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r4 = (java.lang.String) $r3;

        if $r9 == null goto label6;

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

     label6:
        if $r4 == null goto label7;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

     label7:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        varReplacer1137 = "x-amz-meta-";

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1137);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>($r9, $r4);

        goto label5;

     label8:
        return;
    }

    private static void populateRequestWithCopyObjectParameters(com.amazonaws.Request, com.amazonaws.services.s3.model.CopyObjectRequest)
    {
        com.amazonaws.Request $r0;
        com.amazonaws.services.s3.model.CopyObjectRequest $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r4, $r5;
        java.util.Date $r6;
        java.util.List $r7;
        com.amazonaws.services.s3.model.AccessControlList $r8;
        com.amazonaws.services.s3.model.ObjectMetadata $r9;
        com.amazonaws.services.s3.model.SSECustomerKey $r10;
        com.amazonaws.services.s3.model.CannedAccessControlList $r11;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: com.amazonaws.services.s3.model.CopyObjectRequest;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getSourceBucketName()>();

        $r3 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String urlEncode(java.lang.String,boolean)>($r3, 1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getSourceKey()>();

        $r3 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String urlEncode(java.lang.String,boolean)>($r3, 1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r3;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getSourceVersionId()>();

        if $r5 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?versionId=");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getSourceVersionId()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-copy-source", $r4);

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.util.Date getModifiedSinceConstraint()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addDateHeader(com.amazonaws.Request,java.lang.String,java.util.Date)>($r0, "x-amz-copy-source-if-modified-since", $r6);

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.util.Date getUnmodifiedSinceConstraint()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addDateHeader(com.amazonaws.Request,java.lang.String,java.util.Date)>($r0, "x-amz-copy-source-if-unmodified-since", $r6);

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.util.List getMatchingETagConstraints()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addStringListHeader(com.amazonaws.Request,java.lang.String,java.util.List)>($r0, "x-amz-copy-source-if-match", $r7);

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.util.List getNonmatchingETagConstraints()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addStringListHeader(com.amazonaws.Request,java.lang.String,java.util.List)>($r0, "x-amz-copy-source-if-none-match", $r7);

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: com.amazonaws.services.s3.model.AccessControlList getAccessControlList()>();

        if $r8 == null goto label6;

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: com.amazonaws.services.s3.model.AccessControlList getAccessControlList()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addAclHeaders(com.amazonaws.Request,com.amazonaws.services.s3.model.AccessControlList)>($r0, $r8);

     label2:
        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getStorageClass()>();

        if $r3 == null goto label3;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getStorageClass()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-storage-class", $r3);

     label3:
        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getRedirectLocation()>();

        if $r3 == null goto label4;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getRedirectLocation()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-website-redirect-location", $r3);

     label4:
        $r9 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: com.amazonaws.services.s3.model.ObjectMetadata getNewObjectMetadata()>();

        if $r9 == null goto label5;

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-metadata-directive", "REPLACE");

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateRequestMetadata(com.amazonaws.Request,com.amazonaws.services.s3.model.ObjectMetadata)>($r0, $r9);

     label5:
        $r10 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: com.amazonaws.services.s3.model.SSECustomerKey getSourceSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSourceSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r0, $r10);

        $r10 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: com.amazonaws.services.s3.model.SSECustomerKey getDestinationSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r0, $r10);

        return;

     label6:
        $r11 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: com.amazonaws.services.s3.model.CannedAccessControlList getCannedAccessControlList()>();

        if $r11 == null goto label2;

        $r11 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: com.amazonaws.services.s3.model.CannedAccessControlList getCannedAccessControlList()>();

        $r3 = virtualinvoke $r11.<com.amazonaws.services.s3.model.CannedAccessControlList: java.lang.String toString()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-acl", $r3);

        goto label2;
    }

    private static void populateRequestWithCopyPartParameters(com.amazonaws.Request, com.amazonaws.services.s3.model.CopyPartRequest)
    {
        com.amazonaws.Request $r0;
        com.amazonaws.services.s3.model.CopyPartRequest $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r4, $r5;
        java.util.Date $r6;
        java.util.List $r7;
        java.lang.Long $r8;
        com.amazonaws.services.s3.model.SSECustomerKey $r9;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: com.amazonaws.services.s3.model.CopyPartRequest;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getSourceBucketName()>();

        $r3 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String urlEncode(java.lang.String,boolean)>($r3, 1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getSourceKey()>();

        $r3 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String urlEncode(java.lang.String,boolean)>($r3, 1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r3;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getSourceVersionId()>();

        if $r5 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?versionId=");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getSourceVersionId()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-copy-source", $r4);

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.util.Date getModifiedSinceConstraint()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addDateHeader(com.amazonaws.Request,java.lang.String,java.util.Date)>($r0, "x-amz-copy-source-if-modified-since", $r6);

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.util.Date getUnmodifiedSinceConstraint()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addDateHeader(com.amazonaws.Request,java.lang.String,java.util.Date)>($r0, "x-amz-copy-source-if-unmodified-since", $r6);

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.util.List getMatchingETagConstraints()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addStringListHeader(com.amazonaws.Request,java.lang.String,java.util.List)>($r0, "x-amz-copy-source-if-match", $r7);

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.util.List getNonmatchingETagConstraints()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addStringListHeader(com.amazonaws.Request,java.lang.String,java.util.List)>($r0, "x-amz-copy-source-if-none-match", $r7);

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.Long getFirstByte()>();

        if $r8 == null goto label2;

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.Long getLastByte()>();

        if $r8 == null goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes=");

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.Long getFirstByte()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.Long getLastByte()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-copy-source-range", $r3);

     label2:
        $r9 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: com.amazonaws.services.s3.model.SSECustomerKey getSourceSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSourceSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r0, $r9);

        $r9 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: com.amazonaws.services.s3.model.SSECustomerKey getDestinationSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r0, $r9);

        return;
    }

    private void populateRequestWithMfaDetails(com.amazonaws.Request, com.amazonaws.services.s3.model.MultiFactorAuthentication)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.Request $r1;
        com.amazonaws.services.s3.model.MultiFactorAuthentication $r2;
        java.net.URI $r3;
        java.lang.String $r4;
        boolean $z0;
        org.apache.commons.logging.Log $r5;
        java.lang.StringBuilder $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 := @parameter1: com.amazonaws.services.s3.model.MultiFactorAuthentication;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = interfaceinvoke $r1.<com.amazonaws.Request: java.net.URI getEndpoint()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("http://");

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("http://", "https://");

        $r3 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r4);

        interfaceinvoke $r1.<com.amazonaws.Request: void setEndpoint(java.net.URI)>($r3);

        $r5 = <com.amazonaws.services.s3.AmazonS3Client: org.apache.commons.logging.Log log>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Overriding current endpoint to use HTTPS as required by S3 for requests containing an MFA header");

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<com.amazonaws.services.s3.model.MultiFactorAuthentication: java.lang.String getDeviceSerialNumber()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r4 = virtualinvoke $r2.<com.amazonaws.services.s3.model.MultiFactorAuthentication: java.lang.String getToken()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-mfa", $r4);

        return;
    }

    private static void populateSourceSseCpkRequestParameters(com.amazonaws.Request, com.amazonaws.services.s3.model.SSECustomerKey)
    {
        com.amazonaws.Request $r0;
        com.amazonaws.services.s3.model.SSECustomerKey $r1;
        java.lang.String $r2;
        byte[] $r3;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: com.amazonaws.services.s3.model.SSECustomerKey;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getAlgorithm()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addHeaderIfNotNull(com.amazonaws.Request,java.lang.String,java.lang.String)>($r0, "x-amz-copy-source-server-side-encryption-customer-algorithm", $r2);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addHeaderIfNotNull(com.amazonaws.Request,java.lang.String,java.lang.String)>($r0, "x-amz-copy-source-server-side-encryption-customer-key", $r2);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getMd5()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addHeaderIfNotNull(com.amazonaws.Request,java.lang.String,java.lang.String)>($r0, "x-amz-copy-source-server-side-encryption-customer-key-MD5", $r2);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getKey()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getMd5()>();

        if $r2 != null goto label2;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getKey()>();

        $r3 = staticinvoke <com.amazonaws.util.Base64: byte[] decode(java.lang.String)>($r2);

        $r2 = staticinvoke <com.amazonaws.util.Md5Utils: java.lang.String md5AsBase64(byte[])>($r3);

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-copy-source-server-side-encryption-customer-key-MD5", $r2);

     label2:
        return;
    }

    private static void populateSseCpkRequestParameters(com.amazonaws.Request, com.amazonaws.services.s3.model.SSECustomerKey)
    {
        com.amazonaws.Request $r0;
        com.amazonaws.services.s3.model.SSECustomerKey $r1;
        java.lang.String $r2, varReplacer1140, varReplacer1141, varReplacer1142, varReplacer1143;
        byte[] $r3;

        nop;

        $r0 := @parameter0: com.amazonaws.Request;

        $r1 := @parameter1: com.amazonaws.services.s3.model.SSECustomerKey;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getAlgorithm()>();

        varReplacer1143 = "x-amz-server-side-encryption-customer-algorithm";

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addHeaderIfNotNull(com.amazonaws.Request,java.lang.String,java.lang.String)>($r0, varReplacer1143, $r2);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getKey()>();

        varReplacer1141 = "x-amz-server-side-encryption-customer-key";

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addHeaderIfNotNull(com.amazonaws.Request,java.lang.String,java.lang.String)>($r0, varReplacer1141, $r2);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getMd5()>();

        varReplacer1142 = "x-amz-server-side-encryption-customer-key-MD5";

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addHeaderIfNotNull(com.amazonaws.Request,java.lang.String,java.lang.String)>($r0, varReplacer1142, $r2);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getKey()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getMd5()>();

        if $r2 != null goto label2;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SSECustomerKey: java.lang.String getKey()>();

        $r3 = staticinvoke <com.amazonaws.util.Base64: byte[] decode(java.lang.String)>($r2);

        $r2 = staticinvoke <com.amazonaws.util.Md5Utils: java.lang.String md5AsBase64(byte[])>($r3);

        varReplacer1140 = "x-amz-server-side-encryption-customer-key-MD5";

        interfaceinvoke $r0.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1140, $r2);

     label2:
        return;
    }

    private void setAcl(java.lang.String, java.lang.String, java.lang.String, com.amazonaws.services.s3.model.AccessControlList, com.amazonaws.AmazonWebServiceRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.AccessControlList $r4;
        com.amazonaws.AmazonWebServiceRequest $r5;
        com.amazonaws.http.HttpMethodName $r6;
        com.amazonaws.Request $r7;
        byte[] $r8;
        int $i0;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r9;
        com.amazonaws.services.s3.model.GenericBucketRequest r10;
        com.amazonaws.services.s3.model.transform.AclXmlFactory r11;
        java.io.ByteArrayInputStream r12;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.amazonaws.services.s3.model.AccessControlList;

        $r5 := @parameter4: com.amazonaws.AmazonWebServiceRequest;

        if $r5 != null goto label1;

        r10 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        $r5 = r10;

        specialinvoke r10.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

     label1:
        $r6 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r7 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, $r2, $r5, $r6);

        interfaceinvoke $r7.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("acl", null);

        if $r3 == null goto label2;

        interfaceinvoke $r7.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versionId", $r3);

     label2:
        r11 = new com.amazonaws.services.s3.model.transform.AclXmlFactory;

        specialinvoke r11.<com.amazonaws.services.s3.model.transform.AclXmlFactory: void <init>()>();

        $r8 = virtualinvoke r11.<com.amazonaws.services.s3.model.transform.AclXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.AccessControlList)>($r4);

        interfaceinvoke $r7.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "text/plain");

        $i0 = lengthof $r8;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r7.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r3);

        r12 = new java.io.ByteArrayInputStream;

        specialinvoke r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        interfaceinvoke $r7.<com.amazonaws.Request: void setContent(java.io.InputStream)>(r12);

        $r9 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r7, $r9, $r1, $r2);

        return;
    }

    private void setAcl(java.lang.String, java.lang.String, java.lang.String, com.amazonaws.services.s3.model.CannedAccessControlList, com.amazonaws.AmazonWebServiceRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3, $r8;
        com.amazonaws.services.s3.model.CannedAccessControlList $r4;
        com.amazonaws.AmazonWebServiceRequest $r5;
        com.amazonaws.http.HttpMethodName $r6;
        com.amazonaws.Request $r7;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r9;
        com.amazonaws.services.s3.model.GenericBucketRequest r10;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.amazonaws.services.s3.model.CannedAccessControlList;

        $r5 := @parameter4: com.amazonaws.AmazonWebServiceRequest;

        if $r5 != null goto label1;

        r10 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        $r5 = r10;

        specialinvoke r10.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

     label1:
        $r6 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r7 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, $r2, $r5, $r6);

        interfaceinvoke $r7.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("acl", null);

        $r8 = virtualinvoke $r4.<com.amazonaws.services.s3.model.CannedAccessControlList: java.lang.String toString()>();

        interfaceinvoke $r7.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-acl", $r8);

        if $r3 == null goto label2;

        interfaceinvoke $r7.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versionId", $r3);

     label2:
        $r9 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r7, $r9, $r1, $r2);

        return;
    }

    private void setBucketAcl0(java.lang.String, com.amazonaws.services.s3.model.AccessControlList, com.amazonaws.metrics.RequestMetricCollector)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.AccessControlList $r2;
        com.amazonaws.metrics.RequestMetricCollector $r3;
        com.amazonaws.AmazonWebServiceRequest $r4;
        com.amazonaws.services.s3.model.GenericBucketRequest $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.AccessControlList;

        $r3 := @parameter2: com.amazonaws.metrics.RequestMetricCollector;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name parameter must be specified when setting a bucket\'s ACL");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The ACL parameter must be specified when setting a bucket\'s ACL");

        $r5 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r5.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r4 = virtualinvoke $r5.<com.amazonaws.services.s3.model.GenericBucketRequest: com.amazonaws.AmazonWebServiceRequest withRequestMetricCollector(com.amazonaws.metrics.RequestMetricCollector)>($r3);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.AccessControlList,com.amazonaws.AmazonWebServiceRequest)>($r1, null, null, $r2, $r4);

        return;
    }

    private void setBucketAcl0(java.lang.String, com.amazonaws.services.s3.model.CannedAccessControlList, com.amazonaws.metrics.RequestMetricCollector) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.CannedAccessControlList $r2;
        com.amazonaws.metrics.RequestMetricCollector $r3;
        com.amazonaws.AmazonWebServiceRequest $r4;
        com.amazonaws.services.s3.model.GenericBucketRequest $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.CannedAccessControlList;

        $r3 := @parameter2: com.amazonaws.metrics.RequestMetricCollector;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name parameter must be specified when setting a bucket\'s ACL");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The ACL parameter must be specified when setting a bucket\'s ACL");

        $r5 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r5.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r4 = virtualinvoke $r5.<com.amazonaws.services.s3.model.GenericBucketRequest: com.amazonaws.AmazonWebServiceRequest withRequestMetricCollector(com.amazonaws.metrics.RequestMetricCollector)>($r3);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.CannedAccessControlList,com.amazonaws.AmazonWebServiceRequest)>($r1, null, null, $r2, $r4);

        return;
    }

    private void setBucketRequestPayment(com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest $r1;
        java.lang.String $r2, $r8;
        com.amazonaws.services.s3.model.RequestPaymentConfiguration $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.model.transform.RequestPaymentConfigurationXmlFactory $r6;
        byte[] $r7;
        int $i0;
        java.io.ByteArrayInputStream $r9;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r10;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest: com.amazonaws.services.s3.model.RequestPaymentConfiguration getConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified while setting the Requester Pays.");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The request payment configuration parameter must be specified when setting the Requester Pays.");

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("requestPayment", null);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r6 = <com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.transform.RequestPaymentConfigurationXmlFactory requestPaymentConfigurationXmlFactory>;

        $r7 = virtualinvoke $r6.<com.amazonaws.services.s3.model.transform.RequestPaymentConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.RequestPaymentConfiguration)>($r3);

        $i0 = lengthof $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r8);

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        interfaceinvoke $r5.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r9);

        $r10 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r5, $r10, $r2, null);

        return;
    }

    private void setObjectAcl0(java.lang.String, java.lang.String, java.lang.String, com.amazonaws.services.s3.model.AccessControlList, com.amazonaws.metrics.RequestMetricCollector) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.AccessControlList $r4;
        com.amazonaws.metrics.RequestMetricCollector $r5;
        com.amazonaws.AmazonWebServiceRequest $r6;
        com.amazonaws.services.s3.model.GenericBucketRequest $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.amazonaws.services.s3.model.AccessControlList;

        $r5 := @parameter4: com.amazonaws.metrics.RequestMetricCollector;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name parameter must be specified when setting an object\'s ACL");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The key parameter must be specified when setting an object\'s ACL");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The ACL parameter must be specified when setting an object\'s ACL");

        $r7 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r7.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.GenericBucketRequest: com.amazonaws.AmazonWebServiceRequest withRequestMetricCollector(com.amazonaws.metrics.RequestMetricCollector)>($r5);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.AccessControlList,com.amazonaws.AmazonWebServiceRequest)>($r1, $r2, $r3, $r4, $r6);

        return;
    }

    private void setObjectAcl0(java.lang.String, java.lang.String, java.lang.String, com.amazonaws.services.s3.model.CannedAccessControlList, com.amazonaws.metrics.RequestMetricCollector) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.CannedAccessControlList $r4;
        com.amazonaws.metrics.RequestMetricCollector $r5;
        com.amazonaws.AmazonWebServiceRequest $r6;
        com.amazonaws.services.s3.model.GenericBucketRequest $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.amazonaws.services.s3.model.CannedAccessControlList;

        $r5 := @parameter4: com.amazonaws.metrics.RequestMetricCollector;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name parameter must be specified when setting an object\'s ACL");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The key parameter must be specified when setting an object\'s ACL");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The ACL parameter must be specified when setting an object\'s ACL");

        $r7 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r7.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.GenericBucketRequest: com.amazonaws.AmazonWebServiceRequest withRequestMetricCollector(com.amazonaws.metrics.RequestMetricCollector)>($r5);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.CannedAccessControlList,com.amazonaws.AmazonWebServiceRequest)>($r1, $r2, $r3, $r4, $r6);

        return;
    }

    private void setZeroContentLength(com.amazonaws.Request)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.Request $r1;
        java.lang.String $r2, varReplacer1628;
        int varReplacer1627;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.Request;

        varReplacer1627 = 0;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(varReplacer1627);

        varReplacer1628 = "Content-Length";

        interfaceinvoke $r1.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1628, $r2);

        return;
    }

    private java.io.ByteArrayInputStream toByteArray(java.io.InputStream)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.io.InputStream $r1;
        byte[] $r2;
        java.lang.Throwable $r3;
        int $i0, $i1, $i2, varReplacer1630;
        com.amazonaws.AmazonClientException $r4;
        java.io.ByteArrayInputStream $r5;
        java.lang.String varReplacer1629, varReplacer1631;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = newarray (byte)[262144];

        $i0 = 0;

        $i1 = 262144;

     label01:
        if $i1 <= 0 goto label04;

     label02:
        $i2 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, $i0, $i1);

     label03:
        if $i2 == -1 goto label04;

        $i0 = $i0 + $i2;

        $i1 = $i1 - $i2;

        goto label01;

     label04:
        $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>();

     label05:
        if $i1 == -1 goto label09;

        $r4 = new com.amazonaws.AmazonClientException;

     label06:
        varReplacer1631 = "Input stream exceeds 256k buffer.";

        specialinvoke $r4.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(varReplacer1631);

     label07:
        throw $r4;

     label08:
        $r3 := @caughtexception;

        $r4 = new com.amazonaws.AmazonClientException;

        varReplacer1629 = "Failed to read from inputstream";

        specialinvoke $r4.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1629, $r3);

        throw $r4;

     label09:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label10:
        $r5 = new java.io.ByteArrayInputStream;

        varReplacer1630 = 0;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r2, varReplacer1630, $i0);

        return $r5;

        catch java.io.IOException from label02 to label03 with label08;
        catch java.io.IOException from label04 to label05 with label08;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label08;
    }

    private boolean upgradeToSigV4(com.amazonaws.Request)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.Request $r1;
        java.lang.String $r2, $r4, varReplacer1679;
        java.net.URI $r3;
        boolean $z0;
        int varReplacer1677, varReplacer1678, varReplacer1680;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.Request;

        varReplacer1679 = "com.amazonaws.services.s3.enforceV4";

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(varReplacer1679);

        if $r2 == null goto label1;

        varReplacer1678 = 1;

        return varReplacer1678;

     label1:
        $r3 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URI endpoint>;

        $r4 = virtualinvoke $r3.<java.net.URI: java.lang.String getHost()>();

        $r2 = <com.amazonaws.services.s3.internal.Constants: java.lang.String S3_HOSTNAME>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        varReplacer1677 = 0;

        return varReplacer1677;

     label2:
        varReplacer1680 = 1;

        return varReplacer1680;
    }

    private boolean validIP(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, varReplacer1814;
        java.lang.Throwable $r2;
        java.lang.String[] $r3;
        int $i0, $i1, $i2, varReplacer1810, varReplacer1811, varReplacer1812, varReplacer1813;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        varReplacer1812 = 0;

        return varReplacer1812;

     label1:
        varReplacer1814 = "\\.";

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer1814);

        $i0 = lengthof $r3;

        if $i0 != 4 goto label7;

        $i0 = lengthof $r3;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label6;

        $r1 = $r3[$i1];

     label3:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

     label4:
        if $i2 < 0 goto label7;

        if $i2 > 255 goto label7;

        $i1 = $i1 + 1;

        goto label2;

     label5:
        $r2 := @caughtexception;

        varReplacer1813 = 0;

        return varReplacer1813;

     label6:
        varReplacer1811 = 1;

        return varReplacer1811;

     label7:
        varReplacer1810 = 0;

        return varReplacer1810;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public void abortMultipartUpload(com.amazonaws.services.s3.model.AbortMultipartUploadRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.AbortMultipartUploadRequest $r1;
        java.lang.String $r2, $r3, $r6;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.AbortMultipartUploadRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request parameter must be specified when aborting a multipart upload");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.AbortMultipartUploadRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when aborting a multipart upload");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.AbortMultipartUploadRequest: java.lang.String getKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The key parameter must be specified when aborting a multipart upload");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.AbortMultipartUploadRequest: java.lang.String getUploadId()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The upload ID parameter must be specified when aborting a multipart upload");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.AbortMultipartUploadRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.AbortMultipartUploadRequest: java.lang.String getKey()>();

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, $r3, $r1, $r4);

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.AbortMultipartUploadRequest: java.lang.String getUploadId()>();

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("uploadId", $r6);

        $r7 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r5, $r7, $r2, $r3);

        return;
    }

    public void changeObjectStorageClass(java.lang.String, java.lang.String, com.amazonaws.services.s3.model.StorageClass) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.StorageClass $r3;
        com.amazonaws.services.s3.model.CopyObjectRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.amazonaws.services.s3.model.StorageClass;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucketName parameter must be specified when changing an object\'s storage class");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The key parameter must be specified when changing an object\'s storage class");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The newStorageClass parameter must be specified when changing an object\'s storage class");

        $r4 = new com.amazonaws.services.s3.model.CopyObjectRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r1, $r2);

        $r1 = virtualinvoke $r3.<com.amazonaws.services.s3.model.StorageClass: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<com.amazonaws.services.s3.model.CopyObjectRequest: com.amazonaws.services.s3.model.CopyObjectRequest withStorageClass(java.lang.String)>($r1);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.CopyObjectResult copyObject(com.amazonaws.services.s3.model.CopyObjectRequest)>($r4);

        return;
    }

    public com.amazonaws.services.s3.model.CompleteMultipartUploadResult completeMultipartUpload(com.amazonaws.services.s3.model.CompleteMultipartUploadRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.CompleteMultipartUploadRequest $r1;
        com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain $r2;
        java.lang.String $r3, $r4, $r5;
        java.util.List $r6;
        com.amazonaws.http.HttpMethodName $r7;
        com.amazonaws.Request $r8;
        byte[] $r9;
        int $i0;
        java.io.ByteArrayInputStream $r10;
        com.amazonaws.services.s3.model.transform.Unmarshallers$CompleteMultipartUploadResultUnmarshaller $r11;
        com.amazonaws.services.s3.internal.HeaderHandler[] $r12;
        com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler $r13;
        com.amazonaws.services.s3.internal.ObjectExpirationHeaderHandler $r14;
        java.lang.Object $r15;
        com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CompleteMultipartUploadHandler $r16;
        com.amazonaws.services.s3.model.CompleteMultipartUploadResult $r17;
        java.util.Map $r18;
        com.amazonaws.services.s3.model.AmazonS3Exception $r19;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.CompleteMultipartUploadRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request parameter must be specified when completing a multipart upload");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CompleteMultipartUploadRequest: java.lang.String getBucketName()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CompleteMultipartUploadRequest: java.lang.String getKey()>();

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CompleteMultipartUploadRequest: java.lang.String getUploadId()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket name parameter must be specified when completing a multipart upload");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The key parameter must be specified when completing a multipart upload");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r5, "The upload ID parameter must be specified when completing a multipart upload");

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CompleteMultipartUploadRequest: java.util.List getPartETags()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r6, "The part ETags parameter must be specified when completing a multipart upload");

        $r7 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName POST>;

        $r8 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r3, $r4, $r1, $r7);

        interfaceinvoke $r8.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("uploadId", $r5);

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CompleteMultipartUploadRequest: java.util.List getPartETags()>();

        $r9 = staticinvoke <com.amazonaws.services.s3.model.transform.RequestXmlFactory: byte[] convertToXmlByteArray(java.util.List)>($r6);

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "text/plain");

        $i0 = lengthof $r9;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r5);

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        interfaceinvoke $r8.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r10);

        $r2 = new com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain;

        $r11 = new com.amazonaws.services.s3.model.transform.Unmarshallers$CompleteMultipartUploadResultUnmarshaller;

        specialinvoke $r11.<com.amazonaws.services.s3.model.transform.Unmarshallers$CompleteMultipartUploadResultUnmarshaller: void <init>()>();

        $r12 = newarray (com.amazonaws.services.s3.internal.HeaderHandler)[2];

        $r13 = new com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler;

        specialinvoke $r13.<com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler: void <init>()>();

        $r12[0] = $r13;

        $r14 = new com.amazonaws.services.s3.internal.ObjectExpirationHeaderHandler;

        specialinvoke $r14.<com.amazonaws.services.s3.internal.ObjectExpirationHeaderHandler: void <init>()>();

        $r12[1] = $r14;

        specialinvoke $r2.<com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain: void <init>(com.amazonaws.transform.Unmarshaller,com.amazonaws.services.s3.internal.HeaderHandler[])>($r11, $r12);

        $r15 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r8, $r2, $r3, $r4);

        $r16 = (com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CompleteMultipartUploadHandler) $r15;

        $r17 = virtualinvoke $r16.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CompleteMultipartUploadHandler: com.amazonaws.services.s3.model.CompleteMultipartUploadResult getCompleteMultipartUploadResult()>();

        if $r17 == null goto label1;

        $r18 = virtualinvoke $r2.<com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain: java.util.Map getResponseHeaders()>();

        $r15 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-version-id");

        $r3 = (java.lang.String) $r15;

        $r17 = virtualinvoke $r16.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CompleteMultipartUploadHandler: com.amazonaws.services.s3.model.CompleteMultipartUploadResult getCompleteMultipartUploadResult()>();

        virtualinvoke $r17.<com.amazonaws.services.s3.model.CompleteMultipartUploadResult: void setVersionId(java.lang.String)>($r3);

        $r17 = virtualinvoke $r16.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CompleteMultipartUploadHandler: com.amazonaws.services.s3.model.CompleteMultipartUploadResult getCompleteMultipartUploadResult()>();

        return $r17;

     label1:
        $r19 = virtualinvoke $r16.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CompleteMultipartUploadHandler: com.amazonaws.services.s3.model.AmazonS3Exception getAmazonS3Exception()>();

        throw $r19;
    }

    public com.amazonaws.services.s3.model.CopyObjectResult copyObject(com.amazonaws.services.s3.model.CopyObjectRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.CopyObjectRequest $r1;
        com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain $r2;
        java.lang.String $r3, $r4, $r14, $r15;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.model.transform.Unmarshallers$CopyObjectUnmarshaller $r7;
        com.amazonaws.services.s3.internal.HeaderHandler[] $r8;
        com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler $r9;
        com.amazonaws.services.s3.internal.S3VersionHeaderHandler $r10;
        com.amazonaws.services.s3.internal.ObjectExpirationHeaderHandler $r11;
        java.lang.Object $r12;
        com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler $r13;
        com.amazonaws.services.s3.model.AmazonS3Exception $r16;
        com.amazonaws.AmazonServiceException$ErrorType $r17;
        int $i0;
        com.amazonaws.services.s3.model.CopyObjectResult $r18;
        java.util.Date $r19;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.CopyObjectRequest;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getSourceBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The source bucket name must be specified when copying an object");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getSourceKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The source object key must be specified when copying an object");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getDestinationBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The destination bucket name must be specified when copying an object");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getDestinationKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The destination object key must be specified when copying an object");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getDestinationKey()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyObjectRequest: java.lang.String getDestinationBucketName()>();

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r4, $r3, $r1, $r5);

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateRequestWithCopyObjectParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.CopyObjectRequest)>($r6, $r1);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setZeroContentLength(com.amazonaws.Request)>($r6);

        $r2 = new com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain;

        $r7 = new com.amazonaws.services.s3.model.transform.Unmarshallers$CopyObjectUnmarshaller;

     label01:
        specialinvoke $r7.<com.amazonaws.services.s3.model.transform.Unmarshallers$CopyObjectUnmarshaller: void <init>()>();

     label02:
        $r8 = newarray (com.amazonaws.services.s3.internal.HeaderHandler)[3];

        $r9 = new com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler;

     label03:
        specialinvoke $r9.<com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler: void <init>()>();

     label04:
        $r8[0] = $r9;

        $r10 = new com.amazonaws.services.s3.internal.S3VersionHeaderHandler;

     label05:
        specialinvoke $r10.<com.amazonaws.services.s3.internal.S3VersionHeaderHandler: void <init>()>();

     label06:
        $r8[1] = $r10;

        $r11 = new com.amazonaws.services.s3.internal.ObjectExpirationHeaderHandler;

     label07:
        specialinvoke $r11.<com.amazonaws.services.s3.internal.ObjectExpirationHeaderHandler: void <init>()>();

     label08:
        $r8[2] = $r11;

     label09:
        specialinvoke $r2.<com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain: void <init>(com.amazonaws.transform.Unmarshaller,com.amazonaws.services.s3.internal.HeaderHandler[])>($r7, $r8);

        $r12 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r2, $r4, $r3);

     label10:
        $r13 = (com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler) $r12;

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorCode()>();

        if $r3 == null goto label13;

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorCode()>();

        $r4 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorMessage()>();

        $r14 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorRequestId()>();

        $r15 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorHostId()>();

        $r16 = new com.amazonaws.services.s3.model.AmazonS3Exception;

        specialinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void <init>(java.lang.String)>($r4);

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setErrorCode(java.lang.String)>($r3);

        $r17 = <com.amazonaws.AmazonServiceException$ErrorType: com.amazonaws.AmazonServiceException$ErrorType Service>;

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setErrorType(com.amazonaws.AmazonServiceException$ErrorType)>($r17);

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setRequestId(java.lang.String)>($r14);

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setExtendedRequestId(java.lang.String)>($r15);

        $r3 = interfaceinvoke $r6.<com.amazonaws.Request: java.lang.String getServiceName()>();

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setServiceName(java.lang.String)>($r3);

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setStatusCode(int)>(200);

        throw $r16;

     label11:
        $r16 := @caughtexception;

        $i0 = virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: int getStatusCode()>();

        if $i0 != 412 goto label12;

        return null;

     label12:
        throw $r16;

     label13:
        $r18 = new com.amazonaws.services.s3.model.CopyObjectResult;

        specialinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void <init>()>();

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getETag()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void setETag(java.lang.String)>($r3);

        $r19 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.util.Date getLastModified()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void setLastModifiedDate(java.util.Date)>($r19);

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getVersionId()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void setVersionId(java.lang.String)>($r3);

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getSSEAlgorithm()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void setSSEAlgorithm(java.lang.String)>($r3);

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getSSEKMSKeyId()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void setSSEKMSKeyId(java.lang.String)>($r3);

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getSSECustomerAlgorithm()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void setSSECustomerAlgorithm(java.lang.String)>($r3);

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getSSECustomerKeyMd5()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void setSSECustomerKeyMd5(java.lang.String)>($r3);

        $r19 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.util.Date getExpirationTime()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void setExpirationTime(java.util.Date)>($r19);

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getExpirationTimeRuleId()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyObjectResult: void setExpirationTimeRuleId(java.lang.String)>($r3);

        return $r18;

        catch com.amazonaws.services.s3.model.AmazonS3Exception from label01 to label02 with label11;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label03 to label04 with label11;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label05 to label06 with label11;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label07 to label08 with label11;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label09 to label10 with label11;
    }

    public com.amazonaws.services.s3.model.CopyObjectResult copyObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3, $r4;
        com.amazonaws.services.s3.model.CopyObjectResult $r5;
        com.amazonaws.services.s3.model.CopyObjectRequest $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r6 = new com.amazonaws.services.s3.model.CopyObjectRequest;

        specialinvoke $r6.<com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, $r4);

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.CopyObjectResult copyObject(com.amazonaws.services.s3.model.CopyObjectRequest)>($r6);

        return $r5;
    }

    public com.amazonaws.services.s3.model.CopyPartResult copyPart(com.amazonaws.services.s3.model.CopyPartRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.CopyPartRequest $r1;
        com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain $r2;
        java.lang.String $r3, $r5, $r8, $r15;
        int $i0;
        java.lang.Integer $r4;
        com.amazonaws.http.HttpMethodName $r6;
        com.amazonaws.Request $r7;
        com.amazonaws.services.s3.model.transform.Unmarshallers$CopyObjectUnmarshaller $r9;
        com.amazonaws.services.s3.internal.HeaderHandler[] $r10;
        com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler $r11;
        com.amazonaws.services.s3.internal.S3VersionHeaderHandler $r12;
        java.lang.Object $r13;
        com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler $r14;
        com.amazonaws.services.s3.model.AmazonS3Exception $r16;
        com.amazonaws.AmazonServiceException$ErrorType $r17;
        com.amazonaws.services.s3.model.CopyPartResult $r18;
        java.util.Date $r19;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.CopyPartRequest;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getSourceBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The source bucket name must be specified when copying a part");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getSourceKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The source object key must be specified when copying a part");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getDestinationBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The destination bucket name must be specified when copying a part");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getUploadId()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The upload id must be specified when copying a part");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getDestinationKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The destination object key must be specified when copying a part");

        $i0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: int getPartNumber()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The part number must be specified when copying a part");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getDestinationKey()>();

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getDestinationBucketName()>();

        $r6 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r7 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r5, $r3, $r1, $r6);

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateRequestWithCopyPartParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.CopyPartRequest)>($r7, $r1);

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: java.lang.String getUploadId()>();

        interfaceinvoke $r7.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("uploadId", $r8);

        $i0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: int getPartNumber()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke $r7.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("partNumber", $r8);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setZeroContentLength(com.amazonaws.Request)>($r7);

        $r2 = new com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain;

        $r9 = new com.amazonaws.services.s3.model.transform.Unmarshallers$CopyObjectUnmarshaller;

     label01:
        specialinvoke $r9.<com.amazonaws.services.s3.model.transform.Unmarshallers$CopyObjectUnmarshaller: void <init>()>();

     label02:
        $r10 = newarray (com.amazonaws.services.s3.internal.HeaderHandler)[2];

        $r11 = new com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler;

     label03:
        specialinvoke $r11.<com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler: void <init>()>();

     label04:
        $r10[0] = $r11;

        $r12 = new com.amazonaws.services.s3.internal.S3VersionHeaderHandler;

     label05:
        specialinvoke $r12.<com.amazonaws.services.s3.internal.S3VersionHeaderHandler: void <init>()>();

     label06:
        $r10[1] = $r12;

     label07:
        specialinvoke $r2.<com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain: void <init>(com.amazonaws.transform.Unmarshaller,com.amazonaws.services.s3.internal.HeaderHandler[])>($r9, $r10);

        $r13 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r7, $r2, $r5, $r3);

     label08:
        $r14 = (com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler) $r13;

        $r3 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorCode()>();

        if $r3 == null goto label11;

        $r3 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorCode()>();

        $r5 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorMessage()>();

        $r8 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorRequestId()>();

        $r15 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getErrorHostId()>();

        $r16 = new com.amazonaws.services.s3.model.AmazonS3Exception;

        specialinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void <init>(java.lang.String)>($r5);

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setErrorCode(java.lang.String)>($r3);

        $r17 = <com.amazonaws.AmazonServiceException$ErrorType: com.amazonaws.AmazonServiceException$ErrorType Service>;

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setErrorType(com.amazonaws.AmazonServiceException$ErrorType)>($r17);

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setRequestId(java.lang.String)>($r8);

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setExtendedRequestId(java.lang.String)>($r15);

        $r3 = interfaceinvoke $r7.<com.amazonaws.Request: java.lang.String getServiceName()>();

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setServiceName(java.lang.String)>($r3);

        virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: void setStatusCode(int)>(200);

        throw $r16;

     label09:
        $r16 := @caughtexception;

        $i0 = virtualinvoke $r16.<com.amazonaws.services.s3.model.AmazonS3Exception: int getStatusCode()>();

        if $i0 != 412 goto label10;

        return null;

     label10:
        throw $r16;

     label11:
        $r18 = new com.amazonaws.services.s3.model.CopyPartResult;

        specialinvoke $r18.<com.amazonaws.services.s3.model.CopyPartResult: void <init>()>();

        $r3 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getETag()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyPartResult: void setETag(java.lang.String)>($r3);

        $i0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CopyPartRequest: int getPartNumber()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyPartResult: void setPartNumber(int)>($i0);

        $r19 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.util.Date getLastModified()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyPartResult: void setLastModifiedDate(java.util.Date)>($r19);

        $r3 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getVersionId()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyPartResult: void setVersionId(java.lang.String)>($r3);

        $r3 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getSSEAlgorithm()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyPartResult: void setSSEAlgorithm(java.lang.String)>($r3);

        $r3 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getSSECustomerAlgorithm()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyPartResult: void setSSECustomerAlgorithm(java.lang.String)>($r3);

        $r3 = virtualinvoke $r14.<com.amazonaws.services.s3.model.transform.XmlResponsesSaxParser$CopyObjectResultHandler: java.lang.String getSSECustomerKeyMd5()>();

        virtualinvoke $r18.<com.amazonaws.services.s3.model.CopyPartResult: void setSSECustomerKeyMd5(java.lang.String)>($r3);

        return $r18;

        catch com.amazonaws.services.s3.model.AmazonS3Exception from label01 to label02 with label09;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label03 to label04 with label09;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label05 to label06 with label09;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label07 to label08 with label09;
    }

    public com.amazonaws.services.s3.model.Bucket createBucket(com.amazonaws.services.s3.model.CreateBucketRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.CreateBucketRequest $r1;
        com.amazonaws.services.s3.internal.XmlWriter $r2, $r14;
        java.lang.String $r3, $r4, $r5, $r6, $r11;
        com.amazonaws.http.HttpMethodName $r7;
        com.amazonaws.Request $r8;
        com.amazonaws.services.s3.model.AccessControlList $r9;
        java.net.URI $r10;
        boolean $z0;
        com.amazonaws.regions.Region $r12;
        com.amazonaws.services.s3.model.Region $r13;
        byte[] $r15;
        int $i0;
        java.io.ByteArrayInputStream $r16;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r17;
        com.amazonaws.services.s3.model.Bucket $r18;
        com.amazonaws.services.s3.model.CannedAccessControlList $r19;
        java.lang.Throwable $r20;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.CreateBucketRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The CreateBucketRequest parameter must be specified when creating a bucket");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CreateBucketRequest: java.lang.String getBucketName()>();

        $r4 = $r3;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CreateBucketRequest: java.lang.String getRegion()>();

        $r6 = $r5;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket name parameter must be specified when creating a bucket");

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

     label1:
        staticinvoke <com.amazonaws.services.s3.internal.BucketNameUtils: void validateBucketName(java.lang.String)>($r4);

        $r7 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r8 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r4, null, $r1, $r7);

        $r9 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CreateBucketRequest: com.amazonaws.services.s3.model.AccessControlList getAccessControlList()>();

        if $r9 == null goto label8;

        $r9 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CreateBucketRequest: com.amazonaws.services.s3.model.AccessControlList getAccessControlList()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addAclHeaders(com.amazonaws.Request,com.amazonaws.services.s3.model.AccessControlList)>($r8, $r9);

     label2:
        $r10 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URI endpoint>;

        $r3 = virtualinvoke $r10.<java.net.URI: java.lang.String getHost()>();

        $r11 = <com.amazonaws.services.s3.internal.Constants: java.lang.String S3_HOSTNAME>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label6;

        if $r5 == null goto label3;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label6;

     label3:
        $r10 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URI endpoint>;

     label4:
        $r5 = virtualinvoke $r10.<java.net.URI: java.lang.String getHost()>();

        $r12 = staticinvoke <com.amazonaws.regions.RegionUtils: com.amazonaws.regions.Region getRegionByEndpoint(java.lang.String)>($r5);

        $r5 = virtualinvoke $r12.<com.amazonaws.regions.Region: java.lang.String getName()>();

     label5:
        $r6 = $r5;

     label6:
        if $r6 == null goto label7;

        $r5 = staticinvoke <com.amazonaws.util.StringUtils: java.lang.String upperCase(java.lang.String)>($r6);

        $r13 = <com.amazonaws.services.s3.model.Region: com.amazonaws.services.s3.model.Region US_Standard>;

        $r3 = virtualinvoke $r13.<com.amazonaws.services.s3.model.Region: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label7;

        $r2 = new com.amazonaws.services.s3.internal.XmlWriter;

        specialinvoke $r2.<com.amazonaws.services.s3.internal.XmlWriter: void <init>()>();

        virtualinvoke $r2.<com.amazonaws.services.s3.internal.XmlWriter: com.amazonaws.services.s3.internal.XmlWriter start(java.lang.String,java.lang.String,java.lang.String)>("CreateBucketConfiguration", "xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");

        $r14 = virtualinvoke $r2.<com.amazonaws.services.s3.internal.XmlWriter: com.amazonaws.services.s3.internal.XmlWriter start(java.lang.String)>("LocationConstraint");

        $r14 = virtualinvoke $r14.<com.amazonaws.services.s3.internal.XmlWriter: com.amazonaws.services.s3.internal.XmlWriter value(java.lang.String)>($r6);

        virtualinvoke $r14.<com.amazonaws.services.s3.internal.XmlWriter: com.amazonaws.services.s3.internal.XmlWriter end()>();

        virtualinvoke $r2.<com.amazonaws.services.s3.internal.XmlWriter: com.amazonaws.services.s3.internal.XmlWriter end()>();

        $r15 = virtualinvoke $r2.<com.amazonaws.services.s3.internal.XmlWriter: byte[] getBytes()>();

        $i0 = lengthof $r15;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r6);

        $r16 = new java.io.ByteArrayInputStream;

        specialinvoke $r16.<java.io.ByteArrayInputStream: void <init>(byte[])>($r15);

        interfaceinvoke $r8.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r16);

     label7:
        $r17 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r8, $r17, $r4, null);

        $r18 = new com.amazonaws.services.s3.model.Bucket;

        specialinvoke $r18.<com.amazonaws.services.s3.model.Bucket: void <init>(java.lang.String)>($r4);

        return $r18;

     label8:
        $r19 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CreateBucketRequest: com.amazonaws.services.s3.model.CannedAccessControlList getCannedAcl()>();

        if $r19 == null goto label2;

        $r19 = virtualinvoke $r1.<com.amazonaws.services.s3.model.CreateBucketRequest: com.amazonaws.services.s3.model.CannedAccessControlList getCannedAcl()>();

        $r3 = virtualinvoke $r19.<com.amazonaws.services.s3.model.CannedAccessControlList: java.lang.String toString()>();

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-acl", $r3);

        goto label2;

     label9:
        $r20 := @caughtexception;

        goto label6;

        catch java.lang.IllegalArgumentException from label4 to label5 with label9;
    }

    public com.amazonaws.services.s3.model.Bucket createBucket(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.Bucket $r2;
        com.amazonaws.services.s3.model.CreateBucketRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.CreateBucketRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.CreateBucketRequest: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.Bucket createBucket(com.amazonaws.services.s3.model.CreateBucketRequest)>($r3);

        return $r2;
    }

    public com.amazonaws.services.s3.model.Bucket createBucket(java.lang.String, com.amazonaws.services.s3.model.Region) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.Region $r2;
        com.amazonaws.services.s3.model.Bucket $r3;
        com.amazonaws.services.s3.model.CreateBucketRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.Region;

        $r4 = new com.amazonaws.services.s3.model.CreateBucketRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.CreateBucketRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.Region)>($r1, $r2);

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.Bucket createBucket(com.amazonaws.services.s3.model.CreateBucketRequest)>($r4);

        return $r3;
    }

    public com.amazonaws.services.s3.model.Bucket createBucket(java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.Bucket $r3;
        com.amazonaws.services.s3.model.CreateBucketRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new com.amazonaws.services.s3.model.CreateBucketRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.CreateBucketRequest: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.Bucket createBucket(com.amazonaws.services.s3.model.CreateBucketRequest)>($r4);

        return $r3;
    }

    protected final com.amazonaws.http.ExecutionContext createExecutionContext(com.amazonaws.AmazonWebServiceRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.AmazonWebServiceRequest $r1;
        java.util.List $r2;
        boolean $z0;
        com.amazonaws.services.s3.internal.S3ExecutionContext $r3;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.AmazonWebServiceRequest;

        $z0 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: boolean isRequestMetricsEnabled(com.amazonaws.AmazonWebServiceRequest)>($r1);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <com.amazonaws.services.s3.AmazonS3Client: boolean isProfilingEnabled()>();

        if $z0 == 0 goto label3;

     label1:
        $z0 = 1;

     label2:
        $r3 = new com.amazonaws.services.s3.internal.S3ExecutionContext;

        $r2 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.util.List requestHandler2s>;

        specialinvoke $r3.<com.amazonaws.services.s3.internal.S3ExecutionContext: void <init>(java.util.List,boolean,com.amazonaws.AmazonWebServiceClient)>($r2, $z0, $r0);

        return $r3;

     label3:
        $z0 = 0;

        goto label2;
    }

    protected com.amazonaws.Request createRequest(java.lang.String, java.lang.String, com.amazonaws.AmazonWebServiceRequest, com.amazonaws.http.HttpMethodName)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r6;
        com.amazonaws.AmazonWebServiceRequest $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.DefaultRequest $r5;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.amazonaws.AmazonWebServiceRequest;

        $r4 := @parameter3: com.amazonaws.http.HttpMethodName;

        $r5 = new com.amazonaws.DefaultRequest;

        $r6 = <com.amazonaws.services.s3.internal.Constants: java.lang.String S3_SERVICE_NAME>;

        specialinvoke $r5.<com.amazonaws.DefaultRequest: void <init>(com.amazonaws.AmazonWebServiceRequest,java.lang.String)>($r3, $r6);

        interfaceinvoke $r5.<com.amazonaws.Request: void setHttpMethod(com.amazonaws.http.HttpMethodName)>($r4);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void configRequest(com.amazonaws.Request,java.lang.String,java.lang.String)>($r5, $r1, $r2);

        return $r5;
    }

    protected com.amazonaws.auth.Signer createSigner(com.amazonaws.Request, java.lang.String, java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.Request $r1;
        java.lang.String $r2, $r3, varReplacer1653, varReplacer1654, varReplacer1655;
        com.amazonaws.auth.Signer $r4;
        boolean $z0;
        com.amazonaws.services.s3.internal.AWSS3V4Signer $r5;
        com.amazonaws.AmazonClientException $r6;
        java.lang.StringBuilder $r7, $r8;
        com.amazonaws.services.s3.internal.S3Signer $r9;
        com.amazonaws.http.HttpMethodName $r10;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.auth.Signer getSigner()>();

        $z0 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: boolean upgradeToSigV4(com.amazonaws.Request)>($r1);

        if $z0 == 0 goto label3;

        $z0 = $r4 instanceof com.amazonaws.services.s3.internal.AWSS3V4Signer;

        if $z0 != 0 goto label3;

        $r5 = new com.amazonaws.services.s3.internal.AWSS3V4Signer;

        specialinvoke $r5.<com.amazonaws.services.s3.internal.AWSS3V4Signer: void <init>()>();

        $r2 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.String getServiceNameIntern()>();

        virtualinvoke $r5.<com.amazonaws.services.s3.internal.AWSS3V4Signer: void setServiceName(java.lang.String)>($r2);

        $r2 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.String getSignerRegionOverride()>();

        $r3 = $r2;

        if $r2 != null goto label1;

        $r3 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.String clientRegion>;

     label1:
        if $r3 != null goto label2;

        $r6 = new com.amazonaws.AmazonClientException;

        varReplacer1654 = "Signature Version 4 requires knowing the region of the bucket you\'re trying to access. You can configure a region by calling AmazonS3Client.setRegion(Region) or AmazonS3Client.setEndpoint(String) with a region-specific endpoint such as \"s3-us-west-2.amazonaws.com\".";

        specialinvoke $r6.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(varReplacer1654);

        throw $r6;

     label2:
        virtualinvoke $r5.<com.amazonaws.services.s3.internal.AWSS3V4Signer: void setRegionName(java.lang.String)>($r3);

        return $r5;

     label3:
        $z0 = $r4 instanceof com.amazonaws.services.s3.internal.S3Signer;

        if $z0 == 0 goto label8;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        varReplacer1655 = "/";

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1655);

        if $r2 == null goto label6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        varReplacer1653 = "/";

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1653);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        if $r3 == null goto label7;

     label5:
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new com.amazonaws.services.s3.internal.S3Signer;

        $r10 = interfaceinvoke $r1.<com.amazonaws.Request: com.amazonaws.http.HttpMethodName getHttpMethod()>();

        $r3 = virtualinvoke $r10.<com.amazonaws.http.HttpMethodName: java.lang.String toString()>();

        specialinvoke $r9.<com.amazonaws.services.s3.internal.S3Signer: void <init>(java.lang.String,java.lang.String)>($r3, $r2);

        return $r9;

     label6:
        $r2 = "";

        goto label4;

     label7:
        $r3 = "";

        goto label5;

     label8:
        return $r4;
    }

    public void deleteBucket(com.amazonaws.services.s3.model.DeleteBucketRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteBucketRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteBucketRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The DeleteBucketRequest parameter must be specified when deleting a bucket");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteBucketRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when deleting a bucket");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        $r5 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        return;
    }

    public void deleteBucket(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.DeleteBucketRequest $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.DeleteBucketRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.DeleteBucketRequest: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void deleteBucket(com.amazonaws.services.s3.model.DeleteBucketRequest)>($r2);

        return;
    }

    public void deleteBucketCrossOriginConfiguration(com.amazonaws.services.s3.model.DeleteBucketCrossOriginConfigurationRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteBucketCrossOriginConfigurationRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteBucketCrossOriginConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The delete bucket cross origin configuration request object must be specified.");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteBucketCrossOriginConfigurationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when deleting bucket cross origin configuration.");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("cors", null);

        $r5 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        return;
    }

    public void deleteBucketCrossOriginConfiguration(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.DeleteBucketCrossOriginConfigurationRequest $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.DeleteBucketCrossOriginConfigurationRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.DeleteBucketCrossOriginConfigurationRequest: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void deleteBucketCrossOriginConfiguration(com.amazonaws.services.s3.model.DeleteBucketCrossOriginConfigurationRequest)>($r2);

        return;
    }

    public void deleteBucketLifecycleConfiguration(com.amazonaws.services.s3.model.DeleteBucketLifecycleConfigurationRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteBucketLifecycleConfigurationRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteBucketLifecycleConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The delete bucket lifecycle configuration request object must be specified.");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteBucketLifecycleConfigurationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when deleting bucket lifecycle configuration.");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("lifecycle", null);

        $r5 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        return;
    }

    public void deleteBucketLifecycleConfiguration(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.DeleteBucketLifecycleConfigurationRequest $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.DeleteBucketLifecycleConfigurationRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.DeleteBucketLifecycleConfigurationRequest: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void deleteBucketLifecycleConfiguration(com.amazonaws.services.s3.model.DeleteBucketLifecycleConfigurationRequest)>($r2);

        return;
    }

    public void deleteBucketPolicy(com.amazonaws.services.s3.model.DeleteBucketPolicyRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteBucketPolicyRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteBucketPolicyRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request object must be specified when deleting a bucket policy");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteBucketPolicyRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name must be specified when deleting a bucket policy");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("policy", null);

        $r5 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        return;
    }

    public void deleteBucketPolicy(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.DeleteBucketPolicyRequest $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.DeleteBucketPolicyRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.DeleteBucketPolicyRequest: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void deleteBucketPolicy(com.amazonaws.services.s3.model.DeleteBucketPolicyRequest)>($r2);

        return;
    }

    public void deleteBucketReplicationConfiguration(com.amazonaws.services.s3.model.DeleteBucketReplicationConfigurationRequest) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteBucketReplicationConfigurationRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteBucketReplicationConfigurationRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteBucketReplicationConfigurationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when deleting replication configuration");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("replication", null);

        $r5 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        return;
    }

    public void deleteBucketReplicationConfiguration(java.lang.String) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.DeleteBucketReplicationConfigurationRequest $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.DeleteBucketReplicationConfigurationRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.DeleteBucketReplicationConfigurationRequest: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void deleteBucketReplicationConfiguration(com.amazonaws.services.s3.model.DeleteBucketReplicationConfigurationRequest)>($r2);

        return;
    }

    public void deleteBucketTaggingConfiguration(com.amazonaws.services.s3.model.DeleteBucketTaggingConfigurationRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteBucketTaggingConfigurationRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteBucketTaggingConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The delete bucket tagging configuration request object must be specified.");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteBucketTaggingConfigurationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when deleting bucket tagging configuration.");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("tagging", null);

        $r5 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        return;
    }

    public void deleteBucketTaggingConfiguration(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.DeleteBucketTaggingConfigurationRequest $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.DeleteBucketTaggingConfigurationRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.DeleteBucketTaggingConfigurationRequest: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void deleteBucketTaggingConfiguration(com.amazonaws.services.s3.model.DeleteBucketTaggingConfigurationRequest)>($r2);

        return;
    }

    public void deleteBucketWebsiteConfiguration(com.amazonaws.services.s3.model.DeleteBucketWebsiteConfigurationRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteBucketWebsiteConfigurationRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteBucketWebsiteConfigurationRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteBucketWebsiteConfigurationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when deleting a bucket\'s website configuration");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("website", null);

        interfaceinvoke $r4.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r5 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        return;
    }

    public void deleteBucketWebsiteConfiguration(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.DeleteBucketWebsiteConfigurationRequest $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.DeleteBucketWebsiteConfigurationRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.DeleteBucketWebsiteConfigurationRequest: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void deleteBucketWebsiteConfiguration(com.amazonaws.services.s3.model.DeleteBucketWebsiteConfigurationRequest)>($r2);

        return;
    }

    public void deleteObject(com.amazonaws.services.s3.model.DeleteObjectRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteObjectRequest $r1;
        java.lang.String $r2, $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteObjectRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The delete object request must be specified when deleting an object");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name must be specified when deleting an object");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectRequest: java.lang.String getKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The key must be specified when deleting an object");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectRequest: java.lang.String getKey()>();

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, $r3, $r1, $r4);

        $r6 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectRequest: java.lang.String getKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r5, $r6, $r2, $r3);

        return;
    }

    public void deleteObject(java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.DeleteObjectRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.DeleteObjectRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.DeleteObjectRequest: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void deleteObject(com.amazonaws.services.s3.model.DeleteObjectRequest)>($r3);

        return;
    }

    public com.amazonaws.services.s3.model.DeleteObjectsResult deleteObjects(com.amazonaws.services.s3.model.DeleteObjectsRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteObjectsRequest $r1;
        java.lang.Exception $r2;
        java.lang.String $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.model.MultiFactorAuthentication $r6;
        com.amazonaws.services.s3.model.transform.MultiObjectDeleteXmlFactory $r7;
        byte[] $r8;
        int $i0;
        java.io.ByteArrayInputStream $r9;
        com.amazonaws.services.s3.model.transform.Unmarshallers$DeleteObjectsResultUnmarshaller $r10;
        java.lang.Object $r11;
        com.amazonaws.services.s3.internal.DeleteObjectsResponse $r12;
        java.util.List $r13, $r15;
        boolean $z0;
        com.amazonaws.services.s3.model.MultiObjectDeleteException $r14;
        com.amazonaws.AmazonClientException $r16;
        com.amazonaws.services.s3.model.DeleteObjectsResult $r17;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteObjectsRequest;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectsRequest: java.lang.String getBucketName()>();

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName POST>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r3, null, $r1, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("delete", null);

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectsRequest: com.amazonaws.services.s3.model.MultiFactorAuthentication getMfa()>();

        if $r6 == null goto label1;

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectsRequest: com.amazonaws.services.s3.model.MultiFactorAuthentication getMfa()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void populateRequestWithMfaDetails(com.amazonaws.Request,com.amazonaws.services.s3.model.MultiFactorAuthentication)>($r5, $r6);

     label1:
        $r7 = new com.amazonaws.services.s3.model.transform.MultiObjectDeleteXmlFactory;

        specialinvoke $r7.<com.amazonaws.services.s3.model.transform.MultiObjectDeleteXmlFactory: void <init>()>();

        $r8 = virtualinvoke $r7.<com.amazonaws.services.s3.model.transform.MultiObjectDeleteXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.DeleteObjectsRequest)>($r1);

        $i0 = lengthof $r8;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r3);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        interfaceinvoke $r5.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r9);

     label2:
        $r8 = staticinvoke <com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>($r8);

        $r3 = staticinvoke <com.amazonaws.util.BinaryUtils: java.lang.String toBase64(byte[])>($r8);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-MD5", $r3);

     label3:
        $r10 = new com.amazonaws.services.s3.model.transform.Unmarshallers$DeleteObjectsResultUnmarshaller;

        specialinvoke $r10.<com.amazonaws.services.s3.model.transform.Unmarshallers$DeleteObjectsResultUnmarshaller: void <init>()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteObjectsRequest: java.lang.String getBucketName()>();

        $r11 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r5, $r10, $r3, null);

        $r12 = (com.amazonaws.services.s3.internal.DeleteObjectsResponse) $r11;

        $r13 = virtualinvoke $r12.<com.amazonaws.services.s3.internal.DeleteObjectsResponse: java.util.List getErrors()>();

        $z0 = interfaceinvoke $r13.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r14 = new com.amazonaws.services.s3.model.MultiObjectDeleteException;

        $r13 = virtualinvoke $r12.<com.amazonaws.services.s3.internal.DeleteObjectsResponse: java.util.List getErrors()>();

        $r15 = virtualinvoke $r12.<com.amazonaws.services.s3.internal.DeleteObjectsResponse: java.util.List getDeletedObjects()>();

        specialinvoke $r14.<com.amazonaws.services.s3.model.MultiObjectDeleteException: void <init>(java.util.Collection,java.util.Collection)>($r13, $r15);

        throw $r14;

     label4:
        $r2 := @caughtexception;

        $r16 = new com.amazonaws.AmazonClientException;

        specialinvoke $r16.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t compute md5 sum", $r2);

        throw $r16;

     label5:
        $r17 = new com.amazonaws.services.s3.model.DeleteObjectsResult;

        $r13 = virtualinvoke $r12.<com.amazonaws.services.s3.internal.DeleteObjectsResponse: java.util.List getDeletedObjects()>();

        specialinvoke $r17.<com.amazonaws.services.s3.model.DeleteObjectsResult: void <init>(java.util.List)>($r13);

        return $r17;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void deleteVersion(com.amazonaws.services.s3.model.DeleteVersionRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.DeleteVersionRequest $r1;
        java.lang.String $r2, $r3, $r4;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.model.MultiFactorAuthentication $r7;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r8;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.DeleteVersionRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The delete version request object must be specified when deleting a version");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteVersionRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteVersionRequest: java.lang.String getKey()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteVersionRequest: java.lang.String getVersionId()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name must be specified when deleting a version");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The key must be specified when deleting a version");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The version ID must be specified when deleting a version");

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName DELETE>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, $r3, $r1, $r5);

        if $r4 == null goto label1;

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versionId", $r4);

     label1:
        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteVersionRequest: com.amazonaws.services.s3.model.MultiFactorAuthentication getMfa()>();

        if $r7 == null goto label2;

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.DeleteVersionRequest: com.amazonaws.services.s3.model.MultiFactorAuthentication getMfa()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void populateRequestWithMfaDetails(com.amazonaws.Request,com.amazonaws.services.s3.model.MultiFactorAuthentication)>($r6, $r7);

     label2:
        $r8 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r8, $r2, $r3);

        return;
    }

    public void deleteVersion(java.lang.String, java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.DeleteVersionRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = new com.amazonaws.services.s3.model.DeleteVersionRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.DeleteVersionRequest: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void deleteVersion(com.amazonaws.services.s3.model.DeleteVersionRequest)>($r4);

        return;
    }

    public void disableRequesterPays(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.RequestPaymentConfiguration $r2;
        com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer $r3;
        com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.RequestPaymentConfiguration;

        $r3 = <com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer: com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer BucketOwner>;

        specialinvoke $r2.<com.amazonaws.services.s3.model.RequestPaymentConfiguration: void <init>(com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer)>($r3);

        $r4 = new com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.RequestPaymentConfiguration)>($r1, $r2);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketRequestPayment(com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest)>($r4);

        return;
    }

    public boolean doesBucketExist(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.AmazonServiceException $r2;
        com.amazonaws.services.s3.model.HeadBucketRequest $r3;
        int $i0;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.HeadBucketRequest;

     label1:
        specialinvoke $r3.<com.amazonaws.services.s3.model.HeadBucketRequest: void <init>(java.lang.String)>($r1);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.HeadBucketResult headBucket(com.amazonaws.services.s3.model.HeadBucketRequest)>($r3);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        $i0 = virtualinvoke $r2.<com.amazonaws.AmazonServiceException: int getStatusCode()>();

        if $i0 == 301 goto label5;

        $i0 = virtualinvoke $r2.<com.amazonaws.AmazonServiceException: int getStatusCode()>();

        if $i0 == 403 goto label5;

        $i0 = virtualinvoke $r2.<com.amazonaws.AmazonServiceException: int getStatusCode()>();

        if $i0 != 404 goto label4;

        return 0;

     label4:
        throw $r2;

     label5:
        return 1;

        catch com.amazonaws.AmazonServiceException from label1 to label2 with label3;
    }

    public boolean doesObjectExist(java.lang.String, java.lang.String) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.AmazonS3Exception $r3;
        int $i0;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label1:
        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata(java.lang.String,java.lang.String)>($r1, $r2);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        $i0 = virtualinvoke $r3.<com.amazonaws.services.s3.model.AmazonS3Exception: int getStatusCode()>();

        if $i0 != 404 goto label4;

        return 0;

     label4:
        throw $r3;

        catch com.amazonaws.services.s3.model.AmazonS3Exception from label1 to label2 with label3;
    }

    public void enableRequesterPays(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.RequestPaymentConfiguration $r2;
        com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer $r3;
        com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.RequestPaymentConfiguration;

        $r3 = <com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer: com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer Requester>;

        specialinvoke $r2.<com.amazonaws.services.s3.model.RequestPaymentConfiguration: void <init>(com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer)>($r3);

        $r4 = new com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.RequestPaymentConfiguration)>($r1, $r2);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketRequestPayment(com.amazonaws.services.s3.model.SetRequestPaymentConfigurationRequest)>($r4);

        return;
    }

    public java.net.URL generatePresignedUrl(com.amazonaws.services.s3.model.GeneratePresignedUrlRequest) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GeneratePresignedUrlRequest $r1;
        java.lang.String $r2, $r3, $r6, $r14;
        com.amazonaws.HttpMethod $r4;
        java.util.Date $r5;
        long $l0;
        com.amazonaws.http.HttpMethodName $r7;
        com.amazonaws.Request $r8;
        java.util.Map $r9;
        java.util.Set $r10;
        java.util.Iterator $r11;
        boolean $z0;
        java.lang.Object $r12;
        java.util.Map$Entry $r13;
        com.amazonaws.services.s3.model.SSECustomerKey $r15;
        com.amazonaws.services.s3.model.ResponseHeaderOverrides $r16;
        com.amazonaws.auth.Signer $r17;
        com.amazonaws.auth.Presigner $r18;
        com.amazonaws.auth.AWSCredentialsProvider $r19;
        com.amazonaws.auth.AWSCredentials $r20;
        java.net.URL $r21;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GeneratePresignedUrlRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request parameter must be specified when generating a pre-signed URL");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.lang.String getKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when generating a pre-signed URL");

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: com.amazonaws.HttpMethod getMethod()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The HTTP method request parameter must be specified when generating a pre-signed URL");

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.util.Date getExpiration()>();

        if $r5 != null goto label1;

        $r5 = new java.util.Date;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = $l0 + 900000L;

        specialinvoke $r5.<java.util.Date: void <init>(long)>($l0);

        virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: void setExpiration(java.util.Date)>($r5);

     label1:
        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: com.amazonaws.HttpMethod getMethod()>();

        $r6 = virtualinvoke $r4.<com.amazonaws.HttpMethod: java.lang.String toString()>();

        $r7 = staticinvoke <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName valueOf(java.lang.String)>($r6);

        $r8 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, $r3, $r1, $r7);

        $r9 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.util.Map getRequestParameters()>();

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.util.Map$Entry) $r12;

        $r12 = interfaceinvoke $r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r12;

        $r12 = interfaceinvoke $r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.lang.String) $r12;

        interfaceinvoke $r8.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>($r6, $r14);

        goto label2;

     label3:
        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.lang.String getContentType()>();

        if $r6 == null goto label4;

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.lang.String getContentType()>();

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", $r6);

     label4:
        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.lang.String getContentMd5()>();

        if $r6 == null goto label5;

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.lang.String getContentMd5()>();

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-MD5", $r6);

     label5:
        $r15 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: com.amazonaws.services.s3.model.SSECustomerKey getSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r8, $r15);

        $r16 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: com.amazonaws.services.s3.model.ResponseHeaderOverrides getResponseHeaders()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addResponseHeaderParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.ResponseHeaderOverrides)>($r8, $r16);

        $r17 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.auth.Signer createSigner(com.amazonaws.Request,java.lang.String,java.lang.String)>($r8, $r2, $r3);

        $z0 = $r17 instanceof com.amazonaws.auth.Presigner;

        if $z0 == 0 goto label7;

        $r18 = (com.amazonaws.auth.Presigner) $r17;

        $r19 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.auth.AWSCredentialsProvider awsCredentialsProvider>;

        $r20 = interfaceinvoke $r19.<com.amazonaws.auth.AWSCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>();

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.util.Date getExpiration()>();

        interfaceinvoke $r18.<com.amazonaws.auth.Presigner: void presignRequest(com.amazonaws.Request,com.amazonaws.auth.AWSCredentials,java.util.Date)>($r8, $r20, $r5);

     label6:
        $r21 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: java.net.URL convertRequestToUrl(com.amazonaws.Request,boolean)>($r8, 1);

        return $r21;

     label7:
        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: com.amazonaws.HttpMethod getMethod()>();

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: java.util.Date getExpiration()>();

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void presignRequest(com.amazonaws.Request,com.amazonaws.HttpMethod,java.lang.String,java.lang.String,java.util.Date,java.lang.String)>($r8, $r4, $r2, $r3, $r5, null);

        goto label6;
    }

    public java.net.URL generatePresignedUrl(java.lang.String, java.lang.String, java.util.Date) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        java.util.Date $r3;
        java.net.URL $r4;
        com.amazonaws.HttpMethod $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.Date;

        $r5 = <com.amazonaws.HttpMethod: com.amazonaws.HttpMethod GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URL generatePresignedUrl(java.lang.String,java.lang.String,java.util.Date,com.amazonaws.HttpMethod)>($r1, $r2, $r3, $r5);

        return $r4;
    }

    public java.net.URL generatePresignedUrl(java.lang.String, java.lang.String, java.util.Date, com.amazonaws.HttpMethod) throws com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        java.util.Date $r3;
        com.amazonaws.HttpMethod $r4;
        com.amazonaws.services.s3.model.GeneratePresignedUrlRequest $r5;
        java.net.URL $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.Date;

        $r4 := @parameter3: com.amazonaws.HttpMethod;

        $r5 = new com.amazonaws.services.s3.model.GeneratePresignedUrlRequest;

        specialinvoke $r5.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: void <init>(java.lang.String,java.lang.String,com.amazonaws.HttpMethod)>($r1, $r2, $r4);

        virtualinvoke $r5.<com.amazonaws.services.s3.model.GeneratePresignedUrlRequest: void setExpiration(java.util.Date)>($r3);

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URL generatePresignedUrl(com.amazonaws.services.s3.model.GeneratePresignedUrlRequest)>($r5);

        return $r6;
    }

    public com.amazonaws.services.s3.model.BucketAccelerateConfiguration getBucketAccelerateConfiguration(com.amazonaws.services.s3.model.GetBucketAccelerateConfigurationRequest) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetBucketAccelerateConfigurationRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketAccelerateConfigurationUnmarshaller $r5;
        java.lang.Object $r6;
        com.amazonaws.services.s3.model.BucketAccelerateConfiguration $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetBucketAccelerateConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "getBucketAccelerateConfigurationRequest must be specified.");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetBucketAccelerateConfigurationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when querying accelerate configuration");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("accelerate", null);

        $r5 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketAccelerateConfigurationUnmarshaller;

        specialinvoke $r5.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketAccelerateConfigurationUnmarshaller: void <init>()>();

        $r6 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        $r7 = (com.amazonaws.services.s3.model.BucketAccelerateConfiguration) $r6;

        return $r7;
    }

    public com.amazonaws.services.s3.model.BucketAccelerateConfiguration getBucketAccelerateConfiguration(java.lang.String) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketAccelerateConfiguration $r2;
        com.amazonaws.services.s3.model.GetBucketAccelerateConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.GetBucketAccelerateConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GetBucketAccelerateConfigurationRequest: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.BucketAccelerateConfiguration getBucketAccelerateConfiguration(com.amazonaws.services.s3.model.GetBucketAccelerateConfigurationRequest)>($r3);

        return $r2;
    }

    public com.amazonaws.services.s3.model.AccessControlList getBucketAcl(com.amazonaws.services.s3.model.GetBucketAclRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetBucketAclRequest $r1;
        java.lang.String $r2;
        com.amazonaws.services.s3.model.AccessControlList $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetBucketAclRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetBucketAclRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when requesting a bucket\'s ACL");

        $r3 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.AccessControlList getAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest)>($r2, null, null, $r1);

        return $r3;
    }

    public com.amazonaws.services.s3.model.AccessControlList getBucketAcl(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.AccessControlList $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name parameter must be specified when requesting a bucket\'s ACL");

        $r2 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.AccessControlList getAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest)>($r1, null, null, null);

        return $r2;
    }

    public com.amazonaws.services.s3.model.BucketCrossOriginConfiguration getBucketCrossOriginConfiguration(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.AmazonServiceException $r2;
        com.amazonaws.services.s3.model.GenericBucketRequest $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketCrossOriginConfigurationUnmarshaller $r6;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.BucketCrossOriginConfiguration $r8;
        int $i0;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, null, $r3, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("cors", null);

        $r6 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketCrossOriginConfigurationUnmarshaller;

     label1:
        specialinvoke $r6.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketCrossOriginConfigurationUnmarshaller: void <init>()>();

        $r7 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r5, $r6, $r1, null);

     label2:
        $r8 = (com.amazonaws.services.s3.model.BucketCrossOriginConfiguration) $r7;

        return $r8;

     label3:
        $r2 := @caughtexception;

        $i0 = virtualinvoke $r2.<com.amazonaws.AmazonServiceException: int getStatusCode()>();

        lookupswitch($i0)
        {
            case 404: goto label5;
            default: goto label4;
        };

     label4:
        throw $r2;

     label5:
        return null;

        catch com.amazonaws.AmazonServiceException from label1 to label2 with label3;
    }

    public com.amazonaws.services.s3.model.BucketLifecycleConfiguration getBucketLifecycleConfiguration(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.AmazonServiceException $r2;
        com.amazonaws.services.s3.model.GenericBucketRequest $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketLifecycleConfigurationUnmarshaller $r6;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.BucketLifecycleConfiguration $r8;
        int $i0;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, null, $r3, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("lifecycle", null);

        $r6 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketLifecycleConfigurationUnmarshaller;

     label1:
        specialinvoke $r6.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketLifecycleConfigurationUnmarshaller: void <init>()>();

        $r7 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r5, $r6, $r1, null);

     label2:
        $r8 = (com.amazonaws.services.s3.model.BucketLifecycleConfiguration) $r7;

        return $r8;

     label3:
        $r2 := @caughtexception;

        $i0 = virtualinvoke $r2.<com.amazonaws.AmazonServiceException: int getStatusCode()>();

        lookupswitch($i0)
        {
            case 404: goto label5;
            default: goto label4;
        };

     label4:
        throw $r2;

     label5:
        return null;

        catch com.amazonaws.AmazonServiceException from label1 to label2 with label3;
    }

    public java.lang.String getBucketLocation(com.amazonaws.services.s3.model.GetBucketLocationRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetBucketLocationRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketLocationUnmarshaller $r5;
        java.lang.Object $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetBucketLocationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request parameter must be specified when requesting a bucket\'s location");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetBucketLocationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when requesting a bucket\'s location");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("location", null);

        $r5 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketLocationUnmarshaller;

        specialinvoke $r5.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketLocationUnmarshaller: void <init>()>();

        $r6 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        $r2 = (java.lang.String) $r6;

        return $r2;
    }

    public java.lang.String getBucketLocation(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.GetBucketLocationRequest $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.GetBucketLocationRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.GetBucketLocationRequest: void <init>(java.lang.String)>($r1);

        $r1 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.String getBucketLocation(com.amazonaws.services.s3.model.GetBucketLocationRequest)>($r2);

        return $r1;
    }

    public com.amazonaws.services.s3.model.BucketLoggingConfiguration getBucketLoggingConfiguration(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.http.HttpMethodName $r2;
        com.amazonaws.services.s3.model.GenericBucketRequest $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketLoggingConfigurationnmarshaller $r5;
        java.lang.Object $r6;
        com.amazonaws.services.s3.model.BucketLoggingConfiguration $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name parameter must be specified when requesting a bucket\'s logging status");

        $r3 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r2 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, null, $r3, $r2);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("logging", null);

        $r5 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketLoggingConfigurationnmarshaller;

        specialinvoke $r5.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketLoggingConfigurationnmarshaller: void <init>()>();

        $r6 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r5, $r1, null);

        $r7 = (com.amazonaws.services.s3.model.BucketLoggingConfiguration) $r6;

        return $r7;
    }

    public com.amazonaws.services.s3.model.BucketNotificationConfiguration getBucketNotificationConfiguration(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.http.HttpMethodName $r2;
        com.amazonaws.services.s3.model.GenericBucketRequest $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketNotificationConfigurationUnmarshaller $r5;
        java.lang.Object $r6;
        com.amazonaws.services.s3.model.BucketNotificationConfiguration $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name parameter must be specified when querying notification configuration");

        $r3 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r2 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, null, $r3, $r2);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("notification", null);

        $r5 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketNotificationConfigurationUnmarshaller;

        specialinvoke $r5.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketNotificationConfigurationUnmarshaller: void <init>()>();

        $r6 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r5, $r1, null);

        $r7 = (com.amazonaws.services.s3.model.BucketNotificationConfiguration) $r6;

        return $r7;
    }

    public com.amazonaws.services.s3.model.BucketPolicy getBucketPolicy(com.amazonaws.services.s3.model.GetBucketPolicyRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetBucketPolicyRequest $r1;
        com.amazonaws.AmazonServiceException $r2;
        com.amazonaws.services.s3.model.BucketPolicy $r3;
        java.lang.String $r4;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.internal.S3StringResponseHandler $r7;
        java.lang.Object $r8;
        boolean $z0;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetBucketPolicyRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request object must be specified when getting a bucket policy");

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetBucketPolicyRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The bucket name must be specified when getting a bucket policy");

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r4, null, $r1, $r5);

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("policy", null);

        $r3 = new com.amazonaws.services.s3.model.BucketPolicy;

        specialinvoke $r3.<com.amazonaws.services.s3.model.BucketPolicy: void <init>()>();

        $r7 = new com.amazonaws.services.s3.internal.S3StringResponseHandler;

     label1:
        specialinvoke $r7.<com.amazonaws.services.s3.internal.S3StringResponseHandler: void <init>()>();

        $r8 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r7, $r4, null);

     label2:
        $r4 = (java.lang.String) $r8;

     label3:
        virtualinvoke $r3.<com.amazonaws.services.s3.model.BucketPolicy: void setPolicyText(java.lang.String)>($r4);

     label4:
        return $r3;

     label5:
        $r2 := @caughtexception;

        $r4 = virtualinvoke $r2.<com.amazonaws.AmazonServiceException: java.lang.String getErrorCode()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("NoSuchBucketPolicy");

        if $z0 != 0 goto label6;

        throw $r2;

     label6:
        return $r3;

        catch com.amazonaws.AmazonServiceException from label1 to label2 with label5;
        catch com.amazonaws.AmazonServiceException from label3 to label4 with label5;
    }

    public com.amazonaws.services.s3.model.BucketPolicy getBucketPolicy(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketPolicy $r2;
        com.amazonaws.services.s3.model.GetBucketPolicyRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.GetBucketPolicyRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GetBucketPolicyRequest: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.BucketPolicy getBucketPolicy(com.amazonaws.services.s3.model.GetBucketPolicyRequest)>($r3);

        return $r2;
    }

    public com.amazonaws.services.s3.model.BucketReplicationConfiguration getBucketReplicationConfiguration(com.amazonaws.services.s3.model.GetBucketReplicationConfigurationRequest) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetBucketReplicationConfigurationRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketReplicationConfigurationUnmarshaller $r5;
        java.lang.Object $r6;
        com.amazonaws.services.s3.model.BucketReplicationConfiguration $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetBucketReplicationConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket request parameter must be specified when retrieving replication configuration");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetBucketReplicationConfigurationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket request must specify a bucket name when retrieving replication configuration");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("replication", null);

        $r5 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketReplicationConfigurationUnmarshaller;

        specialinvoke $r5.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketReplicationConfigurationUnmarshaller: void <init>()>();

        $r6 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        $r7 = (com.amazonaws.services.s3.model.BucketReplicationConfiguration) $r6;

        return $r7;
    }

    public com.amazonaws.services.s3.model.BucketReplicationConfiguration getBucketReplicationConfiguration(java.lang.String) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketReplicationConfiguration $r2;
        com.amazonaws.services.s3.model.GetBucketReplicationConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.GetBucketReplicationConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GetBucketReplicationConfigurationRequest: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.BucketReplicationConfiguration getBucketReplicationConfiguration(com.amazonaws.services.s3.model.GetBucketReplicationConfigurationRequest)>($r3);

        return $r2;
    }

    public com.amazonaws.services.s3.model.BucketTaggingConfiguration getBucketTaggingConfiguration(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.AmazonServiceException $r2;
        com.amazonaws.services.s3.model.GenericBucketRequest $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketTaggingConfigurationUnmarshaller $r6;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.BucketTaggingConfiguration $r8;
        int $i0;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, null, $r3, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("tagging", null);

        $r6 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketTaggingConfigurationUnmarshaller;

     label1:
        specialinvoke $r6.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketTaggingConfigurationUnmarshaller: void <init>()>();

        $r7 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r5, $r6, $r1, null);

     label2:
        $r8 = (com.amazonaws.services.s3.model.BucketTaggingConfiguration) $r7;

        return $r8;

     label3:
        $r2 := @caughtexception;

        $i0 = virtualinvoke $r2.<com.amazonaws.AmazonServiceException: int getStatusCode()>();

        lookupswitch($i0)
        {
            case 404: goto label5;
            default: goto label4;
        };

     label4:
        throw $r2;

     label5:
        return null;

        catch com.amazonaws.AmazonServiceException from label1 to label2 with label3;
    }

    public com.amazonaws.services.s3.model.BucketVersioningConfiguration getBucketVersioningConfiguration(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.http.HttpMethodName $r2;
        com.amazonaws.services.s3.model.GenericBucketRequest $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketVersioningConfigurationUnmarshaller $r5;
        java.lang.Object $r6;
        com.amazonaws.services.s3.model.BucketVersioningConfiguration $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name parameter must be specified when querying versioning configuration");

        $r3 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r2 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, null, $r3, $r2);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versioning", null);

        $r5 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketVersioningConfigurationUnmarshaller;

        specialinvoke $r5.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketVersioningConfigurationUnmarshaller: void <init>()>();

        $r6 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r5, $r1, null);

        $r7 = (com.amazonaws.services.s3.model.BucketVersioningConfiguration) $r6;

        return $r7;
    }

    public com.amazonaws.services.s3.model.BucketWebsiteConfiguration getBucketWebsiteConfiguration(com.amazonaws.services.s3.model.GetBucketWebsiteConfigurationRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetBucketWebsiteConfigurationRequest $r1;
        com.amazonaws.AmazonServiceException $r2;
        java.lang.String $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.model.transform.Unmarshallers$BucketWebsiteConfigurationUnmarshaller $r6;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.BucketWebsiteConfiguration $r8;
        int $i0;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetBucketWebsiteConfigurationRequest;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetBucketWebsiteConfigurationRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket name parameter must be specified when requesting a bucket\'s website configuration");

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r3, null, $r1, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("website", null);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r6 = new com.amazonaws.services.s3.model.transform.Unmarshallers$BucketWebsiteConfigurationUnmarshaller;

     label1:
        specialinvoke $r6.<com.amazonaws.services.s3.model.transform.Unmarshallers$BucketWebsiteConfigurationUnmarshaller: void <init>()>();

        $r7 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r5, $r6, $r3, null);

     label2:
        $r8 = (com.amazonaws.services.s3.model.BucketWebsiteConfiguration) $r7;

        return $r8;

     label3:
        $r2 := @caughtexception;

        $i0 = virtualinvoke $r2.<com.amazonaws.AmazonServiceException: int getStatusCode()>();

        if $i0 != 404 goto label4;

        return null;

     label4:
        throw $r2;

        catch com.amazonaws.AmazonServiceException from label1 to label2 with label3;
    }

    public com.amazonaws.services.s3.model.BucketWebsiteConfiguration getBucketWebsiteConfiguration(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketWebsiteConfiguration $r2;
        com.amazonaws.services.s3.model.GetBucketWebsiteConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.GetBucketWebsiteConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GetBucketWebsiteConfigurationRequest: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.BucketWebsiteConfiguration getBucketWebsiteConfiguration(com.amazonaws.services.s3.model.GetBucketWebsiteConfigurationRequest)>($r3);

        return $r2;
    }

    public com.amazonaws.services.s3.S3ResponseMetadata getCachedResponseMetadata(com.amazonaws.AmazonWebServiceRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.AmazonWebServiceRequest $r1;
        com.amazonaws.ResponseMetadata $r2;
        com.amazonaws.http.AmazonHttpClient $r3;
        com.amazonaws.services.s3.S3ResponseMetadata $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.AmazonWebServiceRequest;

        $r3 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.http.AmazonHttpClient client>;

        $r2 = virtualinvoke $r3.<com.amazonaws.http.AmazonHttpClient: com.amazonaws.ResponseMetadata getResponseMetadataForRequest(com.amazonaws.AmazonWebServiceRequest)>($r1);

        $r4 = (com.amazonaws.services.s3.S3ResponseMetadata) $r2;

        return $r4;
    }

    public com.amazonaws.services.s3.model.ObjectMetadata getObject(com.amazonaws.services.s3.model.GetObjectRequest, java.io.File) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetObjectRequest $r1;
        java.io.File $r2;
        boolean $z0;
        long[] $r3;
        long $l0;
        byte $b1;
        com.amazonaws.services.s3.AmazonS3Client$1 $r4;
        com.amazonaws.services.s3.model.S3Object $r5;
        com.amazonaws.services.s3.model.ObjectMetadata $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetObjectRequest;

        $r2 := @parameter1: java.io.File;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The destination file parameter must be specified when downloading an object directly to a file");

        $z0 = 0;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: long[] getRange()>();

        if $r3 == null goto label1;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: long[] getRange()>();

        $l0 = $r3[0];

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z0 = 1;

     label1:
        $r4 = new com.amazonaws.services.s3.AmazonS3Client$1;

        specialinvoke $r4.<com.amazonaws.services.s3.AmazonS3Client$1: void <init>(com.amazonaws.services.s3.AmazonS3Client,com.amazonaws.services.s3.model.GetObjectRequest)>($r0, $r1);

        $r5 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: com.amazonaws.services.s3.model.S3Object retryableDownloadS3ObjectToFile(java.io.File,com.amazonaws.services.s3.internal.ServiceUtils$RetryableS3DownloadTask,boolean)>($r2, $r4, $z0);

        if $r5 != null goto label2;

        return null;

     label2:
        $r6 = virtualinvoke $r5.<com.amazonaws.services.s3.model.S3Object: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata()>();

        return $r6;
    }

    public com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetObjectRequest $r1;
        com.amazonaws.services.s3.model.AmazonS3Exception $r2;
        java.lang.Throwable $r3;
        com.amazonaws.event.ProgressReportingInputStream $r4, r30;
        java.lang.String $r5, $r6;
        com.amazonaws.http.HttpMethodName $r7;
        com.amazonaws.Request $r8;
        long[] $r9;
        java.lang.StringBuilder $r10, r27;
        long $l0;
        byte $b1;
        boolean $z0;
        com.amazonaws.services.s3.model.ResponseHeaderOverrides $r11;
        java.util.Date $r12;
        java.util.List $r13;
        com.amazonaws.services.s3.model.SSECustomerKey $r14;
        com.amazonaws.event.ProgressListener $r15;
        com.amazonaws.event.ProgressListenerCallbackExecutor $r16;
        com.amazonaws.services.s3.internal.S3ObjectResponseHandler $r17, r28;
        java.lang.Object $r18;
        com.amazonaws.services.s3.model.S3Object $r19;
        com.amazonaws.services.s3.model.S3ObjectInputStream $r20, r32;
        com.amazonaws.internal.SdkFilterInputStream $r21;
        com.amazonaws.services.s3.model.ObjectMetadata $r22;
        byte[] $r23;
        java.security.MessageDigest $r24;
        com.amazonaws.internal.MetricAware $r25;
        org.apache.commons.logging.Log $r26;
        int $i2;
        com.amazonaws.util.ServiceClientHolderInputStream r29;
        com.amazonaws.services.s3.internal.DigestValidationInputStream r31;
        com.amazonaws.util.LengthCheckInputStream r33;
        java.io.InputStream r34;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetObjectRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The GetObjectRequest parameter must be specified when requesting an object");

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r5, "The bucket name parameter must be specified when requesting an object");

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r5, "The key parameter must be specified when requesting an object");

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getBucketName()>();

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getKey()>();

        $r7 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r8 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r5, $r6, $r1, $r7);

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getVersionId()>();

        if $r5 == null goto label01;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getVersionId()>();

        interfaceinvoke $r8.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versionId", $r5);

     label01:
        $r9 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: long[] getRange()>();

        if $r9 == null goto label03;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes=");

        $l0 = $r9[0];

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = $r5;

        $l0 = $r9[1];

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label02;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $l0 = $r9[1];

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Range", $r6);

     label03:
        $z0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: boolean isRequesterPays()>();

        if $z0 == 0 goto label04;

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-request-payer", "requester");

     label04:
        $r11 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: com.amazonaws.services.s3.model.ResponseHeaderOverrides getResponseHeaders()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addResponseHeaderParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.ResponseHeaderOverrides)>($r8, $r11);

        $r12 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.util.Date getModifiedSinceConstraint()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addDateHeader(com.amazonaws.Request,java.lang.String,java.util.Date)>($r8, "If-Modified-Since", $r12);

        $r12 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.util.Date getUnmodifiedSinceConstraint()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addDateHeader(com.amazonaws.Request,java.lang.String,java.util.Date)>($r8, "If-Unmodified-Since", $r12);

        $r13 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.util.List getMatchingETagConstraints()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addStringListHeader(com.amazonaws.Request,java.lang.String,java.util.List)>($r8, "If-Match", $r13);

        $r13 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.util.List getNonmatchingETagConstraints()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addStringListHeader(com.amazonaws.Request,java.lang.String,java.util.List)>($r8, "If-None-Match", $r13);

        $r14 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: com.amazonaws.services.s3.model.SSECustomerKey getSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r8, $r14);

        $r15 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: com.amazonaws.event.ProgressListener getGeneralProgressListener()>();

        $r16 = staticinvoke <com.amazonaws.event.ProgressListenerCallbackExecutor: com.amazonaws.event.ProgressListenerCallbackExecutor wrapListener(com.amazonaws.event.ProgressListener)>($r15);

        r28 = new com.amazonaws.services.s3.internal.S3ObjectResponseHandler;

        $r17 = r28;

     label05:
        specialinvoke r28.<com.amazonaws.services.s3.internal.S3ObjectResponseHandler: void <init>()>();

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getBucketName()>();

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getKey()>();

        $r18 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r8, $r17, $r5, $r6);

     label06:
        $r19 = (com.amazonaws.services.s3.model.S3Object) $r18;

     label07:
        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getBucketName()>();

        virtualinvoke $r19.<com.amazonaws.services.s3.model.S3Object: void setBucketName(java.lang.String)>($r5);

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectRequest: java.lang.String getKey()>();

        virtualinvoke $r19.<com.amazonaws.services.s3.model.S3Object: void setKey(java.lang.String)>($r5);

        $r20 = virtualinvoke $r19.<com.amazonaws.services.s3.model.S3Object: com.amazonaws.services.s3.model.S3ObjectInputStream getObjectContent()>();

     label08:
        r29 = new com.amazonaws.util.ServiceClientHolderInputStream;

        $r21 = r29;

     label09:
        specialinvoke r29.<com.amazonaws.util.ServiceClientHolderInputStream: void <init>(java.io.InputStream,com.amazonaws.AmazonWebServiceClient)>($r20, $r0);

     label10:
        if $r16 == null goto label13;

        r30 = new com.amazonaws.event.ProgressReportingInputStream;

        $r4 = r30;

     label11:
        specialinvoke r30.<com.amazonaws.event.ProgressReportingInputStream: void <init>(java.io.InputStream,com.amazonaws.event.ProgressListenerCallbackExecutor)>($r21, $r16);

        virtualinvoke $r4.<com.amazonaws.event.ProgressReportingInputStream: void setFireCompletedEvent(boolean)>(1);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r16, 2);

     label12:
        $r21 = $r4;

     label13:
        $z0 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: boolean skipMd5CheckPerRequest(com.amazonaws.AmazonWebServiceRequest)>($r1);

     label14:
        if $z0 != 0 goto label31;

     label15:
        $r22 = virtualinvoke $r19.<com.amazonaws.services.s3.model.S3Object: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata()>();

        $z0 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: boolean skipMd5CheckPerResponse(com.amazonaws.services.s3.model.ObjectMetadata)>($r22);

     label16:
        if $z0 != 0 goto label31;

     label17:
        $r22 = virtualinvoke $r19.<com.amazonaws.services.s3.model.S3Object: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata()>();

        $r5 = virtualinvoke $r22.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getETag()>();

     label18:
        if $r5 == null goto label30;

     label19:
        $z0 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: boolean isMultipartUploadETag(java.lang.String)>($r5);

     label20:
        if $z0 != 0 goto label30;

     label21:
        $r22 = virtualinvoke $r19.<com.amazonaws.services.s3.model.S3Object: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata()>();

        $r5 = virtualinvoke $r22.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getETag()>();

        $r23 = staticinvoke <com.amazonaws.util.BinaryUtils: byte[] fromHex(java.lang.String)>($r5);

     label22:
        $r24 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

     label23:
        r31 = new com.amazonaws.services.s3.internal.DigestValidationInputStream;

        $r25 = r31;

     label24:
        specialinvoke r31.<com.amazonaws.services.s3.internal.DigestValidationInputStream: void <init>(java.io.InputStream,java.security.MessageDigest,byte[])>($r21, $r24, $r23);

     label25:
        r32 = new com.amazonaws.services.s3.model.S3ObjectInputStream;

        $r20 = r32;

        r34 = (java.io.InputStream) $r25;

     label26:
        specialinvoke r32.<com.amazonaws.services.s3.model.S3ObjectInputStream: void <init>(java.io.InputStream)>(r34);

        virtualinvoke $r19.<com.amazonaws.services.s3.model.S3Object: void setObjectContent(com.amazonaws.services.s3.model.S3ObjectInputStream)>($r20);

     label27:
        return $r19;

     label28:
        $r3 := @caughtexception;

        $r26 = <com.amazonaws.services.s3.AmazonS3Client: org.apache.commons.logging.Log log>;

     label29:
        interfaceinvoke $r26.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("No MD5 digest algorithm available.  Unable to calculate checksum and verify data integrity.", $r3);

     label30:
        $r25 = $r21;

        goto label25;

     label31:
        r33 = new com.amazonaws.util.LengthCheckInputStream;

        $r25 = r33;

     label32:
        $r22 = virtualinvoke $r19.<com.amazonaws.services.s3.model.S3Object: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata()>();

        $l0 = virtualinvoke $r22.<com.amazonaws.services.s3.model.ObjectMetadata: long getContentLength()>();

        specialinvoke r33.<com.amazonaws.util.LengthCheckInputStream: void <init>(java.io.InputStream,long,boolean)>($r21, $l0, 1);

     label33:
        goto label25;

     label34:
        $r2 := @caughtexception;

        $i2 = virtualinvoke $r2.<com.amazonaws.services.s3.model.AmazonS3Exception: int getStatusCode()>();

        if $i2 == 412 goto label35;

        $i2 = virtualinvoke $r2.<com.amazonaws.services.s3.model.AmazonS3Exception: int getStatusCode()>();

        if $i2 != 304 goto label36;

     label35:
        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r16, 16);

        return null;

     label36:
        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r16, 8);

        throw $r2;

        catch com.amazonaws.services.s3.model.AmazonS3Exception from label05 to label06 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label07 to label08 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label09 to label10 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label11 to label12 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label13 to label14 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label15 to label16 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label17 to label18 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label19 to label20 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label21 to label22 with label34;
        catch java.security.NoSuchAlgorithmException from label22 to label23 with label28;
        catch java.security.NoSuchAlgorithmException from label24 to label25 with label28;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label22 to label23 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label24 to label25 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label26 to label27 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label29 to label30 with label34;
        catch com.amazonaws.services.s3.model.AmazonS3Exception from label32 to label33 with label34;
    }

    public com.amazonaws.services.s3.model.S3Object getObject(java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.S3Object $r3;
        com.amazonaws.services.s3.model.GetObjectRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new com.amazonaws.services.s3.model.GetObjectRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.GetObjectRequest: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest)>($r4);

        return $r3;
    }

    public com.amazonaws.services.s3.model.AccessControlList getObjectAcl(java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.AccessControlList $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.AccessControlList getObjectAcl(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, null);

        return $r3;
    }

    public com.amazonaws.services.s3.model.AccessControlList getObjectAcl(java.lang.String, java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.AccessControlList $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name parameter must be specified when requesting an object\'s ACL");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The key parameter must be specified when requesting an object\'s ACL");

        $r4 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.AccessControlList getAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest)>($r1, $r2, $r3, null);

        return $r4;
    }

    public com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata(com.amazonaws.services.s3.model.GetObjectMetadataRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.GetObjectMetadataRequest $r1;
        java.lang.String $r2, $r3, $r4;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.model.SSECustomerKey $r7;
        com.amazonaws.services.s3.internal.S3MetadataResponseHandler $r8;
        java.lang.Object $r9;
        com.amazonaws.services.s3.model.ObjectMetadata $r10;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.GetObjectMetadataRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The GetObjectMetadataRequest parameter must be specified when requesting an object\'s metadata");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectMetadataRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectMetadataRequest: java.lang.String getKey()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectMetadataRequest: java.lang.String getVersionId()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when requesting an object\'s metadata");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The key parameter must be specified when requesting an object\'s metadata");

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName HEAD>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, $r3, $r1, $r5);

        if $r4 == null goto label1;

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versionId", $r4);

     label1:
        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.GetObjectMetadataRequest: com.amazonaws.services.s3.model.SSECustomerKey getSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r6, $r7);

        $r8 = new com.amazonaws.services.s3.internal.S3MetadataResponseHandler;

        specialinvoke $r8.<com.amazonaws.services.s3.internal.S3MetadataResponseHandler: void <init>()>();

        $r9 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r8, $r2, $r3);

        $r10 = (com.amazonaws.services.s3.model.ObjectMetadata) $r9;

        return $r10;
    }

    public com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata(java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.ObjectMetadata $r3;
        com.amazonaws.services.s3.model.GetObjectMetadataRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new com.amazonaws.services.s3.model.GetObjectMetadataRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.GetObjectMetadataRequest: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectMetadata getObjectMetadata(com.amazonaws.services.s3.model.GetObjectMetadataRequest)>($r4);

        return $r3;
    }

    public com.amazonaws.services.s3.model.Region getRegion()
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.net.URI $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.util.regex.Pattern $r4;
        java.util.regex.Matcher $r5;
        com.amazonaws.services.s3.model.Region $r6;
        java.lang.IllegalStateException $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 = $r0.<com.amazonaws.AmazonWebServiceClient: java.net.URI endpoint>;

        $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String getAuthority()>();

        $r3 = <com.amazonaws.services.s3.internal.Constants: java.lang.String S3_HOSTNAME>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r6 = <com.amazonaws.services.s3.model.Region: com.amazonaws.services.s3.model.Region US_Standard>;

        return $r6;

     label1:
        $r4 = <com.amazonaws.services.s3.model.Region: java.util.regex.Pattern S3_REGIONAL_ENDPOINT_PATTERN>;

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r6 = staticinvoke <com.amazonaws.services.s3.model.Region: com.amazonaws.services.s3.model.Region fromValue(java.lang.String)>($r2);

        return $r6;

     label2:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("S3 client with invalid S3 endpoint configured");

        throw $r7;
    }

    public java.lang.String getResourceUrl(java.lang.String, java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        java.lang.Exception $r3;
        java.net.URL $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label1:
        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URL getUrl(java.lang.String,java.lang.String)>($r1, $r2);

        $r1 = virtualinvoke $r4.<java.net.URL: java.lang.String toString()>();

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public com.amazonaws.services.s3.model.Owner getS3AccountOwner() throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.http.HttpMethodName $r1;
        com.amazonaws.services.s3.model.ListBucketsRequest $r2;
        com.amazonaws.Request $r3;
        com.amazonaws.services.s3.model.transform.Unmarshallers$ListBucketsOwnerUnmarshaller $r4;
        java.lang.Object $r5;
        com.amazonaws.services.s3.model.Owner $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r2 = new com.amazonaws.services.s3.model.ListBucketsRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.ListBucketsRequest: void <init>()>();

        $r1 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>(null, null, $r2, $r1);

        $r4 = new com.amazonaws.services.s3.model.transform.Unmarshallers$ListBucketsOwnerUnmarshaller;

        specialinvoke $r4.<com.amazonaws.services.s3.model.transform.Unmarshallers$ListBucketsOwnerUnmarshaller: void <init>()>();

        $r5 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r3, $r4, null, null);

        $r6 = (com.amazonaws.services.s3.model.Owner) $r5;

        return $r6;
    }

    public java.net.URL getUrl(java.lang.String, java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r5;
        com.amazonaws.DefaultRequest $r3;
        java.net.URL $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new com.amazonaws.DefaultRequest;

        $r5 = <com.amazonaws.services.s3.internal.Constants: java.lang.String S3_SERVICE_NAME>;

        specialinvoke $r3.<com.amazonaws.DefaultRequest: void <init>(java.lang.String)>($r5);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void configRequest(com.amazonaws.Request,java.lang.String,java.lang.String)>($r3, $r1, $r2);

        $r4 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: java.net.URL convertRequestToUrl(com.amazonaws.Request)>($r3);

        return $r4;
    }

    public com.amazonaws.services.s3.model.HeadBucketResult headBucket(com.amazonaws.services.s3.model.HeadBucketRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.HeadBucketRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        com.amazonaws.services.s3.model.transform.HeadBucketResultHandler $r5;
        java.lang.Object $r6;
        com.amazonaws.services.s3.model.HeadBucketResult $r7;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.HeadBucketRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.HeadBucketRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucketName parameter must be specified.");

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName HEAD>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        $r5 = new com.amazonaws.services.s3.model.transform.HeadBucketResultHandler;

        specialinvoke $r5.<com.amazonaws.services.s3.model.transform.HeadBucketResultHandler: void <init>()>();

        $r6 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r4, $r5, $r2, null);

        $r7 = (com.amazonaws.services.s3.model.HeadBucketResult) $r6;

        return $r7;
    }

    public com.amazonaws.services.s3.model.InitiateMultipartUploadResult initiateMultipartUpload(com.amazonaws.services.s3.model.InitiateMultipartUploadRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.InitiateMultipartUploadRequest $r1;
        com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain $r2;
        java.lang.String $r3, $r4;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.model.StorageClass $r7;
        com.amazonaws.services.s3.model.AccessControlList $r8;
        com.amazonaws.services.s3.model.ObjectMetadata $r9;
        com.amazonaws.services.s3.model.SSECustomerKey $r10;
        java.io.ByteArrayInputStream $r11;
        byte[] $r12;
        com.amazonaws.services.s3.model.transform.Unmarshallers$InitiateMultipartUploadResultUnmarshaller $r13;
        com.amazonaws.services.s3.internal.HeaderHandler[] $r14;
        com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler $r15;
        java.lang.Object $r16;
        com.amazonaws.services.s3.model.InitiateMultipartUploadResult $r17;
        com.amazonaws.services.s3.model.CannedAccessControlList $r18;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.InitiateMultipartUploadRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request parameter must be specified when initiating a multipart upload");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket name parameter must be specified when initiating a multipart upload");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: java.lang.String getKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The key parameter must be specified when initiating a multipart upload");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: java.lang.String getBucketName()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: java.lang.String getKey()>();

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName POST>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r3, $r4, $r1, $r5);

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("uploads", null);

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: com.amazonaws.services.s3.model.StorageClass getStorageClass()>();

        if $r7 == null goto label1;

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: com.amazonaws.services.s3.model.StorageClass getStorageClass()>();

        $r3 = virtualinvoke $r7.<com.amazonaws.services.s3.model.StorageClass: java.lang.String toString()>();

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-storage-class", $r3);

     label1:
        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: java.lang.String getRedirectLocation()>();

        if $r3 == null goto label2;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: java.lang.String getRedirectLocation()>();

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-website-redirect-location", $r3);

     label2:
        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: com.amazonaws.services.s3.model.AccessControlList getAccessControlList()>();

        if $r8 == null goto label5;

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: com.amazonaws.services.s3.model.AccessControlList getAccessControlList()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addAclHeaders(com.amazonaws.Request,com.amazonaws.services.s3.model.AccessControlList)>($r6, $r8);

     label3:
        $r9 = $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: com.amazonaws.services.s3.model.ObjectMetadata objectMetadata>;

        if $r9 == null goto label4;

        $r9 = $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: com.amazonaws.services.s3.model.ObjectMetadata objectMetadata>;

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateRequestMetadata(com.amazonaws.Request,com.amazonaws.services.s3.model.ObjectMetadata)>($r6, $r9);

     label4:
        $r10 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: com.amazonaws.services.s3.model.SSECustomerKey getSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r6, $r10);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setZeroContentLength(com.amazonaws.Request)>($r6);

        $r11 = new java.io.ByteArrayInputStream;

        $r12 = newarray (byte)[0];

        specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12);

        interfaceinvoke $r6.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r11);

        $r2 = new com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain;

        $r13 = new com.amazonaws.services.s3.model.transform.Unmarshallers$InitiateMultipartUploadResultUnmarshaller;

        specialinvoke $r13.<com.amazonaws.services.s3.model.transform.Unmarshallers$InitiateMultipartUploadResultUnmarshaller: void <init>()>();

        $r14 = newarray (com.amazonaws.services.s3.internal.HeaderHandler)[1];

        $r15 = new com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler;

        specialinvoke $r15.<com.amazonaws.services.s3.internal.ServerSideEncryptionHeaderHandler: void <init>()>();

        $r14[0] = $r15;

        specialinvoke $r2.<com.amazonaws.services.s3.internal.ResponseHeaderHandlerChain: void <init>(com.amazonaws.transform.Unmarshaller,com.amazonaws.services.s3.internal.HeaderHandler[])>($r13, $r14);

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: java.lang.String getBucketName()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: java.lang.String getKey()>();

        $r16 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r2, $r3, $r4);

        $r17 = (com.amazonaws.services.s3.model.InitiateMultipartUploadResult) $r16;

        return $r17;

     label5:
        $r18 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: com.amazonaws.services.s3.model.CannedAccessControlList getCannedACL()>();

        if $r18 == null goto label3;

        $r18 = virtualinvoke $r1.<com.amazonaws.services.s3.model.InitiateMultipartUploadRequest: com.amazonaws.services.s3.model.CannedAccessControlList getCannedACL()>();

        $r3 = virtualinvoke $r18.<com.amazonaws.services.s3.model.CannedAccessControlList: java.lang.String toString()>();

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("x-amz-acl", $r3);

        goto label3;
    }

    public boolean isRequesterPaysEnabled(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer $r2, $r5;
        com.amazonaws.services.s3.model.GetRequestPaymentConfigurationRequest $r3;
        com.amazonaws.services.s3.model.RequestPaymentConfiguration $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.GetRequestPaymentConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GetRequestPaymentConfigurationRequest: void <init>(java.lang.String)>($r1);

        $r4 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.RequestPaymentConfiguration getBucketRequestPayment(com.amazonaws.services.s3.model.GetRequestPaymentConfigurationRequest)>($r3);

        $r5 = virtualinvoke $r4.<com.amazonaws.services.s3.model.RequestPaymentConfiguration: com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer getPayer()>();

        $r2 = <com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer: com.amazonaws.services.s3.model.RequestPaymentConfiguration$Payer Requester>;

        if $r5 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.List listBuckets() throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.util.List $r1;
        com.amazonaws.services.s3.model.ListBucketsRequest $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r2 = new com.amazonaws.services.s3.model.ListBucketsRequest;

        specialinvoke $r2.<com.amazonaws.services.s3.model.ListBucketsRequest: void <init>()>();

        $r1 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.util.List listBuckets(com.amazonaws.services.s3.model.ListBucketsRequest)>($r2);

        return $r1;
    }

    public java.util.List listBuckets(com.amazonaws.services.s3.model.ListBucketsRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.ListBucketsRequest $r1;
        com.amazonaws.http.HttpMethodName $r2;
        com.amazonaws.Request $r3;
        com.amazonaws.services.s3.model.transform.Unmarshallers$ListBucketsUnmarshaller $r4;
        java.lang.Object $r5;
        java.util.List $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.ListBucketsRequest;

        $r2 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>(null, null, $r1, $r2);

        $r4 = new com.amazonaws.services.s3.model.transform.Unmarshallers$ListBucketsUnmarshaller;

        specialinvoke $r4.<com.amazonaws.services.s3.model.transform.Unmarshallers$ListBucketsUnmarshaller: void <init>()>();

        $r5 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r3, $r4, null, null);

        $r6 = (java.util.List) $r5;

        return $r6;
    }

    public com.amazonaws.services.s3.model.MultipartUploadListing listMultipartUploads(com.amazonaws.services.s3.model.ListMultipartUploadsRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.ListMultipartUploadsRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        java.lang.Integer $r5;
        com.amazonaws.services.s3.model.transform.Unmarshallers$ListMultipartUploadsResultUnmarshaller $r6;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.MultipartUploadListing $r8;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.ListMultipartUploadsRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request parameter must be specified when listing multipart uploads");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when listing multipart uploads");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getBucketName()>();

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("uploads", null);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getKeyMarker()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getKeyMarker()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("key-marker", $r2);

     label1:
        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.Integer getMaxUploads()>();

        if $r5 == null goto label2;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.Integer getMaxUploads()>();

        $r2 = virtualinvoke $r5.<java.lang.Integer: java.lang.String toString()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("max-uploads", $r2);

     label2:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getUploadIdMarker()>();

        if $r2 == null goto label3;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getUploadIdMarker()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("upload-id-marker", $r2);

     label3:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getDelimiter()>();

        if $r2 == null goto label4;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getDelimiter()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("delimiter", $r2);

     label4:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getPrefix()>();

        if $r2 == null goto label5;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getPrefix()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("prefix", $r2);

     label5:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getEncodingType()>();

        if $r2 == null goto label6;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getEncodingType()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("encoding-type", $r2);

     label6:
        $r6 = new com.amazonaws.services.s3.model.transform.Unmarshallers$ListMultipartUploadsResultUnmarshaller;

        specialinvoke $r6.<com.amazonaws.services.s3.model.transform.Unmarshallers$ListMultipartUploadsResultUnmarshaller: void <init>()>();

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListMultipartUploadsRequest: java.lang.String getBucketName()>();

        $r7 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r6, $r2, null);

        $r8 = (com.amazonaws.services.s3.model.MultipartUploadListing) $r7;

        return $r8;
    }

    public com.amazonaws.services.s3.model.ObjectListing listNextBatchOfObjects(com.amazonaws.services.s3.model.ObjectListing) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.ObjectListing $r1, $r3;
        java.lang.Integer $r2;
        boolean $z0;
        java.lang.String $r4, $r6, $r7, $r8;
        int $i0;
        com.amazonaws.services.s3.model.ListObjectsRequest $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.ObjectListing;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The previous object listing parameter must be specified when listing the next batch of objects in a bucket");

        $z0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: boolean isTruncated()>();

        if $z0 != 0 goto label1;

        $r3 = new com.amazonaws.services.s3.model.ObjectListing;

        specialinvoke $r3.<com.amazonaws.services.s3.model.ObjectListing: void <init>()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getBucketName()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.ObjectListing: void setBucketName(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getDelimiter()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.ObjectListing: void setDelimiter(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getNextMarker()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.ObjectListing: void setMarker(java.lang.String)>($r4);

        $i0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: int getMaxKeys()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.ObjectListing: void setMaxKeys(int)>($i0);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getPrefix()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.ObjectListing: void setPrefix(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getEncodingType()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.ObjectListing: void setEncodingType(java.lang.String)>($r4);

        virtualinvoke $r3.<com.amazonaws.services.s3.model.ObjectListing: void setTruncated(boolean)>(0);

        return $r3;

     label1:
        $r5 = new com.amazonaws.services.s3.model.ListObjectsRequest;

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getBucketName()>();

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getPrefix()>();

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getNextMarker()>();

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getDelimiter()>();

        $r2 = new java.lang.Integer;

        $i0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: int getMaxKeys()>();

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i0);

        specialinvoke $r5.<com.amazonaws.services.s3.model.ListObjectsRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)>($r4, $r6, $r7, $r8, $r2);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ObjectListing: java.lang.String getEncodingType()>();

        $r5 = virtualinvoke $r5.<com.amazonaws.services.s3.model.ListObjectsRequest: com.amazonaws.services.s3.model.ListObjectsRequest withEncodingType(java.lang.String)>($r4);

        $r1 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectListing listObjects(com.amazonaws.services.s3.model.ListObjectsRequest)>($r5);

        return $r1;
    }

    public com.amazonaws.services.s3.model.VersionListing listNextBatchOfVersions(com.amazonaws.services.s3.model.VersionListing) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.VersionListing $r1, $r3;
        java.lang.Integer $r2;
        boolean $z0;
        java.lang.String $r4, $r6, $r7, $r8, $r9;
        int $i0;
        com.amazonaws.services.s3.model.ListVersionsRequest $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.VersionListing;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The previous version listing parameter must be specified when listing the next batch of versions in a bucket");

        $z0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: boolean isTruncated()>();

        if $z0 != 0 goto label1;

        $r3 = new com.amazonaws.services.s3.model.VersionListing;

        specialinvoke $r3.<com.amazonaws.services.s3.model.VersionListing: void <init>()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getBucketName()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.VersionListing: void setBucketName(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getDelimiter()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.VersionListing: void setDelimiter(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getNextKeyMarker()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.VersionListing: void setKeyMarker(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getNextVersionIdMarker()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.VersionListing: void setVersionIdMarker(java.lang.String)>($r4);

        $i0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: int getMaxKeys()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.VersionListing: void setMaxKeys(int)>($i0);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getPrefix()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.VersionListing: void setPrefix(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getEncodingType()>();

        virtualinvoke $r3.<com.amazonaws.services.s3.model.VersionListing: void setEncodingType(java.lang.String)>($r4);

        virtualinvoke $r3.<com.amazonaws.services.s3.model.VersionListing: void setTruncated(boolean)>(0);

        return $r3;

     label1:
        $r5 = new com.amazonaws.services.s3.model.ListVersionsRequest;

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getBucketName()>();

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getPrefix()>();

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getNextKeyMarker()>();

        $r8 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getNextVersionIdMarker()>();

        $r9 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getDelimiter()>();

        $r2 = new java.lang.Integer;

        $i0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: int getMaxKeys()>();

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i0);

        specialinvoke $r5.<com.amazonaws.services.s3.model.ListVersionsRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)>($r4, $r6, $r7, $r8, $r9, $r2);

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.VersionListing: java.lang.String getEncodingType()>();

        $r5 = virtualinvoke $r5.<com.amazonaws.services.s3.model.ListVersionsRequest: com.amazonaws.services.s3.model.ListVersionsRequest withEncodingType(java.lang.String)>($r4);

        $r1 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.VersionListing listVersions(com.amazonaws.services.s3.model.ListVersionsRequest)>($r5);

        return $r1;
    }

    public com.amazonaws.services.s3.model.ObjectListing listObjects(com.amazonaws.services.s3.model.ListObjectsRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.ListObjectsRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        java.lang.Integer $r5;
        int $i0;
        com.amazonaws.services.s3.model.transform.Unmarshallers$ListObjectsUnmarshaller $r6;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.ObjectListing $r8;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.ListObjectsRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when listing objects in a bucket");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getBucketName()>();

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getPrefix()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getPrefix()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("prefix", $r2);

     label1:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getMarker()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getMarker()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("marker", $r2);

     label2:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getDelimiter()>();

        if $r2 == null goto label3;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getDelimiter()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("delimiter", $r2);

     label3:
        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.Integer getMaxKeys()>();

        if $r5 == null goto label4;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.Integer getMaxKeys()>();

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i0 < 0 goto label4;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.Integer getMaxKeys()>();

        $r2 = virtualinvoke $r5.<java.lang.Integer: java.lang.String toString()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("max-keys", $r2);

     label4:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getEncodingType()>();

        if $r2 == null goto label5;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getEncodingType()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("encoding-type", $r2);

     label5:
        $r6 = new com.amazonaws.services.s3.model.transform.Unmarshallers$ListObjectsUnmarshaller;

        specialinvoke $r6.<com.amazonaws.services.s3.model.transform.Unmarshallers$ListObjectsUnmarshaller: void <init>()>();

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsRequest: java.lang.String getBucketName()>();

        $r7 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r6, $r2, null);

        $r8 = (com.amazonaws.services.s3.model.ObjectListing) $r7;

        return $r8;
    }

    public com.amazonaws.services.s3.model.ObjectListing listObjects(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.ObjectListing $r2;
        com.amazonaws.services.s3.model.ListObjectsRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.ListObjectsRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.ListObjectsRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)>($r1, null, null, null, null);

        $r2 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectListing listObjects(com.amazonaws.services.s3.model.ListObjectsRequest)>($r3);

        return $r2;
    }

    public com.amazonaws.services.s3.model.ObjectListing listObjects(java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.ObjectListing $r3;
        com.amazonaws.services.s3.model.ListObjectsRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new com.amazonaws.services.s3.model.ListObjectsRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.ListObjectsRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)>($r1, $r2, null, null, null);

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ObjectListing listObjects(com.amazonaws.services.s3.model.ListObjectsRequest)>($r4);

        return $r3;
    }

    public com.amazonaws.services.s3.model.ListObjectsV2Result listObjectsV2(com.amazonaws.services.s3.model.ListObjectsV2Request) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.ListObjectsV2Request $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        java.lang.Integer $r5;
        int $i0;
        boolean $z0;
        com.amazonaws.services.s3.model.transform.Unmarshallers$ListObjectsV2Unmarshaller $r6;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.ListObjectsV2Result $r8;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.ListObjectsV2Request;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when listing objects in a bucket");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getBucketName()>();

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("list-type", "2");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getStartAfter()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getStartAfter()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("start-after", $r2);

     label1:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getContinuationToken()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getContinuationToken()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("continuation-token", $r2);

     label2:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getDelimiter()>();

        if $r2 == null goto label3;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getDelimiter()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("delimiter", $r2);

     label3:
        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.Integer getMaxKeys()>();

        if $r5 == null goto label4;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.Integer getMaxKeys()>();

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i0 < 0 goto label4;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.Integer getMaxKeys()>();

        $r2 = virtualinvoke $r5.<java.lang.Integer: java.lang.String toString()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("max-keys", $r2);

     label4:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getPrefix()>();

        if $r2 == null goto label5;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getPrefix()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("prefix", $r2);

     label5:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getEncodingType()>();

        if $r2 == null goto label6;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getEncodingType()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("encoding-type", $r2);

     label6:
        $z0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: boolean isFetchOwner()>();

        if $z0 == 0 goto label7;

        $z0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: boolean isFetchOwner()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("fetch-owner", $r2);

     label7:
        $r6 = new com.amazonaws.services.s3.model.transform.Unmarshallers$ListObjectsV2Unmarshaller;

        specialinvoke $r6.<com.amazonaws.services.s3.model.transform.Unmarshallers$ListObjectsV2Unmarshaller: void <init>()>();

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListObjectsV2Request: java.lang.String getBucketName()>();

        $r7 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r6, $r2, null);

        $r8 = (com.amazonaws.services.s3.model.ListObjectsV2Result) $r7;

        return $r8;
    }

    public com.amazonaws.services.s3.model.ListObjectsV2Result listObjectsV2(java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.ListObjectsV2Request $r2;
        com.amazonaws.services.s3.model.ListObjectsV2Result $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.amazonaws.services.s3.model.ListObjectsV2Request;

        specialinvoke $r2.<com.amazonaws.services.s3.model.ListObjectsV2Request: void <init>()>();

        $r2 = virtualinvoke $r2.<com.amazonaws.services.s3.model.ListObjectsV2Request: com.amazonaws.services.s3.model.ListObjectsV2Request withBucketName(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ListObjectsV2Result listObjectsV2(com.amazonaws.services.s3.model.ListObjectsV2Request)>($r2);

        return $r3;
    }

    public com.amazonaws.services.s3.model.ListObjectsV2Result listObjectsV2(java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.ListObjectsV2Request $r3;
        com.amazonaws.services.s3.model.ListObjectsV2Result $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new com.amazonaws.services.s3.model.ListObjectsV2Request;

        specialinvoke $r3.<com.amazonaws.services.s3.model.ListObjectsV2Request: void <init>()>();

        $r3 = virtualinvoke $r3.<com.amazonaws.services.s3.model.ListObjectsV2Request: com.amazonaws.services.s3.model.ListObjectsV2Request withBucketName(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<com.amazonaws.services.s3.model.ListObjectsV2Request: com.amazonaws.services.s3.model.ListObjectsV2Request withPrefix(java.lang.String)>($r2);

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.ListObjectsV2Result listObjectsV2(com.amazonaws.services.s3.model.ListObjectsV2Request)>($r3);

        return $r4;
    }

    public com.amazonaws.services.s3.model.PartListing listParts(com.amazonaws.services.s3.model.ListPartsRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.ListPartsRequest $r1;
        java.lang.String $r2, $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        java.lang.Integer $r6;
        com.amazonaws.services.s3.model.transform.Unmarshallers$ListPartsResultUnmarshaller $r7;
        java.lang.Object $r8;
        com.amazonaws.services.s3.model.PartListing $r9;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.ListPartsRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request parameter must be specified when listing parts");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when listing parts");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getKey()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The key parameter must be specified when listing parts");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getUploadId()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The upload ID parameter must be specified when listing parts");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getKey()>();

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, $r3, $r1, $r4);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getUploadId()>();

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("uploadId", $r2);

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.Integer getMaxParts()>();

        if $r6 == null goto label1;

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.Integer getMaxParts()>();

        $r2 = virtualinvoke $r6.<java.lang.Integer: java.lang.String toString()>();

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("max-parts", $r2);

     label1:
        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.Integer getPartNumberMarker()>();

        if $r6 == null goto label2;

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.Integer getPartNumberMarker()>();

        $r2 = virtualinvoke $r6.<java.lang.Integer: java.lang.String toString()>();

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("part-number-marker", $r2);

     label2:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getEncodingType()>();

        if $r2 == null goto label3;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getEncodingType()>();

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("encoding-type", $r2);

     label3:
        $r7 = new com.amazonaws.services.s3.model.transform.Unmarshallers$ListPartsResultUnmarshaller;

        specialinvoke $r7.<com.amazonaws.services.s3.model.transform.Unmarshallers$ListPartsResultUnmarshaller: void <init>()>();

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListPartsRequest: java.lang.String getKey()>();

        $r8 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r5, $r7, $r2, $r3);

        $r9 = (com.amazonaws.services.s3.model.PartListing) $r8;

        return $r9;
    }

    public com.amazonaws.services.s3.model.VersionListing listVersions(com.amazonaws.services.s3.model.ListVersionsRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.ListVersionsRequest $r1;
        java.lang.String $r2;
        com.amazonaws.http.HttpMethodName $r3;
        com.amazonaws.Request $r4;
        java.lang.Integer $r5;
        int $i0;
        com.amazonaws.services.s3.model.transform.Unmarshallers$VersionListUnmarshaller $r6;
        java.lang.Object $r7;
        com.amazonaws.services.s3.model.VersionListing $r8;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.ListVersionsRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getBucketName()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when listing versions in a bucket");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getBucketName()>();

        $r3 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName GET>;

        $r4 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r3);

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versions", null);

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getPrefix()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getPrefix()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("prefix", $r2);

     label1:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getKeyMarker()>();

        if $r2 == null goto label2;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getKeyMarker()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("key-marker", $r2);

     label2:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getVersionIdMarker()>();

        if $r2 == null goto label3;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getVersionIdMarker()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("version-id-marker", $r2);

     label3:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getDelimiter()>();

        if $r2 == null goto label4;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getDelimiter()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("delimiter", $r2);

     label4:
        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.Integer getMaxResults()>();

        if $r5 == null goto label5;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.Integer getMaxResults()>();

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i0 < 0 goto label5;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.Integer getMaxResults()>();

        $r2 = virtualinvoke $r5.<java.lang.Integer: java.lang.String toString()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("max-keys", $r2);

     label5:
        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getEncodingType()>();

        if $r2 == null goto label6;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getEncodingType()>();

        interfaceinvoke $r4.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("encoding-type", $r2);

     label6:
        $r6 = new com.amazonaws.services.s3.model.transform.Unmarshallers$VersionListUnmarshaller;

        specialinvoke $r6.<com.amazonaws.services.s3.model.transform.Unmarshallers$VersionListUnmarshaller: void <init>()>();

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.ListVersionsRequest: java.lang.String getBucketName()>();

        $r7 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.transform.Unmarshaller,java.lang.String,java.lang.String)>($r4, $r6, $r2, null);

        $r8 = (com.amazonaws.services.s3.model.VersionListing) $r7;

        return $r8;
    }

    public com.amazonaws.services.s3.model.VersionListing listVersions(java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.VersionListing $r3;
        com.amazonaws.services.s3.model.ListVersionsRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new com.amazonaws.services.s3.model.ListVersionsRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.ListVersionsRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)>($r1, $r2, null, null, null, null);

        $r3 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.VersionListing listVersions(com.amazonaws.services.s3.model.ListVersionsRequest)>($r4);

        return $r3;
    }

    public com.amazonaws.services.s3.model.VersionListing listVersions(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Integer) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        java.lang.Integer $r6;
        com.amazonaws.services.s3.model.ListVersionsRequest $r7;
        com.amazonaws.services.s3.model.VersionListing $r8;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.Integer;

        $r7 = new com.amazonaws.services.s3.model.ListVersionsRequest;

        specialinvoke $r7.<com.amazonaws.services.s3.model.ListVersionsRequest: void <init>()>();

        $r7 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ListVersionsRequest: com.amazonaws.services.s3.model.ListVersionsRequest withBucketName(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ListVersionsRequest: com.amazonaws.services.s3.model.ListVersionsRequest withPrefix(java.lang.String)>($r2);

        $r7 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ListVersionsRequest: com.amazonaws.services.s3.model.ListVersionsRequest withDelimiter(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ListVersionsRequest: com.amazonaws.services.s3.model.ListVersionsRequest withKeyMarker(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ListVersionsRequest: com.amazonaws.services.s3.model.ListVersionsRequest withVersionIdMarker(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ListVersionsRequest: com.amazonaws.services.s3.model.ListVersionsRequest withMaxResults(java.lang.Integer)>($r6);

        $r8 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.VersionListing listVersions(com.amazonaws.services.s3.model.ListVersionsRequest)>($r7);

        return $r8;
    }

    protected void presignRequest(com.amazonaws.Request, com.amazonaws.HttpMethod, java.lang.String, java.lang.String, java.util.Date, java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.Request $r1;
        com.amazonaws.HttpMethod $r2;
        java.lang.String $r3, $r4, $r6;
        java.util.Date $r5;
        java.lang.StringBuilder $r7, $r8;
        com.amazonaws.auth.AWSCredentialsProvider $r9;
        com.amazonaws.auth.AWSCredentials $r10, $r12;
        com.amazonaws.AmazonWebServiceRequest $r11;
        com.amazonaws.services.s3.internal.S3QueryStringSigner $r13;
        java.util.Map $r14;
        boolean $z0;
        java.lang.Object $r15;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.Request;

        $r2 := @parameter1: com.amazonaws.HttpMethod;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.util.Date;

        $r6 := @parameter5: java.lang.String;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void beforeRequest(com.amazonaws.Request)>($r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        if $r3 == null goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        if $r4 == null goto label6;

        $r3 = staticinvoke <com.amazonaws.util.HttpUtils: java.lang.String urlEncode(java.lang.String,boolean)>($r4, 1);

     label2:
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        if $r6 == null goto label7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("(?<=/)/", "%2F");

        $r9 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.auth.AWSCredentialsProvider awsCredentialsProvider>;

        $r10 = interfaceinvoke $r9.<com.amazonaws.auth.AWSCredentialsProvider: com.amazonaws.auth.AWSCredentials getCredentials()>();

        $r11 = interfaceinvoke $r1.<com.amazonaws.Request: com.amazonaws.AmazonWebServiceRequest getOriginalRequest()>();

        if $r11 == null goto label4;

        $r12 = virtualinvoke $r11.<com.amazonaws.AmazonWebServiceRequest: com.amazonaws.auth.AWSCredentials getRequestCredentials()>();

        if $r12 == null goto label4;

        $r10 = virtualinvoke $r11.<com.amazonaws.AmazonWebServiceRequest: com.amazonaws.auth.AWSCredentials getRequestCredentials()>();

     label4:
        $r13 = new com.amazonaws.services.s3.internal.S3QueryStringSigner;

        $r4 = virtualinvoke $r2.<com.amazonaws.HttpMethod: java.lang.String toString()>();

        specialinvoke $r13.<com.amazonaws.services.s3.internal.S3QueryStringSigner: void <init>(java.lang.String,java.lang.String,java.util.Date)>($r4, $r3, $r5);

        virtualinvoke $r13.<com.amazonaws.services.s3.internal.S3QueryStringSigner: void sign(com.amazonaws.Request,com.amazonaws.auth.AWSCredentials)>($r1, $r10);

        $r14 = interfaceinvoke $r1.<com.amazonaws.Request: java.util.Map getHeaders()>();

        $z0 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>("x-amz-security-token");

        if $z0 == 0 goto label8;

        $r14 = interfaceinvoke $r1.<com.amazonaws.Request: java.util.Map getHeaders()>();

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-security-token");

        $r3 = (java.lang.String) $r15;

        interfaceinvoke $r1.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("x-amz-security-token", $r3);

        $r14 = interfaceinvoke $r1.<com.amazonaws.Request: java.util.Map getHeaders()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>("x-amz-security-token");

        return;

     label5:
        $r3 = "";

        goto label1;

     label6:
        $r3 = "";

        goto label2;

     label7:
        $r3 = "";

        goto label3;

     label8:
        return;
    }

    public com.amazonaws.services.s3.model.PutObjectResult putObject(com.amazonaws.services.s3.model.PutObjectRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.PutObjectRequest $r1;
        com.amazonaws.AmazonClientException $r2, r41;
        java.lang.Throwable $r3, $r32;
        com.amazonaws.services.s3.model.PutObjectResult $r4, r44;
        java.lang.String $r5, $r6, $r14, varReplacer1107, varReplacer1108, varReplacer1109, varReplacer1110, varReplacer1112, varReplacer1113, varReplacer1114, varReplacer1116, varReplacer1118, varReplacer1119, varReplacer1120, varReplacer1121, varReplacer1124, varReplacer1125, varReplacer1126, varReplacer1127, varReplacer1128, varReplacer1129, varReplacer1130;
        com.amazonaws.services.s3.model.ObjectMetadata $r7, $r8;
        java.io.InputStream $r9;
        java.lang.Object $r10, $r21;
        com.amazonaws.event.ProgressListener $r11;
        com.amazonaws.event.ProgressListenerCallbackExecutor $r12;
        boolean $z0, $z1;
        java.io.File $r13;
        long $l0;
        com.amazonaws.services.s3.util.Mimetypes $r15;
        com.amazonaws.http.HttpMethodName $r16;
        com.amazonaws.Request $r17;
        com.amazonaws.services.s3.model.AccessControlList $r18;
        byte[] $r19, $r27;
        com.amazonaws.services.s3.model.SSECustomerKey $r20;
        java.lang.Long $r22;
        org.apache.commons.logging.Log $r23;
        java.io.ByteArrayInputStream $r24;
        int $i1, varReplacer1111, varReplacer1115, varReplacer1117, varReplacer1122, varReplacer1123;
        com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream $r25, r39;
        com.amazonaws.services.s3.internal.S3MetadataResponseHandler $r26, r40;
        java.lang.Exception $r28, $r31, $r33;
        java.lang.StringBuilder $r29, r42;
        com.amazonaws.services.s3.model.CannedAccessControlList $r30;
        byte $b2;
        java.util.Date $r34;
        com.amazonaws.AbortedException $r35, $r36;
        com.amazonaws.services.s3.internal.RepeatableFileInputStream r37;
        com.amazonaws.event.ProgressReportingInputStream r38;
        com.amazonaws.util.LengthCheckInputStream r43;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.PutObjectRequest;

        varReplacer1107 = "The PutObjectRequest parameter must be specified when uploading an object";

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, varReplacer1107);

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: java.lang.String getBucketName()>();

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: java.lang.String getKey()>();

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: com.amazonaws.services.s3.model.ObjectMetadata getMetadata()>();

        $r8 = $r7;

        $r10 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: java.io.InputStream getInputStream()>();

        $r11 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: com.amazonaws.event.ProgressListener getGeneralProgressListener()>();

        $r12 = staticinvoke <com.amazonaws.event.ProgressListenerCallbackExecutor: com.amazonaws.event.ProgressListenerCallbackExecutor wrapListener(com.amazonaws.event.ProgressListener)>($r11);

        if $r7 != null goto label01;

        $r7 = new com.amazonaws.services.s3.model.ObjectMetadata;

        $r8 = $r7;

        specialinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: void <init>()>();

     label01:
        varReplacer1121 = "The bucket name parameter must be specified when uploading an object";

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r5, varReplacer1121);

        varReplacer1116 = "The key parameter must be specified when uploading an object";

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r6, varReplacer1116);

        $z0 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: boolean skipMd5CheckPerRequest(com.amazonaws.AmazonWebServiceRequest)>($r1);

        $r13 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: java.io.File getFile()>();

        if $r13 == null goto label07;

        $r13 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: java.io.File getFile()>();

        $l0 = virtualinvoke $r13.<java.io.File: long length()>();

        virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: void setContentLength(long)>($l0);

        $r14 = virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getContentMD5()>();

        if $r14 != null goto label23;

        $z1 = 1;

     label02:
        $r14 = virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getContentType()>();

        if $r14 != null goto label03;

        $r15 = staticinvoke <com.amazonaws.services.s3.util.Mimetypes: com.amazonaws.services.s3.util.Mimetypes getInstance()>();

        $r14 = virtualinvoke $r15.<com.amazonaws.services.s3.util.Mimetypes: java.lang.String getMimetype(java.io.File)>($r13);

        virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: void setContentType(java.lang.String)>($r14);

     label03:
        if $z1 == 0 goto label05;

        if $z0 != 0 goto label05;

     label04:
        $r14 = staticinvoke <com.amazonaws.util.Md5Utils: java.lang.String md5AsBase64(java.io.File)>($r13);

        virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: void setContentMD5(java.lang.String)>($r14);

     label05:
        r37 = new com.amazonaws.services.s3.internal.RepeatableFileInputStream;

        $r10 = r37;

     label06:
        specialinvoke r37.<com.amazonaws.services.s3.internal.RepeatableFileInputStream: void <init>(java.io.File)>($r13);

     label07:
        $r16 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r17 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r5, $r6, $r1, $r16);

        $r18 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: com.amazonaws.services.s3.model.AccessControlList getAccessControlList()>();

        if $r18 == null goto label26;

        $r18 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: com.amazonaws.services.s3.model.AccessControlList getAccessControlList()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addAclHeaders(com.amazonaws.Request,com.amazonaws.services.s3.model.AccessControlList)>($r17, $r18);

     label08:
        $r14 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: java.lang.String getStorageClass()>();

        if $r14 == null goto label09;

        $r14 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: java.lang.String getStorageClass()>();

        varReplacer1108 = "x-amz-storage-class";

        interfaceinvoke $r17.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1108, $r14);

     label09:
        $r14 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: java.lang.String getRedirectLocation()>();

        if $r14 == null goto label10;

        $r14 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: java.lang.String getRedirectLocation()>();

        varReplacer1109 = "x-amz-website-redirect-location";

        interfaceinvoke $r17.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1109, $r14);

        if $r10 != null goto label10;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setZeroContentLength(com.amazonaws.Request)>($r17);

        $r24 = new java.io.ByteArrayInputStream;

        $r10 = $r24;

        $r19 = newarray (byte)[0];

        specialinvoke $r24.<java.io.ByteArrayInputStream: void <init>(byte[])>($r19);

     label10:
        $r20 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: com.amazonaws.services.s3.model.SSECustomerKey getSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r17, $r20);

        varReplacer1124 = "Content-Length";

        $r21 = virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.Object getRawMetadataValue(java.lang.String)>(varReplacer1124);

        $r22 = (java.lang.Long) $r21;

        if $r22 != null goto label28;

        $r9 = (java.io.InputStream) $r10;

        $z1 = virtualinvoke $r9.<java.io.InputStream: boolean markSupported()>();

        if $z1 != 0 goto label27;

        $r23 = <com.amazonaws.services.s3.AmazonS3Client: org.apache.commons.logging.Log log>;

        varReplacer1128 = "No content length specified for stream data.  Stream contents will be buffered in memory and could result in out of memory errors.";

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void warn(java.lang.Object)>(varReplacer1128);

        $r9 = (java.io.InputStream) $r10;

        $r24 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.io.ByteArrayInputStream toByteArray(java.io.InputStream)>($r9);

        $i1 = virtualinvoke $r24.<java.io.ByteArrayInputStream: int available()>();

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        varReplacer1120 = "Content-Length";

        interfaceinvoke $r17.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1120, $r14);

        $r21 = $r24;

     label11:
        if $r12 == null goto label41;

        r38 = new com.amazonaws.event.ProgressReportingInputStream;

        $r10 = r38;

        $r9 = (java.io.InputStream) $r21;

        specialinvoke r38.<com.amazonaws.event.ProgressReportingInputStream: void <init>(java.io.InputStream,com.amazonaws.event.ProgressListenerCallbackExecutor)>($r9, $r12);

        varReplacer1122 = 2;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r12, varReplacer1122);

     label12:
        $r25 = null;

        $r14 = virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getContentMD5()>();

        if $r14 != null goto label13;

        if $z0 != 0 goto label13;

        r39 = new com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream;

        $r25 = r39;

        $r9 = (java.io.InputStream) $r10;

        specialinvoke r39.<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: void <init>(java.io.InputStream)>($r9);

        $r10 = $r25;

     label13:
        $r14 = virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getContentType()>();

        if $r14 != null goto label14;

        varReplacer1112 = "application/octet-stream";

        virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: void setContentType(java.lang.String)>(varReplacer1112);

     label14:
        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateRequestMetadata(com.amazonaws.Request,com.amazonaws.services.s3.model.ObjectMetadata)>($r17, $r8);

        $r9 = (java.io.InputStream) $r10;

        interfaceinvoke $r17.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r9);

        varReplacer1125 = "Expect";

        varReplacer1126 = "100-continue";

        interfaceinvoke $r17.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1125, varReplacer1126);

     label15:
        r40 = new com.amazonaws.services.s3.internal.S3MetadataResponseHandler;

     label16:
        $r26 = r40;

     label17:
        specialinvoke r40.<com.amazonaws.services.s3.internal.S3MetadataResponseHandler: void <init>()>();

        $r21 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r17, $r26, $r5, $r6);

     label18:
        $r7 = (com.amazonaws.services.s3.model.ObjectMetadata) $r21;

     label19:
        $r9 = (java.io.InputStream) $r10;

     label20:
        virtualinvoke $r9.<java.io.InputStream: void close()>();

     label21:
        $r5 = virtualinvoke $r8.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getContentMD5()>();

        if $r25 == null goto label22;

        $r19 = virtualinvoke $r25.<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: byte[] getMd5Digest()>();

        $r5 = staticinvoke <com.amazonaws.util.BinaryUtils: java.lang.String toBase64(byte[])>($r19);

     label22:
        if $r7 == null goto label38;

        if $r5 == null goto label38;

        if $z0 != 0 goto label38;

        $r19 = staticinvoke <com.amazonaws.util.BinaryUtils: byte[] fromBase64(java.lang.String)>($r5);

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getETag()>();

        $r27 = staticinvoke <com.amazonaws.util.BinaryUtils: byte[] fromHex(java.lang.String)>($r6);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r19, $r27);

        if $z0 != 0 goto label38;

        varReplacer1115 = 8;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r12, varReplacer1115);

        r41 = new com.amazonaws.AmazonClientException;

        varReplacer1130 = "Unable to verify integrity of data upload.  Client calculated content hash didn\'t match hash calculated by Amazon S3.  You may need to delete the data stored in Amazon S3.";

        specialinvoke r41.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>(varReplacer1130);

        throw r41;

     label23:
        $z1 = 0;

        goto label02;

     label24:
        $r28 := @caughtexception;

        r41 = new com.amazonaws.AmazonClientException;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        varReplacer1118 = "Unable to calculate MD5 hash: ";

        $r29 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1118);

        $r5 = virtualinvoke $r28.<java.lang.Exception: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r41.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r28);

        throw r41;

     label25:
        $r3 := @caughtexception;

        r41 = new com.amazonaws.AmazonClientException;

        varReplacer1114 = "Unable to find file to upload";

        specialinvoke r41.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1114, $r3);

        throw r41;

     label26:
        $r30 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: com.amazonaws.services.s3.model.CannedAccessControlList getCannedAcl()>();

        if $r30 == null goto label08;

        $r30 = virtualinvoke $r1.<com.amazonaws.services.s3.model.PutObjectRequest: com.amazonaws.services.s3.model.CannedAccessControlList getCannedAcl()>();

        $r14 = virtualinvoke $r30.<com.amazonaws.services.s3.model.CannedAccessControlList: java.lang.String toString()>();

        varReplacer1119 = "x-amz-acl";

        interfaceinvoke $r17.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1119, $r14);

        goto label08;

     label27:
        $r9 = (java.io.InputStream) $r10;

        $l0 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: long calculateContentLength(java.io.InputStream)>($r9);

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        varReplacer1113 = "Content-Length";

        interfaceinvoke $r17.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1113, $r14);

        $r21 = $r10;

        goto label11;

     label28:
        $l0 = virtualinvoke $r22.<java.lang.Long: long longValue()>();

        $b2 = $l0 cmp 0L;

        if $b2 < 0 goto label29;

        r43 = new com.amazonaws.util.LengthCheckInputStream;

        $r9 = (java.io.InputStream) $r10;

        varReplacer1123 = 0;

        specialinvoke r43.<com.amazonaws.util.LengthCheckInputStream: void <init>(java.io.InputStream,long,boolean)>($r9, $l0, varReplacer1123);

        $r10 = r43;

        $r14 = virtualinvoke $r22.<java.lang.Long: java.lang.String toString()>();

        varReplacer1127 = "Content-Length";

        interfaceinvoke $r17.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>(varReplacer1127, $r14);

     label29:
        $r21 = $r10;

        goto label11;

     label30:
        $r31 := @caughtexception;

        $r23 = <com.amazonaws.services.s3.AmazonS3Client: org.apache.commons.logging.Log log>;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        varReplacer1110 = "Unable to cleanly close input stream: ";

        $r29 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1110);

        $r5 = virtualinvoke $r31.<java.lang.Exception: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r5, $r31);

        goto label21;

     label31:
        $r2 := @caughtexception;

     label32:
        varReplacer1111 = 8;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r12, varReplacer1111);

        throw $r2;

     label33:
        $r32 := @caughtexception;

     label34:
        $r9 = (java.io.InputStream) $r10;

     label35:
        virtualinvoke $r9.<java.io.InputStream: void close()>();

     label36:
        throw $r32;

     label37:
        $r33 := @caughtexception;

        $r23 = <com.amazonaws.services.s3.AmazonS3Client: org.apache.commons.logging.Log log>;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        varReplacer1129 = "Unable to cleanly close input stream: ";

        $r29 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1129);

        $r5 = virtualinvoke $r33.<java.lang.Exception: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r5, $r33);

        goto label36;

     label38:
        varReplacer1117 = 4;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r12, varReplacer1117);

        r44 = new com.amazonaws.services.s3.model.PutObjectResult;

        $r4 = r44;

        specialinvoke r44.<com.amazonaws.services.s3.model.PutObjectResult: void <init>()>();

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getETag()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.PutObjectResult: void setETag(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getVersionId()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.PutObjectResult: void setVersionId(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getSSEAlgorithm()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.PutObjectResult: void setSSEAlgorithm(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getSSEKMSKeyId()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.PutObjectResult: void setSSEKMSKeyId(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getSSECustomerAlgorithm()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.PutObjectResult: void setSSECustomerAlgorithm(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getSSECustomerKeyMd5()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.PutObjectResult: void setSSECustomerKeyMd5(java.lang.String)>($r6);

        $r34 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: java.util.Date getExpirationTime()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.PutObjectResult: void setExpirationTime(java.util.Date)>($r34);

        $r6 = virtualinvoke $r7.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getExpirationTimeRuleId()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.PutObjectResult: void setExpirationTimeRuleId(java.lang.String)>($r6);

        virtualinvoke $r4.<com.amazonaws.services.s3.model.PutObjectResult: void setContentMd5(java.lang.String)>($r5);

        return $r4;

     label39:
        $r35 := @caughtexception;

        goto label21;

     label40:
        $r36 := @caughtexception;

        goto label36;

     label41:
        $r10 = $r21;

        goto label12;

        catch java.lang.Exception from label04 to label05 with label24;
        catch java.io.FileNotFoundException from label06 to label07 with label25;
        catch com.amazonaws.AmazonClientException from label17 to label18 with label31;
        catch java.lang.Throwable from label15 to label16 with label33;
        catch java.lang.Throwable from label17 to label19 with label33;
        catch com.amazonaws.AbortedException from label20 to label21 with label39;
        catch java.lang.Exception from label19 to label21 with label30;
        catch java.lang.Throwable from label32 to label33 with label33;
        catch com.amazonaws.AbortedException from label35 to label36 with label40;
        catch java.lang.Exception from label34 to label36 with label37;
    }

    public com.amazonaws.services.s3.model.PutObjectResult putObject(java.lang.String, java.lang.String, java.io.File) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        java.io.File $r3;
        com.amazonaws.services.s3.model.ObjectMetadata $r4;
        com.amazonaws.services.s3.model.PutObjectRequest $r5;
        com.amazonaws.services.s3.model.PutObjectResult $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.io.File;

        $r5 = new com.amazonaws.services.s3.model.PutObjectRequest;

        specialinvoke $r5.<com.amazonaws.services.s3.model.PutObjectRequest: void <init>(java.lang.String,java.lang.String,java.io.File)>($r1, $r2, $r3);

        $r4 = new com.amazonaws.services.s3.model.ObjectMetadata;

        specialinvoke $r4.<com.amazonaws.services.s3.model.ObjectMetadata: void <init>()>();

        $r5 = virtualinvoke $r5.<com.amazonaws.services.s3.model.PutObjectRequest: com.amazonaws.services.s3.model.PutObjectRequest withMetadata(com.amazonaws.services.s3.model.ObjectMetadata)>($r4);

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.PutObjectResult putObject(com.amazonaws.services.s3.model.PutObjectRequest)>($r5);

        return $r6;
    }

    public com.amazonaws.services.s3.model.PutObjectResult putObject(java.lang.String, java.lang.String, java.io.InputStream, com.amazonaws.services.s3.model.ObjectMetadata) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        java.io.InputStream $r3;
        com.amazonaws.services.s3.model.ObjectMetadata $r4;
        com.amazonaws.services.s3.model.PutObjectResult $r5;
        com.amazonaws.services.s3.model.PutObjectRequest $r6;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.io.InputStream;

        $r4 := @parameter3: com.amazonaws.services.s3.model.ObjectMetadata;

        $r6 = new com.amazonaws.services.s3.model.PutObjectRequest;

        specialinvoke $r6.<com.amazonaws.services.s3.model.PutObjectRequest: void <init>(java.lang.String,java.lang.String,java.io.InputStream,com.amazonaws.services.s3.model.ObjectMetadata)>($r1, $r2, $r3, $r4);

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.PutObjectResult putObject(com.amazonaws.services.s3.model.PutObjectRequest)>($r6);

        return $r5;
    }

    public void restoreObject(com.amazonaws.services.s3.model.RestoreObjectRequest) throws com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.RestoreObjectRequest $r1;
        java.lang.Exception $r2;
        java.lang.String $r3, $r4, $r5;
        int $i0;
        java.lang.IllegalArgumentException $r6;
        com.amazonaws.http.HttpMethodName $r7;
        com.amazonaws.Request $r8;
        byte[] $r9;
        java.io.ByteArrayInputStream $r10;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r11;
        com.amazonaws.AmazonClientException $r12;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.RestoreObjectRequest;

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.RestoreObjectRequest: java.lang.String getBucketName()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.RestoreObjectRequest: java.lang.String getKey()>();

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.RestoreObjectRequest: java.lang.String getVersionId()>();

        $i0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.RestoreObjectRequest: int getExpirationInDays()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket name parameter must be specified when copying a glacier object");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The key parameter must be specified when copying a glacier object");

        if $i0 != -1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The expiration in days parameter must be specified when copying a glacier object");

        throw $r6;

     label1:
        $r7 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName POST>;

        $r8 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r3, $r4, $r1, $r7);

        interfaceinvoke $r8.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("restore", null);

        if $r5 == null goto label2;

        interfaceinvoke $r8.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versionId", $r5);

     label2:
        $r9 = staticinvoke <com.amazonaws.services.s3.model.transform.RequestXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.RestoreObjectRequest)>($r1);

        $i0 = lengthof $r9;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r5);

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        interfaceinvoke $r8.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r10);

     label3:
        $r9 = staticinvoke <com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>($r9);

        $r5 = staticinvoke <com.amazonaws.util.BinaryUtils: java.lang.String toBase64(byte[])>($r9);

        interfaceinvoke $r8.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-MD5", $r5);

     label4:
        $r11 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r8, $r11, $r3, $r4);

        return;

     label5:
        $r2 := @caughtexception;

        $r12 = new com.amazonaws.AmazonClientException;

        specialinvoke $r12.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t compute md5 sum", $r2);

        throw $r12;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void restoreObject(java.lang.String, java.lang.String, int) throws com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        int $i0;
        com.amazonaws.services.s3.model.RestoreObjectRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 = new com.amazonaws.services.s3.model.RestoreObjectRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.RestoreObjectRequest: void <init>(java.lang.String,java.lang.String,int)>($r1, $r2, $i0);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void restoreObject(com.amazonaws.services.s3.model.RestoreObjectRequest)>($r3);

        return;
    }

    public void setBucketAccelerateConfiguration(com.amazonaws.services.s3.model.SetBucketAccelerateConfigurationRequest) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketAccelerateConfigurationRequest $r1;
        java.lang.String $r2, $r4;
        com.amazonaws.services.s3.model.BucketAccelerateConfiguration $r3;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r7;
        byte[] $r8;
        int $i0;
        java.io.ByteArrayInputStream $r9;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r10;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketAccelerateConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "setBucketAccelerateConfigurationRequest must be specified");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketAccelerateConfigurationRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketAccelerateConfigurationRequest: com.amazonaws.services.s3.model.BucketAccelerateConfiguration getAccelerateConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when setting accelerate configuration.");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket accelerate configuration parameter must be specified.");

        $r4 = virtualinvoke $r3.<com.amazonaws.services.s3.model.BucketAccelerateConfiguration: java.lang.String getStatus()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The status parameter must be specified when updating bucket accelerate configuration.");

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r5);

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("accelerate", null);

        $r7 = <com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory bucketConfigurationXmlFactory>;

        $r8 = virtualinvoke $r7.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.BucketAccelerateConfiguration)>($r3);

        $i0 = lengthof $r8;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r4);

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        interfaceinvoke $r6.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r9);

        $r10 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r10, $r2, null);

        return;
    }

    public void setBucketAccelerateConfiguration(java.lang.String, com.amazonaws.services.s3.model.BucketAccelerateConfiguration) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketAccelerateConfiguration $r2;
        com.amazonaws.services.s3.model.SetBucketAccelerateConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.BucketAccelerateConfiguration;

        $r3 = new com.amazonaws.services.s3.model.SetBucketAccelerateConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.SetBucketAccelerateConfigurationRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.BucketAccelerateConfiguration)>($r1, $r2);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketAccelerateConfiguration(com.amazonaws.services.s3.model.SetBucketAccelerateConfigurationRequest)>($r3);

        return;
    }

    public void setBucketAcl(com.amazonaws.services.s3.model.SetBucketAclRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketAclRequest $r1;
        java.lang.String $r2;
        com.amazonaws.services.s3.model.AccessControlList $r3;
        com.amazonaws.services.s3.model.CannedAccessControlList $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketAclRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketAclRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketAclRequest: com.amazonaws.services.s3.model.AccessControlList getAcl()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketAclRequest: com.amazonaws.services.s3.model.CannedAccessControlList getCannedAcl()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when setting a bucket\'s ACL");

        if $r3 == null goto label1;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.AccessControlList,com.amazonaws.AmazonWebServiceRequest)>($r2, null, null, $r3, $r1);

        return;

     label1:
        if $r4 == null goto label2;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.CannedAccessControlList,com.amazonaws.AmazonWebServiceRequest)>($r2, null, null, $r4, $r1);

        return;

     label2:
        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>(null, "The ACL parameter must be specified when setting a bucket\'s ACL");

        return;
    }

    public void setBucketAcl(java.lang.String, com.amazonaws.services.s3.model.AccessControlList) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.AccessControlList $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.AccessControlList;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketAcl0(java.lang.String,com.amazonaws.services.s3.model.AccessControlList,com.amazonaws.metrics.RequestMetricCollector)>($r1, $r2, null);

        return;
    }

    public void setBucketAcl(java.lang.String, com.amazonaws.services.s3.model.AccessControlList, com.amazonaws.metrics.RequestMetricCollector)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.AccessControlList $r2;
        com.amazonaws.metrics.RequestMetricCollector $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.AccessControlList;

        $r3 := @parameter2: com.amazonaws.metrics.RequestMetricCollector;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketAcl0(java.lang.String,com.amazonaws.services.s3.model.AccessControlList,com.amazonaws.metrics.RequestMetricCollector)>($r1, $r2, $r3);

        return;
    }

    public void setBucketAcl(java.lang.String, com.amazonaws.services.s3.model.CannedAccessControlList) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.CannedAccessControlList $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.CannedAccessControlList;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketAcl0(java.lang.String,com.amazonaws.services.s3.model.CannedAccessControlList,com.amazonaws.metrics.RequestMetricCollector)>($r1, $r2, null);

        return;
    }

    public void setBucketAcl(java.lang.String, com.amazonaws.services.s3.model.CannedAccessControlList, com.amazonaws.metrics.RequestMetricCollector) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.CannedAccessControlList $r2;
        com.amazonaws.metrics.RequestMetricCollector $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.CannedAccessControlList;

        $r3 := @parameter2: com.amazonaws.metrics.RequestMetricCollector;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketAcl0(java.lang.String,com.amazonaws.services.s3.model.CannedAccessControlList,com.amazonaws.metrics.RequestMetricCollector)>($r1, $r2, $r3);

        return;
    }

    public void setBucketCrossOriginConfiguration(com.amazonaws.services.s3.model.SetBucketCrossOriginConfigurationRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketCrossOriginConfigurationRequest $r1;
        java.lang.Exception $r2;
        java.lang.String $r3, $r9;
        com.amazonaws.services.s3.model.BucketCrossOriginConfiguration $r4;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r7;
        byte[] $r8;
        int $i0;
        java.io.ByteArrayInputStream $r10;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r11;
        com.amazonaws.AmazonClientException $r12;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketCrossOriginConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The set bucket cross origin configuration request object must be specified.");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketCrossOriginConfigurationRequest: java.lang.String getBucketName()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketCrossOriginConfigurationRequest: com.amazonaws.services.s3.model.BucketCrossOriginConfiguration getCrossOriginConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket name parameter must be specified when setting bucket cross origin configuration.");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The cross origin configuration parameter must be specified when setting bucket cross origin configuration.");

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r3, null, $r1, $r5);

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("cors", null);

        $r7 = new com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory;

        specialinvoke $r7.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: void <init>()>();

        $r8 = virtualinvoke $r7.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.BucketCrossOriginConfiguration)>($r4);

        $i0 = lengthof $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r9);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        interfaceinvoke $r6.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r10);

     label1:
        $r8 = staticinvoke <com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>($r8);

        $r9 = staticinvoke <com.amazonaws.util.BinaryUtils: java.lang.String toBase64(byte[])>($r8);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-MD5", $r9);

     label2:
        $r11 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r11, $r3, null);

        return;

     label3:
        $r2 := @caughtexception;

        $r12 = new com.amazonaws.AmazonClientException;

        specialinvoke $r12.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t compute md5 sum", $r2);

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setBucketCrossOriginConfiguration(java.lang.String, com.amazonaws.services.s3.model.BucketCrossOriginConfiguration)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketCrossOriginConfiguration $r2;
        com.amazonaws.services.s3.model.SetBucketCrossOriginConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.BucketCrossOriginConfiguration;

        $r3 = new com.amazonaws.services.s3.model.SetBucketCrossOriginConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.SetBucketCrossOriginConfigurationRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.BucketCrossOriginConfiguration)>($r1, $r2);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketCrossOriginConfiguration(com.amazonaws.services.s3.model.SetBucketCrossOriginConfigurationRequest)>($r3);

        return;
    }

    public void setBucketLifecycleConfiguration(com.amazonaws.services.s3.model.SetBucketLifecycleConfigurationRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketLifecycleConfigurationRequest $r1;
        java.lang.Exception $r2;
        java.lang.String $r3, $r9;
        com.amazonaws.services.s3.model.BucketLifecycleConfiguration $r4;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r7;
        byte[] $r8;
        int $i0;
        java.io.ByteArrayInputStream $r10;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r11;
        com.amazonaws.AmazonClientException $r12;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketLifecycleConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The set bucket lifecycle configuration request object must be specified.");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketLifecycleConfigurationRequest: java.lang.String getBucketName()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketLifecycleConfigurationRequest: com.amazonaws.services.s3.model.BucketLifecycleConfiguration getLifecycleConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket name parameter must be specified when setting bucket lifecycle configuration.");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The lifecycle configuration parameter must be specified when setting bucket lifecycle configuration.");

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r3, null, $r1, $r5);

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("lifecycle", null);

        $r7 = new com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory;

        specialinvoke $r7.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: void <init>()>();

        $r8 = virtualinvoke $r7.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.BucketLifecycleConfiguration)>($r4);

        $i0 = lengthof $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r9);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        interfaceinvoke $r6.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r10);

     label1:
        $r8 = staticinvoke <com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>($r8);

        $r9 = staticinvoke <com.amazonaws.util.BinaryUtils: java.lang.String toBase64(byte[])>($r8);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-MD5", $r9);

     label2:
        $r11 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r11, $r3, null);

        return;

     label3:
        $r2 := @caughtexception;

        $r12 = new com.amazonaws.AmazonClientException;

        specialinvoke $r12.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t compute md5 sum", $r2);

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setBucketLifecycleConfiguration(java.lang.String, com.amazonaws.services.s3.model.BucketLifecycleConfiguration)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketLifecycleConfiguration $r2;
        com.amazonaws.services.s3.model.SetBucketLifecycleConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.BucketLifecycleConfiguration;

        $r3 = new com.amazonaws.services.s3.model.SetBucketLifecycleConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.SetBucketLifecycleConfigurationRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.BucketLifecycleConfiguration)>($r1, $r2);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketLifecycleConfiguration(com.amazonaws.services.s3.model.SetBucketLifecycleConfigurationRequest)>($r3);

        return;
    }

    public void setBucketLoggingConfiguration(com.amazonaws.services.s3.model.SetBucketLoggingConfigurationRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketLoggingConfigurationRequest $r1;
        java.lang.String $r2, $r8;
        com.amazonaws.services.s3.model.BucketLoggingConfiguration $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r6;
        byte[] $r7;
        int $i0;
        java.io.ByteArrayInputStream $r9;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r10;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketLoggingConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The set bucket logging configuration request object must be specified when enabling server access logging");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketLoggingConfigurationRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketLoggingConfigurationRequest: com.amazonaws.services.s3.model.BucketLoggingConfiguration getLoggingConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when enabling server access logging");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The logging configuration parameter must be specified when enabling server access logging");

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("logging", null);

        $r6 = <com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory bucketConfigurationXmlFactory>;

        $r7 = virtualinvoke $r6.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.BucketLoggingConfiguration)>($r3);

        $i0 = lengthof $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r8);

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        interfaceinvoke $r5.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r9);

        $r10 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r5, $r10, $r2, null);

        return;
    }

    public void setBucketNotificationConfiguration(com.amazonaws.services.s3.model.SetBucketNotificationConfigurationRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketNotificationConfigurationRequest $r1;
        java.lang.String $r2, $r8;
        com.amazonaws.services.s3.model.BucketNotificationConfiguration $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r6;
        byte[] $r7;
        int $i0;
        java.io.ByteArrayInputStream $r9;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r10;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketNotificationConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The set bucket notification configuration request object must be specified.");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketNotificationConfigurationRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketNotificationConfigurationRequest: com.amazonaws.services.s3.model.BucketNotificationConfiguration getNotificationConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when setting bucket notification configuration.");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The notification configuration parameter must be specified when setting bucket notification configuration.");

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("notification", null);

        $r6 = <com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory bucketConfigurationXmlFactory>;

        $r7 = virtualinvoke $r6.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.BucketNotificationConfiguration)>($r3);

        $i0 = lengthof $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r8);

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        interfaceinvoke $r5.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r9);

        $r10 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r5, $r10, $r2, null);

        return;
    }

    public void setBucketNotificationConfiguration(java.lang.String, com.amazonaws.services.s3.model.BucketNotificationConfiguration) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketNotificationConfiguration $r2;
        com.amazonaws.services.s3.model.SetBucketNotificationConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.BucketNotificationConfiguration;

        $r3 = new com.amazonaws.services.s3.model.SetBucketNotificationConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.SetBucketNotificationConfigurationRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.BucketNotificationConfiguration)>($r1, $r2);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketNotificationConfiguration(com.amazonaws.services.s3.model.SetBucketNotificationConfigurationRequest)>($r3);

        return;
    }

    public void setBucketPolicy(com.amazonaws.services.s3.model.SetBucketPolicyRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketPolicyRequest $r1;
        java.lang.String $r2, $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        byte[] $r6;
        int $i0;
        java.io.ByteArrayInputStream $r7;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r8;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketPolicyRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request object must be specified when setting a bucket policy");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketPolicyRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketPolicyRequest: java.lang.String getPolicyText()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name must be specified when setting a bucket policy");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The policy text must be specified when setting a bucket policy");

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("policy", null);

        $r6 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: byte[] toByteArray(java.lang.String)>($r3);

        $i0 = lengthof $r6;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r3);

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        interfaceinvoke $r5.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r7);

        $r8 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r5, $r8, $r2, null);

        return;
    }

    public void setBucketPolicy(java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.GenericBucketRequest $r3;
        com.amazonaws.http.HttpMethodName $r4;
        com.amazonaws.Request $r5;
        byte[] $r6;
        int $i0;
        java.io.ByteArrayInputStream $r7;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r8;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucket name must be specified when setting a bucket policy");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The policy text must be specified when setting a bucket policy");

        $r3 = new com.amazonaws.services.s3.model.GenericBucketRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.GenericBucketRequest: void <init>(java.lang.String)>($r1);

        $r4 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r5 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r1, null, $r3, $r4);

        interfaceinvoke $r5.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("policy", null);

        $r6 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: byte[] toByteArray(java.lang.String)>($r2);

        $i0 = lengthof $r6;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r5.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r2);

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        interfaceinvoke $r5.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r7);

        $r8 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r5, $r8, $r1, null);

        return;
    }

    public void setBucketReplicationConfiguration(com.amazonaws.services.s3.model.SetBucketReplicationConfigurationRequest) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketReplicationConfigurationRequest $r1;
        java.lang.Exception $r2;
        java.lang.String $r3, $r9;
        com.amazonaws.services.s3.model.BucketReplicationConfiguration $r4;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r7;
        byte[] $r8;
        int $i0;
        java.io.ByteArrayInputStream $r10;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r11;
        com.amazonaws.AmazonClientException $r12;
        java.lang.StringBuilder $r13;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketReplicationConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The set bucket replication configuration request object must be specified.");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketReplicationConfigurationRequest: java.lang.String getBucketName()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketReplicationConfigurationRequest: com.amazonaws.services.s3.model.BucketReplicationConfiguration getReplicationConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket name parameter must be specified when setting replication configuration.");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The replication configuration parameter must be specified when setting replication configuration.");

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r3, null, $r1, $r5);

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("replication", null);

        $r7 = <com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory bucketConfigurationXmlFactory>;

        $r8 = virtualinvoke $r7.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.BucketReplicationConfiguration)>($r4);

        $i0 = lengthof $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r9);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        interfaceinvoke $r6.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r10);

     label1:
        $r8 = staticinvoke <com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>($r8);

        $r9 = staticinvoke <com.amazonaws.util.BinaryUtils: java.lang.String toBase64(byte[])>($r8);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-MD5", $r9);

     label2:
        $r11 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r11, $r3, null);

        return;

     label3:
        $r2 := @caughtexception;

        $r12 = new com.amazonaws.AmazonClientException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not able to compute MD5 of the replication rule configuration. Exception Message : ");

        $r3 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r2);

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setBucketReplicationConfiguration(java.lang.String, com.amazonaws.services.s3.model.BucketReplicationConfiguration) throws com.amazonaws.AmazonServiceException, com.amazonaws.AmazonClientException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketReplicationConfiguration $r2;
        com.amazonaws.services.s3.model.SetBucketReplicationConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.BucketReplicationConfiguration;

        $r3 = new com.amazonaws.services.s3.model.SetBucketReplicationConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.SetBucketReplicationConfigurationRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.BucketReplicationConfiguration)>($r1, $r2);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketReplicationConfiguration(com.amazonaws.services.s3.model.SetBucketReplicationConfigurationRequest)>($r3);

        return;
    }

    public void setBucketTaggingConfiguration(com.amazonaws.services.s3.model.SetBucketTaggingConfigurationRequest)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketTaggingConfigurationRequest $r1;
        java.lang.Exception $r2;
        java.lang.String $r3, $r9;
        com.amazonaws.services.s3.model.BucketTaggingConfiguration $r4;
        com.amazonaws.http.HttpMethodName $r5;
        com.amazonaws.Request $r6;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r7;
        byte[] $r8;
        int $i0;
        java.io.ByteArrayInputStream $r10;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r11;
        com.amazonaws.AmazonClientException $r12;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketTaggingConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The set bucket tagging configuration request object must be specified.");

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketTaggingConfigurationRequest: java.lang.String getBucketName()>();

        $r4 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketTaggingConfigurationRequest: com.amazonaws.services.s3.model.BucketTaggingConfiguration getTaggingConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket name parameter must be specified when setting bucket tagging configuration.");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r4, "The tagging configuration parameter must be specified when setting bucket tagging configuration.");

        $r5 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r6 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r3, null, $r1, $r5);

        interfaceinvoke $r6.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("tagging", null);

        $r7 = new com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory;

        specialinvoke $r7.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: void <init>()>();

        $r8 = virtualinvoke $r7.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.BucketTaggingConfiguration)>($r4);

        $i0 = lengthof $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r9);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        interfaceinvoke $r6.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r10);

     label1:
        $r8 = staticinvoke <com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>($r8);

        $r9 = staticinvoke <com.amazonaws.util.BinaryUtils: java.lang.String toBase64(byte[])>($r8);

        interfaceinvoke $r6.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-MD5", $r9);

     label2:
        $r11 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r6, $r11, $r3, null);

        return;

     label3:
        $r2 := @caughtexception;

        $r12 = new com.amazonaws.AmazonClientException;

        specialinvoke $r12.<com.amazonaws.AmazonClientException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t compute md5 sum", $r2);

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setBucketTaggingConfiguration(java.lang.String, com.amazonaws.services.s3.model.BucketTaggingConfiguration)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketTaggingConfiguration $r2;
        com.amazonaws.services.s3.model.SetBucketTaggingConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.BucketTaggingConfiguration;

        $r3 = new com.amazonaws.services.s3.model.SetBucketTaggingConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.SetBucketTaggingConfigurationRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.BucketTaggingConfiguration)>($r1, $r2);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketTaggingConfiguration(com.amazonaws.services.s3.model.SetBucketTaggingConfigurationRequest)>($r3);

        return;
    }

    public void setBucketVersioningConfiguration(com.amazonaws.services.s3.model.SetBucketVersioningConfigurationRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketVersioningConfigurationRequest $r1;
        java.lang.String $r2, $r10;
        com.amazonaws.services.s3.model.BucketVersioningConfiguration $r3;
        java.lang.Boolean $r4;
        com.amazonaws.services.s3.model.MultiFactorAuthentication $r5;
        com.amazonaws.http.HttpMethodName $r6;
        com.amazonaws.Request $r7;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r8;
        byte[] $r9;
        int $i0;
        java.io.ByteArrayInputStream $r11;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r12;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketVersioningConfigurationRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The SetBucketVersioningConfigurationRequest object must be specified when setting versioning configuration");

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketVersioningConfigurationRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketVersioningConfigurationRequest: com.amazonaws.services.s3.model.BucketVersioningConfiguration getVersioningConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when setting versioning configuration");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket versioning parameter must be specified when setting versioning configuration");

        $r4 = virtualinvoke $r3.<com.amazonaws.services.s3.model.BucketVersioningConfiguration: java.lang.Boolean isMfaDeleteEnabled()>();

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketVersioningConfigurationRequest: com.amazonaws.services.s3.model.MultiFactorAuthentication getMfa()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r5, "The MFA parameter must be specified when changing MFA Delete status in the versioning configuration");

     label1:
        $r6 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r7 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r6);

        interfaceinvoke $r7.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("versioning", null);

        $r4 = virtualinvoke $r3.<com.amazonaws.services.s3.model.BucketVersioningConfiguration: java.lang.Boolean isMfaDeleteEnabled()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketVersioningConfigurationRequest: com.amazonaws.services.s3.model.MultiFactorAuthentication getMfa()>();

        if $r5 == null goto label2;

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketVersioningConfigurationRequest: com.amazonaws.services.s3.model.MultiFactorAuthentication getMfa()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void populateRequestWithMfaDetails(com.amazonaws.Request,com.amazonaws.services.s3.model.MultiFactorAuthentication)>($r7, $r5);

     label2:
        $r8 = <com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory bucketConfigurationXmlFactory>;

        $r9 = virtualinvoke $r8.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.BucketVersioningConfiguration)>($r3);

        $i0 = lengthof $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r7.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r10);

        $r11 = new java.io.ByteArrayInputStream;

        specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        interfaceinvoke $r7.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r11);

        $r12 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r7, $r12, $r2, null);

        return;
    }

    public void setBucketWebsiteConfiguration(com.amazonaws.services.s3.model.SetBucketWebsiteConfigurationRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.SetBucketWebsiteConfigurationRequest $r1;
        java.lang.String $r2, $r5;
        com.amazonaws.services.s3.model.BucketWebsiteConfiguration $r3;
        com.amazonaws.services.s3.model.RedirectRule $r4;
        com.amazonaws.http.HttpMethodName $r6;
        com.amazonaws.Request $r7;
        com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory $r8;
        byte[] $r9;
        int $i0;
        java.io.ByteArrayInputStream $r10;
        com.amazonaws.services.s3.internal.S3XmlResponseHandler $r11;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.SetBucketWebsiteConfigurationRequest;

        $r2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketWebsiteConfigurationRequest: java.lang.String getBucketName()>();

        $r3 = virtualinvoke $r1.<com.amazonaws.services.s3.model.SetBucketWebsiteConfigurationRequest: com.amazonaws.services.s3.model.BucketWebsiteConfiguration getConfiguration()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The bucket name parameter must be specified when setting a bucket\'s website configuration");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The bucket website configuration parameter must be specified when setting a bucket\'s website configuration");

        $r4 = virtualinvoke $r3.<com.amazonaws.services.s3.model.BucketWebsiteConfiguration: com.amazonaws.services.s3.model.RedirectRule getRedirectAllRequestsTo()>();

        if $r4 != null goto label1;

        $r5 = virtualinvoke $r3.<com.amazonaws.services.s3.model.BucketWebsiteConfiguration: java.lang.String getIndexDocumentSuffix()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r5, "The bucket website configuration parameter must specify the index document suffix when setting a bucket\'s website configuration");

     label1:
        $r6 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r7 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r2, null, $r1, $r6);

        interfaceinvoke $r7.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("website", null);

        interfaceinvoke $r7.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Type", "application/xml");

        $r8 = <com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory bucketConfigurationXmlFactory>;

        $r9 = virtualinvoke $r8.<com.amazonaws.services.s3.model.transform.BucketConfigurationXmlFactory: byte[] convertToXmlByteArray(com.amazonaws.services.s3.model.BucketWebsiteConfiguration)>($r3);

        $i0 = lengthof $r9;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r7.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r5);

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        interfaceinvoke $r7.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r10);

        $r11 = $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.internal.S3XmlResponseHandler voidResponseHandler>;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r7, $r11, $r2, null);

        return;
    }

    public void setBucketWebsiteConfiguration(java.lang.String, com.amazonaws.services.s3.model.BucketWebsiteConfiguration) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1;
        com.amazonaws.services.s3.model.BucketWebsiteConfiguration $r2;
        com.amazonaws.services.s3.model.SetBucketWebsiteConfigurationRequest $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.amazonaws.services.s3.model.BucketWebsiteConfiguration;

        $r3 = new com.amazonaws.services.s3.model.SetBucketWebsiteConfigurationRequest;

        specialinvoke $r3.<com.amazonaws.services.s3.model.SetBucketWebsiteConfigurationRequest: void <init>(java.lang.String,com.amazonaws.services.s3.model.BucketWebsiteConfiguration)>($r1, $r2);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setBucketWebsiteConfiguration(com.amazonaws.services.s3.model.SetBucketWebsiteConfigurationRequest)>($r3);

        return;
    }

    public void setEndpoint(java.lang.String)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r3, varReplacer1864, varReplacer1865, varReplacer1866;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.net.URI $r4;

        nop;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        varReplacer1864 = "s3-accelerate.amazonaws.com";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(varReplacer1864);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        varReplacer1865 = "To enable accelerate mode, please use AmazonS3Client.setS3ClientOptions(S3ClientOptions.builder().setAccelerateModeEnabled(true).build());";

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1865);

        throw $r2;

     label1:
        specialinvoke $r0.<com.amazonaws.AmazonWebServiceClient: void setEndpoint(java.lang.String)>($r1);

        $r3 = <com.amazonaws.services.s3.internal.Constants: java.lang.String S3_HOSTNAME>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>($r3);

        if $z0 != 0 goto label2;

        $r4 = $r0.<com.amazonaws.services.s3.AmazonS3Client: java.net.URI endpoint>;

        $r1 = virtualinvoke $r4.<java.net.URI: java.lang.String getHost()>();

        varReplacer1866 = "s3";

        $r1 = staticinvoke <com.amazonaws.util.AwsHostNameUtils: java.lang.String parseRegionName(java.lang.String,java.lang.String)>($r1, varReplacer1866);

        $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.String clientRegion> = $r1;

     label2:
        return;
    }

    public void setObjectAcl(java.lang.String, java.lang.String, com.amazonaws.services.s3.model.AccessControlList) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.AccessControlList $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.amazonaws.services.s3.model.AccessControlList;

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setObjectAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.AccessControlList)>($r1, $r2, null, $r3);

        return;
    }

    public void setObjectAcl(java.lang.String, java.lang.String, com.amazonaws.services.s3.model.CannedAccessControlList) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2;
        com.amazonaws.services.s3.model.CannedAccessControlList $r3;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.amazonaws.services.s3.model.CannedAccessControlList;

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setObjectAcl(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.CannedAccessControlList)>($r1, $r2, null, $r3);

        return;
    }

    public void setObjectAcl(java.lang.String, java.lang.String, java.lang.String, com.amazonaws.services.s3.model.AccessControlList) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.AccessControlList $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.amazonaws.services.s3.model.AccessControlList;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setObjectAcl0(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.AccessControlList,com.amazonaws.metrics.RequestMetricCollector)>($r1, $r2, $r3, $r4, null);

        return;
    }

    public void setObjectAcl(java.lang.String, java.lang.String, java.lang.String, com.amazonaws.services.s3.model.AccessControlList, com.amazonaws.metrics.RequestMetricCollector) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.AccessControlList $r4;
        com.amazonaws.metrics.RequestMetricCollector $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.amazonaws.services.s3.model.AccessControlList;

        $r5 := @parameter4: com.amazonaws.metrics.RequestMetricCollector;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setObjectAcl0(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.AccessControlList,com.amazonaws.metrics.RequestMetricCollector)>($r1, $r2, $r3, $r4, $r5);

        return;
    }

    public void setObjectAcl(java.lang.String, java.lang.String, java.lang.String, com.amazonaws.services.s3.model.CannedAccessControlList) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.CannedAccessControlList $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.amazonaws.services.s3.model.CannedAccessControlList;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setObjectAcl0(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.CannedAccessControlList,com.amazonaws.metrics.RequestMetricCollector)>($r1, $r2, $r3, $r4, null);

        return;
    }

    public void setObjectAcl(java.lang.String, java.lang.String, java.lang.String, com.amazonaws.services.s3.model.CannedAccessControlList, com.amazonaws.metrics.RequestMetricCollector)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.CannedAccessControlList $r4;
        com.amazonaws.metrics.RequestMetricCollector $r5;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: com.amazonaws.services.s3.model.CannedAccessControlList;

        $r5 := @parameter4: com.amazonaws.metrics.RequestMetricCollector;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void setObjectAcl0(java.lang.String,java.lang.String,java.lang.String,com.amazonaws.services.s3.model.CannedAccessControlList,com.amazonaws.metrics.RequestMetricCollector)>($r1, $r2, $r3, $r4, $r5);

        return;
    }

    public void setObjectRedirectLocation(java.lang.String, java.lang.String, java.lang.String) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        java.lang.String $r1, $r2, $r3;
        com.amazonaws.services.s3.model.CopyObjectRequest $r4;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The bucketName parameter must be specified when changing an object\'s storage class");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r2, "The key parameter must be specified when changing an object\'s storage class");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r3, "The newStorageClass parameter must be specified when changing an object\'s storage class");

        $r4 = new com.amazonaws.services.s3.model.CopyObjectRequest;

        specialinvoke $r4.<com.amazonaws.services.s3.model.CopyObjectRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r1, $r2);

        $r4 = virtualinvoke $r4.<com.amazonaws.services.s3.model.CopyObjectRequest: com.amazonaws.services.s3.model.CopyObjectRequest withRedirectLocation(java.lang.String)>($r3);

        virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.CopyObjectResult copyObject(com.amazonaws.services.s3.model.CopyObjectRequest)>($r4);

        return;
    }

    public void setRegion(com.amazonaws.regions.Region)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.regions.Region $r1;
        java.lang.String $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.regions.Region;

        specialinvoke $r0.<com.amazonaws.AmazonWebServiceClient: void setRegion(com.amazonaws.regions.Region)>($r1);

        $r2 = virtualinvoke $r1.<com.amazonaws.regions.Region: java.lang.String getName()>();

        $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.String clientRegion> = $r2;

        return;
    }

    public void setS3ClientOptions(com.amazonaws.services.s3.S3ClientOptions)
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.S3ClientOptions $r1, $r2;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.S3ClientOptions;

        $r2 = new com.amazonaws.services.s3.S3ClientOptions;

        specialinvoke $r2.<com.amazonaws.services.s3.S3ClientOptions: void <init>(com.amazonaws.services.s3.S3ClientOptions)>($r1);

        $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.S3ClientOptions clientOptions> = $r2;

        return;
    }

    public com.amazonaws.services.s3.model.UploadPartResult uploadPart(com.amazonaws.services.s3.model.UploadPartRequest) throws com.amazonaws.AmazonClientException, com.amazonaws.AmazonServiceException
    {
        com.amazonaws.services.s3.AmazonS3Client $r0;
        com.amazonaws.services.s3.model.UploadPartRequest $r1;
        com.amazonaws.AmazonClientException $r2, r31;
        java.lang.Throwable $r3, $r23;
        com.amazonaws.services.s3.model.UploadPartResult $r4, r35;
        java.lang.String $r5, $r6, $r7;
        int $i0;
        long $l1, $l2;
        java.lang.Integer $r8;
        java.lang.Long $r9;
        com.amazonaws.http.HttpMethodName $r10;
        com.amazonaws.Request $r11;
        com.amazonaws.services.s3.model.SSECustomerKey $r12;
        java.io.InputStream $r13;
        java.lang.Object $r14, $r19;
        com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream $r15, r28;
        boolean $z0;
        com.amazonaws.event.ProgressListener $r16;
        com.amazonaws.event.ProgressListenerCallbackExecutor $r17;
        com.amazonaws.services.s3.internal.S3MetadataResponseHandler $r18, r30;
        com.amazonaws.services.s3.model.ObjectMetadata $r20;
        byte[] $r21, $r22;
        java.io.File $r24;
        com.amazonaws.services.s3.internal.RepeatableFileInputStream $r25, r32;
        java.lang.Exception $r26, $r27;
        com.amazonaws.event.ProgressReportingInputStream r29;
        com.amazonaws.services.s3.internal.InputSubstream r33;
        java.lang.IllegalArgumentException r34;

        $r0 := @this: com.amazonaws.services.s3.AmazonS3Client;

        $r1 := @parameter0: com.amazonaws.services.s3.model.UploadPartRequest;

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r1, "The request parameter must be specified when uploading a part");

        $r5 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: java.lang.String getBucketName()>();

        $r6 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: java.lang.String getKey()>();

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: java.lang.String getUploadId()>();

        $i0 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: int getPartNumber()>();

        $l1 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: long getPartSize()>();

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r5, "The bucket name parameter must be specified when uploading a part");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r6, "The key parameter must be specified when uploading a part");

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r7, "The upload ID parameter must be specified when uploading a part");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r8, "The part number parameter must be specified when uploading a part");

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void assertParameterNotNull(java.lang.Object,java.lang.String)>($r9, "The part size parameter must be specified when uploading a part");

        $r10 = <com.amazonaws.http.HttpMethodName: com.amazonaws.http.HttpMethodName PUT>;

        $r11 = virtualinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.Request createRequest(java.lang.String,java.lang.String,com.amazonaws.AmazonWebServiceRequest,com.amazonaws.http.HttpMethodName)>($r5, $r6, $r1, $r10);

        interfaceinvoke $r11.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("uploadId", $r7);

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke $r11.<com.amazonaws.Request: void addParameter(java.lang.String,java.lang.String)>("partNumber", $r7);

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: java.lang.String getMd5Digest()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void addHeaderIfNotNull(com.amazonaws.Request,java.lang.String,java.lang.String)>($r11, "Content-MD5", $r7);

        $r7 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        interfaceinvoke $r11.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r7);

        interfaceinvoke $r11.<com.amazonaws.Request: void addHeader(java.lang.String,java.lang.String)>("Expect", "100-continue");

        $r12 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: com.amazonaws.services.s3.model.SSECustomerKey getSSECustomerKey()>();

        staticinvoke <com.amazonaws.services.s3.AmazonS3Client: void populateSseCpkRequestParameters(com.amazonaws.Request,com.amazonaws.services.s3.model.SSECustomerKey)>($r11, $r12);

        $r13 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: java.io.InputStream getInputStream()>();

        if $r13 == null goto label22;

        $r14 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: java.io.InputStream getInputStream()>();

     label01:
        $r15 = null;

        $r7 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: java.lang.String getMd5Digest()>();

        if $r7 != null goto label02;

        $z0 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: boolean skipMd5CheckPerRequest(com.amazonaws.AmazonWebServiceRequest)>($r1);

        if $z0 != 0 goto label02;

        r28 = new com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream;

        $r15 = r28;

        $r13 = (java.io.InputStream) $r14;

        specialinvoke r28.<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: void <init>(java.io.InputStream)>($r13);

        $r14 = $r15;

     label02:
        $r16 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: com.amazonaws.event.ProgressListener getGeneralProgressListener()>();

        $r17 = staticinvoke <com.amazonaws.event.ProgressListenerCallbackExecutor: com.amazonaws.event.ProgressListenerCallbackExecutor wrapListener(com.amazonaws.event.ProgressListener)>($r16);

        if $r17 == null goto label03;

        r29 = new com.amazonaws.event.ProgressReportingInputStream;

        $r13 = (java.io.InputStream) $r14;

        specialinvoke r29.<com.amazonaws.event.ProgressReportingInputStream: void <init>(java.io.InputStream,com.amazonaws.event.ProgressListenerCallbackExecutor)>($r13, $r17);

        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r17, 1024);

        $r14 = r29;

     label03:
        $r13 = (java.io.InputStream) $r14;

     label04:
        interfaceinvoke $r11.<com.amazonaws.Request: void setContent(java.io.InputStream)>($r13);

     label05:
        r30 = new com.amazonaws.services.s3.internal.S3MetadataResponseHandler;

     label06:
        $r18 = r30;

     label07:
        specialinvoke r30.<com.amazonaws.services.s3.internal.S3MetadataResponseHandler: void <init>()>();

        $r19 = specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: java.lang.Object invoke(com.amazonaws.Request,com.amazonaws.http.HttpResponseHandler,java.lang.String,java.lang.String)>($r11, $r18, $r5, $r6);

     label08:
        $r20 = (com.amazonaws.services.s3.model.ObjectMetadata) $r19;

     label09:
        if $r20 == null goto label27;

        if $r15 == null goto label27;

     label10:
        $z0 = staticinvoke <com.amazonaws.services.s3.internal.ServiceUtils: boolean skipMd5CheckPerResponse(com.amazonaws.services.s3.model.ObjectMetadata)>($r20);

     label11:
        if $z0 != 0 goto label27;

     label12:
        $r21 = virtualinvoke $r15.<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: byte[] getMd5Digest()>();

        $r5 = virtualinvoke $r20.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getETag()>();

        $r22 = staticinvoke <com.amazonaws.util.BinaryUtils: byte[] fromHex(java.lang.String)>($r5);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r21, $r22);

     label13:
        if $z0 != 0 goto label27;

     label14:
        r31 = new com.amazonaws.AmazonClientException;

     label15:
        $r2 = r31;

     label16:
        specialinvoke r31.<com.amazonaws.AmazonClientException: void <init>(java.lang.String)>("Unable to verify integrity of data upload.  Client calculated content hash didn\'t match hash calculated by Amazon S3.  You may need to delete the data stored in Amazon S3.");

        throw $r2;

     label17:
        $r2 := @caughtexception;

     label18:
        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r17, 4096);

        throw $r2;

     label19:
        $r23 := @caughtexception;

        if $r14 == null goto label21;

     label20:
        $r13 = (java.io.InputStream) $r14;

        virtualinvoke $r13.<java.io.InputStream: void close()>();

     label21:
        throw $r23;

     label22:
        $r24 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: java.io.File getFile()>();

        if $r24 == null goto label26;

        r33 = new com.amazonaws.services.s3.internal.InputSubstream;

        $r14 = r33;

        r32 = new com.amazonaws.services.s3.internal.RepeatableFileInputStream;

        $r25 = r32;

     label23:
        $r24 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: java.io.File getFile()>();

        specialinvoke r32.<com.amazonaws.services.s3.internal.RepeatableFileInputStream: void <init>(java.io.File)>($r24);

        $l2 = virtualinvoke $r1.<com.amazonaws.services.s3.model.UploadPartRequest: long getFileOffset()>();

        specialinvoke r33.<com.amazonaws.services.s3.internal.InputSubstream: void <init>(java.io.InputStream,long,long,boolean)>($r25, $l2, $l1, 1);

     label24:
        goto label01;

     label25:
        $r3 := @caughtexception;

        r34 = new java.lang.IllegalArgumentException;

        specialinvoke r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("The specified file doesn\'t exist", $r3);

        throw r34;

     label26:
        r34 = new java.lang.IllegalArgumentException;

        specialinvoke r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A File or InputStream must be specified when uploading part");

        throw r34;

     label27:
        specialinvoke $r0.<com.amazonaws.services.s3.AmazonS3Client: void fireProgressEvent(com.amazonaws.event.ProgressListenerCallbackExecutor,int)>($r17, 2048);

     label28:
        r35 = new com.amazonaws.services.s3.model.UploadPartResult;

     label29:
        $r4 = r35;

     label30:
        specialinvoke r35.<com.amazonaws.services.s3.model.UploadPartResult: void <init>()>();

        $r5 = virtualinvoke $r20.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getETag()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.UploadPartResult: void setETag(java.lang.String)>($r5);

        virtualinvoke $r4.<com.amazonaws.services.s3.model.UploadPartResult: void setPartNumber(int)>($i0);

        $r5 = virtualinvoke $r20.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getSSEAlgorithm()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.UploadPartResult: void setSSEAlgorithm(java.lang.String)>($r5);

        $r5 = virtualinvoke $r20.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getSSEKMSKeyId()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.UploadPartResult: void setSSEKMSKeyId(java.lang.String)>($r5);

        $r5 = virtualinvoke $r20.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getSSECustomerAlgorithm()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.UploadPartResult: void setSSECustomerAlgorithm(java.lang.String)>($r5);

        $r5 = virtualinvoke $r20.<com.amazonaws.services.s3.model.ObjectMetadata: java.lang.String getSSECustomerKeyMd5()>();

        virtualinvoke $r4.<com.amazonaws.services.s3.model.UploadPartResult: void setSSECustomerKeyMd5(java.lang.String)>($r5);

     label31:
        if $r14 == null goto label36;

     label32:
        $r13 = (java.io.InputStream) $r14;

        virtualinvoke $r13.<java.io.InputStream: void close()>();

     label33:
        return $r4;

     label34:
        $r26 := @caughtexception;

        return $r4;

     label35:
        $r27 := @caughtexception;

        goto label21;

     label36:
        return $r4;

        catch com.amazonaws.AmazonClientException from label04 to label05 with label17;
        catch com.amazonaws.AmazonClientException from label07 to label08 with label17;
        catch com.amazonaws.AmazonClientException from label10 to label11 with label17;
        catch com.amazonaws.AmazonClientException from label12 to label13 with label17;
        catch com.amazonaws.AmazonClientException from label16 to label17 with label17;
        catch java.lang.Throwable from label03 to label06 with label19;
        catch java.lang.Throwable from label07 to label09 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Exception from label20 to label21 with label35;
        catch java.io.FileNotFoundException from label23 to label24 with label25;
        catch com.amazonaws.AmazonClientException from label27 to label28 with label17;
        catch com.amazonaws.AmazonClientException from label30 to label31 with label17;
        catch java.lang.Throwable from label27 to label29 with label19;
        catch java.lang.Throwable from label30 to label31 with label19;
        catch java.lang.Exception from label32 to label33 with label34;
    }
}
