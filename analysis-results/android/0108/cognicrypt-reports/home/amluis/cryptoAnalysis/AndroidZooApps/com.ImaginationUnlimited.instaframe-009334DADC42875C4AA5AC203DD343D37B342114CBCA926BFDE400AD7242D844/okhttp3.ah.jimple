public class okhttp3.ah extends java.lang.Object implements java.lang.Cloneable
{
    private static final java.util.List e;
    private static final java.util.List f;
    final okhttp3.u a;
    final java.util.List b;
    final okhttp3.d c;
    final android.support.v7.app.c d;
    private java.util.List g;
    private java.util.List h;
    private java.util.List i;
    private java.net.ProxySelector j;
    private okhttp3.s k;
    private javax.net.SocketFactory l;
    private javax.net.ssl.SSLSocketFactory m;
    private okhttp3.internal.b.a n;
    private javax.net.ssl.HostnameVerifier o;
    private okhttp3.i p;
    private okhttp3.b q;
    private okhttp3.b r;
    private okhttp3.n s;
    private okhttp3.v t;
    private boolean u;
    private boolean v;
    private boolean w;
    private int x;
    private int y;
    private int z;

    static void <clinit>()
    {
        okhttp3.ak[] $r0;
        okhttp3.ak $r1;
        java.util.List $r2;
        java.util.ArrayList $r3;
        okhttp3.p[] $r4;
        okhttp3.p $r5;
        okhttp3.internal.k $r6;
        boolean $z0;
        okhttp3.ai $r7;

        nop;

        $r0 = newarray (okhttp3.ak)[3];

        $r1 = <okhttp3.ak: okhttp3.ak HTTP_2>;

        $r0[0] = $r1;

        $r1 = <okhttp3.ak: okhttp3.ak SPDY_3>;

        $r0[1] = $r1;

        $r1 = <okhttp3.ak: okhttp3.ak HTTP_1_1>;

        $r0[2] = $r1;

        $r2 = staticinvoke <okhttp3.internal.m: java.util.List a(java.lang.Object[])>($r0);

        <okhttp3.ah: java.util.List e> = $r2;

        $r3 = new java.util.ArrayList;

        $r4 = newarray (okhttp3.p)[2];

        $r5 = <okhttp3.p: okhttp3.p a>;

        $r4[0] = $r5;

        $r5 = <okhttp3.p: okhttp3.p b>;

        $r4[1] = $r5;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r6 = staticinvoke <okhttp3.internal.k: okhttp3.internal.k c()>();

        $z0 = virtualinvoke $r6.<okhttp3.internal.k: boolean a()>();

        if $z0 == 0 goto label1;

        $r5 = <okhttp3.p: okhttp3.p c>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label1:
        $r2 = staticinvoke <okhttp3.internal.m: java.util.List a(java.util.List)>($r3);

        <okhttp3.ah: java.util.List f> = $r2;

        $r7 = new okhttp3.ai;

        specialinvoke $r7.<okhttp3.ai: void <init>()>();

        <okhttp3.internal.e: okhttp3.internal.e a> = $r7;

        return;
    }

    public void <init>()
    {
        okhttp3.ah $r0;
        okhttp3.aj $r1;

        nop;

        $r0 := @this: okhttp3.ah;

        $r1 = new okhttp3.aj;

        specialinvoke $r1.<okhttp3.aj: void <init>()>();

        specialinvoke $r0.<okhttp3.ah: void <init>(okhttp3.aj)>($r1);

        return;
    }

    private void <init>(okhttp3.aj)
    {
        okhttp3.ah $r0;
        okhttp3.aj $r1;
        okhttp3.u $r2;
        java.util.List $r3;
        java.net.ProxySelector $r4;
        okhttp3.s $r5;
        javax.net.SocketFactory $r6;
        java.util.Iterator $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        okhttp3.p $r9;
        javax.net.ssl.HostnameVerifier $r10;
        okhttp3.i $r11;
        okhttp3.internal.b.a $r12;
        okhttp3.b $r13;
        okhttp3.n $r14;
        okhttp3.v $r15;
        int $i0;
        javax.net.ssl.X509TrustManager $r16;
        javax.net.ssl.SSLSocketFactory $r17;
        null_type varReplacer8593, varReplacer8594, varReplacer8595, varReplacer8596;

        nop;

        $r0 := @this: okhttp3.ah;

        $r1 := @parameter0: okhttp3.aj;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<okhttp3.aj: okhttp3.u a>;

        $r0.<okhttp3.ah: okhttp3.u a> = $r2;

        $r3 = $r1.<okhttp3.aj: java.util.List b>;

        $r0.<okhttp3.ah: java.util.List g> = $r3;

        $r3 = $r1.<okhttp3.aj: java.util.List c>;

        $r0.<okhttp3.ah: java.util.List h> = $r3;

        $r3 = $r1.<okhttp3.aj: java.util.List d>;

        $r3 = staticinvoke <okhttp3.internal.m: java.util.List a(java.util.List)>($r3);

        $r0.<okhttp3.ah: java.util.List b> = $r3;

        $r3 = $r1.<okhttp3.aj: java.util.List e>;

        $r3 = staticinvoke <okhttp3.internal.m: java.util.List a(java.util.List)>($r3);

        $r0.<okhttp3.ah: java.util.List i> = $r3;

        $r4 = $r1.<okhttp3.aj: java.net.ProxySelector f>;

        $r0.<okhttp3.ah: java.net.ProxySelector j> = $r4;

        $r5 = $r1.<okhttp3.aj: okhttp3.s g>;

        $r0.<okhttp3.ah: okhttp3.s k> = $r5;

        varReplacer8593 = null;

        $r0.<okhttp3.ah: okhttp3.d c> = varReplacer8593;

        varReplacer8596 = null;

        $r0.<okhttp3.ah: android.support.v7.app.c d> = varReplacer8596;

        $r6 = $r1.<okhttp3.aj: javax.net.SocketFactory h>;

        $r0.<okhttp3.ah: javax.net.SocketFactory l> = $r6;

        $r3 = $r0.<okhttp3.ah: java.util.List h>;

        $r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (okhttp3.p) $r8;

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r9.<okhttp3.p: boolean a()>();

        if $z0 == 0 goto label4;

     label2:
        $z0 = 1;

     label3:
        goto label1;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        if $z0 != 0 goto label7;

        varReplacer8595 = null;

        $r0.<okhttp3.ah: javax.net.ssl.SSLSocketFactory m> = varReplacer8595;

        varReplacer8594 = null;

        $r0.<okhttp3.ah: okhttp3.internal.b.a n> = varReplacer8594;

     label6:
        $r10 = $r1.<okhttp3.aj: javax.net.ssl.HostnameVerifier i>;

        $r0.<okhttp3.ah: javax.net.ssl.HostnameVerifier o> = $r10;

        $r11 = $r1.<okhttp3.aj: okhttp3.i j>;

        $r12 = $r0.<okhttp3.ah: okhttp3.internal.b.a n>;

        $r11 = virtualinvoke $r11.<okhttp3.i: okhttp3.i a(okhttp3.internal.b.a)>($r12);

        $r0.<okhttp3.ah: okhttp3.i p> = $r11;

        $r13 = $r1.<okhttp3.aj: okhttp3.b k>;

        $r0.<okhttp3.ah: okhttp3.b q> = $r13;

        $r13 = $r1.<okhttp3.aj: okhttp3.b l>;

        $r0.<okhttp3.ah: okhttp3.b r> = $r13;

        $r14 = $r1.<okhttp3.aj: okhttp3.n m>;

        $r0.<okhttp3.ah: okhttp3.n s> = $r14;

        $r15 = $r1.<okhttp3.aj: okhttp3.v n>;

        $r0.<okhttp3.ah: okhttp3.v t> = $r15;

        $z0 = $r1.<okhttp3.aj: boolean o>;

        $r0.<okhttp3.ah: boolean u> = $z0;

        $z0 = $r1.<okhttp3.aj: boolean p>;

        $r0.<okhttp3.ah: boolean v> = $z0;

        $z0 = $r1.<okhttp3.aj: boolean q>;

        $r0.<okhttp3.ah: boolean w> = $z0;

        $i0 = $r1.<okhttp3.aj: int r>;

        $r0.<okhttp3.ah: int x> = $i0;

        $i0 = $r1.<okhttp3.aj: int s>;

        $r0.<okhttp3.ah: int y> = $i0;

        $i0 = $r1.<okhttp3.aj: int t>;

        $r0.<okhttp3.ah: int z> = $i0;

        return;

     label7:
        $r16 = staticinvoke <okhttp3.ah: javax.net.ssl.X509TrustManager v()>();

        $r17 = staticinvoke <okhttp3.ah: javax.net.ssl.SSLSocketFactory a(javax.net.ssl.X509TrustManager)>($r16);

        $r0.<okhttp3.ah: javax.net.ssl.SSLSocketFactory m> = $r17;

        $r12 = staticinvoke <okhttp3.internal.b.a: okhttp3.internal.b.a a(javax.net.ssl.X509TrustManager)>($r16);

        $r0.<okhttp3.ah: okhttp3.internal.b.a n> = $r12;

        goto label6;
    }

    private static javax.net.ssl.SSLSocketFactory a(javax.net.ssl.X509TrustManager)
    {
        javax.net.ssl.X509TrustManager $r0;
        javax.net.ssl.SSLContext $r1;
        java.lang.Object[] $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        java.lang.Throwable $r4;
        java.lang.AssertionError r5;
        javax.net.ssl.TrustManager[] r6;
        java.lang.String varReplacer8599;
        null_type varReplacer8600, varReplacer8601;

        nop;

        $r0 := @parameter0: javax.net.ssl.X509TrustManager;

     label1:
        varReplacer8599 = "TLS";

        $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer8599);

     label2:
        $r2 = newarray (javax.net.ssl.TrustManager)[1];

        $r2[0] = $r0;

        r6 = (javax.net.ssl.TrustManager[]) $r2;

     label3:
        varReplacer8600 = null;

        varReplacer8601 = null;

        virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer8600, r6, varReplacer8600);

        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

        r5 = new java.lang.AssertionError;

        specialinvoke r5.<java.lang.AssertionError: void <init>()>();

        throw r5;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }

    static java.util.List t()
    {
        java.util.List r0;

        nop;

        r0 = <okhttp3.ah: java.util.List e>;

        return r0;
    }

    static java.util.List u()
    {
        java.util.List r0;

        nop;

        r0 = <okhttp3.ah: java.util.List f>;

        return r0;
    }

    private static javax.net.ssl.X509TrustManager v()
    {
        java.lang.String $r0, varReplacer8603;
        javax.net.ssl.TrustManagerFactory $r1;
        javax.net.ssl.TrustManager[] $r2;
        int $i0;
        javax.net.ssl.TrustManager $r3;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r6;
        java.lang.AssertionError $r7;
        javax.net.ssl.X509TrustManager $r8;
        null_type varReplacer8602;

     label1:
        nop;

        $r0 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r0);

        varReplacer8602 = null;

        virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer8602);

        $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

     label2:
        $i0 = lengthof $r2;

        if $i0 != 1 goto label3;

        $r3 = $r2[0];

        $z0 = $r3 instanceof javax.net.ssl.X509TrustManager;

        if $z0 != 0 goto label7;

     label3:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

     label4:
        varReplacer8603 = "Unexpected default trust managers:";

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer8603);

        $r0 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

     label5:
        throw $r4;

     label6:
        $r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label7:
        $r3 = $r2[0];

        $r8 = (javax.net.ssl.X509TrustManager) $r3;

        return $r8;

        catch java.security.GeneralSecurityException from label1 to label2 with label6;
        catch java.security.GeneralSecurityException from label4 to label5 with label6;
    }

    public final int a()
    {
        okhttp3.ah $r0;
        int i0;

        nop;

        $r0 := @this: okhttp3.ah;

        i0 = $r0.<okhttp3.ah: int x>;

        return i0;
    }

    public final okhttp3.g a(okhttp3.ao)
    {
        okhttp3.ah $r0;
        okhttp3.ao $r1;
        okhttp3.al $r2;

        nop;

        $r0 := @this: okhttp3.ah;

        $r1 := @parameter0: okhttp3.ao;

        $r2 = new okhttp3.al;

        specialinvoke $r2.<okhttp3.al: void <init>(okhttp3.ah,okhttp3.ao)>($r0, $r1);

        return $r2;
    }

    public final int b()
    {
        okhttp3.ah $r0;
        int i0;

        nop;

        $r0 := @this: okhttp3.ah;

        i0 = $r0.<okhttp3.ah: int y>;

        return i0;
    }

    public final int c()
    {
        okhttp3.ah $r0;
        int i0;

        nop;

        $r0 := @this: okhttp3.ah;

        i0 = $r0.<okhttp3.ah: int z>;

        return i0;
    }

    public final java.net.ProxySelector d()
    {
        okhttp3.ah $r0;
        java.net.ProxySelector r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.net.ProxySelector j>;

        return r1;
    }

    public final okhttp3.s e()
    {
        okhttp3.ah $r0;
        okhttp3.s r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.s k>;

        return r1;
    }

    public final okhttp3.v f()
    {
        okhttp3.ah $r0;
        okhttp3.v r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.v t>;

        return r1;
    }

    public final javax.net.SocketFactory g()
    {
        okhttp3.ah $r0;
        javax.net.SocketFactory r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: javax.net.SocketFactory l>;

        return r1;
    }

    public final javax.net.ssl.SSLSocketFactory h()
    {
        okhttp3.ah $r0;
        javax.net.ssl.SSLSocketFactory r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: javax.net.ssl.SSLSocketFactory m>;

        return r1;
    }

    public final javax.net.ssl.HostnameVerifier i()
    {
        okhttp3.ah $r0;
        javax.net.ssl.HostnameVerifier r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: javax.net.ssl.HostnameVerifier o>;

        return r1;
    }

    public final okhttp3.i j()
    {
        okhttp3.ah $r0;
        okhttp3.i r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.i p>;

        return r1;
    }

    public final okhttp3.b k()
    {
        okhttp3.ah $r0;
        okhttp3.b r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.b r>;

        return r1;
    }

    public final okhttp3.b l()
    {
        okhttp3.ah $r0;
        okhttp3.b r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.b q>;

        return r1;
    }

    public final okhttp3.n m()
    {
        okhttp3.ah $r0;
        okhttp3.n r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.n s>;

        return r1;
    }

    public final boolean n()
    {
        okhttp3.ah $r0;
        boolean z0;

        nop;

        $r0 := @this: okhttp3.ah;

        z0 = $r0.<okhttp3.ah: boolean u>;

        return z0;
    }

    public final boolean o()
    {
        okhttp3.ah $r0;
        boolean z0;

        nop;

        $r0 := @this: okhttp3.ah;

        z0 = $r0.<okhttp3.ah: boolean v>;

        return z0;
    }

    public final boolean p()
    {
        okhttp3.ah $r0;
        boolean z0;

        nop;

        $r0 := @this: okhttp3.ah;

        z0 = $r0.<okhttp3.ah: boolean w>;

        return z0;
    }

    public final java.util.List q()
    {
        okhttp3.ah $r0;
        java.util.List r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.util.List g>;

        return r1;
    }

    public final java.util.List r()
    {
        okhttp3.ah $r0;
        java.util.List r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.util.List h>;

        return r1;
    }

    public final java.util.List s()
    {
        okhttp3.ah $r0;
        java.util.List r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.util.List i>;

        return r1;
    }
}
