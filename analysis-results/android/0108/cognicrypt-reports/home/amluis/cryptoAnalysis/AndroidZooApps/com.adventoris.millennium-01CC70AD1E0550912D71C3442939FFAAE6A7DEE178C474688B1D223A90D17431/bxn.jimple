public class bxn extends java.lang.Object implements bxc, bxf
{
    public static final bxr a;
    public static final bxr b;
    public static final bxr c;
    private static final char[] d;
    private final javax.net.ssl.SSLSocketFactory e;
    private final bxb f;
    private volatile bxr g;

    static void <clinit>()
    {
        char[] $r0;
        bxk $r1;
        bxl $r2;
        bxo $r3;
        java.lang.String $r4;

        nop;

        $r1 = new bxk;

        specialinvoke $r1.<bxk: void <init>()>();

        <bxn: bxr a> = $r1;

        $r2 = new bxl;

        specialinvoke $r2.<bxl: void <init>()>();

        <bxn: bxr b> = $r2;

        $r3 = new bxo;

        specialinvoke $r3.<bxo: void <init>()>();

        <bxn: bxr c> = $r3;

        $r4 = "";

        $r0 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        <bxn: char[] d> = $r0;

        return;
    }

    public void <init>(javax.net.ssl.SSLContext)
    {
        bxn $r0;
        javax.net.ssl.SSLContext $r1;
        bxr $r2;

        nop;

        $r0 := @this: bxn;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = <bxn: bxr b>;

        specialinvoke $r0.<bxn: void <init>(javax.net.ssl.SSLContext,bxr)>($r1, $r2);

        return;
    }

    public void <init>(javax.net.ssl.SSLContext, bxr)
    {
        bxn $r0;
        javax.net.ssl.SSLContext $r1;
        bxr $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        java.lang.IllegalArgumentException $r4;
        null_type varReplacer1239;
        java.lang.String varReplacer1240;

        nop;

        $r0 := @this: bxn;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 := @parameter1: bxr;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        varReplacer1240 = "SSL context may not be null";

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer1240);

        throw $r4;

     label1:
        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r0.<bxn: javax.net.ssl.SSLSocketFactory e> = $r3;

        $r0.<bxn: bxr g> = $r2;

        varReplacer1239 = null;

        $r0.<bxn: bxb f> = varReplacer1239;

        return;
    }

    public static bxn a()
    {
        bxn $r0;
        javax.net.ssl.SSLContext $r1;

        nop;

        $r0 = new bxn;

        $r1 = staticinvoke <bxn: javax.net.ssl.SSLContext b()>();

        specialinvoke $r0.<bxn: void <init>(javax.net.ssl.SSLContext)>($r1);

        return $r0;
    }

    private static javax.net.ssl.SSLContext a(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, bxq)
    {
        java.security.KeyStore $r0, $r2;
        java.lang.String $r1, $r5, $r6;
        java.security.SecureRandom $r3;
        bxq $r4;
        javax.net.ssl.KeyManagerFactory $r7;
        char[] $r8;
        javax.net.ssl.KeyManager[] $r9;
        javax.net.ssl.TrustManagerFactory $r10;
        java.lang.Object[] $r11;
        int $i0, $i1;
        java.lang.Object $r12;
        boolean $z0;
        javax.net.ssl.X509TrustManager $r13;
        javax.net.ssl.SSLContext $r14;
        bxp r15;
        javax.net.ssl.TrustManager[] r16;
        null_type varReplacer1233, varReplacer1234, varReplacer1235;

        nop;

        $r5 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.security.KeyStore;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.security.KeyStore;

        $r3 := @parameter4: java.security.SecureRandom;

        $r4 := @parameter5: bxq;

        goto label1;

     label1:
        $r6 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r7 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r6);

        goto label3;

     label2:
        varReplacer1235 = null;

        virtualinvoke $r7.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(varReplacer1235, $r8);

        $r9 = virtualinvoke $r7.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r10 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1);

        varReplacer1234 = null;

        virtualinvoke $r10.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer1234);

        $r11 = virtualinvoke $r10.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        if $r11 == null goto label4;

        goto label4;

     label3:
        $r8 = null;

        goto label2;

     label4:
        $r14 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r5);

        r16 = (javax.net.ssl.TrustManager[]) $r11;

        varReplacer1233 = null;

        virtualinvoke $r14.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r9, r16, varReplacer1233);

        return $r14;
    }

    private static javax.net.ssl.SSLContext b()
    {
        javax.net.ssl.SSLContext $r0;
        java.lang.Exception $r1;
        bxm $r2;
        java.lang.String varReplacer1226, varReplacer1232;
        null_type varReplacer1227, varReplacer1228, varReplacer1229, varReplacer1230, varReplacer1231;

     label1:
        nop;

        varReplacer1226 = "TLS";

        varReplacer1227 = null;

        varReplacer1228 = null;

        varReplacer1229 = null;

        varReplacer1230 = null;

        varReplacer1231 = null;

        $r0 = staticinvoke <bxn: javax.net.ssl.SSLContext a(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,bxq)>(varReplacer1226, varReplacer1227, varReplacer1227, varReplacer1227, varReplacer1227, varReplacer1227);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $r2 = new bxm;

        varReplacer1232 = "Failure initializing default SSL context";

        specialinvoke $r2.<bxm: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer1232, $r1);

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.net.Socket a(cfh)
    {
        bxn $r0;
        cfh $r1;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        javax.net.ssl.SSLSocket $r4;

        $r0 := @this: bxn;

        $r1 := @parameter0: cfh;

        $r3 = $r0.<bxn: javax.net.ssl.SSLSocketFactory e>;

        $r2 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        $r4 = (javax.net.ssl.SSLSocket) $r2;

        virtualinvoke $r0.<bxn: void a(javax.net.ssl.SSLSocket)>($r4);

        return $r4;
    }

    public java.net.Socket a(java.net.Socket, java.lang.String, int, cfh)
    {
        bxn $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        cfh $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        javax.net.ssl.SSLSocket $r5;
        bxr $r6;

        $r0 := @this: bxn;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: cfh;

        $r4 = $r0.<bxn: javax.net.ssl.SSLSocketFactory e>;

        $r1 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, 1);

        $r5 = (javax.net.ssl.SSLSocket) $r1;

        virtualinvoke $r0.<bxn: void a(javax.net.ssl.SSLSocket)>($r5);

        $r6 = $r0.<bxn: bxr g>;

        if $r6 == null goto label1;

        $r6 = $r0.<bxn: bxr g>;

        interfaceinvoke $r6.<bxr: void a(java.lang.String,javax.net.ssl.SSLSocket)>($r2, $r5);

     label1:
        return $r5;
    }

    public java.net.Socket a(java.net.Socket, java.lang.String, int, boolean)
    {
        bxn $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        javax.net.ssl.SSLSocketFactory $r3;
        javax.net.ssl.SSLSocket $r4;
        bxr $r5;

        $r0 := @this: bxn;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = $r0.<bxn: javax.net.ssl.SSLSocketFactory e>;

        $r1 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);

        $r4 = (javax.net.ssl.SSLSocket) $r1;

        virtualinvoke $r0.<bxn: void a(javax.net.ssl.SSLSocket)>($r4);

        $r5 = $r0.<bxn: bxr g>;

        if $r5 == null goto label1;

        $r5 = $r0.<bxn: bxr g>;

        interfaceinvoke $r5.<bxr: void a(java.lang.String,javax.net.ssl.SSLSocket)>($r2, $r4);

     label1:
        return $r4;
    }

    public java.net.Socket a(java.net.Socket, java.net.InetSocketAddress, java.net.InetSocketAddress, cfh)
    {
        bxn $r0;
        java.net.Socket $r1;
        java.net.InetSocketAddress $r2, $r3;
        cfh $r4;
        javax.net.ssl.SSLSocketFactory $r5;
        java.lang.IllegalArgumentException $r6;
        boolean $z0;
        int $i0, $i1;
        bwo $r7;
        bsz $r8;
        java.lang.String $r9;
        javax.net.ssl.SSLSocket $r10;
        bxr $r11;
        java.lang.Throwable $r12, $r15;
        bwg $r13;
        java.lang.StringBuilder $r14;
        java.lang.Exception $r16;

        $r0 := @this: bxn;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.net.InetSocketAddress;

        $r3 := @parameter2: java.net.InetSocketAddress;

        $r4 := @parameter3: cfh;

        if $r2 != null goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Remote address may not be null");

        throw $r6;

     label01:
        if $r4 != null goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r6;

     label02:
        if $r1 == null goto label11;

     label03:
        if $r3 == null goto label04;

        $z0 = staticinvoke <cff: boolean b(cfh)>($r4);

        virtualinvoke $r1.<java.net.Socket: void setReuseAddress(boolean)>($z0);

        virtualinvoke $r1.<java.net.Socket: void bind(java.net.SocketAddress)>($r3);

     label04:
        $i0 = staticinvoke <cff: int e(cfh)>($r4);

        $i1 = staticinvoke <cff: int a(cfh)>($r4);

     label05:
        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i1);

        virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0);

     label06:
        $z0 = $r2 instanceof bwo;

        if $z0 == 0 goto label13;

        $r7 = (bwo) $r2;

        $r8 = virtualinvoke $r7.<bwo: bsz a()>();

        $r9 = virtualinvoke $r8.<bsz: java.lang.String a()>();

     label07:
        $z0 = $r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label14;

        $r10 = (javax.net.ssl.SSLSocket) $r1;

     label08:
        $r11 = $r0.<bxn: bxr g>;

        if $r11 == null goto label19;

        $r11 = $r0.<bxn: bxr g>;

     label09:
        interfaceinvoke $r11.<bxr: void a(java.lang.String,javax.net.ssl.SSLSocket)>($r9, $r10);

     label10:
        return $r10;

     label11:
        $r5 = $r0.<bxn: javax.net.ssl.SSLSocketFactory e>;

        $r1 = virtualinvoke $r5.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        goto label03;

     label12:
        $r12 := @caughtexception;

        $r13 = new bwg;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connect to ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out");

        $r9 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<bwg: void <init>(java.lang.String)>($r9);

        throw $r13;

     label13:
        $r9 = virtualinvoke $r2.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        goto label07;

     label14:
        $i0 = virtualinvoke $r2.<java.net.InetSocketAddress: int getPort()>();

        $r5 = $r0.<bxn: javax.net.ssl.SSLSocketFactory e>;

        $r1 = virtualinvoke $r5.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r9, $i0, 1);

        $r10 = (javax.net.ssl.SSLSocket) $r1;

        virtualinvoke $r0.<bxn: void a(javax.net.ssl.SSLSocket)>($r10);

        goto label08;

     label15:
        $r15 := @caughtexception;

     label16:
        virtualinvoke $r10.<javax.net.ssl.SSLSocket: void close()>();

     label17:
        throw $r15;

     label18:
        $r16 := @caughtexception;

        goto label17;

     label19:
        return $r10;

        catch java.net.SocketTimeoutException from label05 to label06 with label12;
        catch java.io.IOException from label09 to label10 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    protected void a(javax.net.ssl.SSLSocket)
    {
        bxn $r0;
        javax.net.ssl.SSLSocket $r1;

        $r0 := @this: bxn;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        return;
    }

    public boolean a(java.net.Socket)
    {
        bxn $r0;
        java.net.Socket $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: bxn;

        $r1 := @parameter0: java.net.Socket;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r2;

     label1:
        $z0 = $r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory");

        throw $r2;

     label2:
        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isClosed()>();

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed");

        throw $r2;

     label3:
        return 1;
    }
}
