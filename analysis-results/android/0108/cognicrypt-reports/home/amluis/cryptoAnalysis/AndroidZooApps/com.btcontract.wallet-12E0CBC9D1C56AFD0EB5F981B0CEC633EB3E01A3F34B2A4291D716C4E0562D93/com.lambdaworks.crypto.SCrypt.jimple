public class com.lambdaworks.crypto.SCrypt extends java.lang.Object
{
    private static final boolean native_library_loaded;

    static void <clinit>()
    {
        com.lambdaworks.jni.LibraryLoader $r0;
        boolean $z0;
        java.lang.String varReplacer7821;
        int varReplacer7822;

        nop;

        $r0 = staticinvoke <com.lambdaworks.jni.LibraryLoaders: com.lambdaworks.jni.LibraryLoader loader()>();

        varReplacer7821 = "scrypt";

        varReplacer7822 = 1;

        $z0 = interfaceinvoke $r0.<com.lambdaworks.jni.LibraryLoader: boolean load(java.lang.String,boolean)>(varReplacer7821, varReplacer7822);

        <com.lambdaworks.crypto.SCrypt: boolean native_library_loaded> = $z0;

        return;
    }

    public static int R(int, int)
    {
        int $i0, $i1, $i2;

        nop;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }

    public static void blockmix_salsa8(byte[], int, int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, varReplacer7855, varReplacer7856, varReplacer7857, varReplacer7858, varReplacer7859, varReplacer7860, varReplacer7861, varReplacer7862;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 = newarray (byte)[64];

        $i3 = $i2 * 2;

        $i3 = $i3 + -1;

        $i3 = $i3 * 64;

        $i3 = $i3 + 0;

        varReplacer7858 = 0;

        varReplacer7859 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i3, $r1, varReplacer7858, varReplacer7859);

        $i3 = 0;

     label1:
        $i4 = $i2 * 2;

        if $i3 >= $i4 goto label2;

        $i4 = $i3 * 64;

        varReplacer7855 = 0;

        varReplacer7856 = 64;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockxor(byte[],int,byte[],int,int)>($r0, $i4, $r1, varReplacer7855, varReplacer7856);

        staticinvoke <com.lambdaworks.crypto.SCrypt: void salsa20_8(byte[])>($r1);

        $i4 = $i3 * 64;

        $i4 = $i4 + $i1;

        varReplacer7861 = 0;

        varReplacer7862 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer7861, $r0, $i4, varReplacer7862);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $i3 = 0;

     label3:
        if $i3 >= $i2 goto label4;

        $i4 = $i3 * 2;

        $i4 = $i4 * 64;

        $i4 = $i4 + $i1;

        $i5 = $i3 * 64;

        $i5 = $i5 + 0;

        varReplacer7857 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, $r0, $i5, varReplacer7857);

        $i3 = $i3 + 1;

        goto label3;

     label4:
        $i3 = 0;

     label5:
        if $i3 >= $i2 goto label6;

        $i4 = $i3 * 2;

        $i4 = $i4 + 1;

        $i4 = $i4 * 64;

        $i4 = $i4 + $i1;

        $i5 = $i3 + $i2;

        $i5 = $i5 * 64;

        $i5 = $i5 + 0;

        varReplacer7860 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, $r0, $i5, varReplacer7860);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        return;
    }

    public static void blockxor(byte[], int, byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        byte $b5, $b7;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i4 = 0;

     label1:
        if $i4 >= $i2 goto label2;

        $i3 = 0 + $i4;

        $b5 = $r1[$i3];

        $i6 = $i0 + $i4;

        $b7 = $r0[$i6];

        $b5 = $b5 ^ $b7;

        $r1[$i3] = $b5;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return;
    }

    public static int integerify(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i4;
        byte $b2;
        short $s3;

        nop;

        $r0 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i0 = $i0 * 2;

        $i0 = $i0 + -1;

        $i0 = $i0 * 64;

        $i1 = 0 + $i0;

        $i0 = $i1;

        $b2 = $r0[$i0];

        $s3 = $b2 & 255;

        $i0 = $s3 << 0;

        $i4 = $i1 + 1;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        $i0 = $i0 | $i4;

        $i4 = $i1 + 2;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        $i0 = $i0 | $i4;

        $i1 = $i1 + 3;

        $b2 = $r0[$i1];

        $s3 = $b2 & 255;

        $i1 = $s3 << 24;

        $i1 = $i0 | $i1;

        return $i1;
    }

    public static void salsa20_8(byte[])
    {
        byte[] $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i4, $i5, varReplacer7863, varReplacer7864, varReplacer7865, varReplacer7866, varReplacer7867, varReplacer7868, varReplacer7869, varReplacer7870, varReplacer7871, varReplacer7872, varReplacer7873, varReplacer7874, varReplacer7875, varReplacer7876, varReplacer7877, varReplacer7878, varReplacer7879, varReplacer7880, varReplacer7881, varReplacer7882, varReplacer7883, varReplacer7884, varReplacer7885, varReplacer7886, varReplacer7887, varReplacer7888, varReplacer7889, varReplacer7890, varReplacer7891, varReplacer7892, varReplacer7893, varReplacer7894, varReplacer7895, varReplacer7896, varReplacer7897;
        byte $b2;
        short $s3;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = newarray (int)[16];

        $r2 = newarray (int)[16];

        $i0 = 0;

     label1:
        if $i0 >= 16 goto label2;

        $i1 = $i0 * 4;

        $b2 = $r0[$i1];

        $s3 = $b2 & 255;

        $i1 = $s3 << 0;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 1;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 2;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 3;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 24;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        varReplacer7893 = 0;

        varReplacer7894 = 0;

        varReplacer7895 = 16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer7893, $r2, varReplacer7893, varReplacer7895);

        $i0 = 8;

     label3:
        if $i0 <= 0 goto label4;

        $i1 = $r2[4];

        $i4 = $r2[0];

        $i5 = $r2[12];

        $i4 = $i4 + $i5;

        varReplacer7865 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7865);

        $i1 = $i1 ^ $i4;

        $r2[4] = $i1;

        $i1 = $r2[8];

        $i4 = $r2[4];

        $i5 = $r2[0];

        $i4 = $i4 + $i5;

        varReplacer7863 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7863);

        $i1 = $i1 ^ $i4;

        $r2[8] = $i1;

        $i1 = $r2[12];

        $i4 = $r2[8];

        $i5 = $r2[4];

        $i4 = $i4 + $i5;

        varReplacer7871 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7871);

        $i1 = $i1 ^ $i4;

        $r2[12] = $i1;

        $i1 = $r2[0];

        $i4 = $r2[12];

        $i5 = $r2[8];

        $i4 = $i4 + $i5;

        varReplacer7892 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7892);

        $i1 = $i1 ^ $i4;

        $r2[0] = $i1;

        $i1 = $r2[9];

        $i4 = $r2[5];

        $i5 = $r2[1];

        $i4 = $i4 + $i5;

        varReplacer7888 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7888);

        $i1 = $i1 ^ $i4;

        $r2[9] = $i1;

        $i1 = $r2[13];

        $i4 = $r2[9];

        $i5 = $r2[5];

        $i4 = $i4 + $i5;

        varReplacer7890 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7890);

        $i1 = $i1 ^ $i4;

        $r2[13] = $i1;

        $i1 = $r2[1];

        $i4 = $r2[13];

        $i5 = $r2[9];

        $i4 = $i4 + $i5;

        varReplacer7879 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7879);

        $i1 = $i1 ^ $i4;

        $r2[1] = $i1;

        $i1 = $r2[5];

        $i4 = $r2[1];

        $i5 = $r2[13];

        $i4 = $i4 + $i5;

        varReplacer7891 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7891);

        $i1 = $i1 ^ $i4;

        $r2[5] = $i1;

        $i1 = $r2[14];

        $i4 = $r2[10];

        $i5 = $r2[6];

        $i4 = $i4 + $i5;

        varReplacer7873 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7873);

        $i1 = $i1 ^ $i4;

        $r2[14] = $i1;

        $i1 = $r2[2];

        $i4 = $r2[14];

        $i5 = $r2[10];

        $i4 = $i4 + $i5;

        varReplacer7874 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7874);

        $i1 = $i1 ^ $i4;

        $r2[2] = $i1;

        $i1 = $r2[6];

        $i4 = $r2[2];

        $i5 = $r2[14];

        $i4 = $i4 + $i5;

        varReplacer7877 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7877);

        $i1 = $i1 ^ $i4;

        $r2[6] = $i1;

        $i1 = $r2[10];

        $i4 = $r2[6];

        $i5 = $r2[2];

        $i4 = $i4 + $i5;

        varReplacer7869 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7869);

        $i1 = $i1 ^ $i4;

        $r2[10] = $i1;

        $i1 = $r2[3];

        $i4 = $r2[15];

        $i5 = $r2[11];

        $i4 = $i4 + $i5;

        varReplacer7866 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7866);

        $i1 = $i1 ^ $i4;

        $r2[3] = $i1;

        $i1 = $r2[7];

        $i4 = $r2[3];

        $i5 = $r2[15];

        $i4 = $i4 + $i5;

        varReplacer7896 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7896);

        $i1 = $i1 ^ $i4;

        $r2[7] = $i1;

        $i1 = $r2[11];

        $i4 = $r2[7];

        $i5 = $r2[3];

        $i4 = $i4 + $i5;

        varReplacer7882 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7882);

        $i1 = $i1 ^ $i4;

        $r2[11] = $i1;

        $i1 = $r2[15];

        $i4 = $r2[11];

        $i5 = $r2[7];

        $i4 = $i4 + $i5;

        varReplacer7885 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7885);

        $i1 = $i1 ^ $i4;

        $r2[15] = $i1;

        $i1 = $r2[1];

        $i4 = $r2[0];

        $i5 = $r2[3];

        $i4 = $i4 + $i5;

        varReplacer7886 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7886);

        $i1 = $i1 ^ $i4;

        $r2[1] = $i1;

        $i1 = $r2[2];

        $i4 = $r2[1];

        $i5 = $r2[0];

        $i4 = $i4 + $i5;

        varReplacer7897 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7897);

        $i1 = $i1 ^ $i4;

        $r2[2] = $i1;

        $i1 = $r2[3];

        $i4 = $r2[2];

        $i5 = $r2[1];

        $i4 = $i4 + $i5;

        varReplacer7889 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7889);

        $i1 = $i1 ^ $i4;

        $r2[3] = $i1;

        $i1 = $r2[0];

        $i4 = $r2[3];

        $i5 = $r2[2];

        $i4 = $i4 + $i5;

        varReplacer7881 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7881);

        $i1 = $i1 ^ $i4;

        $r2[0] = $i1;

        $i1 = $r2[6];

        $i4 = $r2[5];

        $i5 = $r2[4];

        $i4 = $i4 + $i5;

        varReplacer7880 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7880);

        $i1 = $i1 ^ $i4;

        $r2[6] = $i1;

        $i1 = $r2[7];

        $i4 = $r2[6];

        $i5 = $r2[5];

        $i4 = $i4 + $i5;

        varReplacer7867 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7867);

        $i1 = $i1 ^ $i4;

        $r2[7] = $i1;

        $i1 = $r2[4];

        $i4 = $r2[7];

        $i5 = $r2[6];

        $i4 = $i4 + $i5;

        varReplacer7883 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7883);

        $i1 = $i1 ^ $i4;

        $r2[4] = $i1;

        $i1 = $r2[5];

        $i4 = $r2[4];

        $i5 = $r2[7];

        $i4 = $i4 + $i5;

        varReplacer7872 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7872);

        $i1 = $i1 ^ $i4;

        $r2[5] = $i1;

        $i1 = $r2[11];

        $i4 = $r2[10];

        $i5 = $r2[9];

        $i4 = $i4 + $i5;

        varReplacer7884 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7884);

        $i1 = $i1 ^ $i4;

        $r2[11] = $i1;

        $i1 = $r2[8];

        $i4 = $r2[11];

        $i5 = $r2[10];

        $i4 = $i4 + $i5;

        varReplacer7864 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7864);

        $i1 = $i1 ^ $i4;

        $r2[8] = $i1;

        $i1 = $r2[9];

        $i4 = $r2[8];

        $i5 = $r2[11];

        $i4 = $i4 + $i5;

        varReplacer7878 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7878);

        $i1 = $i1 ^ $i4;

        $r2[9] = $i1;

        $i1 = $r2[10];

        $i4 = $r2[9];

        $i5 = $r2[8];

        $i4 = $i4 + $i5;

        varReplacer7870 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7870);

        $i1 = $i1 ^ $i4;

        $r2[10] = $i1;

        $i1 = $r2[12];

        $i4 = $r2[15];

        $i5 = $r2[14];

        $i4 = $i4 + $i5;

        varReplacer7887 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7887);

        $i1 = $i1 ^ $i4;

        $r2[12] = $i1;

        $i1 = $r2[13];

        $i4 = $r2[12];

        $i5 = $r2[15];

        $i4 = $i4 + $i5;

        varReplacer7875 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7875);

        $i1 = $i1 ^ $i4;

        $r2[13] = $i1;

        $i1 = $r2[14];

        $i4 = $r2[13];

        $i5 = $r2[12];

        $i4 = $i4 + $i5;

        varReplacer7868 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7868);

        $i1 = $i1 ^ $i4;

        $r2[14] = $i1;

        $i1 = $r2[15];

        $i4 = $r2[14];

        $i5 = $r2[13];

        $i4 = $i4 + $i5;

        varReplacer7876 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer7876);

        $i1 = $i1 ^ $i4;

        $r2[15] = $i1;

        $i0 = $i0 + -2;

        goto label3;

     label4:
        $i0 = 0;

     label5:
        if $i0 >= 16 goto label6;

        $i1 = $r2[$i0];

        $i4 = $r1[$i0];

        $i1 = $i1 + $i4;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = 0;

     label7:
        if $i0 >= 16 goto label8;

        $i1 = $i0 * 4;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 0;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 1;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 8;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 2;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 16;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 3;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 24;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i0 = $i0 + 1;

        goto label7;

     label8:
        return;
    }

    public static byte[] scrypt(byte[], byte[], int, int, int, int) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, varReplacer7819, varReplacer7820;
        boolean $z0;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $z0 = <com.lambdaworks.crypto.SCrypt: boolean native_library_loaded>;

        if $z0 == 0 goto label1;

        varReplacer7820 = 32;

        $r0 = staticinvoke <com.lambdaworks.crypto.SCrypt: byte[] scryptN(byte[],byte[],int,int,int,int)>($r0, $r1, $i0, $i1, $i2, varReplacer7820);

        return $r0;

     label1:
        varReplacer7819 = 32;

        $r0 = staticinvoke <com.lambdaworks.crypto.SCrypt: byte[] scryptJ(byte[],byte[],int,int,int,int)>($r0, $r1, $i0, $i1, $i2, varReplacer7819);

        return $r0;
    }

    public static byte[] scryptJ(byte[], byte[], int, int, int, int) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, varReplacer7828, varReplacer7829, varReplacer7830;
        javax.crypto.Mac $r5;
        java.lang.IllegalArgumentException $r6;
        javax.crypto.spec.SecretKeySpec $r7;
        java.lang.String varReplacer7823, varReplacer7824, varReplacer7825, varReplacer7826, varReplacer7827;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        if $i0 < 2 goto label1;

        $i4 = $i0 + -1;

        $i4 = $i4 & $i0;

        if $i4 == 0 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        varReplacer7825 = "N must be a power of 2 greater than 1";

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer7825);

        throw $r6;

     label2:
        $i4 = 16777215 / $i1;

        if $i0 <= $i4 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        varReplacer7824 = "Parameter N is too large";

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer7824);

        throw $r6;

     label3:
        $i4 = 16777215 / $i2;

        if $i1 <= $i4 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        varReplacer7827 = "Parameter r is too large";

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer7827);

        throw $r6;

     label4:
        varReplacer7826 = "HmacSHA256";

        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer7826);

        $r7 = new javax.crypto.spec.SecretKeySpec;

        varReplacer7823 = "HmacSHA256";

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer7823);

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r7);

        $r4 = newarray (byte)[32];

        $i4 = $i1 * 128;

        $i4 = $i4 * $i2;

        $r0 = newarray (byte)[$i4];

        $i4 = $i1 * 256;

        $r3 = newarray (byte)[$i4];

        $i4 = $i1 * 128;

        $i4 = $i4 * $i0;

        $r2 = newarray (byte)[$i4];

        $i4 = $i2 * 128;

        $i4 = $i4 * $i1;

        varReplacer7830 = 1;

        staticinvoke <com.lambdaworks.crypto.PBKDF: void pbkdf2(javax.crypto.Mac,byte[],int,byte[],int)>($r5, $r1, varReplacer7830, $r0, $i4);

        $i4 = 0;

     label5:
        if $i4 >= $i2 goto label6;

        $i5 = $i4 * 128;

        $i5 = $i5 * $i1;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void smix(byte[],int,int,int,byte[],byte[])>($r0, $i5, $i1, $i0, $r2, $r3);

        $i4 = $i4 + 1;

        goto label5;

     label6:
        varReplacer7828 = 1;

        varReplacer7829 = 32;

        staticinvoke <com.lambdaworks.crypto.PBKDF: void pbkdf2(javax.crypto.Mac,byte[],int,byte[],int)>($r5, $r0, varReplacer7828, $r4, varReplacer7829);

        return $r4;
    }

    public static native byte[] scryptN(byte[], byte[], int, int, int, int);

    public static void smix(byte[], int, int, int, byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, varReplacer7848, varReplacer7849, varReplacer7850, varReplacer7851, varReplacer7852, varReplacer7853, varReplacer7854;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: byte[];

        $r2 := @parameter5: byte[];

        $i3 = $i1 * 128;

        $i5 = $i1 * 128;

        varReplacer7849 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r2, varReplacer7849, $i5);

        $i5 = 0;

     label1:
        if $i5 >= $i2 goto label2;

        $i4 = $i1 * 128;

        $i4 = $i4 * $i5;

        $i6 = $i1 * 128;

        varReplacer7851 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer7851, $r1, $i4, $i6);

        varReplacer7854 = 0;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockmix_salsa8(byte[],int,int,int)>($r2, varReplacer7854, $i3, $i1);

        $i5 = $i5 + 1;

        goto label1;

     label2:
        $i5 = 0;

     label3:
        if $i5 >= $i2 goto label4;

        varReplacer7853 = 0;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int integerify(byte[],int,int)>($r2, varReplacer7853, $i1);

        $i6 = $i2 + -1;

        $i4 = $i4 & $i6;

        $i6 = $i1 * 128;

        $i4 = $i6 * $i4;

        $i6 = $i1 * 128;

        varReplacer7852 = 0;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockxor(byte[],int,byte[],int,int)>($r1, $i4, $r2, varReplacer7852, $i6);

        varReplacer7850 = 0;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockmix_salsa8(byte[],int,int,int)>($r2, varReplacer7850, $i3, $i1);

        $i5 = $i5 + 1;

        goto label3;

     label4:
        $i1 = $i1 * 128;

        varReplacer7848 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer7848, $r0, $i0, $i1);

        return;
    }
}
