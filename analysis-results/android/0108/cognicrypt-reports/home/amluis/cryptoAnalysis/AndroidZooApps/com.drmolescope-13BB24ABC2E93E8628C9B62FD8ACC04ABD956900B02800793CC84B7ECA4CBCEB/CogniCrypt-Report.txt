Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer1290)
		Method: <com.molescope.DatabaseHandler: byte[] encryptDecrypt(byte[],int)>
		SHA-256: d91284ef7a20e6dfa068ab527f81d9aa3f51cb10068036d715012df6981738ec
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: java.lang.String createHash(char[])>
		SHA-256: 534e0990bc9438a4a58d0ca1399eb7c5e644117c659d99dbd44b3f29d06b0d1c
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKey
		Statement: $r4 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: byte[] pbkdf2(char[],byte[],int,int)>
		SHA-256: 7c467b2402a97c8079248009aa0c1be27682561deb850e33d92c9c610ff19cdd
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: java.lang.String createHash(char[])>
		SHA-256: 53b619e25a30e20674cf3321e765e693580b029487a69b21031287d4cd76808c
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.molescope.DatabaseHandler: byte[] encryptDecrypt(byte[],int)>
		SHA-256: 8599be176768bdf35bbda4e024ca0ca7a5069204416dfc7d9341e9f824ad9e65
		Secure: false
	Object:
		Variable: varReplacer2061
		Type: int
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer2060, varReplacer2061)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: byte[] pbkdf2(char[],byte[],int,int)>
		SHA-256: 1dcdc20c69eabff5cf988d25d682371d33a8d6c48e794be25487ebfc955e6d91
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1289)
		Method: <com.molescope.DatabaseHandler: byte[] encryptDecrypt(byte[],int)>
		SHA-256: d14df4c8b1896458b61eac21dc60de396560545c2e97748f5a76c9312a0dd1e9
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer2060, varReplacer2061)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: byte[] pbkdf2(char[],byte[],int,int)>
		SHA-256: 66cc09a70297a4f9c37a92c448123eb67ea9623fcf57b57b94e06cb2dcfbf536
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.KeyStore
		Statement: $r4 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r3)
		Method: <com.molescope.HttpRequest: void setupSSL(android.content.Context)>
		SHA-256: 42b89cfd3c1c51d904b1cb9e834814022d3b3e0e57cf9e197a2ed7e2122c4d96
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKeyFactory
		Statement: $r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer2062)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: byte[] pbkdf2(char[],byte[],int,int)>
		SHA-256: 9871c4507c6d8d51f08cba48ac0f76c940a3b54376affc439efe321877226b25
		Secure: false
	Object:
		Variable: varReplacer1290
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer1290)
		Method: <com.molescope.DatabaseHandler: byte[] encryptDecrypt(byte[],int)>
		SHA-256: be474f6fdabf590a98223f7bc1509533fdc71b66c752bcfdba0a9e0feb1a0aff
		Secure: false
	Object:
		Variable: $r13
		Type: javax.net.ssl.SSLContext
		Statement: $r13 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2698)
		Method: <com.molescope.HttpRequest: void setupSSL(android.content.Context)>
		SHA-256: a834d67fc4a08fe9bbb85c199ab0d5dc0d0321205eeedbc6d7354c19575ce7a6
		Secure: false

Findings in Java Class: com.molescope.DatabaseHandler

	 in Method: byte[] encryptDecrypt(byte[],int)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d14df4c8b1896458b61eac21dc60de396560545c2e97748f5a76c9312a0dd1e9)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1289)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer1290)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d14df4c8b1896458b61eac21dc60de396560545c2e97748f5a76c9312a0dd1e9)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1289)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>($i0, $r2)


Findings in Java Class: com.molescope.UserDatabaseUtil$PasswordHash

	 in Method: byte[] pbkdf2(char[],byte[],int,int)
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #66cc09a70297a4f9c37a92c448123eb67ea9623fcf57b57b94e06cb2dcfbf536)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer2060, varReplacer2061)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #66cc09a70297a4f9c37a92c448123eb67ea9623fcf57b57b94e06cb2dcfbf536)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer2060, varReplacer2061)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r4 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #9871c4507c6d8d51f08cba48ac0f76c940a3b54376affc439efe321877226b25)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithSHAAND192BITAES-CBC-BC, DESede, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithMD5ANDDES, PBEwithSHAAND128BITAES-CBC-BC, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, PBEwithMD5ANDRC2, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC}
			at statement: $r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer2062)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #66cc09a70297a4f9c37a92c448123eb67ea9623fcf57b57b94e06cb2dcfbf536)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r4 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #66cc09a70297a4f9c37a92c448123eb67ea9623fcf57b57b94e06cb2dcfbf536)
			Third parameter (with value 1000)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer2060, varReplacer2061)


Findings in Java Class: com.molescope.HttpRequest

	 in Method: void setupSSL(android.content.Context)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r13.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2699, $r14, varReplacer2699)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r13.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2699, $r14, varReplacer2699)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 12

	CogniCrypt found the following violations. For details see description above.
	NeverTypeOfError: 2
	IncompleteOperationError: 1
	ConstraintError: 4
	RequiredPredicateError: 5
=====================================================================