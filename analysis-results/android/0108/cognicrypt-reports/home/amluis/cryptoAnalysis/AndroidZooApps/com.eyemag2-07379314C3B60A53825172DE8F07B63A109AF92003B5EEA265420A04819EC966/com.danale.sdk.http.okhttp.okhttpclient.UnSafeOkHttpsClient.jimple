public class com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient extends java.lang.Object implements com.danale.sdk.http.okhttp.okhttpclient.CustomOkHttpClientInterface
{

    public void <init>()
    {
        com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient $r0;

        nop;

        $r0 := @this: com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private javax.net.ssl.HostnameVerifier getAllTrustHostnameVerifier()
    {
        com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient $r0;
        com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient$2 $r1;

        nop;

        $r0 := @this: com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient;

        $r1 = new com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient$2;

        specialinvoke $r1.<com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient$2: void <init>(com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient)>($r0);

        return $r1;
    }

    private javax.net.ssl.TrustManager[] getAllTrustManagers()
    {
        com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient $r0;
        java.lang.Object[] $r1;
        com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient$1 r2;
        javax.net.ssl.TrustManager[] r3;

        nop;

        $r0 := @this: com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient;

        $r1 = newarray (javax.net.ssl.TrustManager)[1];

        r2 = new com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient$1;

        specialinvoke r2.<com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient$1: void <init>(com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient)>($r0);

        $r1[0] = r2;

        r3 = (javax.net.ssl.TrustManager[]) $r1;

        return r3;
    }

    private javax.net.ssl.SSLSocketFactory getAllTrustSSLSocketFactory()
    {
        com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient $r0;
        java.security.SecureRandom $r1, r7;
        javax.net.ssl.SSLContext $r2;
        javax.net.ssl.TrustManager[] $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        java.lang.Throwable $r5, $r6;
        java.security.NoSuchAlgorithmException r8;
        java.security.KeyManagementException r9;
        null_type varReplacer1149, varReplacer1151, varReplacer1152;
        java.lang.String varReplacer1150;

        nop;

        $r0 := @this: com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient;

     label1:
        varReplacer1150 = "SSL";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1150);

     label2:
        if $r2 == null goto label9;

     label3:
        $r3 = specialinvoke $r0.<com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient: javax.net.ssl.TrustManager[] getAllTrustManagers()>();

     label4:
        r7 = new java.security.SecureRandom;

        $r1 = r7;

     label5:
        specialinvoke r7.<java.security.SecureRandom: void <init>()>();

        varReplacer1149 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1149, $r3, $r1);

     label6:
        $r4 = virtualinvoke $r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        return $r4;

     label7:
        $r5 := @caughtexception;

        r8 = (java.security.NoSuchAlgorithmException) $r5;

        virtualinvoke r8.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        varReplacer1152 = null;

        return varReplacer1152;

     label8:
        $r6 := @caughtexception;

        r9 = (java.security.KeyManagementException) $r6;

        virtualinvoke r9.<java.security.KeyManagementException: void printStackTrace()>();

     label9:
        varReplacer1151 = null;

        return varReplacer1151;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label7;
        catch java.security.KeyManagementException from label3 to label4 with label8;
        catch java.security.KeyManagementException from label5 to label6 with label8;
    }

    public okhttp3.OkHttpClient newOkHttpClient()
    {
        com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient $r0;
        okhttp3.OkHttpClient$Builder $r1;
        javax.net.ssl.SSLSocketFactory $r2;
        javax.net.ssl.HostnameVerifier $r3;
        okhttp3.OkHttpClient $r4;

        nop;

        $r0 := @this: com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient;

        $r1 = new okhttp3.OkHttpClient$Builder;

        specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>();

        $r2 = specialinvoke $r0.<com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient: javax.net.ssl.SSLSocketFactory getAllTrustSSLSocketFactory()>();

        virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r2);

        $r3 = specialinvoke $r0.<com.danale.sdk.http.okhttp.okhttpclient.UnSafeOkHttpsClient: javax.net.ssl.HostnameVerifier getAllTrustHostnameVerifier()>();

        virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier)>($r3);

        $r4 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>();

        return $r4;
    }
}
