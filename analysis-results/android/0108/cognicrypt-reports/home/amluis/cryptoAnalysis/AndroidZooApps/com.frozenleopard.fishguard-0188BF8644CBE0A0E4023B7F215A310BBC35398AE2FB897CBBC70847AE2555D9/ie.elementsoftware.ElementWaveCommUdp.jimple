public class ie.elementsoftware.ElementWaveCommUdp extends java.lang.Object
{
    public static final byte ADD_TAG;
    public static final byte APP_OPEN;
    public static final byte CALL_TO_ACTION;
    public static final byte DEVICE_REGISTRATION;
    private static final byte[] ENCRYPTION_KEY;
    private static final byte FLAGS;
    public static final byte LOCATION_UPDATE;
    private static final byte PLATFORM;
    public static final byte READ_RECEIPT;
    public static final byte REMOVE_ALL_TAGS;
    public static final byte REMOVE_TAG;
    public static final byte RESERVED;
    protected static final int RWServerPort;
    private static java.lang.String TAG;
    public static final byte TIME_IN_APP;

    static void <clinit>()
    {
        byte[] $r0;
        java.lang.String $r1, varReplacer1025;

        nop;

        varReplacer1025 = "ElementWaveCommUdp";

        <ie.elementsoftware.ElementWaveCommUdp: java.lang.String TAG> = varReplacer1025;

        $r1 = "ed24a8b1";

        $r0 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        <ie.elementsoftware.ElementWaveCommUdp: byte[] ENCRYPTION_KEY> = $r0;

        return;
    }

    private void <init>()
    {
        ie.elementsoftware.ElementWaveCommUdp $r0;

        $r0 := @this: ie.elementsoftware.ElementWaveCommUdp;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] BFencrypt(byte[])
    {
        java.lang.Exception $r0;
        javax.crypto.spec.SecretKeySpec $r1;
        byte[] $r2, $r3;
        int $i0, varReplacer1042;
        javax.crypto.Cipher $r4;
        java.lang.String varReplacer1040, varReplacer1041;

        nop;

        $r2 := @parameter0: byte[];

     label1:
        $i0 = lengthof $r2;

     label2:
        $i0 = $i0 % 8;

        if $i0 == 0 goto label5;

     label3:
        $r3 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] createPadding(byte[])>($r2);

     label4:
        $r2 = $r3;

     label5:
        $r1 = new javax.crypto.spec.SecretKeySpec;

        $r3 = <ie.elementsoftware.ElementWaveCommUdp: byte[] ENCRYPTION_KEY>;

     label6:
        varReplacer1041 = "Blowfish";

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer1041);

        varReplacer1040 = "Blowfish/ECB/NoPadding";

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1040);

        varReplacer1042 = 1;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1042, $r1);

        $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

     label7:
        return $r3;

     label8:
        $r0 := @caughtexception;

        virtualinvoke $r0.<java.lang.Exception: void printStackTrace()>();

        return $r2;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    static java.lang.String access$0()
    {
        java.lang.String r0;

        nop;

        r0 = <ie.elementsoftware.ElementWaveCommUdp: java.lang.String TAG>;

        return r0;
    }

    private static byte[] buildId(int, byte[])
    {
        int $i0, $i1, $i2, varReplacer1046, varReplacer1047;
        byte[] $r0, $r1;
        byte $b3;

        nop;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 = lengthof $r0;

        $i1 = $i1 + 2;

        $r1 = newarray (byte)[$i1];

        $i1 = 0;

        if $i0 <= 255 goto label1;

        $i1 = $i0 / 256;

     label1:
        $i2 = $i1 * 256;

        $i0 = $i0 - $i2;

        $b3 = (byte) $i1;

        $r1[0] = $b3;

        $b3 = (byte) $i0;

        $r1[1] = $b3;

        $i0 = lengthof $r0;

        varReplacer1046 = 0;

        varReplacer1047 = 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer1046, $r1, varReplacer1047, $i0);

        return $r1;
    }

    public static java.lang.String bytesToHex(byte[])
    {
        byte[] $r0;
        char[] $r1, $r2;
        short $s0, $s4;
        int $i1, $i2;
        java.lang.String $r3;
        byte $b3;
        char $c5;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        $i1 = lengthof $r0;

        $i1 = $i1 * 2;

        $r2 = newarray (char)[$i1];

        $i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if $i1 < $i2 goto label2;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r2);

        return $r3;

     label2:
        $b3 = $r0[$i1];

        $s0 = $b3 & 255;

        $i2 = $i1 * 2;

        $s4 = $s0 >>> 4;

        $c5 = $r1[$s4];

        $r2[$i2] = $c5;

        $i2 = $i1 * 2;

        $i2 = $i2 + 1;

        $s0 = $s0 & 15;

        $c5 = $r1[$s0];

        $r2[$i2] = $c5;

        $i1 = $i1 + 1;

        goto label1;
    }

    private static long calculateCRC32ForByteArray(byte[])
    {
        byte[] $r0;
        java.util.zip.CRC32 $r1;
        long $l0;
        int $i1, varReplacer1060;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = new java.util.zip.CRC32;

        specialinvoke $r1.<java.util.zip.CRC32: void <init>()>();

        $i1 = lengthof $r0;

        varReplacer1060 = 0;

        interfaceinvoke $r1.<java.util.zip.Checksum: void update(byte[],int,int)>($r0, varReplacer1060, $i1);

        $l0 = interfaceinvoke $r1.<java.util.zip.Checksum: long getValue()>();

        return $l0;
    }

    private static byte[] calculateXORbytes(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Exception $r1;
        byte[] $r2, $r3, $r6;
        byte $b0, $b3;
        java.util.Random $r4;
        java.nio.ByteBuffer $r5;
        int $i1, $i2, varReplacer1034;
        long varReplacer1032;
        java.lang.String varReplacer1033, varReplacer1035;

        nop;

        $r0 := @parameter0: android.content.Context;

        $r3 = newarray (byte)[4];

        $r4 = new java.util.Random;

        specialinvoke $r4.<java.util.Random: void <init>()>();

        virtualinvoke $r4.<java.util.Random: void nextBytes(byte[])>($r3);

        varReplacer1034 = 8;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(varReplacer1034);

        varReplacer1032 = 4294272367L;

        $r5 = virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(varReplacer1032);

        $r6 = virtualinvoke $r5.<java.nio.ByteBuffer: byte[] array()>();

        $r2 = newarray (byte)[4];

        $i1 = 0;

     label01:
        if $i1 < 4 goto label07;

     label02:
        $r6 = newarray (byte)[4];

     label03:
        $i1 = 0;

     label04:
        if $i1 < 4 goto label08;

     label05:
        varReplacer1035 = "TEST_MODE";

        staticinvoke <ie.elementsoftware.ElementWavePrefs: boolean getBooleanPreference(android.content.Context,java.lang.String)>($r0, varReplacer1035);

        $r2 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] toLittleEndian(byte[])>($r6);

        varReplacer1033 = "TEST_MODE";

        staticinvoke <ie.elementsoftware.ElementWavePrefs: boolean getBooleanPreference(android.content.Context,java.lang.String)>($r0, varReplacer1033);

     label06:
        return $r2;

     label07:
        $i2 = $i1 + 4;

        $b0 = $r6[$i2];

        $r2[$i1] = $b0;

        $i1 = $i1 + 1;

        goto label01;

     label08:
        $b3 = $r3[$i1];

        $b0 = $r2[$i1];

     label09:
        $b0 = $b3 & $b0;

     label10:
        $r6[$i1] = $b0;

     label11:
        $i1 = $i1 + 1;

        goto label04;

     label12:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        return $r3;

        catch java.lang.Exception from label02 to label03 with label12;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    private static byte[] concatByteArray(byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, varReplacer1029, varReplacer1030, varReplacer1031;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        $r2 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        varReplacer1029 = 0;

        varReplacer1030 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer1029, $r2, varReplacer1029, $i0);

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        varReplacer1031 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer1031, $r2, $i0, $i1);

        return $r2;
    }

    private static byte[] createPadding(byte[])
    {
        byte[] $r0, $r1;
        int $i0, $i1;

        nop;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $i0 = $i0 % 8;

        $i0 = 8 - $i0;

        $r1 = newarray (byte)[$i0];

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        $r0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] concatByteArray(byte[],byte[])>($r0, $r1);

        return $r0;

     label2:
        $r1[$i1] = 32;

        $i1 = $i1 + 1;

        goto label1;
    }

    private static byte[] getCRC32(byte[])
    {
        byte[] $r0, $r1;
        long $l0;
        int varReplacer1043, varReplacer1044, varReplacer1045;

        nop;

        $r0 := @parameter0: byte[];

        $l0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: long calculateCRC32ForByteArray(byte[])>($r0);

        $r0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] longToByteArray(long)>($l0);

        $r1 = newarray (byte)[4];

        varReplacer1043 = 4;

        varReplacer1044 = 0;

        varReplacer1045 = 4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer1043, $r1, varReplacer1044, varReplacer1043);

        $r0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] toLittleEndian(byte[])>($r1);

        return $r0;
    }

    private static byte[] getCRC32(byte[], android.content.Context)
    {
        byte[] $r0, $r2;
        android.content.Context $r1;
        long $l0;
        java.lang.String varReplacer1036;
        int varReplacer1037, varReplacer1038, varReplacer1039;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: android.content.Context;

        $l0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: long calculateCRC32ForByteArray(byte[])>($r0);

        $r0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] longToByteArray(long)>($l0);

        $r2 = newarray (byte)[4];

        varReplacer1037 = 4;

        varReplacer1038 = 0;

        varReplacer1039 = 4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer1037, $r2, varReplacer1038, varReplacer1037);

        $r0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] toLittleEndian(byte[])>($r2);

        varReplacer1036 = "TEST_MODE";

        staticinvoke <ie.elementsoftware.ElementWavePrefs: boolean getBooleanPreference(android.content.Context,java.lang.String)>($r1, varReplacer1036);

        return $r0;
    }

    public static byte[] hexToBytes(java.lang.String)
    {
        java.lang.String $r0;
        char[] $r1;
        byte[] $r2;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        $r2 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] hexToBytes(char[])>($r1);

        return $r2;
    }

    public static byte[] hexToBytes(char[])
    {
        char[] $r0;
        int $i0, $i1, $i2, $i4, varReplacer1473, varReplacer1474;
        byte[] $r1;
        char $c3;
        byte $b5;

        nop;

        $r0 := @parameter0: char[];

        $i0 = lengthof $r0;

        $i0 = $i0 / 2;

        $r1 = newarray (byte)[$i0];

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r1;

     label2:
        $i2 = $i1 * 2;

        $c3 = $r0[$i2];

        varReplacer1473 = 16;

        $i2 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, varReplacer1473);

        $i4 = $i1 * 2;

        $i4 = $i4 + 1;

        $c3 = $r0[$i4];

        varReplacer1474 = 16;

        $i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, varReplacer1474);

        $i2 = $i2 << 4;

        $i2 = $i2 | $i4;

        if $i2 <= 127 goto label3;

        $i2 = $i2 + -256;

     label3:
        $b5 = (byte) $i2;

        $r1[$i1] = $b5;

        $i1 = $i1 + 1;

        goto label1;
    }

    public static byte[] longToByteArray(long)
    {
        long $l0;
        byte[] $r0;
        java.nio.ByteBuffer $r1;

        nop;

        $l0 := @parameter0: long;

        $r0 = newarray (byte)[8];

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r0);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l0);

        return $r0;
    }

    public static void sendMessage(byte, byte[], android.content.Context)
    {
        byte $b0;
        byte[] $r0, $r3, $r4, $r7, $r8;
        android.content.Context $r1;
        java.lang.String $r2, $r6, varReplacer987, varReplacer988, varReplacer992, varReplacer994, varReplacer995, varReplacer996, varReplacer997, varReplacer999, varReplacer1000, varReplacer1003, varReplacer1004;
        boolean $z0;
        java.lang.StringBuilder $r5;
        int $i1, $i2, varReplacer989, varReplacer990, varReplacer991, varReplacer993, varReplacer998, varReplacer1001, varReplacer1002;
        ie.elementsoftware.ElementWaveCommUdp$1 $r9;
        byte[][] $r10;

        nop;

        $b0 := @parameter0: byte;

        $r0 := @parameter1: byte[];

        $r1 := @parameter2: android.content.Context;

        varReplacer994 = "USER_ID";

        $r2 = staticinvoke <ie.elementsoftware.ElementWavePrefs: java.lang.String getPreference(android.content.Context,java.lang.String)>($r1, varReplacer994);

        $r3 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] stringToBytesASCII(java.lang.String)>($r2);

        varReplacer997 = "APP_ID";

        $r2 = staticinvoke <ie.elementsoftware.ElementWavePrefs: java.lang.String getPreference(android.content.Context,java.lang.String)>($r1, varReplacer997);

        $r4 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] stringToBytesASCII(java.lang.String)>($r2);

        $r2 = staticinvoke <com.google.android.gcm.GCMRegistrar: java.lang.String getRegistrationId(android.content.Context)>($r1);

        if $r0 == null goto label3;

        if $r2 != "" goto label2;

        varReplacer1003 = "TEST_MODE";

        $z0 = staticinvoke <ie.elementsoftware.ElementWavePrefs: boolean getBooleanPreference(android.content.Context,java.lang.String)>($r1, varReplacer1003);

        if $z0 == 0 goto label1;

        $r2 = <ie.elementsoftware.ElementWaveCommUdp: java.lang.String TAG>;

        varReplacer987 = "Waiting for token!";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, varReplacer987);

        $r2 = <ie.elementsoftware.ElementWaveCommUdp: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        varReplacer999 = "Message type: ";

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer999);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, $r6);

        $r2 = <ie.elementsoftware.ElementWaveCommUdp: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        varReplacer995 = "Message Body: ";

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer995);

        $r6 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: java.lang.String bytesToHex(byte[])>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, $r6);

     label1:
        varReplacer988 = "QUEUE_COUNT";

        $i1 = staticinvoke <ie.elementsoftware.ElementWavePrefs: int getIntegerPreference(android.content.Context,java.lang.String)>($r1, varReplacer988);

        if $i1 >= 50 goto label3;

        $r5 = new java.lang.StringBuilder;

        varReplacer992 = "QUEUE_TYPE";

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer992);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ie.elementsoftware.ElementWavePrefs: void setPreference(android.content.Context,java.lang.String,int)>($r1, $r2, $b0);

        $r5 = new java.lang.StringBuilder;

        varReplacer996 = "QUEUE_BODY";

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer996);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: java.lang.String bytesToHex(byte[])>($r0);

        staticinvoke <ie.elementsoftware.ElementWavePrefs: void setPreference(android.content.Context,java.lang.String,java.lang.String)>($r1, $r2, $r6);

        $i1 = $i1 + 1;

        varReplacer1004 = "QUEUE_COUNT";

        staticinvoke <ie.elementsoftware.ElementWavePrefs: void setPreference(android.content.Context,java.lang.String,int)>($r1, varReplacer1004, $i1);

        return;

     label2:
        $r2 = staticinvoke <com.google.android.gcm.GCMRegistrar: java.lang.String getRegistrationId(android.content.Context)>($r1);

        $r7 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        $i1 = lengthof $r7;

        $r8 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] buildId(int,byte[])>($i1, $r7);

        $i1 = lengthof $r3;

        $i1 = $i1 + 2;

        $i2 = lengthof $r4;

        $i1 = $i1 + $i2;

        $i2 = lengthof $r8;

        $i1 = $i1 + $i2;

        $i2 = lengthof $r0;

        $i1 = $i1 + $i2;

        $r7 = newarray (byte)[$i1];

        $r7[0] = $b0;

        $r7[1] = 50;

        $i1 = lengthof $r3;

        varReplacer989 = 0;

        varReplacer990 = 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, varReplacer989, $r7, varReplacer990, $i1);

        $i1 = lengthof $r3;

        $i1 = $i1 + 2;

        $i2 = lengthof $r4;

        varReplacer993 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, varReplacer993, $r7, $i1, $i2);

        $i1 = lengthof $r3;

        $i1 = $i1 + 2;

        $i2 = lengthof $r4;

        $i1 = $i1 + $i2;

        $i2 = lengthof $r8;

        varReplacer998 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, varReplacer998, $r7, $i1, $i2);

        $i1 = lengthof $r3;

        $i1 = $i1 + 2;

        $i2 = lengthof $r4;

        $i1 = $i1 + $i2;

        $i2 = lengthof $r8;

        $i1 = $i1 + $i2;

        $i2 = lengthof $r0;

        varReplacer991 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer991, $r7, $i1, $i2);

        $r0 = newarray (byte)[4];

        $r0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] getCRC32(byte[])>($r7);

        $r0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] concatByteArray(byte[],byte[])>($r0, $r7);

        $r7 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] BFencrypt(byte[])>($r0);

        $i1 = lengthof $r7;

        $i1 = $i1 + 2;

        $r0 = newarray (byte)[$i1];

        $r0[0] = $b0;

        $r0[1] = -126;

        $i1 = lengthof $r7;

        varReplacer1001 = 0;

        varReplacer1002 = 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, varReplacer1001, $r0, varReplacer1002, $i1);

        $r7 = newarray (byte)[4];

        $r7 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] getCRC32(byte[],android.content.Context)>($r0, $r1);

        $r0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] concatByteArray(byte[],byte[])>($r7, $r0);

        $r7 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] calculateXORbytes(android.content.Context)>($r1);

        $r0 = staticinvoke <ie.elementsoftware.ElementWaveCommUdp: byte[] concatByteArray(byte[],byte[])>($r7, $r0);

        varReplacer1000 = "TEST_MODE";

        staticinvoke <ie.elementsoftware.ElementWavePrefs: boolean getBooleanPreference(android.content.Context,java.lang.String)>($r1, varReplacer1000);

        $r9 = new ie.elementsoftware.ElementWaveCommUdp$1;

        specialinvoke $r9.<ie.elementsoftware.ElementWaveCommUdp$1: void <init>(android.content.Context,byte)>($r1, $b0);

        $r10 = newarray (byte[])[1];

        $r10[0] = $r0;

        virtualinvoke $r9.<ie.elementsoftware.ElementWaveCommUdp$1: android.os.AsyncTask execute(java.lang.Object[])>($r10);

     label3:
        return;
    }

    public static byte[] stringToBytesASCII(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        int $i0, $i2;
        byte $b1;
        char $c3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + 1;

        $r1 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        $i0 = $i0 + -1;

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        $i0 = 0;

     label1:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 < $i2 goto label2;

        return $r1;

     label2:
        $i2 = $i0 + 1;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $b1 = (byte) $c3;

        $r1[$i2] = $b1;

        $i0 = $i0 + 1;

        goto label1;
    }

    public static java.lang.String toBinary(byte[])
    {
        byte[] $r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1;
        java.lang.String $r2;
        byte $b2;
        char $c3;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.StringBuilder;

        $i1 = lengthof $r0;

        $i1 = $i1 * 8;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        $i1 = 0;

     label1:
        $i0 = lengthof $r0;

        $i0 = $i0 * 8;

        if $i1 < $i0 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label2:
        $i0 = $i1 / 8;

        $b2 = $r0[$i0];

        $i0 = $i1 % 8;

        $i0 = $b2 << $i0;

        $i0 = $i0 & 128;

        if $i0 != 0 goto label4;

        $c3 = 48;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $i1 = $i1 + 1;

        goto label1;

     label4:
        $c3 = 49;

        goto label3;
    }

    private static byte[] toLittleEndian(byte[])
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2;
        byte $b3;

        nop;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $r1 = newarray (byte)[$i0];

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return $r1;

     label2:
        $i2 = $i1 + 1;

        $i2 = $i0 - $i2;

        $b3 = $r0[$i2];

        $r1[$i1] = $b3;

        $i1 = $i1 + 1;

        goto label1;
    }
}
