public class com.gemalto.ezio.central.extras.HttpsTrustManager extends java.lang.Object implements javax.net.ssl.X509TrustManager
{
    private static final java.security.cert.X509Certificate[] _AcceptedIssuers;
    private static javax.net.ssl.TrustManager[] trustManagers;

    static void <clinit>()
    {
        java.security.cert.X509Certificate[] $r0;

        nop;

        $r0 = newarray (java.security.cert.X509Certificate)[0];

        <com.gemalto.ezio.central.extras.HttpsTrustManager: java.security.cert.X509Certificate[] _AcceptedIssuers> = $r0;

        return;
    }

    public void <init>()
    {
        com.gemalto.ezio.central.extras.HttpsTrustManager $r0;

        nop;

        $r0 := @this: com.gemalto.ezio.central.extras.HttpsTrustManager;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void allowAllSSL()
    {
        javax.net.ssl.SSLContext $r0, $r3;
        javax.net.ssl.TrustManager[] $r1;
        java.lang.Object[] $r2;
        java.security.SecureRandom $r4, r10;
        javax.net.ssl.SSLSocketFactory $r5;
        java.lang.Throwable $r6, $r7;
        com.gemalto.ezio.central.extras.HttpsTrustManager$1 r8;
        com.gemalto.ezio.central.extras.HttpsTrustManager r9;
        java.security.NoSuchAlgorithmException r11;
        java.security.KeyManagementException r12;
        java.lang.String varReplacer666;
        null_type varReplacer667;

        nop;

        r8 = new com.gemalto.ezio.central.extras.HttpsTrustManager$1;

        specialinvoke r8.<com.gemalto.ezio.central.extras.HttpsTrustManager$1: void <init>()>();

        staticinvoke <javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)>(r8);

        $r0 = null;

        $r1 = <com.gemalto.ezio.central.extras.HttpsTrustManager: javax.net.ssl.TrustManager[] trustManagers>;

        if $r1 != null goto label1;

        $r2 = newarray (javax.net.ssl.TrustManager)[1];

        r9 = new com.gemalto.ezio.central.extras.HttpsTrustManager;

        specialinvoke r9.<com.gemalto.ezio.central.extras.HttpsTrustManager: void <init>()>();

        $r2[0] = r9;

        $r1 = (javax.net.ssl.TrustManager[]) $r2;

        <com.gemalto.ezio.central.extras.HttpsTrustManager: javax.net.ssl.TrustManager[] trustManagers> = $r1;

     label1:
        varReplacer666 = "TLS";

        $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer666);

     label2:
        $r0 = $r3;

        $r1 = <com.gemalto.ezio.central.extras.HttpsTrustManager: javax.net.ssl.TrustManager[] trustManagers>;

        r10 = new java.security.SecureRandom;

        $r4 = r10;

     label3:
        specialinvoke r10.<java.security.SecureRandom: void <init>()>();

        varReplacer667 = null;

        virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer667, $r1, $r4);

     label4:
        $r5 = virtualinvoke $r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        staticinvoke <javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>($r5);

        return;

     label5:
        $r6 := @caughtexception;

        r11 = (java.security.NoSuchAlgorithmException) $r6;

        virtualinvoke r11.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label4;

     label6:
        $r7 := @caughtexception;

        r12 = (java.security.KeyManagementException) $r7;

        virtualinvoke r12.<java.security.KeyManagementException: void printStackTrace()>();

        goto label4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch java.security.KeyManagementException from label1 to label2 with label6;
        catch java.security.KeyManagementException from label3 to label4 with label6;
    }

    public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        com.gemalto.ezio.central.extras.HttpsTrustManager $r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2;

        $r0 := @this: com.gemalto.ezio.central.extras.HttpsTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        return;
    }

    public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        com.gemalto.ezio.central.extras.HttpsTrustManager $r0;
        java.security.cert.X509Certificate[] $r1;
        java.lang.String $r2;

        $r0 := @this: com.gemalto.ezio.central.extras.HttpsTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        $r2 := @parameter1: java.lang.String;

        return;
    }

    public java.security.cert.X509Certificate[] getAcceptedIssuers()
    {
        com.gemalto.ezio.central.extras.HttpsTrustManager $r0;
        java.security.cert.X509Certificate[] r1;

        $r0 := @this: com.gemalto.ezio.central.extras.HttpsTrustManager;

        r1 = <com.gemalto.ezio.central.extras.HttpsTrustManager: java.security.cert.X509Certificate[] _AcceptedIssuers>;

        return r1;
    }

    public boolean isClientTrusted(java.security.cert.X509Certificate[])
    {
        com.gemalto.ezio.central.extras.HttpsTrustManager $r0;
        java.security.cert.X509Certificate[] $r1;

        $r0 := @this: com.gemalto.ezio.central.extras.HttpsTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        return 1;
    }

    public boolean isServerTrusted(java.security.cert.X509Certificate[])
    {
        com.gemalto.ezio.central.extras.HttpsTrustManager $r0;
        java.security.cert.X509Certificate[] $r1;

        $r0 := @this: com.gemalto.ezio.central.extras.HttpsTrustManager;

        $r1 := @parameter0: java.security.cert.X509Certificate[];

        return 1;
    }
}
