class com.hpn.sudoku.andokupuzzle.free.BackupUtil extends android.app.Activity
{
    private static final java.lang.String DATABASE_BACKUP_FILE;
    private static final java.lang.String DATABASE_BACKUP_FILE_SIGNATURE;
    private static final java.lang.String DATABASE_UPDATE_FILE;
    private static final java.lang.String MAC_NAME;
    private static final java.lang.String SD_CARD_BACKUP_DIR;
    private static final java.lang.String TAG;

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        nop;

        $r1 = class "Lcom/hpn/sudoku/andokupuzzle/free/BackupUtil;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG> = $r0;

        return;
    }

    private void <init>()
    {
        com.hpn.sudoku.andokupuzzle.free.BackupUtil $r0;

        $r0 := @this: com.hpn.sudoku.andokupuzzle.free.BackupUtil;

        specialinvoke $r0.<android.app.Activity: void <init>()>();

        return;
    }

    private static void copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;
        byte[] $r2;
        int $i0, varReplacer792;
        java.lang.Throwable $r3, $r4, $r5;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = newarray (byte)[4096];

     label01:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2);

     label02:
        if $i0 != -1 goto label06;

     label03:
        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

     label04:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label05:
        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;

     label06:
        varReplacer792 = 0;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, varReplacer792, $i0);

     label07:
        goto label01;

     label08:
        $r3 := @caughtexception;

     label09:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label10:
        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        throw $r3;

     label11:
        $r4 := @caughtexception;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        throw $r4;

     label12:
        $r5 := @caughtexception;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    private static boolean copyFile(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        java.lang.Throwable $r2;
        java.io.FileInputStream $r3;
        java.io.FileOutputStream $r4;
        java.lang.String $r5, $r7, varReplacer777, varReplacer778;
        java.lang.StringBuilder $r6;
        int varReplacer775, varReplacer776;

        nop;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r3 = new java.io.FileInputStream;

     label1:
        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label2:
        $r4 = new java.io.FileOutputStream;

     label3:
        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: void copy(java.io.InputStream,java.io.OutputStream)>($r3, $r4);

     label4:
        varReplacer775 = 1;

        return varReplacer775;

     label5:
        $r2 := @caughtexception;

        $r5 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        varReplacer777 = "Could not copy ";

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer777);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        varReplacer778 = " to ";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer778);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, $r7, $r2);

        varReplacer776 = 0;

        return varReplacer776;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    private static boolean createDir(java.io.File)
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.String $r1, $r3, varReplacer785;
        java.lang.StringBuilder $r2;
        int varReplacer786;

        nop;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        varReplacer786 = 1;

        return varReplacer786;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label2;

        $r1 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        varReplacer785 = "Could not create directory ";

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer785);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r1, $r3);

     label2:
        return $z0;
    }

    private static boolean createSignature(java.lang.String, java.io.File, java.io.File)
    {
        java.lang.String $r0, varReplacer788, varReplacer790;
        java.io.File $r1, $r2;
        java.io.FileOutputStream $r3;
        byte[] $r4;
        java.lang.Throwable $r5, $r6;
        int varReplacer787, varReplacer789, varReplacer791;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.io.File;

     label1:
        $r4 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: byte[] load(java.io.File)>($r1);

        $r4 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: byte[] sign(java.lang.String,byte[])>($r0, $r4);

     label2:
        $r3 = new java.io.FileOutputStream;

     label3:
        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r4);

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label4:
        varReplacer791 = 1;

        return varReplacer791;

     label5:
        $r5 := @caughtexception;

        $r0 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        varReplacer790 = "Could not sign database";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r0, varReplacer790, $r5);

        varReplacer787 = 0;

        return varReplacer787;

     label6:
        $r6 := @caughtexception;

        $r0 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        varReplacer788 = "Could not sign database";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r0, varReplacer788, $r6);

        varReplacer789 = 0;

        return varReplacer789;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.security.GeneralSecurityException from label1 to label2 with label6;
        catch java.security.GeneralSecurityException from label3 to label4 with label6;
    }

    private static byte[] load(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.ByteArrayOutputStream $r1;
        byte[] $r2;
        java.io.FileInputStream $r3;

        nop;

        $r0 := @parameter0: java.io.File;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: void copy(java.io.InputStream,java.io.OutputStream)>($r3, $r1);

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static void restoreOrBackupDatabase(android.content.Context)
    {
        android.content.Context $r0;
        java.io.File $r1, $r2, $r3, $r4, $r7;
        java.lang.String $r5, $r6, $r9, varReplacer748, varReplacer749, varReplacer750, varReplacer751, varReplacer752, varReplacer754, varReplacer755, varReplacer756, varReplacer757, varReplacer758, varReplacer759, varReplacer760, varReplacer761, varReplacer762;
        boolean $z0;
        java.lang.StringBuilder $r8;
        int varReplacer753;

        nop;

        $r0 := @parameter0: android.content.Context;

        $r5 = "mounted";

        $r6 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        $r5 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        varReplacer748 = "Cannot restore or back up database; external storage not mounted";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, varReplacer748);

        return;

     label1:
        varReplacer761 = "save_games.db";

        $r7 = virtualinvoke $r0.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>(varReplacer761);

        $r2 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        $r1 = new java.io.File;

        varReplacer762 = "SudokuPuzzles";

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, varReplacer762);

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label2;

        $r5 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        varReplacer750 = "Could not create root directory \"SudokuPuzzles\" on external storage";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, varReplacer750);

        return;

     label2:
        varReplacer753 = 2131165238;

        $r5 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(varReplacer753);

        $r2 = new java.io.File;

        varReplacer749 = "database.bak";

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, varReplacer749);

        $r3 = new java.io.File;

        varReplacer759 = "database.bak.sig";

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, varReplacer759);

        $r4 = new java.io.File;

        varReplacer754 = "database.update";

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, varReplacer754);

        $z0 = virtualinvoke $r4.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label5;

        $r1 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $z0 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: boolean createDir(java.io.File)>($r1);

        if $z0 == 0 goto label4;

        $r6 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        varReplacer755 = "Updating database from ";

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer755);

        $r9 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r6, $r9);

        $z0 = virtualinvoke $r7.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label3;

        $r6 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        varReplacer760 = "Overwriting existing database!";

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r6, varReplacer760);

     label3:
        $z0 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: boolean copyFile(java.io.File,java.io.File)>($r4, $r7);

        if $z0 == 0 goto label4;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

     label4:
        $z0 = virtualinvoke $r7.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label7;

        $r6 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        varReplacer758 = "Writing database signature to ";

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer758);

        $r9 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r6, $r9);

        $z0 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: boolean createSignature(java.lang.String,java.io.File,java.io.File)>($r5, $r7, $r3);

        if $z0 == 0 goto label7;

        $r5 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        varReplacer757 = "Backing up database to ";

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer757);

        $r6 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r5, $r6);

        staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: boolean copyFile(java.io.File,java.io.File)>($r7, $r2);

        return;

     label5:
        $z0 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r7.<java.io.File: boolean isFile()>();

        if $z0 != 0 goto label4;

        $r1 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        $z0 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: boolean createDir(java.io.File)>($r1);

        if $z0 == 0 goto label7;

        $r6 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        varReplacer756 = "Verifying database signature ";

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer756);

        $r9 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r6, $r9);

        $z0 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: boolean verifySignature(java.lang.String,java.io.File,java.io.File)>($r5, $r2, $r3);

        if $z0 == 0 goto label6;

        $r5 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        varReplacer751 = "Restoring database from backup ";

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer751);

        $r6 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r5, $r6);

        staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: boolean copyFile(java.io.File,java.io.File)>($r2, $r7);

        return;

     label6:
        $r5 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        varReplacer752 = "Signature broken; ignoring database backup!";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, varReplacer752);

     label7:
        return;
    }

    private static byte[] sign(java.lang.String, byte[]) throws java.security.GeneralSecurityException
    {
        java.lang.String $r0, varReplacer793, varReplacer794;
        byte[] $r1, $r3;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.Mac $r4;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r3 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: byte[] utf8(java.lang.String)>($r0);

        $r2 = new javax.crypto.spec.SecretKeySpec;

        varReplacer794 = "HmacSHA1";

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer794);

        varReplacer793 = "HmacSHA1";

        $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer793);

        virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>($r2);

        $r1 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r1);

        return $r1;
    }

    private static byte[] utf8(java.lang.String)
    {
        java.lang.String $r0, varReplacer795;
        java.lang.Throwable $r1;
        byte[] $r2;
        java.lang.IllegalStateException $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer795 = "utf-8";

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer795);

     label2:
        return $r2;

     label3:
        $r1 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r1);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private static boolean verifySignature(java.lang.String, java.io.File, java.io.File)
    {
        java.lang.String $r0, varReplacer779, varReplacer781, varReplacer783;
        java.io.File $r1, $r2;
        boolean $z0;
        byte[] $r3, $r4;
        java.lang.Throwable $r5, $r6;
        int varReplacer780, varReplacer782, varReplacer784;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.io.File;

        $z0 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z0 != 0 goto label1;

        $r0 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        varReplacer783 = "Database backup not signed!";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r0, varReplacer783);

        varReplacer784 = 1;

        return varReplacer784;

     label1:
        $r3 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: byte[] load(java.io.File)>($r1);

        $r3 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: byte[] sign(java.lang.String,byte[])>($r0, $r3);

        $r4 = staticinvoke <com.hpn.sudoku.andokupuzzle.free.BackupUtil: byte[] load(java.io.File)>($r2);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r4);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r0 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        varReplacer779 = "Could not verify database signature";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r0, varReplacer779, $r5);

        varReplacer782 = 0;

        return varReplacer782;

     label4:
        $r6 := @caughtexception;

        $r0 = <com.hpn.sudoku.andokupuzzle.free.BackupUtil: java.lang.String TAG>;

        varReplacer781 = "Could not verify database signature";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r0, varReplacer781, $r6);

        varReplacer780 = 0;

        return varReplacer780;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.security.GeneralSecurityException from label1 to label2 with label4;
    }
}
