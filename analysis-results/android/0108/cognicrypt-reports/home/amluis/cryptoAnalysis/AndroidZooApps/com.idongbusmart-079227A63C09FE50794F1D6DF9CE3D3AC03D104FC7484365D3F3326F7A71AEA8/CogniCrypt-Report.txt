Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r0)
		Method: <com.softsecurity.transkey.b.b: byte[] k(java.lang.String,byte[],byte[],int,int)>
		SHA-256: 81a2753a8fc39312d9a64b74b28a0649bcf46619da6761f257e09df6bd21d629
		Secure: false
	Object:
		Variable: $r12
		Type: javax.net.ssl.SSLContext
		Statement: $r12 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer14384)
		Method: <com.lumensoft.qrrelay.QRRelay: java.lang.String a(java.lang.String,java.util.HashMap,java.lang.String,java.lang.String)>
		SHA-256: 578e1177c9fca087ddc5f669e9ed193095446a8229974b850dad2334068dbc81
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r6, varReplacer2745)
		Method: <m.client.android.library.core.utils.AESUtil: void crypt(int,java.io.File,java.io.File)>
		SHA-256: 14312d44dfe69bedc26d807da2a3d0bc8c07d847f0e319bf8e1e5c16ec8baba
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bitdefender.antimalware.Updater: void I(java.lang.String,boolean)>
		SHA-256: ff2e9a9ab76a5d610604f29769367e1f0e3be9fa3ce046a265c87decc9663d2e
		Secure: true
	Object:
		Variable: varReplacer2520
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer2520)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: a7dd57c5b5e3737fcada47989c1f780f528f429272b8c368ca4ac6f739ddde06
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.SecureRandom
		Statement: $r11 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r6)
		Method: <com.softsecurity.transkey.TransKeyView: void setIntentData(android.content.Intent)>
		SHA-256: ba03d9964f16ea3fac63ae366c88663ffc9f221e3d0257c0f5d7ab05c238bfe7
		Secure: true
	Object:
		Variable: $r7
		Type: javax.net.ssl.KeyManagerFactory
		Statement: $r7 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r5)
		Method: <com.callgate.launcher.visualars.n: javax.net.ssl.SSLSocketFactory b()>
		SHA-256: effa1507147cf36182a85c958230a7cc620d7f4829c7191b3b4d3fea51802ec9
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer2516, varReplacer2517)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: 355dbd64a4fbec37595044a90f159cd6bacb75461defde11fdb1aae23e9ccc6b
		Secure: false
	Object:
		Variable: $r20
		Type: javax.crypto.Cipher
		Statement: $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r8)
		Method: <com.bitdefender.antimalware.Updater: boolean I()>
		SHA-256: ea27a3bb79f905753e304c8dcd28ad2d63750015bf75e8f6f22ba793e01c11a3
		Secure: false
	Object:
		Variable: $r11
		Type: byte[]
		Statement: $r11 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bitdefender.antimalware.UpdatePatchApplicator: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)>
		SHA-256: 86feef04828986a5200d5d2906ac3be061b31907eedf078bdf490a6cc50bdfc7
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String encrypt(java.lang.String)>
		SHA-256: ddf04eb7b8591cd40da499cd889bab86baca065b6e1744693474e2f48d987000
		Secure: false
	Object:
		Variable: $r9
		Type: java.security.MessageDigest
		Statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8)
		Method: <com.bitdefender.antimalware.UpdatePatchApplicator: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)>
		SHA-256: d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String anyValidIdentifierName(java.lang.String)>
		SHA-256: 2474807578ecc7c2004f6ddd2ff3b75987a59449b77e9b005bf8ef69e583eb79
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r2, varReplacer2508)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String encrypt(java.lang.String)>
		SHA-256: 8354307e74d9796708591676b38cc888353d20dc21ee15cae796b18c50468f0b
		Secure: false
	Object:
		Variable: $r1
		Type: javax.net.ssl.SSLContext
		Statement: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r5)
		Method: <com.callgate.launcher.visualars.n: javax.net.ssl.SSLSocketFactory b()>
		SHA-256: 9bd06a307c023d166375f42b2afe47214f0295944de30c7e1268a6bbd2b08065
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r3)
		Method: <com.softsecurity.transkey.TransKeyView: java.lang.String EncryptSecureKey(java.lang.String,byte[])>
		SHA-256: 8a1ad795f193ad41fff0f02ee14f4d86b18b719e260a8161100fd805e539d6f0
		Secure: false
	Object:
		Variable: varReplacer2526
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer2526)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: 1cdef061dbb317fe97d0f9a7a96de2ddfe501d138711091acada94b397f622cf
		Secure: false
	Object:
		Variable: $r6
		Type: javax.net.ssl.SSLContext
		Statement: $r6 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r1)
		Method: <com.bitdefender.antimalware.Updater: void anyValidIdentifierName(java.lang.String,java.io.OutputStream,boolean)>
		SHA-256: c0249843b1cc99c030409275fa08a70ebe7583584061050d15b65a90b07e536d
		Secure: false
	Object:
		Variable: $r27
		Type: byte[]
		Statement: $r27 = virtualinvoke $r25.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bitdefender.antimalware.Updater: void anyValidIdentifierName(java.lang.String,java.io.OutputStream,boolean)>
		SHA-256: 4344d8626abe3048caff23accf12ecd39ecefb7effbddc859523f961bdf93c36
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: f5a958dbc34099fe876b1b753bac92f6df190694d66babab1939774bcf3869f4
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest(byte[])>($r5)
		Method: <com.bitdefender.antimalware.Updater: void I(java.lang.String,boolean)>
		SHA-256: feb06c68fedfc5f3c1e91f140c604108ff311dd3b96ece89fbfda30dea04c8ba
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r7 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest(byte[])>($r5)
		Method: <com.bitdefender.antimalware.Updater: void I(java.lang.String,boolean)>
		SHA-256: 80f76de1489c1fb4e0e4b1105063e97ab3d1bd20ff399fa68d61d8430ddfb42e
		Secure: true
	Object:
		Variable: $r0
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r0)
		Method: <com.softsecurity.transkey.b.b: byte[] k(java.lang.String,byte[],byte[],int,int)>
		SHA-256: e0b367d403cca227e08a9fbe4de4de6562970a38e0b33ff41686a39b2c7864be
		Secure: false
	Object:
		Variable: $r17
		Type: byte[]
		Statement: $r17 = virtualinvoke $r20.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r17)
		Method: <com.bitdefender.antimalware.Updater: boolean I()>
		SHA-256: bbe737f2389650b7e2c0c0d21948831c8767653a10e2a1dae4390f4241c4308b
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bitdefender.antimalware.UpdatePatchApplicator: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)>
		SHA-256: a4f206e21dd7af454f1e6e3919cda81359ffadeef9a5ef22ae8f2f3ef903e67e
		Secure: true
	Object:
		Variable: $r13
		Type: byte[]
		Statement: $r13 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r3, varReplacer2744, $i0)
		Method: <m.client.android.library.core.utils.AESUtil: void crypt(int,java.io.File,java.io.File)>
		SHA-256: 1d419467300fa3ec36a8c88b6e5f00069438c20861d7ef9508a380ffec13c43f
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: $r4 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r3)
		Method: <com.softsecurity.transkey.TransKeyCipher: void generateSecureKey()>
		SHA-256: 1213fed018ac628b7eccb245067487aa19c81713c13b6cce857bf1c2fc51f7bb
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0)
		Method: <com.hoonsolution.hsjpki.toolkit.HSJUtil: byte[] getRandom(int)>
		SHA-256: d88173b0ff785e9d9a64555828c1eaa2e866bb85e28ae5757d1e87a1466ced37
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.softsecurity.transkey.TransKeyView: java.lang.String EncryptSecureKey(java.lang.String,byte[])>
		SHA-256: 28422fefcdb06276eb6932d5cd476b0c8eeac23134627b7fe244761ea809f90a
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.Cipher
		Statement: $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r4, varReplacer3082)
		Method: <m.client.android.library.core.utils.AESUtil: byte[] cryptToBytes(int,java.io.InputStream)>
		SHA-256: 2cf136800cf13dfd946cc6e9dd32bfd1a881956e6cc343738d9c12becbaa3024
		Secure: false
	Object:
		Variable: $r12
		Type: byte[]
		Statement: virtualinvoke $r11.<java.security.SecureRandom: void nextBytes(byte[])>($r12)
		Method: <com.softsecurity.transkey.TransKeyView: void setIntentData(android.content.Intent)>
		SHA-256: 146c51930857392d8b71c69d1567da9d04a63533d70bce3c35d1a70da189b382
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: virtualinvoke $r0.<javax.crypto.Mac: void doFinal(byte[],int)>($r7, varReplacer5782)
		Method: <com.softsecurity.transkey.b.b: void k(javax.crypto.Mac,byte[],int,byte[],int)>
		SHA-256: ecd315333768d3279288a894fd59e3c2d40e9d789d2179f500500de6478dd985
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer2526)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: 11b51c2fae598ce36df38d58e9545dab6b08782b1068a743601ba495e1163f05
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String I(java.lang.String)>
		SHA-256: 6654894e9b4bf4fac3060300b5052745687a89347b52e95e013848af6ed1181b
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: f5a958dbc34099fe876b1b753bac92f6df190694d66babab1939774bcf3869f4
		Secure: false
	Object:
		Variable: r34
		Type: java.security.SecureRandom
		Statement: specialinvoke r34.<java.security.SecureRandom: void <init>()>()
		Method: <com.bitdefender.antimalware.Updater: void anyValidIdentifierName(java.lang.String,java.io.OutputStream,boolean)>
		SHA-256: 3888fb0c7993686f0afb8246950549507ac421680b221b2bc544ceee1c844930
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer2533)
		Method: <m.client.android.library.core.utils.AESUtil: java.security.Key generateKey()>
		SHA-256: 3944fee0232a5f4242cb2133ed53248072ba7280f725df72e1f25e24749c2420
		Secure: false
	Object:
		Variable: varReplacer2533
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer2533)
		Method: <m.client.android.library.core.utils.AESUtil: java.security.Key generateKey()>
		SHA-256: 2048ef6f74a96a97d7067a0c28e436a861b743329572606e0abc91f8144f2b60
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: $r0 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer10203)
		Method: <com.hoonsolution.hsjpki.common.util.p: byte[] 'if'(int)>
		SHA-256: f0d201482d3884de6ca0f79a4d3cacfe2dec5b7c2997b148d3776b1232709180
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.MessageDigest
		Statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8)
		Method: <com.bitdefender.antimalware.UpdatePatchApplicator: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)>
		SHA-256: d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<java.security.SecureRandom: byte[] generateSeed(int)>(varReplacer5675)
		Method: <com.softsecurity.transkey.TransKeyCipher: void generateSecureKey()>
		SHA-256: 2ce34cc071607dd6ee4dba75e235391d330232959ae55dfa9f1c8ba13dabd9e6
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal()>()
		Method: <m.client.android.library.core.utils.AESUtil: byte[] cryptToBytes(int,java.io.InputStream)>
		SHA-256: 42dc15d52509429553b59ce898007be14edbaf66216ce1c01c69e03f92d773e6
		Secure: false
	Object:
		Variable: $r14
		Type: javax.net.ssl.KeyManager[]
		Statement: $r14 = virtualinvoke $r7.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>()
		Method: <com.callgate.launcher.visualars.n: javax.net.ssl.SSLSocketFactory b()>
		SHA-256: 879df5df8641fdf2d910743bb5b308c55e9e4bb55e9d1ee8e215f8f1b64ba71d
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.KeyStore
		Statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer14361)
		Method: <com.lumensoft.qrrelay.QRRelay: java.lang.String a(java.lang.String,java.util.HashMap,java.lang.String,java.lang.String)>
		SHA-256: ff12cf87e55d5fd519b9bd9d12215d5208b9a5ccb65515b62567b4dcc0111c74
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.rimesoft.app.security.aaplus.message.RequestProcess: java.lang.String a(byte[])>
		SHA-256: 2f7ea5d308dcd54c716917dbf91457368859f55acdb69a8ce5cf38e89c2ff05b
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer8787)
		Method: <com.hoonsolution.hsjpki.toolkit.HSJUtil: byte[] getRandom(int)>
		SHA-256: 91a4f544e0023264952d52367658a8f503ad1cccd192a24ecfa68ad328d9b3ee
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r0)
		Method: <m.client.android.library.core.utils.MD5Util: java.lang.String getMD5Hash(byte[])>
		SHA-256: 8b4e0acfc6957cc0929520b2e1a18db8423fc4e0188da37da1bcc1c0dcaf1e93
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer2522, varReplacer2523)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: e0457ec2b223eb9d56d79d097820b8e1ddc5aacecaf12efad01b2b6a57fa8bee
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r13 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r3, varReplacer2744, $i0)
		Method: <m.client.android.library.core.utils.AESUtil: void crypt(int,java.io.File,java.io.File)>
		SHA-256: ce43613a233813929b0c28717e64009e2e8611c8bbffbc21dc8674361bf097b6
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.rimesoft.aaplus.android.client.fࢱІʢֶ݊רऌӣӐ৉ԄľূĮߝӡԆĂɀ॥߭ࠣη̝ख़ƴͧ߀ġĝাنࣖ˄गڽϖ࣑ǚࡨУӤࡆƇśއ֍ԹލҼեƤँॉܻļ˨ࠈ৴ࡦռࠧѳݍٔƹȁޝӇВƋ܄ࡉ߇ĝŇҿछ؄ξϞթǟԊćρȲșɹঞ͓ġ֯ʹࢶࡥӭʿय़וŇ५ݢƕɎ۔ࣝģȂ࠾ąचշړ࡜Ӥ঍ےϰۑ̉ƈࢉȟӳԳ͖ښ҉Ҙޱٲ؎Ґۖডֹİ৚ũܐǨȚҍࠨ͂жͤطܘܖӏՎŠࠈُࠚҵœ՝זࡊՁױӸ˝ĠݩߖکّԷԦ٪ށ०࣮ݝ߳ޔয়৒΄ণό՟ࣲࢉܬֲॅ͡ѿݢʨ֩č֑ݺǱҕΕܘࣵ޼˖ئࢡȧΖ࡬ۘקνΗݟ֑Ňķɣߋয˰࢞ȸȔȜٝफ़Μյज़؏ঌۃϯ֢޴গٖԥࡡ׫ࠁͦࡗƠɧɺߪȿঐҙŹ޿Ҵ՛েǁॅࡅʪࢊӡڲʀǙҞ߲݁ˑѓѐϐό̯জ০ۘओࡍȻފņөɞݤڏݕڳࠡড়by_neolook: boolean a࠸ٿˮ܍ǂжФǦѠױ׉ࣧȮठ৹ȊƦʏִ঴ӑڴӠؕȵݮर܈ŝৄ؊ࡰঅʐخ˹ͯॴԽӲহѲআմ֬Ǜϧࠇͮ۟ߠࣧƫ࢞զӶʯۦϣؕड़И঱ײєĢ޶Ƒ֦˄ۏƎĶؽࡩ॑ӕ҃٬۶࡙ڗْ΋΅ȩʳसʷřӁءڬऌǅƬࡃӟم঱ࠖ࠲͢ĮϚάࠊȬƋ৔ࡒऊğ९ܛŋࡃʯ̈́ϵसڋ׺ॽץ࣑ҶࣄؘˍԝڏچЄҪ̗࢞ϞԴ՘تࡗًࢇϣओƓձ֣ঔԠ࣭ը˫ψڝֻͧםҐҥǜ࠶־эفԧەϳڐস৒ԯࣀنէ̾ĥθݘӡͣ̑ʌޏঋֵǫʋ؜ौլǄĈࠨܘԸܨͶקǅ̪ࠣ৞əЩǏʠϺݡǗǇه֚Ϊ̉ŨڡǕ֞ؗ৆ǯࠢॶঙࢽЛɭӱҧּয়װٿԓԊًŰ޲ۅȮҤࣥͪȉࢎݬɁ߅؉ێηǉࢢࠡӁߤࣘށś؂ԛݚәࡆȏࡺԱۂБাȋ߂ࣝՏǉৄə̻࠴थёē΋দࢂ֫ѭȳ͇ċӹӗˈ֭۩ѡϷԹएİеފؠԧے޳ηथ৴थΎڈۅЁȣܭࠏ̜ɷऌřӃौљլąӇآ̀Պϖ˧ࣶ৤ڱِāƴǀ͗ӆ০΃ࡔܰঈ࠿ϠģĺࢊখࣔީȠǷ࡟دςя˲ࠄֻǋर׋Ҽĕ߁ʇࠇҞǲޠপͳࢸȻࢢठߢוѨळՑ،ݦȽűɟৠࡈƩɩەࢡɢރँޤɠФм˺ࢫ঱জی؋ُ͛տ݈߂ȃŵ΋ࢇयځ˅ऍ͙ҘǉޓסПܜঈin_201210(java.lang.String,java.lang.String)>
		SHA-256: cf27098c66fee1313e543b215c7518a0ec9da49e7f52a1252ee852b7acca0f67
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r2, varReplacer3083, $i0)
		Method: <m.client.android.library.core.utils.AESUtil: byte[] cryptToBytes(int,java.io.InputStream)>
		SHA-256: ac3d073a4fbd0d88a727288dcffa83864f3bcfc455ff101176820e5b1795275d
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer2520)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String decrypt(java.lang.String)>
		SHA-256: 602c3735b2b62d6df8f2766c8123804fb85ec335b846985df4734b515d745678
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer10357)
		Method: <com.rimesoft.app.security.aaplus.message.RequestProcess: java.lang.String a(byte[])>
		SHA-256: 368b5b1399d3b55327d7e2ec809362c99073314e34f411e96f1ff691065da041
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)
		Method: <m.client.android.library.core.utils.AESUtil: java.lang.String encrypt(java.lang.String)>
		SHA-256: ddf04eb7b8591cd40da499cd889bab86baca065b6e1744693474e2f48d987000
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal()>()
		Method: <m.client.android.library.core.utils.AESUtil: void crypt(int,java.io.File,java.io.File)>
		SHA-256: 8afb4baab80d511f226e1cb8eec43b044ea621a66f8c9345818e9a3fc8f72514
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r8 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r2, varReplacer3083, $i0)
		Method: <m.client.android.library.core.utils.AESUtil: byte[] cryptToBytes(int,java.io.InputStream)>
		SHA-256: 6387bac87880459dd58060832ffb4364f10e2765effb1279d9a5e0fd8e69aa64
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.MessageDigest
		Statement: $r8 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String anyValidIdentifierName(java.lang.String)>
		SHA-256: 4db10eadef9423bf74d083f2717fd8fa4d4a2674269c15ca5e74e0f475b924cb
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.KeyStore
		Statement: $r6 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r5)
		Method: <com.callgate.launcher.visualars.n: javax.net.ssl.SSLSocketFactory b()>
		SHA-256: 293a851db36e6c63b740b6c0c94d1ef796c8fe1ac73236cfc616cf0a23d10562
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: virtualinvoke $r0.<java.security.SecureRandom: void nextBytes(byte[])>($r1)
		Method: <com.hoonsolution.hsjpki.common.util.p: byte[] 'if'(int)>
		SHA-256: c10c7762ed013d1cf12101c339af31014abc5f1ede8f25de7b80507c1bf110f
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Mac
		Statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r0)
		Method: <com.softsecurity.transkey.b.b: byte[] k(java.lang.String,byte[],byte[],int,int)>
		SHA-256: 198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: $r5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r4)
		Method: <com.softsecurity.transkey.KeypadView: void k(android.content.Context)>
		SHA-256: 93cd2edcb655d2aaec112b98bec37b9c68cbd1d6c054399305118a86f3060bdb
		Secure: true
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r3)
		Method: <com.callgate.launcher.fcc.w: void d()>
		SHA-256: 1438c7f62a995652e6c9c3be366f7ab25b1645e9a546d62de21ac874bdf38bda
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8866)
		Method: <com.rimesoft.aaplus.android.client.fࢱІʢֶ݊רऌӣӐ৉ԄľূĮߝӡԆĂɀ॥߭ࠣη̝ख़ƴͧ߀ġĝাنࣖ˄गڽϖ࣑ǚࡨУӤࡆƇśއ֍ԹލҼեƤँॉܻļ˨ࠈ৴ࡦռࠧѳݍٔƹȁޝӇВƋ܄ࡉ߇ĝŇҿछ؄ξϞթǟԊćρȲșɹঞ͓ġ֯ʹࢶࡥӭʿय़וŇ५ݢƕɎ۔ࣝģȂ࠾ąचշړ࡜Ӥ঍ےϰۑ̉ƈࢉȟӳԳ͖ښ҉Ҙޱٲ؎Ґۖডֹİ৚ũܐǨȚҍࠨ͂жͤطܘܖӏՎŠࠈُࠚҵœ՝זࡊՁױӸ˝ĠݩߖکّԷԦ٪ށ०࣮ݝ߳ޔয়৒΄ণό՟ࣲࢉܬֲॅ͡ѿݢʨ֩č֑ݺǱҕΕܘࣵ޼˖ئࢡȧΖ࡬ۘקνΗݟ֑Ňķɣߋয˰࢞ȸȔȜٝफ़Μյज़؏ঌۃϯ֢޴গٖԥࡡ׫ࠁͦࡗƠɧɺߪȿঐҙŹ޿Ҵ՛েǁॅࡅʪࢊӡڲʀǙҞ߲݁ˑѓѐϐό̯জ০ۘओࡍȻފņөɞݤڏݕڳࠡড়by_neolook: boolean a࠸ٿˮ܍ǂжФǦѠױ׉ࣧȮठ৹ȊƦʏִ঴ӑڴӠؕȵݮर܈ŝৄ؊ࡰঅʐخ˹ͯॴԽӲহѲআմ֬Ǜϧࠇͮ۟ߠࣧƫ࢞զӶʯۦϣؕड़И঱ײєĢ޶Ƒ֦˄ۏƎĶؽࡩ॑ӕ҃٬۶࡙ڗْ΋΅ȩʳसʷřӁءڬऌǅƬࡃӟم঱ࠖ࠲͢ĮϚάࠊȬƋ৔ࡒऊğ९ܛŋࡃʯ̈́ϵसڋ׺ॽץ࣑ҶࣄؘˍԝڏچЄҪ̗࢞ϞԴ՘تࡗًࢇϣओƓձ֣ঔԠ࣭ը˫ψڝֻͧםҐҥǜ࠶־эفԧەϳڐস৒ԯࣀنէ̾ĥθݘӡͣ̑ʌޏঋֵǫʋ؜ौլǄĈࠨܘԸܨͶקǅ̪ࠣ৞əЩǏʠϺݡǗǇه֚Ϊ̉ŨڡǕ֞ؗ৆ǯࠢॶঙࢽЛɭӱҧּয়װٿԓԊًŰ޲ۅȮҤࣥͪȉࢎݬɁ߅؉ێηǉࢢࠡӁߤࣘށś؂ԛݚәࡆȏࡺԱۂБাȋ߂ࣝՏǉৄə̻࠴थёē΋দࢂ֫ѭȳ͇ċӹӗˈ֭۩ѡϷԹएİеފؠԧے޳ηथ৴थΎڈۅЁȣܭࠏ̜ɷऌřӃौљլąӇآ̀Պϖ˧ࣶ৤ڱِāƴǀ͗ӆ০΃ࡔܰঈ࠿ϠģĺࢊখࣔީȠǷ࡟دςя˲ࠄֻǋर׋Ҽĕ߁ʇࠇҞǲޠপͳࢸȻࢢठߢוѨळՑ،ݦȽűɟৠࡈƩɩەࢡɢރँޤɠФм˺ࢫ঱জی؋ُ͛տ݈߂ȃŵ΋ࢇयځ˅ऍ͙ҘǉޓסПܜঈin_201210(java.lang.String,java.lang.String)>
		SHA-256: e379390f80dc545b6a80acea7cc81343847ee7bf4b627d09bd4fce9b862830c8
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <com.softsecurity.transkey.TransKeyCipher: void generateSecureKey()>
		SHA-256: 3afd84bc236f30a8929ad47eea0b5b836525dcc20b957fde6749e0facc06014b
		Secure: true
	Object:
		Variable: r9
		Type: java.security.SecureRandom
		Statement: specialinvoke r9.<java.security.SecureRandom: void <init>()>()
		Method: <com.callgate.launcher.fcc.w: void d()>
		SHA-256: e9492640b8d4479a67c56fa4be68136ff139b91702e50f96d0febd7f92fdfe67
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String I(java.lang.String)>
		SHA-256: 72dbaaff5cd171f6096b90c419e52d21ed5803121b79335a7ec8d5f696320c7a
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3013)
		Method: <m.client.android.library.core.utils.MD5Util: java.lang.String getMD5Hash(byte[])>
		SHA-256: 4e3dfb8543d3310a4a971890a80e3b8d14cf51e7f2ad243327c6c0063d01878c
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r0)
		Method: <com.bitdefender.antimalware.Updater: java.security.MessageDigest getMD5digester()>
		SHA-256: d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9
		Secure: false

Findings in Java Class: com.secureland.smartmedic.CheckIntegrity

	 in Method: java.lang.String anyValidIdentifierName(java.lang.String)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #4db10eadef9423bf74d083f2717fd8fa4d4a2674269c15ca5e74e0f475b924cb)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r2 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: m.client.android.library.core.utils.AESUtil

	 in Method: void crypt(int,java.io.File,java.io.File)
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #14312d44dfe69bedc26d807da2a3d0bc8c07d847f0e319bf8e1e5c16ec8baba)
			Unexpected call to method <javax.crypto.Cipher: byte[] doFinal()> on object of type javax.crypto.Cipher. Expect a call to one of the following methods javax.crypto.Cipher: byte[] doFinal(byte[]),javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]),javax.crypto.Cipher: byte[] doFinal(byte[],int,int),javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters),javax.crypto.Cipher: void init(int,java.security.Key),javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec),javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom),javax.crypto.Cipher: void init(int,java.security.cert.Certificate),javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom),javax.crypto.Cipher: int update(byte[],int,int,byte[],int),javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer),javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom),javax.crypto.Cipher: byte[] wrap(java.security.Key),javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom),javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int),javax.crypto.Cipher: byte[] update(byte[],int,int),javax.crypto.Cipher: byte[] update(byte[]),javax.crypto.Cipher: int update(byte[],int,int,byte[]),javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)
			at statement: $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal()>()

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2746, $r8)


	 in Method: byte[] cryptToBytes(int,java.io.InputStream)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3080, $r6)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3080, $r6)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #2cf136800cf13dfd946cc6e9dd32bfd1a881956e6cc343738d9c12becbaa3024)
			Unexpected call to method <javax.crypto.Cipher: byte[] doFinal()> on object of type javax.crypto.Cipher. Expect a call to one of the following methods javax.crypto.Cipher: byte[] doFinal(byte[]),javax.crypto.Cipher: int doFinal(byte[],int,int,byte[]),javax.crypto.Cipher: byte[] doFinal(byte[],int,int),javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters),javax.crypto.Cipher: void init(int,java.security.Key),javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec),javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom),javax.crypto.Cipher: void init(int,java.security.cert.Certificate),javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom),javax.crypto.Cipher: int update(byte[],int,int,byte[],int),javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer),javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom),javax.crypto.Cipher: byte[] wrap(java.security.Key),javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom),javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int),javax.crypto.Cipher: byte[] update(byte[],int,int),javax.crypto.Cipher: byte[] update(byte[]),javax.crypto.Cipher: int update(byte[],int,int,byte[]),javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)
			at statement: $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal()>()


	 in Method: java.lang.String decrypt(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer2520)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2511, $r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer2526)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2521, $r5)


	 in Method: java.security.Key generateKey()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer2533)


	 in Method: java.lang.String encrypt(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2507, $r4)


Findings in Java Class: com.softsecurity.transkey.b.b

	 in Method: void k(javax.crypto.Mac,byte[],int,byte[],int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: $i3 = virtualinvoke $r0.<javax.crypto.Mac: int getMacLength()>()

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Mac
			Constraint length(output1) + 0 > outOffset + 0 could not be evaluted due to insufficient information.
			at statement: virtualinvoke $r0.<javax.crypto.Mac: void doFinal(byte[],int)>($r7, varReplacer5783)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke $r0.<javax.crypto.Mac: void update(byte[])>($r4)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke $r0.<javax.crypto.Mac: void update(byte[])>($r7)


	 in Method: byte[] k(java.lang.String,byte[],byte[],int,int)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #198f2cc6037c277248027b4426a3fcd7ed179bc317715aff6b4663dc4c36a6fb)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: staticinvoke <com.softsecurity.transkey.b.b: void k(javax.crypto.Mac,byte[],int,byte[],int)>($r3, $r2, $i0, $r1, varReplacer5779)


Findings in Java Class: com.rimesoft.aaplus.android.client.fࢱІʢֶ݊רऌӣӐ৉ԄľূĮߝӡԆĂɀ॥߭ࠣη̝ख़ƴͧ߀ġĝাنࣖ˄गڽϖ࣑ǚࡨУӤࡆƇśއ֍ԹލҼեƤँॉܻļ˨ࠈ৴ࡦռࠧѳݍٔƹȁޝӇВƋ܄ࡉ߇ĝŇҿछ؄ξϞթǟԊćρȲșɹঞ͓ġ֯ʹࢶࡥӭʿय़וŇ५ݢƕɎ۔ࣝģȂ࠾ąचշړ࡜Ӥ঍ےϰۑ̉ƈࢉȟӳԳ͖ښ҉Ҙޱٲ؎Ґۖডֹİ৚ũܐǨȚҍࠨ͂жͤطܘܖӏՎŠࠈُࠚҵœ՝זࡊՁױӸ˝ĠݩߖکّԷԦ٪ށ०࣮ݝ߳ޔয়৒΄ণό՟ࣲࢉܬֲॅ͡ѿݢʨ֩č֑ݺǱҕΕܘࣵ޼˖ئࢡȧΖ࡬ۘקνΗݟ֑Ňķɣߋয˰࢞ȸȔȜٝफ़Μյज़؏ঌۃϯ֢޴গٖԥࡡ׫ࠁͦࡗƠɧɺߪȿঐҙŹ޿Ҵ՛েǁॅࡅʪࢊӡڲʀǙҞ߲݁ˑѓѐϐό̯জ০ۘओࡍȻފņөɞݤڏݕڳࠡড়by_neolook

	 in Method: boolean a࠸ٿˮ܍ǂжФǦѠױ׉ࣧȮठ৹ȊƦʏִ঴ӑڴӠؕȵݮर܈ŝৄ؊ࡰঅʐخ˹ͯॴԽӲহѲআմ֬Ǜϧࠇͮ۟ߠࣧƫ࢞զӶʯۦϣؕड़И঱ײєĢ޶Ƒ֦˄ۏƎĶؽࡩ॑ӕ҃٬۶࡙ڗْ΋΅ȩʳसʷřӁءڬऌǅƬࡃӟم঱ࠖ࠲͢ĮϚάࠊȬƋ৔ࡒऊğ९ܛŋࡃʯ̈́ϵसڋ׺ॽץ࣑ҶࣄؘˍԝڏچЄҪ̗࢞ϞԴ՘تࡗًࢇϣओƓձ֣ঔԠ࣭ը˫ψڝֻͧםҐҥǜ࠶־эفԧەϳڐস৒ԯࣀنէ̾ĥθݘӡͣ̑ʌޏঋֵǫʋ؜ौլǄĈࠨܘԸܨͶקǅ̪ࠣ৞əЩǏʠϺݡǗǇه֚Ϊ̉ŨڡǕ֞ؗ৆ǯࠢॶঙࢽЛɭӱҧּয়װٿԓԊًŰ޲ۅȮҤࣥͪȉࢎݬɁ߅؉ێηǉࢢࠡӁߤࣘށś؂ԛݚәࡆȏࡺԱۂБাȋ߂ࣝՏǉৄə̻࠴थёē΋দࢂ֫ѭȳ͇ċӹӗˈ֭۩ѡϷԹएİеފؠԧے޳ηथ৴थΎڈۅЁȣܭࠏ̜ɷऌřӃौљլąӇآ̀Պϖ˧ࣶ৤ڱِāƴǀ͗ӆ০΃ࡔܰঈ࠿ϠģĺࢊখࣔީȠǷ࡟دςя˲ࠄֻǋर׋Ҽĕ߁ʇࠇҞǲޠপͳࢸȻࢢठߢוѨळՑ،ݦȽűɟৠࡈƩɩەࢡɢރँޤɠФм˺ࢫ঱জی؋ُ͛տ݈߂ȃŵ΋ࢇयځ˅ऍ͙ҘǉޓסПܜঈin_201210(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #e379390f80dc545b6a80acea7cc81343847ee7bf4b627d09bd4fce9b862830c8)
			First parameter (with value "SHA1") should be any of {SHA-224, SHA-256, SHA-1, SHA-384, SHA-512, MD5}
			at statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8866)


Findings in Java Class: com.rimesoft.app.security.aaplus.message.RequestProcess

	 in Method: java.lang.String a(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #368b5b1399d3b55327d7e2ec809362c99073314e34f411e96f1ff691065da041)
			First parameter (with value "SHA1") should be any of {SHA-224, SHA-256, SHA-1, SHA-384, SHA-512, MD5}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer10357)


Findings in Java Class: com.callgate.launcher.visualars.n

	 in Method: javax.net.ssl.SSLSocketFactory b()
		NeverTypeOfError violating CrySL rule for javax.net.ssl.KeyManagerFactory (on Object #effa1507147cf36182a85c958230a7cc620d7f4829c7191b3b4d3fea51802ec9)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r7.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r6, $r13)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r14, r22, varReplacer11662)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r14, r22, varReplacer11662)

		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #293a851db36e6c63b740b6c0c94d1ef796c8fe1ac73236cfc616cf0a23d10562)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r6.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r12, $r13)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.KeyManagerFactory
			First parameter was not properly generated as generated Key Store
			at statement: virtualinvoke $r7.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r6, $r13)


Findings in Java Class: com.callgate.launcher.view.LauncherWebView

	 in Method: void onCreate(android.os.Bundle)
		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #9bd06a307c023d166375f42b2afe47214f0295944de30c7e1268a6bbd2b08065)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: virtualinvoke $r14.<com.callgate.launcher.visualars.n: android.os.AsyncTask execute(java.lang.Object[])>($r18)


Findings in Java Class: com.bitdefender.antimalware.UpdatePatchApplicator

	 in Method: byte[] patch(java.io.RandomAccessFile,java.io.RandomAccessFile,java.io.OutputStream)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r9 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r8)

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r4 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest()>()

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r11 = virtualinvoke $r9.<java.security.MessageDigest: byte[] digest()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, java.security.MessageDigest: void update(byte[],int,int), java.security.MessageDigest: void update(java.nio.ByteBuffer), java.security.MessageDigest: void update(byte[]), java.security.MessageDigest: void update(byte)
			at statement: virtualinvoke $r9.<java.security.MessageDigest: void update(byte[],int,int)>($r4, varReplacer12943, $i4)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d805e73c36f8994d3edd2e80430906b685323c13bf00c32413beb753538b6774)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, java.security.MessageDigest: void update(byte[],int,int), java.security.MessageDigest: void update(java.nio.ByteBuffer), java.security.MessageDigest: void update(byte[]), java.security.MessageDigest: void update(byte)
			at statement: virtualinvoke $r9.<java.security.MessageDigest: void update(byte[],int,int)>($r5, varReplacer12929, $i4)


Findings in Java Class: com.bitdefender.antimalware.Updater

	 in Method: boolean I()
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer12981, $r19)

		ForbiddenMethodError violating CrySL rule for javax.crypto.Cipher
			Detected call to forbidden method void init(int,java.security.Key) of class javax.crypto.Cipher. Instead, call method <javax.crypto.Cipher: void init(int,java.security.Key)>.
			at statement: virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer12981, $r19)


	 in Method: void I(java.lang.String,boolean)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r5 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()


	 in Method: void anyValidIdentifierName(java.lang.String,java.io.OutputStream,boolean)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r6.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer13077, r38, $r8)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r6.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer13077, r38, $r8)

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, java.security.MessageDigest: void update(byte[],int,int), java.security.MessageDigest: void update(java.nio.ByteBuffer), java.security.MessageDigest: void update(byte[]), java.security.MessageDigest: void update(byte)
			at statement: virtualinvoke $r25.<java.security.MessageDigest: void update(byte[],int,int)>($r27, varReplacer13111, $i0)

		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r27 = virtualinvoke $r25.<java.security.MessageDigest: byte[] digest()>()

		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #d566b30b830e535c36a9450290b7054df81db2d96fc04c87847edafdf59c2a9)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r25 = staticinvoke <com.bitdefender.antimalware.Updater: java.security.MessageDigest getMD5digester()>()


Findings in Java Class: com.lumensoft.qrrelay.QRRelay

	 in Method: java.lang.String a(java.lang.String,java.util.HashMap,java.lang.String,java.lang.String)
		NeverTypeOfError violating CrySL rule for java.security.KeyStore (on Object #ff12cf87e55d5fd519b9bd9d12215d5208b9a5ccb65515b62567b4dcc0111c74)
			Second parameter should never be of type java.lang.String.
			at statement: virtualinvoke $r5.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r8, $r10)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r12.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer14370, $r13, varReplacer14370)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r12.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer14370, $r13, varReplacer14370)

		IncompleteOperationError violating CrySL rule for java.security.KeyStore (on Object #ff12cf87e55d5fd519b9bd9d12215d5208b9a5ccb65515b62567b4dcc0111c74)
			Operation on object of type java.security.KeyStore object not completed. Expected call to load
			at statement: $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer14361)


Findings in Java Class: com.softsecurity.transkey.TransKeyView

	 in Method: java.lang.String EncryptSecureKey(java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer5379, $r7)


Findings in Java Class: com.callgate.launcher.fcc.w

	 in Method: void d()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer6632, r10, $r5)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer6632, r10, $r5)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 68

	CogniCrypt found the following violations. For details see description above.
	NeverTypeOfError: 3
	TypestateError: 9
	ConstraintError: 2
	RequiredPredicateError: 20
	ForbiddenMethodError: 2
	ImpreciseValueExtractionError: 1
	IncompleteOperationError: 9
=====================================================================