public class com.impelsys.ioffline.sdk.b.a.b extends java.lang.Object
{

    public static java.lang.String a(java.lang.String)
    {
        java.lang.String $r0, $r5, r20;
        javax.crypto.spec.IvParameterSpec $r1, r19;
        com.impelsys.ioffline.sdk.b.d.c $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        byte[] $r6, $r7, $r8;
        javax.crypto.spec.SecretKeySpec $r9, r18;
        javax.crypto.Cipher $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        javax.crypto.NoSuchPaddingException r21;
        java.security.NoSuchAlgorithmException r22;
        java.security.InvalidKeyException r23;
        java.security.InvalidAlgorithmParameterException r24;
        javax.crypto.IllegalBlockSizeException r25;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

     label01:
        $r2 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r3 = virtualinvoke $r2.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedKey");

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $r7 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r3 = virtualinvoke $r2.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedIv");

        $r5 = (java.lang.String) $r4;

        $r8 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

     label02:
        r18 = new javax.crypto.spec.SecretKeySpec;

        $r9 = r18;

     label03:
        specialinvoke r18.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, "AES");

        $r6 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r7, 0);

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label04:
        r19 = new javax.crypto.spec.IvParameterSpec;

        $r1 = r19;

     label05:
        specialinvoke r19.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r8);

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r9, $r1);

        $r8 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6);

     label06:
        r20 = new java.lang.String;

        $r5 = r20;

     label07:
        specialinvoke r20.<java.lang.String: void <init>(byte[])>($r8);

     label08:
        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        return $r5;

     label09:
        $r11 := @caughtexception;

     label10:
        r21 = (javax.crypto.NoSuchPaddingException) $r11;

        virtualinvoke r21.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label11:
        $r5 = null;

        goto label08;

     label12:
        $r12 := @caughtexception;

        r22 = (java.security.NoSuchAlgorithmException) $r12;

        virtualinvoke r22.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label13:
        goto label11;

     label14:
        $r13 := @caughtexception;

        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        throw $r13;

     label15:
        $r14 := @caughtexception;

     label16:
        r23 = (java.security.InvalidKeyException) $r14;

        virtualinvoke r23.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label11;

     label17:
        $r15 := @caughtexception;

        r24 = (java.security.InvalidAlgorithmParameterException) $r15;

        virtualinvoke r24.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label11;

     label18:
        $r16 := @caughtexception;

        r25 = (javax.crypto.IllegalBlockSizeException) $r16;

        virtualinvoke r25.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label11;

     label19:
        $r17 := @caughtexception;

        $r0 = staticinvoke <com.impelsys.ioffline.sdk.b.a.b: java.lang.String b(java.lang.String)>($r0);

     label20:
        $r5 = $r0;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label09;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label09;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label12;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label12;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label12;
        catch java.security.InvalidKeyException from label03 to label04 with label15;
        catch java.security.InvalidKeyException from label05 to label06 with label15;
        catch java.security.InvalidKeyException from label07 to label08 with label15;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label17;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label17;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label17;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label18;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label18;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label18;
        catch javax.crypto.BadPaddingException from label03 to label04 with label19;
        catch javax.crypto.BadPaddingException from label05 to label06 with label19;
        catch javax.crypto.BadPaddingException from label07 to label08 with label19;
        catch java.lang.Throwable from label02 to label08 with label14;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label16 to label20 with label14;
    }

    public static java.lang.String a(java.lang.String, android.content.Context, java.lang.String)
    {
        java.lang.String $r0, $r2, $r7, varReplacer3966, varReplacer3967, varReplacer3968, varReplacer3969, varReplacer3970, varReplacer3971, varReplacer3972, varReplacer3975;
        android.content.Context $r1;
        byte[] $r3, $r8;
        com.impelsys.ioffline.sdk.b.d.c $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        java.io.PrintStream $r9;
        java.lang.StringBuilder $r10, r28;
        boolean $z0;
        java.io.File $r11, r29;
        java.io.ByteArrayOutputStream $r12, r31;
        javax.crypto.spec.SecretKeySpec $r13, r32;
        javax.crypto.spec.IvParameterSpec $r14, r33;
        javax.crypto.Cipher $r15, $r16;
        android.content.ContentResolver $r17;
        android.net.Uri $r18;
        java.io.InputStream $r19;
        java.lang.Throwable $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        java.io.FileInputStream r30;
        java.security.NoSuchProviderException r34;
        javax.crypto.NoSuchPaddingException r35;
        javax.crypto.IllegalBlockSizeException r36;
        javax.crypto.BadPaddingException r37;
        java.security.NoSuchAlgorithmException r38;
        java.security.InvalidKeyException r39;
        java.security.InvalidAlgorithmParameterException r40;
        java.io.IOException r41;
        int varReplacer3965, varReplacer3973;
        null_type varReplacer3974;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.content.Context;

        $r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        varReplacer3973 = 16;

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r3, varReplacer3973);

        $r4 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r5 = virtualinvoke $r4.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        varReplacer3966 = "KsharedIv";

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(varReplacer3966);

        $r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>();

        $r9 = <java.lang.System: java.io.PrintStream out>;

        r28 = new java.lang.StringBuilder;

        varReplacer3967 = "xxxfilePath = ";

        specialinvoke r28.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer3967);

        $r10 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label01:
        varReplacer3971 = "nav.xhtml";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(varReplacer3971);

     label02:
        if $z0 != 0 goto label07;

     label03:
        varReplacer3968 = ".opf";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>(varReplacer3968);

     label04:
        if $z0 != 0 goto label07;

     label05:
        varReplacer3975 = ".ncx";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>(varReplacer3975);

     label06:
        if $z0 == 0 goto label26;

     label07:
        r30 = new java.io.FileInputStream;

        r29 = new java.io.File;

        $r11 = r29;

     label08:
        specialinvoke r29.<java.io.File: void <init>(java.lang.String)>($r0);

        specialinvoke r30.<java.io.FileInputStream: void <init>(java.io.File)>($r11);

     label09:
        $r6 = r30;

     label10:
        r31 = new java.io.ByteArrayOutputStream;

        $r12 = r31;

     label11:
        specialinvoke r31.<java.io.ByteArrayOutputStream: void <init>()>();

     label12:
        r32 = new javax.crypto.spec.SecretKeySpec;

        $r13 = r32;

     label13:
        varReplacer3972 = "AES";

        specialinvoke r32.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer3972);

     label14:
        r33 = new javax.crypto.spec.IvParameterSpec;

        $r14 = r33;

     label15:
        specialinvoke r33.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r8);

     label16:
        varReplacer3969 = "AES/CBC/PKCS5Padding";

        varReplacer3970 = "BC";

        $r15 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer3969, varReplacer3970);

     label17:
        $r16 = $r15;

     label18:
        varReplacer3965 = 2;

        virtualinvoke $r15.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer3965, $r13, $r14);

     label19:
        $r19 = (java.io.InputStream) $r6;

     label20:
        staticinvoke <com.impelsys.ioffline.sdk.b.a.b: void a(java.io.InputStream,java.io.OutputStream)>($r19, $r12);

        $r3 = virtualinvoke $r12.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label21:
        $r3 = virtualinvoke $r16.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

     label22:
        virtualinvoke $r12.<java.io.ByteArrayOutputStream: void close()>();

     label23:
        $r2 = new java.lang.String;

     label24:
        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r3);

     label25:
        return $r2;

     label26:
        $r17 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r18 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r0);

        $r19 = virtualinvoke $r17.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r18);

     label27:
        $r6 = $r19;

        goto label10;

     label28:
        $r20 := @caughtexception;

        $r16 = null;

     label29:
        r34 = (java.security.NoSuchProviderException) $r20;

     label30:
        virtualinvoke r34.<java.security.NoSuchProviderException: void printStackTrace()>();

     label31:
        goto label19;

     label32:
        $r21 := @caughtexception;

        r35 = (javax.crypto.NoSuchPaddingException) $r21;

        virtualinvoke r35.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label33:
        varReplacer3974 = null;

        return varReplacer3974;

     label34:
        $r22 := @caughtexception;

        r36 = (javax.crypto.IllegalBlockSizeException) $r22;

     label35:
        virtualinvoke r36.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        $r0 = staticinvoke <com.impelsys.ioffline.sdk.b.a.b: java.lang.String b(java.lang.String,android.content.Context,java.lang.String)>($r0, $r1, $r2);

     label36:
        return $r0;

     label37:
        $r23 := @caughtexception;

        r37 = (javax.crypto.BadPaddingException) $r23;

     label38:
        virtualinvoke r37.<javax.crypto.BadPaddingException: void printStackTrace()>();

        $r0 = staticinvoke <com.impelsys.ioffline.sdk.b.a.b: java.lang.String b(java.lang.String,android.content.Context,java.lang.String)>($r0, $r1, $r2);

     label39:
        return $r0;

     label40:
        $r24 := @caughtexception;

        r38 = (java.security.NoSuchAlgorithmException) $r24;

        virtualinvoke r38.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label33;

     label41:
        $r25 := @caughtexception;

        r39 = (java.security.InvalidKeyException) $r25;

        virtualinvoke r39.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label33;

     label42:
        $r26 := @caughtexception;

        r40 = (java.security.InvalidAlgorithmParameterException) $r26;

        virtualinvoke r40.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label33;

     label43:
        $r27 := @caughtexception;

        r41 = (java.io.IOException) $r27;

        virtualinvoke r41.<java.io.IOException: void printStackTrace()>();

        goto label33;

     label44:
        $r20 := @caughtexception;

        goto label29;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label32;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label32;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label32;
        catch javax.crypto.NoSuchPaddingException from label08 to label09 with label32;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label32;
        catch javax.crypto.NoSuchPaddingException from label13 to label14 with label32;
        catch javax.crypto.NoSuchPaddingException from label15 to label16 with label32;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label40;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label40;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label40;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label40;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label40;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label40;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label40;
        catch java.security.InvalidKeyException from label01 to label02 with label41;
        catch java.security.InvalidKeyException from label03 to label04 with label41;
        catch java.security.InvalidKeyException from label05 to label06 with label41;
        catch java.security.InvalidKeyException from label08 to label09 with label41;
        catch java.security.InvalidKeyException from label11 to label12 with label41;
        catch java.security.InvalidKeyException from label13 to label14 with label41;
        catch java.security.InvalidKeyException from label15 to label16 with label41;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label42;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label42;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label42;
        catch java.security.InvalidAlgorithmParameterException from label08 to label09 with label42;
        catch java.security.InvalidAlgorithmParameterException from label11 to label12 with label42;
        catch java.security.InvalidAlgorithmParameterException from label13 to label14 with label42;
        catch java.security.InvalidAlgorithmParameterException from label15 to label16 with label42;
        catch java.io.IOException from label01 to label02 with label43;
        catch java.io.IOException from label03 to label04 with label43;
        catch java.io.IOException from label05 to label06 with label43;
        catch java.io.IOException from label08 to label09 with label43;
        catch java.io.IOException from label11 to label12 with label43;
        catch java.io.IOException from label13 to label14 with label43;
        catch java.io.IOException from label15 to label16 with label43;
        catch java.security.NoSuchProviderException from label16 to label17 with label28;
        catch javax.crypto.NoSuchPaddingException from label16 to label17 with label32;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label40;
        catch java.security.InvalidKeyException from label16 to label17 with label41;
        catch java.security.InvalidAlgorithmParameterException from label16 to label17 with label42;
        catch java.io.IOException from label16 to label17 with label43;
        catch java.security.NoSuchProviderException from label18 to label19 with label44;
        catch javax.crypto.NoSuchPaddingException from label18 to label19 with label32;
        catch java.security.NoSuchAlgorithmException from label18 to label19 with label40;
        catch java.security.InvalidKeyException from label18 to label19 with label41;
        catch java.security.InvalidAlgorithmParameterException from label18 to label19 with label42;
        catch java.io.IOException from label18 to label19 with label43;
        catch javax.crypto.NoSuchPaddingException from label20 to label21 with label32;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label40;
        catch java.security.InvalidKeyException from label20 to label21 with label41;
        catch java.security.InvalidAlgorithmParameterException from label20 to label21 with label42;
        catch java.io.IOException from label20 to label21 with label43;
        catch javax.crypto.IllegalBlockSizeException from label21 to label22 with label34;
        catch javax.crypto.BadPaddingException from label21 to label22 with label37;
        catch javax.crypto.NoSuchPaddingException from label21 to label22 with label32;
        catch java.security.NoSuchAlgorithmException from label21 to label22 with label40;
        catch java.security.InvalidKeyException from label21 to label22 with label41;
        catch java.security.InvalidAlgorithmParameterException from label21 to label22 with label42;
        catch java.io.IOException from label21 to label22 with label43;
        catch javax.crypto.NoSuchPaddingException from label22 to label23 with label32;
        catch javax.crypto.NoSuchPaddingException from label24 to label25 with label32;
        catch javax.crypto.NoSuchPaddingException from label26 to label27 with label32;
        catch javax.crypto.NoSuchPaddingException from label30 to label31 with label32;
        catch java.security.NoSuchAlgorithmException from label22 to label23 with label40;
        catch java.security.NoSuchAlgorithmException from label24 to label25 with label40;
        catch java.security.NoSuchAlgorithmException from label26 to label27 with label40;
        catch java.security.NoSuchAlgorithmException from label30 to label31 with label40;
        catch java.security.InvalidKeyException from label22 to label23 with label41;
        catch java.security.InvalidKeyException from label24 to label25 with label41;
        catch java.security.InvalidKeyException from label26 to label27 with label41;
        catch java.security.InvalidKeyException from label30 to label31 with label41;
        catch java.security.InvalidAlgorithmParameterException from label22 to label23 with label42;
        catch java.security.InvalidAlgorithmParameterException from label24 to label25 with label42;
        catch java.security.InvalidAlgorithmParameterException from label26 to label27 with label42;
        catch java.security.InvalidAlgorithmParameterException from label30 to label31 with label42;
        catch java.io.IOException from label22 to label23 with label43;
        catch java.io.IOException from label24 to label25 with label43;
        catch java.io.IOException from label26 to label27 with label43;
        catch java.io.IOException from label30 to label31 with label43;
        catch javax.crypto.NoSuchPaddingException from label35 to label36 with label32;
        catch javax.crypto.NoSuchPaddingException from label38 to label39 with label32;
        catch java.security.NoSuchAlgorithmException from label35 to label36 with label40;
        catch java.security.NoSuchAlgorithmException from label38 to label39 with label40;
        catch java.security.InvalidKeyException from label35 to label36 with label41;
        catch java.security.InvalidKeyException from label38 to label39 with label41;
        catch java.security.InvalidAlgorithmParameterException from label35 to label36 with label42;
        catch java.security.InvalidAlgorithmParameterException from label38 to label39 with label42;
        catch java.io.IOException from label35 to label36 with label43;
        catch java.io.IOException from label38 to label39 with label43;
    }

    public static java.lang.String a(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r7;
        javax.crypto.spec.SecretKeySpec $r2, r19;
        javax.crypto.spec.IvParameterSpec $r3, r20;
        com.impelsys.ioffline.sdk.b.d.c $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        byte[] $r8, $r9, $r10;
        javax.crypto.Cipher $r11;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        javax.crypto.NoSuchPaddingException r21;
        java.security.NoSuchAlgorithmException r22;
        java.security.InvalidKeyException r23;
        java.security.InvalidAlgorithmParameterException r24;
        javax.crypto.IllegalBlockSizeException r25;
        javax.crypto.BadPaddingException r26;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        entermonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

     label01:
        $r4 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r5 = virtualinvoke $r4.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedKey");

        $r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>();

        $r9 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r10 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

     label02:
        r19 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r19;

     label03:
        specialinvoke r19.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES");

        $r8 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r9, 0);

        $r11 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label04:
        r20 = new javax.crypto.spec.IvParameterSpec;

        $r3 = r20;

     label05:
        specialinvoke r20.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r10);

        virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r2, $r3);

        $r10 = virtualinvoke $r11.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r8);

     label06:
        $r1 = new java.lang.String;

        $r0 = $r1;

     label07:
        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r10);

     label08:
        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        return $r0;

     label09:
        $r12 := @caughtexception;

     label10:
        r21 = (javax.crypto.NoSuchPaddingException) $r12;

        virtualinvoke r21.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label11:
        $r0 = null;

        goto label08;

     label12:
        $r13 := @caughtexception;

        r22 = (java.security.NoSuchAlgorithmException) $r13;

        virtualinvoke r22.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label13:
        goto label11;

     label14:
        $r14 := @caughtexception;

        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        throw $r14;

     label15:
        $r15 := @caughtexception;

     label16:
        r23 = (java.security.InvalidKeyException) $r15;

        virtualinvoke r23.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label11;

     label17:
        $r16 := @caughtexception;

        r24 = (java.security.InvalidAlgorithmParameterException) $r16;

        virtualinvoke r24.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label11;

     label18:
        $r17 := @caughtexception;

        r25 = (javax.crypto.IllegalBlockSizeException) $r17;

        virtualinvoke r25.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label11;

     label19:
        $r18 := @caughtexception;

        r26 = (javax.crypto.BadPaddingException) $r18;

        virtualinvoke r26.<javax.crypto.BadPaddingException: void printStackTrace()>();

     label20:
        goto label11;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label09;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label09;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label12;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label12;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label12;
        catch java.security.InvalidKeyException from label03 to label04 with label15;
        catch java.security.InvalidKeyException from label05 to label06 with label15;
        catch java.security.InvalidKeyException from label07 to label08 with label15;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label17;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label17;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label17;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label18;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label18;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label18;
        catch javax.crypto.BadPaddingException from label03 to label04 with label19;
        catch javax.crypto.BadPaddingException from label05 to label06 with label19;
        catch javax.crypto.BadPaddingException from label07 to label08 with label19;
        catch java.lang.Throwable from label02 to label08 with label14;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label16 to label20 with label14;
    }

    public static java.lang.String a(java.lang.String, java.lang.String, java.lang.String, android.content.Context)
    {
        java.lang.String $r0, $r1, $r2, varReplacer3979, varReplacer3980, varReplacer3983;
        android.content.Context $r3;
        javax.crypto.spec.SecretKeySpec $r4, r23;
        byte[] $r5, $r6;
        android.content.ContentResolver $r7;
        android.net.Uri $r8;
        java.io.InputStream $r9;
        java.io.ByteArrayOutputStream $r10, r22;
        javax.crypto.spec.IvParameterSpec $r11, r24;
        javax.crypto.Cipher $r12, $r13;
        java.lang.Throwable $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.security.NoSuchProviderException r25;
        javax.crypto.NoSuchPaddingException r26;
        javax.crypto.IllegalBlockSizeException r27;
        javax.crypto.BadPaddingException r28;
        java.security.NoSuchAlgorithmException r29;
        java.security.InvalidKeyException r30;
        java.security.InvalidAlgorithmParameterException r31;
        java.io.IOException r32;
        null_type varReplacer3981;
        int varReplacer3982;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: android.content.Context;

        $r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r6 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

     label01:
        $r7 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r0);

        $r9 = virtualinvoke $r7.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r8);

     label02:
        r22 = new java.io.ByteArrayOutputStream;

        $r10 = r22;

     label03:
        specialinvoke r22.<java.io.ByteArrayOutputStream: void <init>()>();

     label04:
        r23 = new javax.crypto.spec.SecretKeySpec;

        $r4 = r23;

     label05:
        varReplacer3983 = "AES";

        specialinvoke r23.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer3983);

     label06:
        r24 = new javax.crypto.spec.IvParameterSpec;

        $r11 = r24;

     label07:
        specialinvoke r24.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6);

     label08:
        varReplacer3979 = "AES/CBC/PKCS5Padding";

        varReplacer3980 = "BC";

        $r12 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer3979, varReplacer3980);

     label09:
        $r13 = $r12;

     label10:
        varReplacer3982 = 2;

        virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer3982, $r4, $r11);

     label11:
        staticinvoke <com.impelsys.ioffline.sdk.b.a.b: void a(java.io.InputStream,java.io.OutputStream)>($r9, $r10);

        $r5 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label12:
        $r5 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

     label13:
        virtualinvoke $r10.<java.io.ByteArrayOutputStream: void close()>();

     label14:
        $r1 = new java.lang.String;

     label15:
        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r5);

     label16:
        return $r1;

     label17:
        $r14 := @caughtexception;

        $r13 = null;

     label18:
        r25 = (java.security.NoSuchProviderException) $r14;

     label19:
        virtualinvoke r25.<java.security.NoSuchProviderException: void printStackTrace()>();

     label20:
        goto label11;

     label21:
        $r15 := @caughtexception;

        r26 = (javax.crypto.NoSuchPaddingException) $r15;

        virtualinvoke r26.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label22:
        varReplacer3981 = null;

        return varReplacer3981;

     label23:
        $r16 := @caughtexception;

        r27 = (javax.crypto.IllegalBlockSizeException) $r16;

     label24:
        virtualinvoke r27.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        $r0 = staticinvoke <com.impelsys.ioffline.sdk.b.a.b: java.lang.String b(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r0, $r1, $r2, $r3);

     label25:
        return $r0;

     label26:
        $r17 := @caughtexception;

        r28 = (javax.crypto.BadPaddingException) $r17;

     label27:
        virtualinvoke r28.<javax.crypto.BadPaddingException: void printStackTrace()>();

        $r0 = staticinvoke <com.impelsys.ioffline.sdk.b.a.b: java.lang.String b(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r0, $r1, $r2, $r3);

     label28:
        return $r0;

     label29:
        $r18 := @caughtexception;

        r29 = (java.security.NoSuchAlgorithmException) $r18;

        virtualinvoke r29.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label22;

     label30:
        $r19 := @caughtexception;

        r30 = (java.security.InvalidKeyException) $r19;

        virtualinvoke r30.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label22;

     label31:
        $r20 := @caughtexception;

        r31 = (java.security.InvalidAlgorithmParameterException) $r20;

        virtualinvoke r31.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label22;

     label32:
        $r21 := @caughtexception;

        r32 = (java.io.IOException) $r21;

        virtualinvoke r32.<java.io.IOException: void printStackTrace()>();

        goto label22;

     label33:
        $r14 := @caughtexception;

        goto label18;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label21;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label21;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label21;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label21;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label29;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label29;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label29;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label29;
        catch java.security.InvalidKeyException from label01 to label02 with label30;
        catch java.security.InvalidKeyException from label03 to label04 with label30;
        catch java.security.InvalidKeyException from label05 to label06 with label30;
        catch java.security.InvalidKeyException from label07 to label08 with label30;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label31;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label31;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label31;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label31;
        catch java.io.IOException from label01 to label02 with label32;
        catch java.io.IOException from label03 to label04 with label32;
        catch java.io.IOException from label05 to label06 with label32;
        catch java.io.IOException from label07 to label08 with label32;
        catch java.security.NoSuchProviderException from label08 to label09 with label17;
        catch javax.crypto.NoSuchPaddingException from label08 to label09 with label21;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label29;
        catch java.security.InvalidKeyException from label08 to label09 with label30;
        catch java.security.InvalidAlgorithmParameterException from label08 to label09 with label31;
        catch java.io.IOException from label08 to label09 with label32;
        catch java.security.NoSuchProviderException from label10 to label11 with label33;
        catch javax.crypto.NoSuchPaddingException from label10 to label11 with label21;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label29;
        catch java.security.InvalidKeyException from label10 to label11 with label30;
        catch java.security.InvalidAlgorithmParameterException from label10 to label11 with label31;
        catch java.io.IOException from label10 to label11 with label32;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label21;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label29;
        catch java.security.InvalidKeyException from label11 to label12 with label30;
        catch java.security.InvalidAlgorithmParameterException from label11 to label12 with label31;
        catch java.io.IOException from label11 to label12 with label32;
        catch javax.crypto.IllegalBlockSizeException from label12 to label13 with label23;
        catch javax.crypto.BadPaddingException from label12 to label13 with label26;
        catch javax.crypto.NoSuchPaddingException from label12 to label13 with label21;
        catch java.security.NoSuchAlgorithmException from label12 to label13 with label29;
        catch java.security.InvalidKeyException from label12 to label13 with label30;
        catch java.security.InvalidAlgorithmParameterException from label12 to label13 with label31;
        catch java.io.IOException from label12 to label13 with label32;
        catch javax.crypto.NoSuchPaddingException from label13 to label14 with label21;
        catch javax.crypto.NoSuchPaddingException from label15 to label16 with label21;
        catch javax.crypto.NoSuchPaddingException from label19 to label20 with label21;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label29;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label29;
        catch java.security.NoSuchAlgorithmException from label19 to label20 with label29;
        catch java.security.InvalidKeyException from label13 to label14 with label30;
        catch java.security.InvalidKeyException from label15 to label16 with label30;
        catch java.security.InvalidKeyException from label19 to label20 with label30;
        catch java.security.InvalidAlgorithmParameterException from label13 to label14 with label31;
        catch java.security.InvalidAlgorithmParameterException from label15 to label16 with label31;
        catch java.security.InvalidAlgorithmParameterException from label19 to label20 with label31;
        catch java.io.IOException from label13 to label14 with label32;
        catch java.io.IOException from label15 to label16 with label32;
        catch java.io.IOException from label19 to label20 with label32;
        catch javax.crypto.NoSuchPaddingException from label24 to label25 with label21;
        catch javax.crypto.NoSuchPaddingException from label27 to label28 with label21;
        catch java.security.NoSuchAlgorithmException from label24 to label25 with label29;
        catch java.security.NoSuchAlgorithmException from label27 to label28 with label29;
        catch java.security.InvalidKeyException from label24 to label25 with label30;
        catch java.security.InvalidKeyException from label27 to label28 with label30;
        catch java.security.InvalidAlgorithmParameterException from label24 to label25 with label31;
        catch java.security.InvalidAlgorithmParameterException from label27 to label28 with label31;
        catch java.io.IOException from label24 to label25 with label32;
        catch java.io.IOException from label27 to label28 with label32;
    }

    private static void a(java.io.InputStream, java.io.OutputStream)
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;
        int $i0, varReplacer3994;
        byte[] $r2;
        java.lang.Throwable $r3;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

     label1:
        $r2 = newarray (byte)[4096];

     label2:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2);

     label3:
        if $i0 != -1 goto label4;

        virtualinvoke $r0.<java.io.InputStream: void close()>();

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;

     label4:
        varReplacer3994 = 0;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, varReplacer3994, $i0);

     label5:
        goto label2;

     label6:
        $r3 := @caughtexception;

        virtualinvoke $r0.<java.io.InputStream: void close()>();

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static java.lang.String b(java.lang.String)
    {
        java.lang.String $r0, $r5;
        javax.crypto.spec.IvParameterSpec $r1, r19;
        com.impelsys.ioffline.sdk.b.d.c $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        byte[] $r6, $r7, $r8;
        javax.crypto.spec.SecretKeySpec $r9, r18;
        javax.crypto.Cipher $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        javax.crypto.NoSuchPaddingException r20;
        java.security.NoSuchAlgorithmException r21;
        java.security.InvalidKeyException r22;
        java.security.InvalidAlgorithmParameterException r23;
        javax.crypto.IllegalBlockSizeException r24;
        javax.crypto.BadPaddingException r25;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

     label01:
        $r2 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r3 = virtualinvoke $r2.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedKey");

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $r7 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r3 = virtualinvoke $r2.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedIv");

        $r0 = (java.lang.String) $r4;

        $r8 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

     label02:
        r18 = new javax.crypto.spec.SecretKeySpec;

        $r9 = r18;

     label03:
        specialinvoke r18.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, "AES");

        $r6 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r7, 0);

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/NoPadding");

     label04:
        r19 = new javax.crypto.spec.IvParameterSpec;

        $r1 = r19;

     label05:
        specialinvoke r19.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r8);

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r9, $r1);

        $r8 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6);

     label06:
        $r5 = new java.lang.String;

        $r0 = $r5;

     label07:
        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r8);

     label08:
        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        return $r0;

     label09:
        $r11 := @caughtexception;

     label10:
        r20 = (javax.crypto.NoSuchPaddingException) $r11;

        virtualinvoke r20.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label11:
        $r0 = null;

        goto label08;

     label12:
        $r12 := @caughtexception;

        r21 = (java.security.NoSuchAlgorithmException) $r12;

        virtualinvoke r21.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label13:
        goto label11;

     label14:
        $r13 := @caughtexception;

        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        throw $r13;

     label15:
        $r14 := @caughtexception;

     label16:
        r22 = (java.security.InvalidKeyException) $r14;

        virtualinvoke r22.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label11;

     label17:
        $r15 := @caughtexception;

        r23 = (java.security.InvalidAlgorithmParameterException) $r15;

        virtualinvoke r23.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label11;

     label18:
        $r16 := @caughtexception;

        r24 = (javax.crypto.IllegalBlockSizeException) $r16;

        virtualinvoke r24.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label11;

     label19:
        $r17 := @caughtexception;

        r25 = (javax.crypto.BadPaddingException) $r17;

        virtualinvoke r25.<javax.crypto.BadPaddingException: void printStackTrace()>();

     label20:
        goto label11;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label09;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label09;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label12;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label12;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label12;
        catch java.security.InvalidKeyException from label03 to label04 with label15;
        catch java.security.InvalidKeyException from label05 to label06 with label15;
        catch java.security.InvalidKeyException from label07 to label08 with label15;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label17;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label17;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label17;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label18;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label18;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label18;
        catch javax.crypto.BadPaddingException from label03 to label04 with label19;
        catch javax.crypto.BadPaddingException from label05 to label06 with label19;
        catch javax.crypto.BadPaddingException from label07 to label08 with label19;
        catch java.lang.Throwable from label02 to label08 with label14;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label16 to label20 with label14;
    }

    public static java.lang.String b(java.lang.String, android.content.Context, java.lang.String)
    {
        java.lang.String $r0, $r2, varReplacer3985, varReplacer3986, varReplacer3989, varReplacer3990, varReplacer3991, varReplacer3992, varReplacer3993;
        android.content.Context $r1;
        java.io.ByteArrayOutputStream $r3, r27;
        byte[] $r4, $r8;
        com.impelsys.ioffline.sdk.b.d.c $r5;
        java.util.Map $r6;
        java.lang.Object $r7;
        boolean $z0;
        java.io.File $r9, r25;
        javax.crypto.spec.SecretKeySpec $r10, r28;
        javax.crypto.spec.IvParameterSpec $r11, r29;
        javax.crypto.Cipher $r12, $r13;
        android.content.ContentResolver $r14;
        android.net.Uri $r15;
        java.io.InputStream $r16;
        java.lang.Throwable $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.io.FileInputStream r26;
        java.security.NoSuchProviderException r30;
        javax.crypto.NoSuchPaddingException r31;
        javax.crypto.IllegalBlockSizeException r32;
        javax.crypto.BadPaddingException r33;
        java.security.NoSuchAlgorithmException r34;
        java.security.InvalidKeyException r35;
        java.security.InvalidAlgorithmParameterException r36;
        java.io.IOException r37;
        int varReplacer3984, varReplacer3988;
        null_type varReplacer3987;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.content.Context;

        $r2 := @parameter2: java.lang.String;

        $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        varReplacer3984 = 16;

        $r4 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r4, varReplacer3984);

        $r5 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r6 = virtualinvoke $r5.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        varReplacer3990 = "KsharedIv";

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(varReplacer3990);

        $r2 = (java.lang.String) $r7;

        $r8 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

     label01:
        varReplacer3989 = "nav.xhtml";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(varReplacer3989);

     label02:
        if $z0 != 0 goto label07;

     label03:
        varReplacer3991 = ".opf";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>(varReplacer3991);

     label04:
        if $z0 != 0 goto label07;

     label05:
        varReplacer3985 = ".ncx";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>(varReplacer3985);

     label06:
        if $z0 == 0 goto label27;

     label07:
        r26 = new java.io.FileInputStream;

        r25 = new java.io.File;

        $r9 = r25;

     label08:
        specialinvoke r25.<java.io.File: void <init>(java.lang.String)>($r0);

        specialinvoke r26.<java.io.FileInputStream: void <init>(java.io.File)>($r9);

     label09:
        $r7 = r26;

     label10:
        r27 = new java.io.ByteArrayOutputStream;

        $r3 = r27;

     label11:
        specialinvoke r27.<java.io.ByteArrayOutputStream: void <init>()>();

     label12:
        r28 = new javax.crypto.spec.SecretKeySpec;

        $r10 = r28;

     label13:
        varReplacer3986 = "AES";

        specialinvoke r28.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer3986);

     label14:
        r29 = new javax.crypto.spec.IvParameterSpec;

        $r11 = r29;

     label15:
        specialinvoke r29.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r8);

     label16:
        varReplacer3992 = "AES/CBC/NoPadding";

        varReplacer3993 = "BC";

        $r12 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer3992, varReplacer3993);

     label17:
        $r13 = $r12;

     label18:
        varReplacer3988 = 2;

        virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer3988, $r10, $r11);

     label19:
        $r16 = (java.io.InputStream) $r7;

     label20:
        staticinvoke <com.impelsys.ioffline.sdk.b.a.b: void a(java.io.InputStream,java.io.OutputStream)>($r16, $r3);

        $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label21:
        $r8 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

     label22:
        $r4 = $r8;

     label23:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void close()>();

     label24:
        $r2 = new java.lang.String;

     label25:
        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r4);

     label26:
        return $r2;

     label27:
        $r14 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r15 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r0);

        $r16 = virtualinvoke $r14.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r15);

     label28:
        $r7 = $r16;

        goto label10;

     label29:
        $r17 := @caughtexception;

        $r13 = null;

     label30:
        r30 = (java.security.NoSuchProviderException) $r17;

     label31:
        virtualinvoke r30.<java.security.NoSuchProviderException: void printStackTrace()>();

     label32:
        goto label19;

     label33:
        $r18 := @caughtexception;

        r31 = (javax.crypto.NoSuchPaddingException) $r18;

        virtualinvoke r31.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label34:
        varReplacer3987 = null;

        return varReplacer3987;

     label35:
        $r19 := @caughtexception;

        r32 = (javax.crypto.IllegalBlockSizeException) $r19;

     label36:
        virtualinvoke r32.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

     label37:
        goto label23;

     label38:
        $r20 := @caughtexception;

        r33 = (javax.crypto.BadPaddingException) $r20;

     label39:
        virtualinvoke r33.<javax.crypto.BadPaddingException: void printStackTrace()>();

     label40:
        goto label23;

     label41:
        $r21 := @caughtexception;

        r34 = (java.security.NoSuchAlgorithmException) $r21;

        virtualinvoke r34.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label34;

     label42:
        $r22 := @caughtexception;

        r35 = (java.security.InvalidKeyException) $r22;

        virtualinvoke r35.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label34;

     label43:
        $r23 := @caughtexception;

        r36 = (java.security.InvalidAlgorithmParameterException) $r23;

        virtualinvoke r36.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label34;

     label44:
        $r24 := @caughtexception;

        r37 = (java.io.IOException) $r24;

        virtualinvoke r37.<java.io.IOException: void printStackTrace()>();

        goto label34;

     label45:
        $r17 := @caughtexception;

        goto label30;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label33;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label33;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label33;
        catch javax.crypto.NoSuchPaddingException from label08 to label09 with label33;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label33;
        catch javax.crypto.NoSuchPaddingException from label13 to label14 with label33;
        catch javax.crypto.NoSuchPaddingException from label15 to label16 with label33;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label41;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label41;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label41;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label41;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label41;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label41;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label41;
        catch java.security.InvalidKeyException from label01 to label02 with label42;
        catch java.security.InvalidKeyException from label03 to label04 with label42;
        catch java.security.InvalidKeyException from label05 to label06 with label42;
        catch java.security.InvalidKeyException from label08 to label09 with label42;
        catch java.security.InvalidKeyException from label11 to label12 with label42;
        catch java.security.InvalidKeyException from label13 to label14 with label42;
        catch java.security.InvalidKeyException from label15 to label16 with label42;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label43;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label43;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label43;
        catch java.security.InvalidAlgorithmParameterException from label08 to label09 with label43;
        catch java.security.InvalidAlgorithmParameterException from label11 to label12 with label43;
        catch java.security.InvalidAlgorithmParameterException from label13 to label14 with label43;
        catch java.security.InvalidAlgorithmParameterException from label15 to label16 with label43;
        catch java.io.IOException from label01 to label02 with label44;
        catch java.io.IOException from label03 to label04 with label44;
        catch java.io.IOException from label05 to label06 with label44;
        catch java.io.IOException from label08 to label09 with label44;
        catch java.io.IOException from label11 to label12 with label44;
        catch java.io.IOException from label13 to label14 with label44;
        catch java.io.IOException from label15 to label16 with label44;
        catch java.security.NoSuchProviderException from label16 to label17 with label29;
        catch javax.crypto.NoSuchPaddingException from label16 to label17 with label33;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label41;
        catch java.security.InvalidKeyException from label16 to label17 with label42;
        catch java.security.InvalidAlgorithmParameterException from label16 to label17 with label43;
        catch java.io.IOException from label16 to label17 with label44;
        catch java.security.NoSuchProviderException from label18 to label19 with label45;
        catch javax.crypto.NoSuchPaddingException from label18 to label19 with label33;
        catch java.security.NoSuchAlgorithmException from label18 to label19 with label41;
        catch java.security.InvalidKeyException from label18 to label19 with label42;
        catch java.security.InvalidAlgorithmParameterException from label18 to label19 with label43;
        catch java.io.IOException from label18 to label19 with label44;
        catch javax.crypto.NoSuchPaddingException from label20 to label21 with label33;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label41;
        catch java.security.InvalidKeyException from label20 to label21 with label42;
        catch java.security.InvalidAlgorithmParameterException from label20 to label21 with label43;
        catch java.io.IOException from label20 to label21 with label44;
        catch javax.crypto.IllegalBlockSizeException from label21 to label22 with label35;
        catch javax.crypto.BadPaddingException from label21 to label22 with label38;
        catch javax.crypto.NoSuchPaddingException from label21 to label22 with label33;
        catch java.security.NoSuchAlgorithmException from label21 to label22 with label41;
        catch java.security.InvalidKeyException from label21 to label22 with label42;
        catch java.security.InvalidAlgorithmParameterException from label21 to label22 with label43;
        catch java.io.IOException from label21 to label22 with label44;
        catch javax.crypto.NoSuchPaddingException from label23 to label24 with label33;
        catch javax.crypto.NoSuchPaddingException from label25 to label26 with label33;
        catch javax.crypto.NoSuchPaddingException from label27 to label28 with label33;
        catch javax.crypto.NoSuchPaddingException from label31 to label32 with label33;
        catch java.security.NoSuchAlgorithmException from label23 to label24 with label41;
        catch java.security.NoSuchAlgorithmException from label25 to label26 with label41;
        catch java.security.NoSuchAlgorithmException from label27 to label28 with label41;
        catch java.security.NoSuchAlgorithmException from label31 to label32 with label41;
        catch java.security.InvalidKeyException from label23 to label24 with label42;
        catch java.security.InvalidKeyException from label25 to label26 with label42;
        catch java.security.InvalidKeyException from label27 to label28 with label42;
        catch java.security.InvalidKeyException from label31 to label32 with label42;
        catch java.security.InvalidAlgorithmParameterException from label23 to label24 with label43;
        catch java.security.InvalidAlgorithmParameterException from label25 to label26 with label43;
        catch java.security.InvalidAlgorithmParameterException from label27 to label28 with label43;
        catch java.security.InvalidAlgorithmParameterException from label31 to label32 with label43;
        catch java.io.IOException from label23 to label24 with label44;
        catch java.io.IOException from label25 to label26 with label44;
        catch java.io.IOException from label27 to label28 with label44;
        catch java.io.IOException from label31 to label32 with label44;
        catch javax.crypto.NoSuchPaddingException from label36 to label37 with label33;
        catch javax.crypto.NoSuchPaddingException from label39 to label40 with label33;
        catch java.security.NoSuchAlgorithmException from label36 to label37 with label41;
        catch java.security.NoSuchAlgorithmException from label39 to label40 with label41;
        catch java.security.InvalidKeyException from label36 to label37 with label42;
        catch java.security.InvalidKeyException from label39 to label40 with label42;
        catch java.security.InvalidAlgorithmParameterException from label36 to label37 with label43;
        catch java.security.InvalidAlgorithmParameterException from label39 to label40 with label43;
        catch java.io.IOException from label36 to label37 with label44;
        catch java.io.IOException from label39 to label40 with label44;
    }

    public static java.lang.String b(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r7;
        javax.crypto.spec.SecretKeySpec $r2, r19;
        javax.crypto.spec.IvParameterSpec $r3, r20;
        com.impelsys.ioffline.sdk.b.d.c $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        byte[] $r8, $r9, $r10;
        javax.crypto.Cipher $r11;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        javax.crypto.NoSuchPaddingException r21;
        java.security.NoSuchAlgorithmException r22;
        java.security.InvalidKeyException r23;
        java.security.InvalidAlgorithmParameterException r24;
        javax.crypto.IllegalBlockSizeException r25;
        javax.crypto.BadPaddingException r26;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        entermonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

     label01:
        $r4 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r5 = virtualinvoke $r4.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedKey");

        $r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>();

        $r9 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r10 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

     label02:
        r19 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r19;

     label03:
        specialinvoke r19.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES");

        $r8 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r9, 0);

        $r11 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/NoPadding");

     label04:
        r20 = new javax.crypto.spec.IvParameterSpec;

        $r3 = r20;

     label05:
        specialinvoke r20.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r10);

        virtualinvoke $r11.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r2, $r3);

        $r10 = virtualinvoke $r11.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r8);

     label06:
        $r1 = new java.lang.String;

        $r0 = $r1;

     label07:
        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r10);

     label08:
        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        return $r0;

     label09:
        $r12 := @caughtexception;

     label10:
        r21 = (javax.crypto.NoSuchPaddingException) $r12;

        virtualinvoke r21.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label11:
        $r0 = null;

        goto label08;

     label12:
        $r13 := @caughtexception;

        r22 = (java.security.NoSuchAlgorithmException) $r13;

        virtualinvoke r22.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label13:
        goto label11;

     label14:
        $r14 := @caughtexception;

        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        throw $r14;

     label15:
        $r15 := @caughtexception;

     label16:
        r23 = (java.security.InvalidKeyException) $r15;

        virtualinvoke r23.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label11;

     label17:
        $r16 := @caughtexception;

        r24 = (java.security.InvalidAlgorithmParameterException) $r16;

        virtualinvoke r24.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label11;

     label18:
        $r17 := @caughtexception;

        r25 = (javax.crypto.IllegalBlockSizeException) $r17;

        virtualinvoke r25.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label11;

     label19:
        $r18 := @caughtexception;

        r26 = (javax.crypto.BadPaddingException) $r18;

        virtualinvoke r26.<javax.crypto.BadPaddingException: void printStackTrace()>();

     label20:
        goto label11;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label09;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label09;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label12;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label12;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label12;
        catch java.security.InvalidKeyException from label03 to label04 with label15;
        catch java.security.InvalidKeyException from label05 to label06 with label15;
        catch java.security.InvalidKeyException from label07 to label08 with label15;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label17;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label17;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label17;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label18;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label18;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label18;
        catch javax.crypto.BadPaddingException from label03 to label04 with label19;
        catch javax.crypto.BadPaddingException from label05 to label06 with label19;
        catch javax.crypto.BadPaddingException from label07 to label08 with label19;
        catch java.lang.Throwable from label02 to label08 with label14;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label16 to label20 with label14;
    }

    public static java.lang.String b(java.lang.String, java.lang.String, java.lang.String, android.content.Context)
    {
        java.lang.String $r0, $r1, $r2, varReplacer3996, varReplacer3997, varReplacer3999;
        android.content.Context $r3;
        javax.crypto.spec.SecretKeySpec $r4, r23;
        byte[] $r5, $r6;
        android.content.ContentResolver $r7;
        android.net.Uri $r8;
        java.io.InputStream $r9;
        java.io.ByteArrayOutputStream $r10, r22;
        javax.crypto.spec.IvParameterSpec $r11, r24;
        javax.crypto.Cipher $r12, $r13;
        java.lang.Throwable $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.security.NoSuchProviderException r25;
        javax.crypto.NoSuchPaddingException r26;
        javax.crypto.IllegalBlockSizeException r27;
        javax.crypto.BadPaddingException r28;
        java.security.NoSuchAlgorithmException r29;
        java.security.InvalidKeyException r30;
        java.security.InvalidAlgorithmParameterException r31;
        java.io.IOException r32;
        int varReplacer3998;
        null_type varReplacer4000;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: android.content.Context;

        $r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r6 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

     label01:
        $r7 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r0);

        $r9 = virtualinvoke $r7.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r8);

     label02:
        r22 = new java.io.ByteArrayOutputStream;

        $r10 = r22;

     label03:
        specialinvoke r22.<java.io.ByteArrayOutputStream: void <init>()>();

     label04:
        r23 = new javax.crypto.spec.SecretKeySpec;

        $r4 = r23;

     label05:
        varReplacer3999 = "AES";

        specialinvoke r23.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer3999);

     label06:
        r24 = new javax.crypto.spec.IvParameterSpec;

        $r11 = r24;

     label07:
        specialinvoke r24.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6);

     label08:
        varReplacer3996 = "AES/CBC/NoPadding";

        varReplacer3997 = "BC";

        $r12 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer3996, varReplacer3997);

     label09:
        $r13 = $r12;

     label10:
        varReplacer3998 = 2;

        virtualinvoke $r12.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer3998, $r4, $r11);

     label11:
        staticinvoke <com.impelsys.ioffline.sdk.b.a.b: void a(java.io.InputStream,java.io.OutputStream)>($r9, $r10);

        $r5 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label12:
        $r6 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

     label13:
        $r5 = $r6;

     label14:
        virtualinvoke $r10.<java.io.ByteArrayOutputStream: void close()>();

     label15:
        $r1 = new java.lang.String;

     label16:
        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r5);

     label17:
        return $r1;

     label18:
        $r14 := @caughtexception;

        $r13 = null;

     label19:
        r25 = (java.security.NoSuchProviderException) $r14;

     label20:
        virtualinvoke r25.<java.security.NoSuchProviderException: void printStackTrace()>();

     label21:
        goto label11;

     label22:
        $r15 := @caughtexception;

        r26 = (javax.crypto.NoSuchPaddingException) $r15;

        virtualinvoke r26.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label23:
        varReplacer4000 = null;

        return varReplacer4000;

     label24:
        $r16 := @caughtexception;

        r27 = (javax.crypto.IllegalBlockSizeException) $r16;

     label25:
        virtualinvoke r27.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

     label26:
        goto label14;

     label27:
        $r17 := @caughtexception;

        r28 = (javax.crypto.BadPaddingException) $r17;

     label28:
        virtualinvoke r28.<javax.crypto.BadPaddingException: void printStackTrace()>();

     label29:
        goto label14;

     label30:
        $r18 := @caughtexception;

        r29 = (java.security.NoSuchAlgorithmException) $r18;

        virtualinvoke r29.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label23;

     label31:
        $r19 := @caughtexception;

        r30 = (java.security.InvalidKeyException) $r19;

        virtualinvoke r30.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label23;

     label32:
        $r20 := @caughtexception;

        r31 = (java.security.InvalidAlgorithmParameterException) $r20;

        virtualinvoke r31.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label23;

     label33:
        $r21 := @caughtexception;

        r32 = (java.io.IOException) $r21;

        virtualinvoke r32.<java.io.IOException: void printStackTrace()>();

        goto label23;

     label34:
        $r14 := @caughtexception;

        goto label19;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label22;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label22;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label22;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label22;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label30;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label30;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label30;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label30;
        catch java.security.InvalidKeyException from label01 to label02 with label31;
        catch java.security.InvalidKeyException from label03 to label04 with label31;
        catch java.security.InvalidKeyException from label05 to label06 with label31;
        catch java.security.InvalidKeyException from label07 to label08 with label31;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label32;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label32;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label32;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label32;
        catch java.io.IOException from label01 to label02 with label33;
        catch java.io.IOException from label03 to label04 with label33;
        catch java.io.IOException from label05 to label06 with label33;
        catch java.io.IOException from label07 to label08 with label33;
        catch java.security.NoSuchProviderException from label08 to label09 with label18;
        catch javax.crypto.NoSuchPaddingException from label08 to label09 with label22;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label30;
        catch java.security.InvalidKeyException from label08 to label09 with label31;
        catch java.security.InvalidAlgorithmParameterException from label08 to label09 with label32;
        catch java.io.IOException from label08 to label09 with label33;
        catch java.security.NoSuchProviderException from label10 to label11 with label34;
        catch javax.crypto.NoSuchPaddingException from label10 to label11 with label22;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label30;
        catch java.security.InvalidKeyException from label10 to label11 with label31;
        catch java.security.InvalidAlgorithmParameterException from label10 to label11 with label32;
        catch java.io.IOException from label10 to label11 with label33;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label22;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label30;
        catch java.security.InvalidKeyException from label11 to label12 with label31;
        catch java.security.InvalidAlgorithmParameterException from label11 to label12 with label32;
        catch java.io.IOException from label11 to label12 with label33;
        catch javax.crypto.IllegalBlockSizeException from label12 to label13 with label24;
        catch javax.crypto.BadPaddingException from label12 to label13 with label27;
        catch javax.crypto.NoSuchPaddingException from label12 to label13 with label22;
        catch java.security.NoSuchAlgorithmException from label12 to label13 with label30;
        catch java.security.InvalidKeyException from label12 to label13 with label31;
        catch java.security.InvalidAlgorithmParameterException from label12 to label13 with label32;
        catch java.io.IOException from label12 to label13 with label33;
        catch javax.crypto.NoSuchPaddingException from label14 to label15 with label22;
        catch javax.crypto.NoSuchPaddingException from label16 to label17 with label22;
        catch javax.crypto.NoSuchPaddingException from label20 to label21 with label22;
        catch java.security.NoSuchAlgorithmException from label14 to label15 with label30;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label30;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label30;
        catch java.security.InvalidKeyException from label14 to label15 with label31;
        catch java.security.InvalidKeyException from label16 to label17 with label31;
        catch java.security.InvalidKeyException from label20 to label21 with label31;
        catch java.security.InvalidAlgorithmParameterException from label14 to label15 with label32;
        catch java.security.InvalidAlgorithmParameterException from label16 to label17 with label32;
        catch java.security.InvalidAlgorithmParameterException from label20 to label21 with label32;
        catch java.io.IOException from label14 to label15 with label33;
        catch java.io.IOException from label16 to label17 with label33;
        catch java.io.IOException from label20 to label21 with label33;
        catch javax.crypto.NoSuchPaddingException from label25 to label26 with label22;
        catch javax.crypto.NoSuchPaddingException from label28 to label29 with label22;
        catch java.security.NoSuchAlgorithmException from label25 to label26 with label30;
        catch java.security.NoSuchAlgorithmException from label28 to label29 with label30;
        catch java.security.InvalidKeyException from label25 to label26 with label31;
        catch java.security.InvalidKeyException from label28 to label29 with label31;
        catch java.security.InvalidAlgorithmParameterException from label25 to label26 with label32;
        catch java.security.InvalidAlgorithmParameterException from label28 to label29 with label32;
        catch java.io.IOException from label25 to label26 with label33;
        catch java.io.IOException from label28 to label29 with label33;
    }

    public static java.lang.String c(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

     label1:
        $r1 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r0, 0);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r1);

     label2:
        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        return $r0;

     label3:
        $r2 := @caughtexception;

        exitmonitor class "Lcom/impelsys/ioffline/sdk/b/a/b;";

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.String c(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer4007, varReplacer4010, varReplacer4011;
        javax.crypto.spec.SecretKeySpec $r2, r18;
        javax.crypto.spec.IvParameterSpec $r3, r19;
        byte[] $r4, $r8, $r9;
        com.impelsys.ioffline.sdk.b.d.c $r5;
        java.util.Map $r6;
        java.lang.Object $r7;
        javax.crypto.Cipher $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.Exception $r17;
        javax.crypto.NoSuchPaddingException r20;
        java.security.InvalidAlgorithmParameterException r21;
        java.security.NoSuchAlgorithmException r22;
        java.security.InvalidKeyException r23;
        javax.crypto.IllegalBlockSizeException r24;
        javax.crypto.BadPaddingException r25;
        int varReplacer4008, varReplacer4012;
        null_type varReplacer4009;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r5 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r6 = virtualinvoke $r5.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        varReplacer4010 = "KsharedIv";

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(varReplacer4010);

        $r1 = (java.lang.String) $r7;

        $r8 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r9 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        r18 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r18;

     label01:
        varReplacer4011 = "AES";

        specialinvoke r18.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer4011);

        varReplacer4008 = 0;

        $r4 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r9, varReplacer4008);

        varReplacer4007 = "AES/CBC/PKCS5Padding";

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4007);

     label02:
        r19 = new javax.crypto.spec.IvParameterSpec;

        $r3 = r19;

     label03:
        specialinvoke r19.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r8);

        varReplacer4012 = 2;

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4012, $r2, $r3);

        $r8 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

     label04:
        $r1 = new java.lang.String;

     label05:
        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r8);

     label06:
        return $r1;

     label07:
        $r11 := @caughtexception;

        r20 = (javax.crypto.NoSuchPaddingException) $r11;

        virtualinvoke r20.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label08:
        varReplacer4009 = null;

        return varReplacer4009;

     label09:
        $r12 := @caughtexception;

        r21 = (java.security.InvalidAlgorithmParameterException) $r12;

        virtualinvoke r21.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label08;

     label10:
        $r13 := @caughtexception;

        r22 = (java.security.NoSuchAlgorithmException) $r13;

        virtualinvoke r22.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label08;

     label11:
        $r14 := @caughtexception;

        r23 = (java.security.InvalidKeyException) $r14;

        virtualinvoke r23.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label08;

     label12:
        $r15 := @caughtexception;

        r24 = (javax.crypto.IllegalBlockSizeException) $r15;

        virtualinvoke r24.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label08;

     label13:
        $r16 := @caughtexception;

        r25 = (javax.crypto.BadPaddingException) $r16;

        virtualinvoke r25.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label08;

     label14:
        $r17 := @caughtexception;

        goto label08;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label07;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label07;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label07;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label09;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label09;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label09;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label10;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label10;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label10;
        catch java.security.InvalidKeyException from label01 to label02 with label11;
        catch java.security.InvalidKeyException from label03 to label04 with label11;
        catch java.security.InvalidKeyException from label05 to label06 with label11;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label12;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label12;
        catch javax.crypto.BadPaddingException from label01 to label02 with label13;
        catch javax.crypto.BadPaddingException from label03 to label04 with label13;
        catch javax.crypto.BadPaddingException from label05 to label06 with label13;
        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label04 with label14;
        catch java.lang.Exception from label05 to label06 with label14;
    }

    public static java.lang.String d(java.lang.String)
    {
        java.lang.String $r0, $r6;
        javax.crypto.spec.SecretKeySpec $r1, r17;
        javax.crypto.spec.IvParameterSpec $r2, r18;
        com.impelsys.ioffline.sdk.b.d.c $r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        byte[] $r7, $r8, $r9;
        javax.crypto.Cipher $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16;
        javax.crypto.NoSuchPaddingException r19;
        java.security.InvalidAlgorithmParameterException r20;
        java.security.NoSuchAlgorithmException r21;
        java.security.InvalidKeyException r22;
        javax.crypto.IllegalBlockSizeException r23;
        javax.crypto.BadPaddingException r24;

        $r0 := @parameter0: java.lang.String;

        $r3 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r4 = virtualinvoke $r3.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedKey");

        $r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r4 = virtualinvoke $r3.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedIv");

        $r6 = (java.lang.String) $r5;

        $r8 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r9 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        r17 = new javax.crypto.spec.SecretKeySpec;

        $r1 = r17;

     label01:
        specialinvoke r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, "AES");

        $r7 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r9, 0);

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label02:
        r18 = new javax.crypto.spec.IvParameterSpec;

        $r2 = r18;

     label03:
        specialinvoke r18.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r8);

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r1, $r2);

        $r8 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r7);

     label04:
        $r6 = new java.lang.String;

     label05:
        specialinvoke $r6.<java.lang.String: void <init>(byte[])>($r8);

     label06:
        return $r6;

     label07:
        $r11 := @caughtexception;

        r19 = (javax.crypto.NoSuchPaddingException) $r11;

        virtualinvoke r19.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label08:
        return null;

     label09:
        $r12 := @caughtexception;

        r20 = (java.security.InvalidAlgorithmParameterException) $r12;

        virtualinvoke r20.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label08;

     label10:
        $r13 := @caughtexception;

        r21 = (java.security.NoSuchAlgorithmException) $r13;

        virtualinvoke r21.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label08;

     label11:
        $r14 := @caughtexception;

        r22 = (java.security.InvalidKeyException) $r14;

        virtualinvoke r22.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label08;

     label12:
        $r15 := @caughtexception;

        r23 = (javax.crypto.IllegalBlockSizeException) $r15;

        virtualinvoke r23.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label08;

     label13:
        $r16 := @caughtexception;

        r24 = (javax.crypto.BadPaddingException) $r16;

        virtualinvoke r24.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label08;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label07;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label07;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label07;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label09;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label09;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label09;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label10;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label10;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label10;
        catch java.security.InvalidKeyException from label01 to label02 with label11;
        catch java.security.InvalidKeyException from label03 to label04 with label11;
        catch java.security.InvalidKeyException from label05 to label06 with label11;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label12;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label12;
        catch javax.crypto.BadPaddingException from label01 to label02 with label13;
        catch javax.crypto.BadPaddingException from label03 to label04 with label13;
        catch javax.crypto.BadPaddingException from label05 to label06 with label13;
    }

    public static java.lang.String e(java.lang.String)
    {
        java.lang.String $r0, $r6, varReplacer2316, varReplacer2317, varReplacer2321, varReplacer2322;
        javax.crypto.spec.SecretKeySpec $r1, r17;
        javax.crypto.spec.IvParameterSpec $r2, r18;
        com.impelsys.ioffline.sdk.b.d.c $r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        byte[] $r7, $r8, $r9;
        javax.crypto.Cipher $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16;
        javax.crypto.NoSuchPaddingException r19;
        java.security.InvalidAlgorithmParameterException r20;
        java.security.NoSuchAlgorithmException r21;
        java.security.InvalidKeyException r22;
        javax.crypto.IllegalBlockSizeException r23;
        javax.crypto.BadPaddingException r24;
        int varReplacer2318, varReplacer2319;
        null_type varReplacer2320;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r3 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r4 = virtualinvoke $r3.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        varReplacer2316 = "KsharedKey";

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(varReplacer2316);

        $r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <com.impelsys.ioffline.sdk.b.d.c: com.impelsys.ioffline.sdk.b.d.c a()>();

        $r4 = virtualinvoke $r3.<com.impelsys.ioffline.sdk.b.d.c: java.util.Map b()>();

        varReplacer2321 = "KsharedIv";

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(varReplacer2321);

        $r6 = (java.lang.String) $r5;

        $r8 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r9 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        r17 = new javax.crypto.spec.SecretKeySpec;

        $r1 = r17;

     label01:
        varReplacer2322 = "AES";

        specialinvoke r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, varReplacer2322);

        varReplacer2318 = 0;

        $r7 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r9, varReplacer2318);

        varReplacer2317 = "AES/CBC/PKCS5Padding";

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2317);

     label02:
        r18 = new javax.crypto.spec.IvParameterSpec;

        $r2 = r18;

     label03:
        specialinvoke r18.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r8);

        varReplacer2319 = 2;

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer2319, $r1, $r2);

        $r8 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r7);

     label04:
        $r6 = new java.lang.String;

     label05:
        specialinvoke $r6.<java.lang.String: void <init>(byte[])>($r8);

     label06:
        return $r6;

     label07:
        $r11 := @caughtexception;

        r19 = (javax.crypto.NoSuchPaddingException) $r11;

        virtualinvoke r19.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label08:
        varReplacer2320 = null;

        return varReplacer2320;

     label09:
        $r12 := @caughtexception;

        r20 = (java.security.InvalidAlgorithmParameterException) $r12;

        virtualinvoke r20.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label08;

     label10:
        $r13 := @caughtexception;

        r21 = (java.security.NoSuchAlgorithmException) $r13;

        virtualinvoke r21.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label08;

     label11:
        $r14 := @caughtexception;

        r22 = (java.security.InvalidKeyException) $r14;

        virtualinvoke r22.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label08;

     label12:
        $r15 := @caughtexception;

        r23 = (javax.crypto.IllegalBlockSizeException) $r15;

        virtualinvoke r23.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label08;

     label13:
        $r16 := @caughtexception;

        r24 = (javax.crypto.BadPaddingException) $r16;

        virtualinvoke r24.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label08;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label07;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label07;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label07;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label09;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label09;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label09;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label10;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label10;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label10;
        catch java.security.InvalidKeyException from label01 to label02 with label11;
        catch java.security.InvalidKeyException from label03 to label04 with label11;
        catch java.security.InvalidKeyException from label05 to label06 with label11;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label12;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label12;
        catch javax.crypto.BadPaddingException from label01 to label02 with label13;
        catch javax.crypto.BadPaddingException from label03 to label04 with label13;
        catch javax.crypto.BadPaddingException from label05 to label06 with label13;
    }
}
