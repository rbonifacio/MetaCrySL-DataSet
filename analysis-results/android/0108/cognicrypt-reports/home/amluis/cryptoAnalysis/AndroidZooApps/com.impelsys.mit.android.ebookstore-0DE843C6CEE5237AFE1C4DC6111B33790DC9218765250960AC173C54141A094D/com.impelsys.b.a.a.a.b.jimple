public class com.impelsys.b.a.a.a.b extends java.lang.Object
{

    public void <init>()
    {
        com.impelsys.b.a.a.a.b $r0;

        $r0 := @this: com.impelsys.b.a.a.a.b;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String a(java.io.File, android.content.Context, java.lang.String)
    {
        java.io.File $r0;
        android.content.Context $r1;
        java.lang.String $r2;
        byte[] $r3, $r7;
        com.impelsys.b.a.a.c.c $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        android.content.ContentResolver $r8;
        java.lang.StringBuilder $r9, r23;
        android.net.Uri $r10;
        java.io.InputStream $r11;
        java.io.OutputStream $r12;
        javax.crypto.spec.SecretKeySpec $r13, r24;
        javax.crypto.spec.IvParameterSpec $r14, r25;
        javax.crypto.Cipher $r15;
        javax.crypto.CipherOutputStream $r16, r26;
        java.lang.Throwable $r17, $r18, $r19, $r20, $r21, $r22;
        java.security.NoSuchProviderException r27;
        javax.crypto.NoSuchPaddingException r28;
        java.security.NoSuchAlgorithmException r29;
        java.security.InvalidKeyException r30;
        java.security.InvalidAlgorithmParameterException r31;
        java.io.IOException r32;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: android.content.Context;

        $r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r3, 16);

        $r4 = staticinvoke <com.impelsys.b.a.a.c.c: com.impelsys.b.a.a.c.c a()>();

        $r5 = virtualinvoke $r4.<com.impelsys.b.a.a.c.c: java.util.Map b()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedIv");

        $r2 = (java.lang.String) $r6;

        $r7 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

     label01:
        $r8 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label02:
        r23 = new java.lang.StringBuilder;

        $r9 = r23;

     label03:
        specialinvoke r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("file://");

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r2);

        $r11 = virtualinvoke $r8.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r10);

        $r8 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label04:
        r23 = new java.lang.StringBuilder;

        $r9 = r23;

     label05:
        specialinvoke r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("file://");

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r2);

        $r12 = virtualinvoke $r8.<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>($r10, "rw");

     label06:
        r24 = new javax.crypto.spec.SecretKeySpec;

        $r13 = r24;

     label07:
        specialinvoke r24.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "AES");

     label08:
        r25 = new javax.crypto.spec.IvParameterSpec;

        $r14 = r25;

     label09:
        specialinvoke r25.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7);

     label10:
        $r15 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/CBC/PKCS5Padding", "BC");

        virtualinvoke $r15.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r13, $r14);

     label11:
        r26 = new javax.crypto.CipherOutputStream;

        $r16 = r26;

     label12:
        specialinvoke r26.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r12, $r15);

     label13:
        staticinvoke <com.impelsys.b.a.a.a.b: void a(java.io.InputStream,java.io.OutputStream)>($r11, $r16);

     label14:
        return null;

     label15:
        $r17 := @caughtexception;

        r27 = (java.security.NoSuchProviderException) $r17;

     label16:
        virtualinvoke r27.<java.security.NoSuchProviderException: void printStackTrace()>();

     label17:
        $r16 = null;

        goto label13;

     label18:
        $r18 := @caughtexception;

        staticinvoke <com.impelsys.android.commons.a.a: void a(java.lang.Class,java.lang.String)>(class "Lcom/impelsys/b/a/a/a/b;", "No Such Padding excpetion");

        r28 = (javax.crypto.NoSuchPaddingException) $r18;

        virtualinvoke r28.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        return null;

     label19:
        $r19 := @caughtexception;

        r29 = (java.security.NoSuchAlgorithmException) $r19;

        virtualinvoke r29.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        return null;

     label20:
        $r20 := @caughtexception;

        staticinvoke <com.impelsys.android.commons.a.a: void a(java.lang.Class,java.lang.String)>(class "Lcom/impelsys/b/a/a/a/b;", "Invalid Key exception");

        r30 = (java.security.InvalidKeyException) $r20;

        virtualinvoke r30.<java.security.InvalidKeyException: void printStackTrace()>();

        return null;

     label21:
        $r21 := @caughtexception;

        staticinvoke <com.impelsys.android.commons.a.a: void a(java.lang.Class,java.lang.String)>(class "Lcom/impelsys/b/a/a/a/b;", "InvalidAlgorithmParameterException");

        r31 = (java.security.InvalidAlgorithmParameterException) $r21;

        virtualinvoke r31.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        return null;

     label22:
        $r22 := @caughtexception;

        r32 = (java.io.IOException) $r22;

        virtualinvoke r32.<java.io.IOException: void printStackTrace()>();

        return null;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label18;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label18;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label18;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label18;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label18;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label19;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label19;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label19;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label19;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label19;
        catch java.security.InvalidKeyException from label01 to label02 with label20;
        catch java.security.InvalidKeyException from label03 to label04 with label20;
        catch java.security.InvalidKeyException from label05 to label06 with label20;
        catch java.security.InvalidKeyException from label07 to label08 with label20;
        catch java.security.InvalidKeyException from label09 to label10 with label20;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label21;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label21;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label21;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label21;
        catch java.security.InvalidAlgorithmParameterException from label09 to label10 with label21;
        catch java.io.IOException from label01 to label02 with label22;
        catch java.io.IOException from label03 to label04 with label22;
        catch java.io.IOException from label05 to label06 with label22;
        catch java.io.IOException from label07 to label08 with label22;
        catch java.io.IOException from label09 to label10 with label22;
        catch java.security.NoSuchProviderException from label10 to label11 with label15;
        catch java.security.NoSuchProviderException from label12 to label13 with label15;
        catch javax.crypto.NoSuchPaddingException from label10 to label11 with label18;
        catch javax.crypto.NoSuchPaddingException from label12 to label13 with label18;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label19;
        catch java.security.NoSuchAlgorithmException from label12 to label13 with label19;
        catch java.security.InvalidKeyException from label10 to label11 with label20;
        catch java.security.InvalidKeyException from label12 to label13 with label20;
        catch java.security.InvalidAlgorithmParameterException from label10 to label11 with label21;
        catch java.security.InvalidAlgorithmParameterException from label12 to label13 with label21;
        catch java.io.IOException from label10 to label11 with label22;
        catch java.io.IOException from label12 to label13 with label22;
        catch javax.crypto.NoSuchPaddingException from label13 to label14 with label18;
        catch javax.crypto.NoSuchPaddingException from label16 to label17 with label18;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label19;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label19;
        catch java.security.InvalidKeyException from label13 to label14 with label20;
        catch java.security.InvalidKeyException from label16 to label17 with label20;
        catch java.security.InvalidAlgorithmParameterException from label13 to label14 with label21;
        catch java.security.InvalidAlgorithmParameterException from label16 to label17 with label21;
        catch java.io.IOException from label13 to label14 with label22;
        catch java.io.IOException from label16 to label17 with label22;
    }

    public static java.lang.String a(java.lang.String)
    {
        java.lang.String $r0, $r5, varReplacer4778, varReplacer4780, varReplacer4781, varReplacer4782;
        javax.crypto.spec.IvParameterSpec $r1, r18;
        com.impelsys.b.a.a.c.c $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        byte[] $r6, $r7, $r8;
        javax.crypto.spec.SecretKeySpec $r9, r17;
        javax.crypto.Cipher $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16;
        javax.crypto.NoSuchPaddingException r19;
        java.security.InvalidAlgorithmParameterException r20;
        java.security.NoSuchAlgorithmException r21;
        java.security.InvalidKeyException r22;
        javax.crypto.IllegalBlockSizeException r23;
        javax.crypto.BadPaddingException r24;
        int varReplacer4776, varReplacer4779, varReplacer4783;
        null_type varReplacer4777;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.impelsys.b.a.a.c.c: com.impelsys.b.a.a.c.c a()>();

        $r3 = virtualinvoke $r2.<com.impelsys.b.a.a.c.c: java.util.Map b()>();

        varReplacer4780 = "KsharedKey";

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(varReplacer4780);

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.impelsys.b.a.a.c.c: com.impelsys.b.a.a.c.c a()>();

        $r3 = virtualinvoke $r2.<com.impelsys.b.a.a.c.c: java.util.Map b()>();

        varReplacer4778 = "KsharedIv";

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(varReplacer4778);

        $r5 = (java.lang.String) $r4;

        $r7 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $r8 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        varReplacer4783 = 16;

        $r8 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r8, varReplacer4783);

        r17 = new javax.crypto.spec.SecretKeySpec;

        $r9 = r17;

     label01:
        varReplacer4781 = "AES";

        specialinvoke r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer4781);

        varReplacer4782 = "AES/CBC/PKCS5Padding";

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4782);

     label02:
        r18 = new javax.crypto.spec.IvParameterSpec;

        $r1 = r18;

     label03:
        specialinvoke r18.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7);

        varReplacer4776 = 1;

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer4776, $r9, $r1);

        $r6 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r8);

        varReplacer4779 = 0;

        $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r6, varReplacer4779);

     label04:
        return $r0;

     label05:
        $r11 := @caughtexception;

        r19 = (javax.crypto.NoSuchPaddingException) $r11;

        virtualinvoke r19.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label06:
        varReplacer4777 = null;

        return varReplacer4777;

     label07:
        $r12 := @caughtexception;

        r20 = (java.security.InvalidAlgorithmParameterException) $r12;

        virtualinvoke r20.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label06;

     label08:
        $r13 := @caughtexception;

        r21 = (java.security.NoSuchAlgorithmException) $r13;

        virtualinvoke r21.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label06;

     label09:
        $r14 := @caughtexception;

        r22 = (java.security.InvalidKeyException) $r14;

        virtualinvoke r22.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label06;

     label10:
        $r15 := @caughtexception;

        r23 = (javax.crypto.IllegalBlockSizeException) $r15;

        virtualinvoke r23.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label06;

     label11:
        $r16 := @caughtexception;

        r24 = (javax.crypto.BadPaddingException) $r16;

        virtualinvoke r24.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label06;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label05;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label05;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label07;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label07;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label08;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label08;
        catch java.security.InvalidKeyException from label01 to label02 with label09;
        catch java.security.InvalidKeyException from label03 to label04 with label09;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label10;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label10;
        catch javax.crypto.BadPaddingException from label01 to label02 with label11;
        catch javax.crypto.BadPaddingException from label03 to label04 with label11;
    }

    public static java.lang.String a(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2, r12;
        byte[] $r3, $r4;
        javax.crypto.Cipher $r5;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;
        java.io.UnsupportedEncodingException r13;
        java.security.NoSuchAlgorithmException r14;
        javax.crypto.NoSuchPaddingException r15;
        java.security.InvalidKeyException r16;
        javax.crypto.IllegalBlockSizeException r17;
        javax.crypto.BadPaddingException r18;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label01:
        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r3, 16);

        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label02:
        r12 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r12;

     label03:
        specialinvoke r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "AES");

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r2);

        $r3 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        $r0 = staticinvoke <com.impelsys.b.a.a.a.b: java.lang.String a(byte[],int)>($r3, 0);

     label04:
        return $r0;

     label05:
        $r6 := @caughtexception;

        r13 = (java.io.UnsupportedEncodingException) $r6;

        virtualinvoke r13.<java.io.UnsupportedEncodingException: void printStackTrace()>();

     label06:
        return null;

     label07:
        $r7 := @caughtexception;

        r14 = (java.security.NoSuchAlgorithmException) $r7;

        virtualinvoke r14.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label06;

     label08:
        $r8 := @caughtexception;

        r15 = (javax.crypto.NoSuchPaddingException) $r8;

        virtualinvoke r15.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label06;

     label09:
        $r9 := @caughtexception;

        r16 = (java.security.InvalidKeyException) $r9;

        virtualinvoke r16.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label06;

     label10:
        $r10 := @caughtexception;

        r17 = (javax.crypto.IllegalBlockSizeException) $r10;

        virtualinvoke r17.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label06;

     label11:
        $r11 := @caughtexception;

        r18 = (javax.crypto.BadPaddingException) $r11;

        virtualinvoke r18.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label06;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label05;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label05;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label07;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label07;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label08;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label08;
        catch java.security.InvalidKeyException from label01 to label02 with label09;
        catch java.security.InvalidKeyException from label03 to label04 with label09;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label10;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label10;
        catch javax.crypto.BadPaddingException from label01 to label02 with label11;
        catch javax.crypto.BadPaddingException from label03 to label04 with label11;
    }

    private static java.lang.String a(byte[], int)
    {
        byte[] $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r0, 0);

        return $r1;
    }

    private static void a(java.io.InputStream, java.io.OutputStream)
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;
        int $i0;
        byte[] $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

     label1:
        $r2 = newarray (byte)[4096];

     label2:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2);

     label3:
        if $i0 != -1 goto label4;

        virtualinvoke $r0.<java.io.InputStream: void close()>();

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;

     label4:
        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

     label5:
        goto label2;

     label6:
        $r3 := @caughtexception;

        virtualinvoke $r0.<java.io.InputStream: void close()>();

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static java.lang.String b(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2, r18;
        javax.crypto.spec.IvParameterSpec $r3, r19;
        byte[] $r4, $r8, $r9;
        com.impelsys.b.a.a.c.c $r5;
        java.util.Map $r6;
        java.lang.Object $r7;
        javax.crypto.Cipher $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.io.UnsupportedEncodingException r20;
        javax.crypto.NoSuchPaddingException r21;
        java.security.InvalidAlgorithmParameterException r22;
        java.security.NoSuchAlgorithmException r23;
        java.security.InvalidKeyException r24;
        javax.crypto.IllegalBlockSizeException r25;
        javax.crypto.BadPaddingException r26;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label01:
        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r5 = staticinvoke <com.impelsys.b.a.a.c.c: com.impelsys.b.a.a.c.c a()>();

        $r6 = virtualinvoke $r5.<com.impelsys.b.a.a.c.c: java.util.Map b()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("KsharedIv");

     label02:
        $r1 = (java.lang.String) $r7;

     label03:
        $r8 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r9 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label04:
        r18 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r18;

     label05:
        specialinvoke r18.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "AES");

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label06:
        r19 = new javax.crypto.spec.IvParameterSpec;

        $r3 = r19;

     label07:
        specialinvoke r19.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r8);

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r2, $r3);

        $r4 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r9);

        $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, 0);

     label08:
        return $r0;

     label09:
        $r11 := @caughtexception;

        r20 = (java.io.UnsupportedEncodingException) $r11;

        virtualinvoke r20.<java.io.UnsupportedEncodingException: void printStackTrace()>();

     label10:
        return null;

     label11:
        $r12 := @caughtexception;

        r21 = (javax.crypto.NoSuchPaddingException) $r12;

        virtualinvoke r21.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label10;

     label12:
        $r13 := @caughtexception;

        r22 = (java.security.InvalidAlgorithmParameterException) $r13;

        virtualinvoke r22.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label10;

     label13:
        $r14 := @caughtexception;

        r23 = (java.security.NoSuchAlgorithmException) $r14;

        virtualinvoke r23.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label10;

     label14:
        $r15 := @caughtexception;

        r24 = (java.security.InvalidKeyException) $r15;

        virtualinvoke r24.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label10;

     label15:
        $r16 := @caughtexception;

        r25 = (javax.crypto.IllegalBlockSizeException) $r16;

        virtualinvoke r25.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label10;

     label16:
        $r17 := @caughtexception;

        r26 = (javax.crypto.BadPaddingException) $r17;

        virtualinvoke r26.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label10;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label09;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label09;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label09;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label09;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label11;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label11;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label11;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label11;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label12;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label12;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label12;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label12;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label13;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label13;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label13;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label13;
        catch java.security.InvalidKeyException from label01 to label02 with label14;
        catch java.security.InvalidKeyException from label03 to label04 with label14;
        catch java.security.InvalidKeyException from label05 to label06 with label14;
        catch java.security.InvalidKeyException from label07 to label08 with label14;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label15;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label15;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label15;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label15;
        catch javax.crypto.BadPaddingException from label01 to label02 with label16;
        catch javax.crypto.BadPaddingException from label03 to label04 with label16;
        catch javax.crypto.BadPaddingException from label05 to label06 with label16;
        catch javax.crypto.BadPaddingException from label07 to label08 with label16;
    }
}
