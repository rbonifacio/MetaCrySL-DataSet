public final class com.squareup.okhttp.OkHttpClient extends java.lang.Object implements java.net.URLStreamHandlerFactory, java.lang.Cloneable
{
    private com.squareup.okhttp.OkAuthenticator authenticator;
    private int connectTimeout;
    private com.squareup.okhttp.ConnectionPool connectionPool;
    private java.net.CookieHandler cookieHandler;
    private boolean followProtocolRedirects;
    private javax.net.ssl.HostnameVerifier hostnameVerifier;
    private java.util.List protocols;
    private java.net.Proxy proxy;
    private java.net.ProxySelector proxySelector;
    private int readTimeout;
    private com.squareup.okhttp.OkResponseCache responseCache;
    private final com.squareup.okhttp.RouteDatabase routeDatabase;
    private javax.net.ssl.SSLSocketFactory sslSocketFactory;

    public void <init>()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.RouteDatabase $r1;
        int varReplacer2804;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        varReplacer2804 = 1;

        $r0.<com.squareup.okhttp.OkHttpClient: boolean followProtocolRedirects> = varReplacer2804;

        $r1 = new com.squareup.okhttp.RouteDatabase;

        specialinvoke $r1.<com.squareup.okhttp.RouteDatabase: void <init>()>();

        $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.RouteDatabase routeDatabase> = $r1;

        return;
    }

    private javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.lang.Throwable $r1, $r5;
        javax.net.ssl.SSLSocketFactory $r2;
        javax.net.ssl.SSLContext $r3;
        java.lang.AssertionError $r4;
        null_type varReplacer6883, varReplacer6884, varReplacer6885;
        java.lang.String varReplacer6886;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        entermonitor $r0;

     label1:
        $r2 = $r0.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

     label2:
        if $r2 != null goto label5;

     label3:
        varReplacer6886 = "TLS";

        $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer6886);

        varReplacer6883 = null;

        varReplacer6884 = null;

        varReplacer6885 = null;

        virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer6883, varReplacer6883, varReplacer6883);

        $r2 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label4:
        $r0.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r2;

     label5:
        $r2 = $r0.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

     label6:
        exitmonitor $r0;

        return $r2;

     label7:
        $r1 := @caughtexception;

     label8:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label9:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.security.GeneralSecurityException from label3 to label4 with label7;
        catch java.lang.Throwable from label3 to label5 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    private com.squareup.okhttp.OkResponseCache toOkResponseCache(java.net.ResponseCache)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.ResponseCache $r1;
        boolean $z0;
        com.squareup.okhttp.OkResponseCache $r2;
        com.squareup.okhttp.internal.http.ResponseCacheAdapter $r3;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.net.ResponseCache;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof com.squareup.okhttp.OkResponseCache;

        if $z0 == 0 goto label2;

     label1:
        $r2 = (com.squareup.okhttp.OkResponseCache) $r1;

        return $r2;

     label2:
        $r3 = new com.squareup.okhttp.internal.http.ResponseCacheAdapter;

        specialinvoke $r3.<com.squareup.okhttp.internal.http.ResponseCacheAdapter: void <init>(java.net.ResponseCache)>($r1);

        return $r3;
    }

    public com.squareup.okhttp.OkHttpClient clone()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.lang.Throwable $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

     label1:
        $r2 = specialinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        $r0 = (com.squareup.okhttp.OkHttpClient) $r2;

        return $r0;

     label3:
        $r1 := @caughtexception;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        com.squareup.okhttp.OkHttpClient $r0;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r0 = virtualinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient clone()>();

        return $r0;
    }

    com.squareup.okhttp.OkHttpClient copyWithDefaults()
    {
        com.squareup.okhttp.OkHttpClient $r0, $r1;
        java.net.ProxySelector $r2;
        java.net.CookieHandler $r3;
        com.squareup.okhttp.OkResponseCache $r4;
        java.net.ResponseCache $r5;
        javax.net.ssl.SSLSocketFactory $r6;
        javax.net.ssl.HostnameVerifier $r7;
        com.squareup.okhttp.internal.tls.OkHostnameVerifier $r8;
        com.squareup.okhttp.OkAuthenticator $r9;
        com.squareup.okhttp.ConnectionPool $r10;
        java.util.List $r11;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 = virtualinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient clone()>();

        $r2 = $r1.<com.squareup.okhttp.OkHttpClient: java.net.ProxySelector proxySelector>;

        if $r2 != null goto label1;

        $r2 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>();

        $r1.<com.squareup.okhttp.OkHttpClient: java.net.ProxySelector proxySelector> = $r2;

     label1:
        $r3 = $r1.<com.squareup.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler>;

        if $r3 != null goto label2;

        $r3 = staticinvoke <java.net.CookieHandler: java.net.CookieHandler getDefault()>();

        $r1.<com.squareup.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler> = $r3;

     label2:
        $r4 = $r1.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache responseCache>;

        if $r4 != null goto label3;

        $r5 = staticinvoke <java.net.ResponseCache: java.net.ResponseCache getDefault()>();

        $r4 = specialinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache toOkResponseCache(java.net.ResponseCache)>($r5);

        $r1.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache responseCache> = $r4;

     label3:
        $r6 = $r1.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r6 != null goto label4;

        $r6 = specialinvoke $r0.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>();

        $r1.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r6;

     label4:
        $r7 = $r1.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        if $r7 != null goto label5;

        $r8 = <com.squareup.okhttp.internal.tls.OkHostnameVerifier: com.squareup.okhttp.internal.tls.OkHostnameVerifier INSTANCE>;

        $r1.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r8;

     label5:
        $r9 = $r1.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkAuthenticator authenticator>;

        if $r9 != null goto label6;

        $r9 = <com.squareup.okhttp.internal.http.HttpAuthenticator: com.squareup.okhttp.OkAuthenticator SYSTEM_DEFAULT>;

        $r1.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkAuthenticator authenticator> = $r9;

     label6:
        $r10 = $r1.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.ConnectionPool connectionPool>;

        if $r10 != null goto label7;

        $r10 = staticinvoke <com.squareup.okhttp.ConnectionPool: com.squareup.okhttp.ConnectionPool getDefault()>();

        $r1.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.ConnectionPool connectionPool> = $r10;

     label7:
        $r11 = $r1.<com.squareup.okhttp.OkHttpClient: java.util.List protocols>;

        if $r11 != null goto label8;

        $r11 = <com.squareup.okhttp.internal.Util: java.util.List HTTP2_SPDY3_AND_HTTP>;

        $r1.<com.squareup.okhttp.OkHttpClient: java.util.List protocols> = $r11;

     label8:
        return $r1;
    }

    public java.net.URLStreamHandler createURLStreamHandler(java.lang.String)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.lang.String $r1;
        boolean $z0;
        com.squareup.okhttp.OkHttpClient$1 $r2;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new com.squareup.okhttp.OkHttpClient$1;

        specialinvoke $r2.<com.squareup.okhttp.OkHttpClient$1: void <init>(com.squareup.okhttp.OkHttpClient,java.lang.String)>($r0, $r1);

        return $r2;
    }

    public com.squareup.okhttp.OkAuthenticator getAuthenticator()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.OkAuthenticator r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkAuthenticator authenticator>;

        return r1;
    }

    public com.squareup.okhttp.Cache getCache()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.OkResponseCache $r1;
        boolean $z0;
        com.squareup.okhttp.Cache $r2;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 = $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache responseCache>;

        $z0 = $r1 instanceof com.squareup.okhttp.Cache;

        if $z0 == 0 goto label1;

        $r1 = $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache responseCache>;

        $r2 = (com.squareup.okhttp.Cache) $r1;

        return $r2;

     label1:
        return null;
    }

    public int getConnectTimeout()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        int i0;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        i0 = $r0.<com.squareup.okhttp.OkHttpClient: int connectTimeout>;

        return i0;
    }

    public com.squareup.okhttp.ConnectionPool getConnectionPool()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.ConnectionPool r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.ConnectionPool connectionPool>;

        return r1;
    }

    public java.net.CookieHandler getCookieHandler()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.CookieHandler r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler>;

        return r1;
    }

    public boolean getFollowProtocolRedirects()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        boolean z0;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        z0 = $r0.<com.squareup.okhttp.OkHttpClient: boolean followProtocolRedirects>;

        return z0;
    }

    public boolean getFollowSslRedirects()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        boolean z0;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        z0 = $r0.<com.squareup.okhttp.OkHttpClient: boolean followProtocolRedirects>;

        return z0;
    }

    public javax.net.ssl.HostnameVerifier getHostnameVerifier()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        javax.net.ssl.HostnameVerifier r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        return r1;
    }

    public com.squareup.okhttp.OkResponseCache getOkResponseCache()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.OkResponseCache r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache responseCache>;

        return r1;
    }

    public java.util.List getProtocols()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.util.List r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: java.util.List protocols>;

        return r1;
    }

    public java.net.Proxy getProxy()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.Proxy r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: java.net.Proxy proxy>;

        return r1;
    }

    public java.net.ProxySelector getProxySelector()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.ProxySelector r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: java.net.ProxySelector proxySelector>;

        return r1;
    }

    public int getReadTimeout()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        int i0;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        i0 = $r0.<com.squareup.okhttp.OkHttpClient: int readTimeout>;

        return i0;
    }

    public java.net.ResponseCache getResponseCache()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.ResponseCache $r1;
        com.squareup.okhttp.OkResponseCache $r2;
        boolean $z0;
        com.squareup.okhttp.internal.http.ResponseCacheAdapter $r3;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r2 = $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache responseCache>;

        $z0 = $r2 instanceof com.squareup.okhttp.internal.http.ResponseCacheAdapter;

        if $z0 == 0 goto label1;

        $r2 = $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache responseCache>;

        $r3 = (com.squareup.okhttp.internal.http.ResponseCacheAdapter) $r2;

        $r1 = virtualinvoke $r3.<com.squareup.okhttp.internal.http.ResponseCacheAdapter: java.net.ResponseCache getDelegate()>();

        return $r1;

     label1:
        return null;
    }

    public com.squareup.okhttp.RouteDatabase getRoutesDatabase()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.RouteDatabase r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.RouteDatabase routeDatabase>;

        return r1;
    }

    public javax.net.ssl.SSLSocketFactory getSslSocketFactory()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        javax.net.ssl.SSLSocketFactory r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        r1 = $r0.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        return r1;
    }

    public java.util.List getTransports()
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.util.ArrayList $r1;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.squareup.okhttp.Protocol $r4;
        com.squareup.okhttp.internal.okio.ByteString $r5;
        java.lang.String $r6;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 = new java.util.ArrayList;

        $r2 = $r0.<com.squareup.okhttp.OkHttpClient: java.util.List protocols>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

        $r2 = $r0.<com.squareup.okhttp.OkHttpClient: java.util.List protocols>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

     label1:
        if $i0 >= $i1 goto label2;

        $r2 = $r0.<com.squareup.okhttp.OkHttpClient: java.util.List protocols>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (com.squareup.okhttp.Protocol) $r3;

        $r5 = $r4.<com.squareup.okhttp.Protocol: com.squareup.okhttp.internal.okio.ByteString name>;

        $r6 = virtualinvoke $r5.<com.squareup.okhttp.internal.okio.ByteString: java.lang.String utf8()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public java.net.HttpURLConnection open(java.net.URL)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.URL $r1;
        java.net.HttpURLConnection $r2;
        java.net.Proxy $r3;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.net.URL;

        $r3 = $r0.<com.squareup.okhttp.OkHttpClient: java.net.Proxy proxy>;

        $r2 = virtualinvoke $r0.<com.squareup.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL,java.net.Proxy)>($r1, $r3);

        return $r2;
    }

    java.net.HttpURLConnection open(java.net.URL, java.net.Proxy)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.URL $r1;
        java.net.Proxy $r2;
        java.lang.String $r3, varReplacer6866, varReplacer6867, varReplacer6868;
        boolean $z0;
        com.squareup.okhttp.internal.http.HttpURLConnectionImpl $r4;
        com.squareup.okhttp.internal.http.HttpsURLConnectionImpl $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.net.URL;

        $r2 := @parameter1: java.net.Proxy;

        $r3 = virtualinvoke $r1.<java.net.URL: java.lang.String getProtocol()>();

        $r0 = virtualinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient copyWithDefaults()>();

        $r0.<com.squareup.okhttp.OkHttpClient: java.net.Proxy proxy> = $r2;

        varReplacer6867 = "http";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer6867);

        if $z0 == 0 goto label1;

        $r4 = new com.squareup.okhttp.internal.http.HttpURLConnectionImpl;

        specialinvoke $r4.<com.squareup.okhttp.internal.http.HttpURLConnectionImpl: void <init>(java.net.URL,com.squareup.okhttp.OkHttpClient)>($r1, $r0);

        return $r4;

     label1:
        varReplacer6866 = "https";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer6866);

        if $z0 == 0 goto label2;

        $r5 = new com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;

        specialinvoke $r5.<com.squareup.okhttp.internal.http.HttpsURLConnectionImpl: void <init>(java.net.URL,com.squareup.okhttp.OkHttpClient)>($r1, $r0);

        return $r5;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        varReplacer6868 = "Unexpected protocol: ";

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer6868);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r6;
    }

    public com.squareup.okhttp.OkHttpClient setAuthenticator(com.squareup.okhttp.OkAuthenticator)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.OkAuthenticator $r1;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: com.squareup.okhttp.OkAuthenticator;

        $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkAuthenticator authenticator> = $r1;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setCache(com.squareup.okhttp.Cache)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.Cache $r1;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: com.squareup.okhttp.Cache;

        $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache responseCache> = $r1;

        return $r0;
    }

    public void setConnectTimeout(long, java.util.concurrent.TimeUnit)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        byte $b1;
        java.lang.IllegalArgumentException $r2;
        int $i2;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unit == null");

        throw $r2;

     label2:
        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        $b1 = $l0 cmp 2147483647L;

        if $b1 <= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timeout too large.");

        throw $r2;

     label3:
        $i2 = (int) $l0;

        $r0.<com.squareup.okhttp.OkHttpClient: int connectTimeout> = $i2;

        return;
    }

    public com.squareup.okhttp.OkHttpClient setConnectionPool(com.squareup.okhttp.ConnectionPool)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.ConnectionPool $r1;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: com.squareup.okhttp.ConnectionPool;

        $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.ConnectionPool connectionPool> = $r1;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setCookieHandler(java.net.CookieHandler)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.CookieHandler $r1;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.net.CookieHandler;

        $r0.<com.squareup.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler> = $r1;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setFollowProtocolRedirects(boolean)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        boolean $z0;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $z0 := @parameter0: boolean;

        $r0.<com.squareup.okhttp.OkHttpClient: boolean followProtocolRedirects> = $z0;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setFollowSslRedirects(boolean)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        boolean $z0;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $z0 := @parameter0: boolean;

        $r0.<com.squareup.okhttp.OkHttpClient: boolean followProtocolRedirects> = $z0;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setHostnameVerifier(javax.net.ssl.HostnameVerifier)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        javax.net.ssl.HostnameVerifier $r1;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: javax.net.ssl.HostnameVerifier;

        $r0.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r1;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setOkResponseCache(com.squareup.okhttp.OkResponseCache)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        com.squareup.okhttp.OkResponseCache $r1;
        null_type varReplacer6946;

        nop;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: com.squareup.okhttp.OkResponseCache;

        varReplacer6946 = null;

        $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache responseCache> = varReplacer6946;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setProtocols(java.util.List)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.util.List $r1;
        com.squareup.okhttp.Protocol $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.util.List;

        $r1 = staticinvoke <com.squareup.okhttp.internal.Util: java.util.List immutableList(java.util.List)>($r1);

        $r2 = <com.squareup.okhttp.Protocol: com.squareup.okhttp.Protocol HTTP_11>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocols doesn\'t contain http/1.1: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>(null);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocols must not contain null");

        throw $r3;

     label2:
        $r1 = staticinvoke <com.squareup.okhttp.internal.Util: java.util.List immutableList(java.util.List)>($r1);

        $r0.<com.squareup.okhttp.OkHttpClient: java.util.List protocols> = $r1;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setProxy(java.net.Proxy)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.Proxy $r1;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.net.Proxy;

        $r0.<com.squareup.okhttp.OkHttpClient: java.net.Proxy proxy> = $r1;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setProxySelector(java.net.ProxySelector)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.ProxySelector $r1;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.net.ProxySelector;

        $r0.<com.squareup.okhttp.OkHttpClient: java.net.ProxySelector proxySelector> = $r1;

        return $r0;
    }

    public void setReadTimeout(long, java.util.concurrent.TimeUnit)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        byte $b1;
        java.lang.IllegalArgumentException $r2;
        int $i2;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unit == null");

        throw $r2;

     label2:
        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        $b1 = $l0 cmp 2147483647L;

        if $b1 <= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timeout too large.");

        throw $r2;

     label3:
        $i2 = (int) $l0;

        $r0.<com.squareup.okhttp.OkHttpClient: int readTimeout> = $i2;

        return;
    }

    public com.squareup.okhttp.OkHttpClient setResponseCache(java.net.ResponseCache)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.net.ResponseCache $r1;
        com.squareup.okhttp.OkResponseCache $r2;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.net.ResponseCache;

        $r2 = specialinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkResponseCache toOkResponseCache(java.net.ResponseCache)>($r1);

        $r0 = virtualinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setOkResponseCache(com.squareup.okhttp.OkResponseCache)>($r2);

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setSslSocketFactory(javax.net.ssl.SSLSocketFactory)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        javax.net.ssl.SSLSocketFactory $r1;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        $r0.<com.squareup.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r1;

        return $r0;
    }

    public com.squareup.okhttp.OkHttpClient setTransports(java.util.List)
    {
        com.squareup.okhttp.OkHttpClient $r0;
        java.util.List $r1;
        java.lang.Throwable $r2;
        java.util.ArrayList $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r5;
        com.squareup.okhttp.internal.okio.ByteString $r6;
        com.squareup.okhttp.Protocol $r7;
        java.lang.IllegalArgumentException $r8;

        $r0 := @this: com.squareup.okhttp.OkHttpClient;

        $r1 := @parameter0: java.util.List;

        $r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if $i0 >= $i1 goto label7;

     label2:
        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

     label3:
        $r5 = (java.lang.String) $r4;

     label4:
        $r6 = staticinvoke <com.squareup.okhttp.internal.okio.ByteString: com.squareup.okhttp.internal.okio.ByteString encodeUtf8(java.lang.String)>($r5);

        $r7 = staticinvoke <com.squareup.okhttp.internal.Util: com.squareup.okhttp.Protocol getProtocol(com.squareup.okhttp.internal.okio.ByteString)>($r6);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label5:
        $i0 = $i0 + 1;

        goto label1;

     label6:
        $r2 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r2);

        throw $r8;

     label7:
        $r0 = virtualinvoke $r0.<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.OkHttpClient setProtocols(java.util.List)>($r3);

        return $r0;

        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }
}
