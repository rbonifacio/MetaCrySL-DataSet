public class io.jsonwebtoken.impl.DefaultJwtBuilder extends java.lang.Object implements io.jsonwebtoken.JwtBuilder
{
    private static final com.fasterxml.jackson.databind.ObjectMapper OBJECT_MAPPER;
    private io.jsonwebtoken.SignatureAlgorithm algorithm;
    private io.jsonwebtoken.Claims claims;
    private io.jsonwebtoken.CompressionCodec compressionCodec;
    private io.jsonwebtoken.Header header;
    private java.security.Key key;
    private byte[] keyBytes;
    private java.lang.String payload;

    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ObjectMapper $r0;

        nop;

        $r0 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();

        <io.jsonwebtoken.impl.DefaultJwtBuilder: com.fasterxml.jackson.databind.ObjectMapper OBJECT_MAPPER> = $r0;

        return;
    }

    public void <init>()
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;

        nop;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected java.lang.String base64UrlEncode(java.lang.Object, java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        byte[] $r3;
        io.jsonwebtoken.impl.TextCodec $r4;
        com.fasterxml.jackson.core.JsonProcessingException $r5;
        java.lang.IllegalStateException $r6;

        nop;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: byte[] toJson(java.lang.Object)>($r1);

     label2:
        $r4 = <io.jsonwebtoken.impl.TextCodec: io.jsonwebtoken.impl.TextCodec BASE64URL>;

        $r2 = interfaceinvoke $r4.<io.jsonwebtoken.impl.TextCodec: java.lang.String encode(byte[])>($r3);

        return $r2;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r5);

        throw $r6;

        catch com.fasterxml.jackson.core.JsonProcessingException from label1 to label2 with label3;
    }

    public io.jsonwebtoken.JwtBuilder claim(java.lang.String, java.lang.Object)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        io.jsonwebtoken.Claims $r3;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        staticinvoke <io.jsonwebtoken.lang.Assert: void hasText(java.lang.String,java.lang.String)>($r1, "Claim property name cannot be null or empty.");

        $r3 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        if $r3 != null goto label1;

        if $r2 == null goto label3;

        $r3 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims ensureClaims()>();

        interfaceinvoke $r3.<io.jsonwebtoken.Claims: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r0;

     label1:
        if $r2 != null goto label2;

        $r3 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        interfaceinvoke $r3.<io.jsonwebtoken.Claims: java.lang.Object remove(java.lang.Object)>($r1);

        return $r0;

     label2:
        $r3 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        interfaceinvoke $r3.<io.jsonwebtoken.Claims: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

     label3:
        return $r0;
    }

    public java.lang.String compact()
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.CompressionCodec $r1;
        java.lang.String $r2, $r10, varReplacer1400, varReplacer1403, varReplacer1404, varReplacer1406, varReplacer1407, varReplacer1408;
        io.jsonwebtoken.Claims $r3;
        boolean $z0;
        java.security.Key $r4;
        byte[] $r5;
        io.jsonwebtoken.Header $r6;
        java.lang.Object $r7, $r9;
        io.jsonwebtoken.SignatureAlgorithm $r8;
        java.nio.charset.Charset $r11;
        io.jsonwebtoken.impl.TextCodec $r12;
        java.lang.StringBuilder $r13, r18;
        io.jsonwebtoken.impl.crypto.JwtSigner $r14;
        com.fasterxml.jackson.core.JsonProcessingException $r15;
        java.lang.IllegalStateException r16;
        javax.crypto.spec.SecretKeySpec r17;
        io.jsonwebtoken.impl.DefaultJwsHeader r19;
        java.lang.IllegalArgumentException r20;
        io.jsonwebtoken.JwsHeader r21;
        int varReplacer1401, varReplacer1402, varReplacer1405;

        nop;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.lang.String payload>;

        if $r2 != null goto label01;

        $r3 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        $z0 = staticinvoke <io.jsonwebtoken.lang.Collections: boolean isEmpty(java.util.Map)>($r3);

        if $z0 == 0 goto label01;

        r16 = new java.lang.IllegalStateException;

        varReplacer1400 = "Either \'payload\' or \'claims\' must be specified.";

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1400);

        throw r16;

     label01:
        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.lang.String payload>;

        if $r2 == null goto label02;

        $r3 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        $z0 = staticinvoke <io.jsonwebtoken.lang.Collections: boolean isEmpty(java.util.Map)>($r3);

        if $z0 != 0 goto label02;

        r16 = new java.lang.IllegalStateException;

        varReplacer1408 = "Both \'payload\' and \'claims\' cannot both be specified. Choose either one.";

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1408);

        throw r16;

     label02:
        $r4 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.security.Key key>;

        if $r4 == null goto label03;

        $r5 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: byte[] keyBytes>;

        if $r5 == null goto label03;

        r16 = new java.lang.IllegalStateException;

        varReplacer1403 = "A key object and key bytes cannot both be specified. Choose either one.";

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1403);

        throw r16;

     label03:
        $r6 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Header ensureHeader()>();

        $r7 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.security.Key key>;

        if $r7 != null goto label04;

        $r5 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: byte[] keyBytes>;

        $z0 = staticinvoke <io.jsonwebtoken.lang.Objects: boolean isEmpty(byte[])>($r5);

        if $z0 != 0 goto label04;

        r17 = new javax.crypto.spec.SecretKeySpec;

        $r7 = r17;

        $r5 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: byte[] keyBytes>;

        $r8 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.SignatureAlgorithm algorithm>;

        $r2 = virtualinvoke $r8.<io.jsonwebtoken.SignatureAlgorithm: java.lang.String getJcaName()>();

        specialinvoke r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, $r2);

     label04:
        $z0 = $r6 instanceof io.jsonwebtoken.JwsHeader;

        if $z0 == 0 goto label11;

        $r9 = (io.jsonwebtoken.JwsHeader) $r6;

     label05:
        if $r7 == null goto label12;

        $r8 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.SignatureAlgorithm algorithm>;

        $r2 = virtualinvoke $r8.<io.jsonwebtoken.SignatureAlgorithm: java.lang.String getValue()>();

        r21 = (io.jsonwebtoken.JwsHeader) $r9;

        interfaceinvoke r21.<io.jsonwebtoken.JwsHeader: io.jsonwebtoken.JwsHeader setAlgorithm(java.lang.String)>($r2);

     label06:
        $r1 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.CompressionCodec compressionCodec>;

        if $r1 == null goto label07;

        $r1 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.CompressionCodec compressionCodec>;

        $r2 = interfaceinvoke $r1.<io.jsonwebtoken.CompressionCodec: java.lang.String getAlgorithmName()>();

        r21 = (io.jsonwebtoken.JwsHeader) $r9;

        interfaceinvoke r21.<io.jsonwebtoken.JwsHeader: io.jsonwebtoken.Header setCompressionAlgorithm(java.lang.String)>($r2);

     label07:
        varReplacer1406 = "Unable to serialize header to json.";

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.lang.String base64UrlEncode(java.lang.Object,java.lang.String)>($r9, varReplacer1406);

        $r1 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.CompressionCodec compressionCodec>;

        if $r1 == null goto label17;

        $r10 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.lang.String payload>;

        if $r10 == null goto label13;

        $r10 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.lang.String payload>;

        $r11 = <io.jsonwebtoken.lang.Strings: java.nio.charset.Charset UTF_8>;

     label08:
        $r5 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11);

     label09:
        $r12 = <io.jsonwebtoken.impl.TextCodec: io.jsonwebtoken.impl.TextCodec BASE64URL>;

        $r1 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.CompressionCodec compressionCodec>;

        $r5 = interfaceinvoke $r1.<io.jsonwebtoken.CompressionCodec: byte[] compress(byte[])>($r5);

        $r10 = interfaceinvoke $r12.<io.jsonwebtoken.impl.TextCodec: java.lang.String encode(byte[])>($r5);

     label10:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        varReplacer1405 = 46;

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(varReplacer1405);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        if $r7 == null goto label19;

        $r8 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.SignatureAlgorithm algorithm>;

        $r4 = (java.security.Key) $r7;

        $r14 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.impl.crypto.JwtSigner createSigner(io.jsonwebtoken.SignatureAlgorithm,java.security.Key)>($r8, $r4);

        $r10 = interfaceinvoke $r14.<io.jsonwebtoken.impl.crypto.JwtSigner: java.lang.String sign(java.lang.String)>($r2);

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        varReplacer1401 = 46;

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(varReplacer1401);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label11:
        r19 = new io.jsonwebtoken.impl.DefaultJwsHeader;

        specialinvoke r19.<io.jsonwebtoken.impl.DefaultJwsHeader: void <init>(java.util.Map)>($r6);

        $r9 = r19;

        goto label05;

     label12:
        $r8 = <io.jsonwebtoken.SignatureAlgorithm: io.jsonwebtoken.SignatureAlgorithm NONE>;

        $r2 = virtualinvoke $r8.<io.jsonwebtoken.SignatureAlgorithm: java.lang.String getValue()>();

        r21 = (io.jsonwebtoken.JwsHeader) $r9;

        interfaceinvoke r21.<io.jsonwebtoken.JwsHeader: io.jsonwebtoken.JwsHeader setAlgorithm(java.lang.String)>($r2);

        goto label06;

     label13:
        $r3 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

     label14:
        $r5 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: byte[] toJson(java.lang.Object)>($r3);

     label15:
        goto label09;

     label16:
        $r15 := @caughtexception;

        r20 = new java.lang.IllegalArgumentException;

        varReplacer1404 = "Unable to serialize claims object to json.";

        specialinvoke r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer1404);

        throw r20;

     label17:
        $r10 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.lang.String payload>;

        if $r10 == null goto label18;

        $r12 = <io.jsonwebtoken.impl.TextCodec: io.jsonwebtoken.impl.TextCodec BASE64URL>;

        $r10 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.lang.String payload>;

        $r10 = interfaceinvoke $r12.<io.jsonwebtoken.impl.TextCodec: java.lang.String encode(java.lang.String)>($r10);

        goto label10;

     label18:
        $r3 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        varReplacer1407 = "Unable to serialize claims object to json.";

        $r10 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.lang.String base64UrlEncode(java.lang.Object,java.lang.String)>($r3, varReplacer1407);

        goto label10;

     label19:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        varReplacer1402 = 46;

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(varReplacer1402);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

        catch com.fasterxml.jackson.core.JsonProcessingException from label08 to label09 with label16;
        catch com.fasterxml.jackson.core.JsonProcessingException from label14 to label15 with label16;
    }

    public io.jsonwebtoken.JwtBuilder compressWith(io.jsonwebtoken.CompressionCodec)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.CompressionCodec $r1;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: io.jsonwebtoken.CompressionCodec;

        staticinvoke <io.jsonwebtoken.lang.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, "compressionCodec cannot be null");

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.CompressionCodec compressionCodec> = $r1;

        return $r0;
    }

    protected io.jsonwebtoken.impl.crypto.JwtSigner createSigner(io.jsonwebtoken.SignatureAlgorithm, java.security.Key)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.SignatureAlgorithm $r1;
        java.security.Key $r2;
        io.jsonwebtoken.impl.crypto.DefaultJwtSigner $r3;

        nop;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: io.jsonwebtoken.SignatureAlgorithm;

        $r2 := @parameter1: java.security.Key;

        $r3 = new io.jsonwebtoken.impl.crypto.DefaultJwtSigner;

        specialinvoke $r3.<io.jsonwebtoken.impl.crypto.DefaultJwtSigner: void <init>(io.jsonwebtoken.SignatureAlgorithm,java.security.Key)>($r1, $r2);

        return $r3;
    }

    protected io.jsonwebtoken.Claims ensureClaims()
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.Claims $r1;
        io.jsonwebtoken.impl.DefaultClaims $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        if $r1 != null goto label1;

        $r2 = new io.jsonwebtoken.impl.DefaultClaims;

        specialinvoke $r2.<io.jsonwebtoken.impl.DefaultClaims: void <init>()>();

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims> = $r2;

     label1:
        $r1 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        return $r1;
    }

    protected io.jsonwebtoken.Header ensureHeader()
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.Header $r1;
        io.jsonwebtoken.impl.DefaultHeader $r2;

        nop;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Header header>;

        if $r1 != null goto label1;

        $r2 = new io.jsonwebtoken.impl.DefaultHeader;

        specialinvoke $r2.<io.jsonwebtoken.impl.DefaultHeader: void <init>()>();

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Header header> = $r2;

     label1:
        $r1 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Header header>;

        return $r1;
    }

    public volatile io.jsonwebtoken.ClaimsMutator setAudience(java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;
        io.jsonwebtoken.JwtBuilder $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.JwtBuilder setAudience(java.lang.String)>($r1);

        return $r2;
    }

    public io.jsonwebtoken.JwtBuilder setAudience(java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;
        boolean $z0;
        io.jsonwebtoken.Claims $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <io.jsonwebtoken.lang.Strings: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims ensureClaims()>();

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setAudience(java.lang.String)>($r1);

        return $r0;

     label1:
        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        if $r2 == null goto label2;

        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setAudience(java.lang.String)>($r1);

     label2:
        return $r0;
    }

    public io.jsonwebtoken.JwtBuilder setClaims(io.jsonwebtoken.Claims)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.Claims $r1;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: io.jsonwebtoken.Claims;

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims> = $r1;

        return $r0;
    }

    public io.jsonwebtoken.JwtBuilder setClaims(java.util.Map)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.util.Map $r1;
        io.jsonwebtoken.Claims $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.util.Map;

        $r2 = staticinvoke <io.jsonwebtoken.Jwts: io.jsonwebtoken.Claims claims(java.util.Map)>($r1);

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims> = $r2;

        return $r0;
    }

    public volatile io.jsonwebtoken.ClaimsMutator setExpiration(java.util.Date)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.util.Date $r1;
        io.jsonwebtoken.JwtBuilder $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.JwtBuilder setExpiration(java.util.Date)>($r1);

        return $r2;
    }

    public io.jsonwebtoken.JwtBuilder setExpiration(java.util.Date)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.util.Date $r1;
        io.jsonwebtoken.Claims $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.util.Date;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims ensureClaims()>();

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setExpiration(java.util.Date)>($r1);

        return $r0;

     label1:
        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        if $r2 == null goto label2;

        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setExpiration(java.util.Date)>($r1);

     label2:
        return $r0;
    }

    public io.jsonwebtoken.JwtBuilder setHeader(io.jsonwebtoken.Header)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.Header $r1;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: io.jsonwebtoken.Header;

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Header header> = $r1;

        return $r0;
    }

    public io.jsonwebtoken.JwtBuilder setHeader(java.util.Map)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.util.Map $r1;
        io.jsonwebtoken.impl.DefaultHeader $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.util.Map;

        $r2 = new io.jsonwebtoken.impl.DefaultHeader;

        specialinvoke $r2.<io.jsonwebtoken.impl.DefaultHeader: void <init>(java.util.Map)>($r1);

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Header header> = $r2;

        return $r0;
    }

    public io.jsonwebtoken.JwtBuilder setHeaderParam(java.lang.String, java.lang.Object)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1, varReplacer1397;
        java.lang.Object $r2;
        io.jsonwebtoken.Header $r3;

        nop;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Header ensureHeader()>();

        varReplacer1397 = "x5t";

        interfaceinvoke $r3.<io.jsonwebtoken.Header: java.lang.Object put(java.lang.Object,java.lang.Object)>(varReplacer1397, $r2);

        return $r0;
    }

    public io.jsonwebtoken.JwtBuilder setHeaderParams(java.util.Map)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.util.Map $r1;
        boolean $z0;
        io.jsonwebtoken.Header $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5, $r7;
        java.util.Map$Entry $r6;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.util.Map;

        $z0 = staticinvoke <io.jsonwebtoken.lang.Collections: boolean isEmpty(java.util.Map)>($r1);

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Header ensureHeader()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r2.<io.jsonwebtoken.Header: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

        goto label1;

     label2:
        return $r0;
    }

    public volatile io.jsonwebtoken.ClaimsMutator setId(java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;
        io.jsonwebtoken.JwtBuilder $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.JwtBuilder setId(java.lang.String)>($r1);

        return $r2;
    }

    public io.jsonwebtoken.JwtBuilder setId(java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;
        boolean $z0;
        io.jsonwebtoken.Claims $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <io.jsonwebtoken.lang.Strings: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims ensureClaims()>();

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setId(java.lang.String)>($r1);

        return $r0;

     label1:
        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        if $r2 == null goto label2;

        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setId(java.lang.String)>($r1);

     label2:
        return $r0;
    }

    public volatile io.jsonwebtoken.ClaimsMutator setIssuedAt(java.util.Date)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.util.Date $r1;
        io.jsonwebtoken.JwtBuilder $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.JwtBuilder setIssuedAt(java.util.Date)>($r1);

        return $r2;
    }

    public io.jsonwebtoken.JwtBuilder setIssuedAt(java.util.Date)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.util.Date $r1;
        io.jsonwebtoken.Claims $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.util.Date;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims ensureClaims()>();

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setIssuedAt(java.util.Date)>($r1);

        return $r0;

     label1:
        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        if $r2 == null goto label2;

        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setIssuedAt(java.util.Date)>($r1);

     label2:
        return $r0;
    }

    public volatile io.jsonwebtoken.ClaimsMutator setIssuer(java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;
        io.jsonwebtoken.JwtBuilder $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.JwtBuilder setIssuer(java.lang.String)>($r1);

        return $r2;
    }

    public io.jsonwebtoken.JwtBuilder setIssuer(java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;
        boolean $z0;
        io.jsonwebtoken.Claims $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <io.jsonwebtoken.lang.Strings: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims ensureClaims()>();

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setIssuer(java.lang.String)>($r1);

        return $r0;

     label1:
        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        if $r2 == null goto label2;

        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setIssuer(java.lang.String)>($r1);

     label2:
        return $r0;
    }

    public volatile io.jsonwebtoken.ClaimsMutator setNotBefore(java.util.Date)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.util.Date $r1;
        io.jsonwebtoken.JwtBuilder $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.JwtBuilder setNotBefore(java.util.Date)>($r1);

        return $r2;
    }

    public io.jsonwebtoken.JwtBuilder setNotBefore(java.util.Date)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.util.Date $r1;
        io.jsonwebtoken.Claims $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.util.Date;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims ensureClaims()>();

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setNotBefore(java.util.Date)>($r1);

        return $r0;

     label1:
        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        if $r2 == null goto label2;

        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setNotBefore(java.util.Date)>($r1);

     label2:
        return $r0;
    }

    public io.jsonwebtoken.JwtBuilder setPayload(java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;

        nop;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.lang.String payload> = $r1;

        return $r0;
    }

    public volatile io.jsonwebtoken.ClaimsMutator setSubject(java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;
        io.jsonwebtoken.JwtBuilder $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.JwtBuilder setSubject(java.lang.String)>($r1);

        return $r2;
    }

    public io.jsonwebtoken.JwtBuilder setSubject(java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.String $r1;
        boolean $z0;
        io.jsonwebtoken.Claims $r2;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <io.jsonwebtoken.lang.Strings: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims ensureClaims()>();

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setSubject(java.lang.String)>($r1);

        return $r0;

     label1:
        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        if $r2 == null goto label2;

        $r2 = $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.Claims claims>;

        interfaceinvoke $r2.<io.jsonwebtoken.Claims: io.jsonwebtoken.Claims setSubject(java.lang.String)>($r1);

     label2:
        return $r0;
    }

    public io.jsonwebtoken.JwtBuilder signWith(io.jsonwebtoken.SignatureAlgorithm, java.lang.String)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.SignatureAlgorithm $r1;
        java.lang.String $r2;
        boolean $z0;
        io.jsonwebtoken.impl.TextCodec $r3;
        byte[] $r4;
        io.jsonwebtoken.JwtBuilder $r5;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: io.jsonwebtoken.SignatureAlgorithm;

        $r2 := @parameter1: java.lang.String;

        staticinvoke <io.jsonwebtoken.lang.Assert: void hasText(java.lang.String,java.lang.String)>($r2, "base64-encoded secret key cannot be null or empty.");

        $z0 = virtualinvoke $r1.<io.jsonwebtoken.SignatureAlgorithm: boolean isHmac()>();

        staticinvoke <io.jsonwebtoken.lang.Assert: void isTrue(boolean,java.lang.String)>($z0, "Base64-encoded key bytes may only be specified for HMAC signatures.  If using RSA or Elliptic Curve, use the signWith(SignatureAlgorithm, Key) method instead.");

        $r3 = <io.jsonwebtoken.impl.TextCodec: io.jsonwebtoken.impl.TextCodec BASE64>;

        $r4 = interfaceinvoke $r3.<io.jsonwebtoken.impl.TextCodec: byte[] decode(java.lang.String)>($r2);

        $r5 = virtualinvoke $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.JwtBuilder signWith(io.jsonwebtoken.SignatureAlgorithm,byte[])>($r1, $r4);

        return $r5;
    }

    public io.jsonwebtoken.JwtBuilder signWith(io.jsonwebtoken.SignatureAlgorithm, java.security.Key)
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.SignatureAlgorithm $r1;
        java.security.Key $r2;
        java.lang.String varReplacer1398, varReplacer1399;

        nop;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: io.jsonwebtoken.SignatureAlgorithm;

        $r2 := @parameter1: java.security.Key;

        varReplacer1398 = "SignatureAlgorithm cannot be null.";

        staticinvoke <io.jsonwebtoken.lang.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, varReplacer1398);

        varReplacer1399 = "Key argument cannot be null.";

        staticinvoke <io.jsonwebtoken.lang.Assert: void notNull(java.lang.Object,java.lang.String)>($r2, varReplacer1399);

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.SignatureAlgorithm algorithm> = $r1;

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: java.security.Key key> = $r2;

        return $r0;
    }

    public io.jsonwebtoken.JwtBuilder signWith(io.jsonwebtoken.SignatureAlgorithm, byte[])
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        io.jsonwebtoken.SignatureAlgorithm $r1;
        byte[] $r2;
        boolean $z0;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: io.jsonwebtoken.SignatureAlgorithm;

        $r2 := @parameter1: byte[];

        staticinvoke <io.jsonwebtoken.lang.Assert: void notNull(java.lang.Object,java.lang.String)>($r1, "SignatureAlgorithm cannot be null.");

        staticinvoke <io.jsonwebtoken.lang.Assert: void notEmpty(byte[],java.lang.String)>($r2, "secret key byte array cannot be null or empty.");

        $z0 = virtualinvoke $r1.<io.jsonwebtoken.SignatureAlgorithm: boolean isHmac()>();

        staticinvoke <io.jsonwebtoken.lang.Assert: void isTrue(boolean,java.lang.String)>($z0, "Key bytes may only be specified for HMAC signatures.  If using RSA or Elliptic Curve, use the signWith(SignatureAlgorithm, Key) method instead.");

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: io.jsonwebtoken.SignatureAlgorithm algorithm> = $r1;

        $r0.<io.jsonwebtoken.impl.DefaultJwtBuilder: byte[] keyBytes> = $r2;

        return $r0;
    }

    protected byte[] toJson(java.lang.Object) throws com.fasterxml.jackson.core.JsonProcessingException
    {
        io.jsonwebtoken.impl.DefaultJwtBuilder $r0;
        java.lang.Object $r1;
        byte[] $r2;
        com.fasterxml.jackson.databind.ObjectMapper $r3;

        nop;

        $r0 := @this: io.jsonwebtoken.impl.DefaultJwtBuilder;

        $r1 := @parameter0: java.lang.Object;

        $r3 = <io.jsonwebtoken.impl.DefaultJwtBuilder: com.fasterxml.jackson.databind.ObjectMapper OBJECT_MAPPER>;

        $r2 = virtualinvoke $r3.<com.fasterxml.jackson.databind.ObjectMapper: byte[] writeValueAsBytes(java.lang.Object)>($r1);

        return $r2;
    }
}
