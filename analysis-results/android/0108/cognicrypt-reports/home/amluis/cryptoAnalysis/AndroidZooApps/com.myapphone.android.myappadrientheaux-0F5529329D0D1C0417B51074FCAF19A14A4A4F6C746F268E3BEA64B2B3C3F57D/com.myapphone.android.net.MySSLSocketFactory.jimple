public class com.myapphone.android.net.MySSLSocketFactory extends org.apache.http.conn.ssl.SSLSocketFactory
{
    javax.net.ssl.SSLContext sslContext;

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        com.myapphone.android.net.MySSLSocketFactory $r0;
        java.security.KeyStore $r1;
        javax.net.ssl.SSLContext $r2;
        java.lang.Object[] $r3;
        com.myapphone.android.net.MySSLSocketFactory$1 r4;
        javax.net.ssl.TrustManager[] r5;
        java.lang.String varReplacer382;
        null_type varReplacer383, varReplacer384;

        nop;

        $r0 := @this: com.myapphone.android.net.MySSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        specialinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore)>($r1);

        varReplacer382 = "TLS";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer382);

        $r0.<com.myapphone.android.net.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext> = $r2;

        r4 = new com.myapphone.android.net.MySSLSocketFactory$1;

        specialinvoke r4.<com.myapphone.android.net.MySSLSocketFactory$1: void <init>(com.myapphone.android.net.MySSLSocketFactory)>($r0);

        $r2 = $r0.<com.myapphone.android.net.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r3 = newarray (javax.net.ssl.TrustManager)[1];

        $r3[0] = r4;

        r5 = (javax.net.ssl.TrustManager[]) $r3;

        varReplacer383 = null;

        varReplacer384 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer383, r5, varReplacer383);

        return;
    }

    public static org.apache.http.client.HttpClient getNewHttpClient()
    {
        org.apache.http.client.HttpClient $r0;
        null_type varReplacer1120, varReplacer1121, varReplacer1122;

        nop;

        varReplacer1120 = null;

        varReplacer1121 = null;

        varReplacer1122 = null;

        $r0 = staticinvoke <com.myapphone.android.net.MySSLSocketFactory: org.apache.http.client.HttpClient getNewHttpClient(org.apache.http.params.HttpParams,java.lang.String,java.lang.String)>(varReplacer1120, varReplacer1120, varReplacer1120);

        return $r0;
    }

    public static org.apache.http.client.HttpClient getNewHttpClient(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        org.apache.http.client.HttpClient $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.myapphone.android.net.MySSLSocketFactory: org.apache.http.client.HttpClient getNewHttpClient(org.apache.http.params.HttpParams,java.lang.String,java.lang.String)>(null, $r0, $r1);

        return $r2;
    }

    public static org.apache.http.client.HttpClient getNewHttpClient(org.apache.http.params.HttpParams)
    {
        org.apache.http.params.HttpParams $r0;
        org.apache.http.client.HttpClient $r1;
        null_type varReplacer373, varReplacer374;

        nop;

        $r0 := @parameter0: org.apache.http.params.HttpParams;

        varReplacer373 = null;

        varReplacer374 = null;

        $r1 = staticinvoke <com.myapphone.android.net.MySSLSocketFactory: org.apache.http.client.HttpClient getNewHttpClient(org.apache.http.params.HttpParams,java.lang.String,java.lang.String)>($r0, varReplacer373, varReplacer373);

        return $r1;
    }

    public static org.apache.http.client.HttpClient getNewHttpClient(org.apache.http.params.HttpParams, java.lang.String, java.lang.String)
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager $r0, r21;
        java.lang.Exception $r1;
        org.apache.http.conn.scheme.SchemeRegistry $r2, r19;
        com.myapphone.android.net.MySSLSocketFactory $r3, r17;
        java.lang.Object $r4;
        java.lang.String $r5, $r6, $r7, varReplacer377, varReplacer379, varReplacer381;
        java.security.KeyStore $r8;
        org.apache.http.conn.ssl.X509HostnameVerifier $r9;
        org.apache.http.HttpVersion $r10;
        org.apache.http.conn.scheme.Scheme $r11, r20;
        org.apache.http.conn.scheme.PlainSocketFactory $r12;
        org.apache.http.impl.client.DefaultHttpClient $r13, r22;
        org.apache.http.client.CredentialsProvider $r14;
        org.apache.http.auth.AuthScope $r15, r23;
        org.apache.http.auth.UsernamePasswordCredentials $r16, r24;
        org.apache.http.params.BasicHttpParams r18;
        org.apache.http.params.HttpParams r25;
        null_type varReplacer375, varReplacer376;
        int varReplacer378, varReplacer380;

        nop;

        $r4 := @parameter0: org.apache.http.params.HttpParams;

        $r5 := @parameter1: java.lang.String;

        $r6 := @parameter2: java.lang.String;

     label01:
        $r7 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r8 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r7);

        varReplacer375 = null;

        varReplacer376 = null;

        virtualinvoke $r8.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer375, varReplacer375);

     label02:
        r17 = new com.myapphone.android.net.MySSLSocketFactory;

        $r3 = r17;

     label03:
        specialinvoke r17.<com.myapphone.android.net.MySSLSocketFactory: void <init>(java.security.KeyStore)>($r8);

     label04:
        $r9 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER>;

     label05:
        virtualinvoke $r3.<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>($r9);

     label06:
        if $r4 != null goto label09;

        r18 = new org.apache.http.params.BasicHttpParams;

     label07:
        specialinvoke r18.<org.apache.http.params.BasicHttpParams: void <init>()>();

     label08:
        $r4 = r18;

     label09:
        $r10 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label10:
        r25 = (org.apache.http.params.HttpParams) $r4;

        staticinvoke <org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)>(r25, $r10);

        r25 = (org.apache.http.params.HttpParams) $r4;

        varReplacer381 = "UTF-8";

        staticinvoke <org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)>(r25, varReplacer381);

     label11:
        r19 = new org.apache.http.conn.scheme.SchemeRegistry;

        $r2 = r19;

     label12:
        specialinvoke r19.<org.apache.http.conn.scheme.SchemeRegistry: void <init>()>();

     label13:
        r20 = new org.apache.http.conn.scheme.Scheme;

        $r11 = r20;

     label14:
        $r12 = staticinvoke <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>();

        varReplacer377 = "http";

        varReplacer378 = 80;

        specialinvoke r20.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>(varReplacer377, $r12, varReplacer378);

        virtualinvoke $r2.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r11);

     label15:
        r20 = new org.apache.http.conn.scheme.Scheme;

        $r11 = r20;

     label16:
        varReplacer379 = "https";

        varReplacer380 = 443;

        specialinvoke r20.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>(varReplacer379, $r3, varReplacer380);

        virtualinvoke $r2.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r11);

     label17:
        r21 = new org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        $r0 = r21;

     label18:
        r25 = (org.apache.http.params.HttpParams) $r4;

        specialinvoke r21.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>(r25, $r2);

     label19:
        goto label20;

     label20:
        r22 = new org.apache.http.impl.client.DefaultHttpClient;

     label21:
        r25 = (org.apache.http.params.HttpParams) $r4;

        specialinvoke r22.<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>($r0, r25);

     label22:
        return r22;

     label23:
        $r1 := @caughtexception;

        r22 = new org.apache.http.impl.client.DefaultHttpClient;

        specialinvoke r22.<org.apache.http.impl.client.DefaultHttpClient: void <init>()>();

        return r22;

        catch java.lang.Exception from label01 to label02 with label23;
        catch java.lang.Exception from label03 to label04 with label23;
        catch java.lang.Exception from label05 to label06 with label23;
        catch java.lang.Exception from label07 to label08 with label23;
        catch java.lang.Exception from label10 to label11 with label23;
        catch java.lang.Exception from label12 to label13 with label23;
        catch java.lang.Exception from label14 to label15 with label23;
        catch java.lang.Exception from label16 to label17 with label23;
        catch java.lang.Exception from label18 to label19 with label23;
        catch java.lang.Exception from label20 to label20 with label23;
        catch java.lang.Exception from label20 to label20 with label23;
        catch java.lang.Exception from label20 to label20 with label23;
        catch java.lang.Exception from label20 to label20 with label23;
        catch java.lang.Exception from label21 to label22 with label23;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        com.myapphone.android.net.MySSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3;

        $r0 := @this: com.myapphone.android.net.MySSLSocketFactory;

        $r1 = $r0.<com.myapphone.android.net.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        return $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        com.myapphone.android.net.MySSLSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        javax.net.ssl.SSLContext $r3;
        javax.net.ssl.SSLSocketFactory $r4;

        $r0 := @this: com.myapphone.android.net.MySSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = $r0.<com.myapphone.android.net.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r1 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);

        return $r1;
    }
}
