public final class com.braintreegateway.encryption.a extends java.lang.Object
{

    public void <init>()
    {
        com.braintreegateway.encryption.a $r0;

        nop;

        $r0 := @this: com.braintreegateway.encryption.a;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String a(java.lang.String, byte[])
    {
        java.lang.String $r0;
        byte[] $r1, $r2;
        int varReplacer5824;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        varReplacer5824 = 16;

        $r2 = staticinvoke <com.braintreegateway.encryption.a: byte[] a(int)>(varReplacer5824);

        $r0 = staticinvoke <com.braintreegateway.encryption.a: java.lang.String a(java.lang.String,byte[],byte[])>($r0, $r1, $r2);

        return $r0;
    }

    private static java.lang.String a(java.lang.String, byte[], byte[])
    {
        java.lang.String $r0, r14, varReplacer5826;
        byte[] $r1, $r2;
        javax.crypto.spec.SecretKeySpec $r3, r11;
        javax.crypto.Cipher $r4;
        javax.crypto.spec.IvParameterSpec $r5, r12;
        org.apache.http.util.ByteArrayBuffer $r6, r13;
        int $i0, $i1, varReplacer5825, varReplacer5827, varReplacer5829;
        java.lang.Throwable $r7, $r8, $r9, $r10;
        java.security.InvalidKeyException r15;
        javax.crypto.BadPaddingException r16;
        javax.crypto.IllegalBlockSizeException r17;
        java.security.InvalidAlgorithmParameterException r18;
        null_type varReplacer5828;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        r11 = new javax.crypto.spec.SecretKeySpec;

        $r3 = r11;

        varReplacer5826 = "AES";

        specialinvoke r11.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer5826);

        $r4 = staticinvoke <com.braintreegateway.encryption.a: javax.crypto.Cipher b()>();

        r12 = new javax.crypto.spec.IvParameterSpec;

        $r5 = r12;

     label01:
        specialinvoke r12.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2);

        varReplacer5825 = 1;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer5825, $r3, $r5);

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label02:
        r13 = new org.apache.http.util.ByteArrayBuffer;

        $r6 = r13;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

     label03:
        specialinvoke r13.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>($i0);

     label04:
        $i0 = lengthof $r2;

     label05:
        varReplacer5827 = 0;

        virtualinvoke $r6.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r2, varReplacer5827, $i0);

     label06:
        $i0 = lengthof $r1;

     label07:
        varReplacer5829 = 0;

        virtualinvoke $r6.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r1, varReplacer5829, $i0);

     label08:
        r14 = new java.lang.String;

     label09:
        $r1 = virtualinvoke $r6.<org.apache.http.util.ByteArrayBuffer: byte[] toByteArray()>();

        $r1 = staticinvoke <mp.lib.by: byte[] a(byte[])>($r1);

        specialinvoke r14.<java.lang.String: void <init>(byte[])>($r1);

     label10:
        return r14;

     label11:
        $r7 := @caughtexception;

        r15 = (java.security.InvalidKeyException) $r7;

        virtualinvoke r15.<java.security.InvalidKeyException: void printStackTrace()>();

     label12:
        varReplacer5828 = null;

        return varReplacer5828;

     label13:
        $r8 := @caughtexception;

        r16 = (javax.crypto.BadPaddingException) $r8;

        virtualinvoke r16.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label12;

     label14:
        $r9 := @caughtexception;

        r17 = (javax.crypto.IllegalBlockSizeException) $r9;

        virtualinvoke r17.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label12;

     label15:
        $r10 := @caughtexception;

        r18 = (java.security.InvalidAlgorithmParameterException) $r10;

        virtualinvoke r18.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label12;

        catch java.security.InvalidKeyException from label01 to label02 with label11;
        catch java.security.InvalidKeyException from label03 to label04 with label11;
        catch java.security.InvalidKeyException from label05 to label06 with label11;
        catch java.security.InvalidKeyException from label07 to label08 with label11;
        catch java.security.InvalidKeyException from label09 to label10 with label11;
        catch javax.crypto.BadPaddingException from label01 to label02 with label13;
        catch javax.crypto.BadPaddingException from label03 to label04 with label13;
        catch javax.crypto.BadPaddingException from label05 to label06 with label13;
        catch javax.crypto.BadPaddingException from label07 to label08 with label13;
        catch javax.crypto.BadPaddingException from label09 to label10 with label13;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label14;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label14;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label14;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label14;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label14;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label15;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label15;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label15;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label15;
        catch java.security.InvalidAlgorithmParameterException from label09 to label10 with label15;
    }

    public static byte[] a()
    {
        byte[] $r0;
        int varReplacer5823;

        nop;

        varReplacer5823 = 32;

        $r0 = staticinvoke <com.braintreegateway.encryption.a: byte[] a(int)>(varReplacer5823);

        return $r0;
    }

    private static byte[] a(int)
    {
        int $i0;
        java.security.SecureRandom $r0;
        byte[] $r1;

        nop;

        $i0 := @parameter0: int;

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        $r1 = newarray (byte)[$i0];

        virtualinvoke $r0.<java.security.SecureRandom: void nextBytes(byte[])>($r1);

        return $r1;
    }

    private static javax.crypto.Cipher b()
    {
        javax.crypto.Cipher $r0;
        java.lang.Throwable $r1, $r2;
        java.security.NoSuchAlgorithmException r3;
        javax.crypto.NoSuchPaddingException r4;
        null_type varReplacer5831, varReplacer5832;
        java.lang.String varReplacer5833;

     label1:
        nop;

        varReplacer5833 = "AES/CBC/PKCS5Padding";

        $r0 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer5833);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        r3 = (java.security.NoSuchAlgorithmException) $r1;

        virtualinvoke r3.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        varReplacer5831 = null;

        return varReplacer5831;

     label4:
        $r2 := @caughtexception;

        r4 = (javax.crypto.NoSuchPaddingException) $r2;

        virtualinvoke r4.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        varReplacer5832 = null;

        return varReplacer5832;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label4;
    }
}
