public class com.baidu.simeji.common.util.EncryptUtils extends java.lang.Object
{

    public void <init>()
    {
        com.baidu.simeji.common.util.EncryptUtils $r0;

        $r0 := @this: com.baidu.simeji.common.util.EncryptUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean decryptFile(java.lang.String)
    {
        java.lang.String $r0, $r3;
        java.io.File $r1, $r4, r20;
        com.baidu.ipcs.das.common.DasJniAgent $r2;
        boolean $z0;
        java.lang.StringBuilder $r5, r19;
        java.io.FileInputStream $r6, r21;
        byte[] $r7, $r8;
        javax.crypto.spec.SecretKeySpec $r9, r22;
        javax.crypto.Cipher $r10;
        javax.crypto.CipherOutputStream $r11, r24;
        java.io.FileOutputStream $r12, r23;
        int $i0;
        java.lang.Throwable $r13, $r14, $r15, $r16, $r17, $r18;
        java.io.FileNotFoundException r25;
        java.security.NoSuchAlgorithmException r26;
        java.security.InvalidKeyException r27;
        javax.crypto.NoSuchPaddingException r28;
        java.io.UnsupportedEncodingException r29;
        java.io.IOException r30;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.baidu.ipcs.das.common.DasJniAgent: com.baidu.ipcs.das.common.DasJniAgent a()>();

        if $r2 == null goto label03;

        $r3 = virtualinvoke $r2.<com.baidu.ipcs.das.common.DasJniAgent: java.lang.String dasPubKey()>();

     label01:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label02;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label04;

     label02:
        return 0;

     label03:
        $r3 = null;

        goto label01;

     label04:
        $r1 = new java.io.File;

        $r4 = $r1;

     label05:
        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

     label06:
        r20 = new java.io.File;

        $r1 = r20;

        r19 = new java.lang.StringBuilder;

        $r5 = r19;

     label07:
        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.io.File: void <init>(java.lang.String)>($r0);

     label08:
        r21 = new java.io.FileInputStream;

        $r6 = r21;

     label09:
        specialinvoke r21.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        $r7 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

     label10:
        $r8 = newarray (byte)[1024];

        r22 = new javax.crypto.spec.SecretKeySpec;

        $r9 = r22;

     label11:
        specialinvoke r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, "AES");

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/ECB/PKCS5Padding");

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r9);

     label12:
        r24 = new javax.crypto.CipherOutputStream;

        $r11 = r24;

        r23 = new java.io.FileOutputStream;

        $r12 = r23;

     label13:
        specialinvoke r23.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        specialinvoke r24.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r12, $r10);

     label14:
        $i0 = virtualinvoke $r6.<java.io.FileInputStream: int read(byte[])>($r8);

     label15:
        if $i0 <= 0 goto label20;

     label16:
        virtualinvoke $r11.<javax.crypto.CipherOutputStream: void write(byte[],int,int)>($r8, 0, $i0);

     label17:
        goto label14;

     label18:
        $r13 := @caughtexception;

        r25 = (java.io.FileNotFoundException) $r13;

        virtualinvoke r25.<java.io.FileNotFoundException: void printStackTrace()>();

     label19:
        return 0;

     label20:
        virtualinvoke $r11.<javax.crypto.CipherOutputStream: void flush()>();

        virtualinvoke $r11.<javax.crypto.CipherOutputStream: void close()>();

        virtualinvoke $r6.<java.io.FileInputStream: void close()>();

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        virtualinvoke $r1.<java.io.File: boolean renameTo(java.io.File)>($r4);

     label21:
        return 1;

     label22:
        $r14 := @caughtexception;

        r26 = (java.security.NoSuchAlgorithmException) $r14;

        virtualinvoke r26.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label19;

     label23:
        $r15 := @caughtexception;

        r27 = (java.security.InvalidKeyException) $r15;

        virtualinvoke r27.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label19;

     label24:
        $r16 := @caughtexception;

        r28 = (javax.crypto.NoSuchPaddingException) $r16;

        virtualinvoke r28.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label19;

     label25:
        $r17 := @caughtexception;

        r29 = (java.io.UnsupportedEncodingException) $r17;

        virtualinvoke r29.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label19;

     label26:
        $r18 := @caughtexception;

        r30 = (java.io.IOException) $r18;

        virtualinvoke r30.<java.io.IOException: void printStackTrace()>();

        goto label19;

        catch java.io.FileNotFoundException from label05 to label06 with label18;
        catch java.io.FileNotFoundException from label07 to label08 with label18;
        catch java.io.FileNotFoundException from label09 to label10 with label18;
        catch java.io.FileNotFoundException from label11 to label12 with label18;
        catch java.io.FileNotFoundException from label13 to label15 with label18;
        catch java.io.FileNotFoundException from label16 to label17 with label18;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label22;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label22;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label22;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label22;
        catch java.security.NoSuchAlgorithmException from label13 to label15 with label22;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label22;
        catch java.security.InvalidKeyException from label05 to label06 with label23;
        catch java.security.InvalidKeyException from label07 to label08 with label23;
        catch java.security.InvalidKeyException from label09 to label10 with label23;
        catch java.security.InvalidKeyException from label11 to label12 with label23;
        catch java.security.InvalidKeyException from label13 to label15 with label23;
        catch java.security.InvalidKeyException from label16 to label17 with label23;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label24;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label24;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label24;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label24;
        catch javax.crypto.NoSuchPaddingException from label13 to label15 with label24;
        catch javax.crypto.NoSuchPaddingException from label16 to label17 with label24;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label25;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label25;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label25;
        catch java.io.UnsupportedEncodingException from label11 to label12 with label25;
        catch java.io.UnsupportedEncodingException from label13 to label15 with label25;
        catch java.io.UnsupportedEncodingException from label16 to label17 with label25;
        catch java.io.IOException from label05 to label06 with label26;
        catch java.io.IOException from label07 to label08 with label26;
        catch java.io.IOException from label09 to label10 with label26;
        catch java.io.IOException from label11 to label12 with label26;
        catch java.io.IOException from label13 to label15 with label26;
        catch java.io.IOException from label16 to label17 with label26;
        catch java.io.FileNotFoundException from label20 to label21 with label18;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label22;
        catch java.security.InvalidKeyException from label20 to label21 with label23;
        catch javax.crypto.NoSuchPaddingException from label20 to label21 with label24;
        catch java.io.UnsupportedEncodingException from label20 to label21 with label25;
        catch java.io.IOException from label20 to label21 with label26;
    }

    public static byte[] encryptAes(java.lang.String)
    {
        java.lang.String $r0, $r3, varReplacer4897, varReplacer4899, varReplacer4900, varReplacer4907;
        javax.crypto.spec.SecretKeySpec $r1, r13;
        int $i0, $i1, $i2, varReplacer4903, varReplacer4904, varReplacer4909;
        com.baidu.ipcs.das.common.DasJniAgent $r2;
        boolean $z0;
        byte[] $r4, $r5;
        javax.crypto.Cipher $r6;
        byte $b3;
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, $r12;
        java.security.NoSuchAlgorithmException r14;
        java.security.InvalidKeyException r15;
        javax.crypto.NoSuchPaddingException r16;
        javax.crypto.IllegalBlockSizeException r17;
        javax.crypto.BadPaddingException r18;
        java.io.UnsupportedEncodingException r19;
        null_type varReplacer4898, varReplacer4901, varReplacer4902, varReplacer4905, varReplacer4906, varReplacer4908, varReplacer4910;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.baidu.ipcs.das.common.DasJniAgent: com.baidu.ipcs.das.common.DasJniAgent a()>();

        if $r2 == null goto label02;

        $r3 = virtualinvoke $r2.<com.baidu.ipcs.das.common.DasJniAgent: java.lang.String dasPubKey()>();

     label01:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label20;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label03;

        varReplacer4908 = null;

        return varReplacer4908;

     label02:
        $r3 = null;

        goto label01;

     label03:
        varReplacer4907 = "utf-8";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer4907);

        varReplacer4899 = "utf-8";

        $r5 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer4899);

     label04:
        r13 = new javax.crypto.spec.SecretKeySpec;

        $r1 = r13;

     label05:
        varReplacer4897 = "AES";

        specialinvoke r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer4897);

        varReplacer4900 = "AES/ECB/NoPadding";

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4900);

        $i0 = virtualinvoke $r6.<javax.crypto.Cipher: int getBlockSize()>();

     label06:
        $i1 = lengthof $r5;

        $i2 = $i1 % $i0;

        if $i2 == 0 goto label11;

        $i2 = $i1 % $i0;

        $i0 = $i0 - $i2;

        $i0 = $i0 + $i1;

     label07:
        $i1 = lengthof $r5;

        $i1 = $i0 - $i1;

        $r4 = newarray (byte)[$i0];

        $i0 = lengthof $r5;

     label08:
        varReplacer4903 = 0;

        varReplacer4904 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, varReplacer4903, $r4, varReplacer4903, $i0);

     label09:
        $i0 = 0;

     label10:
        if $i0 >= $i1 goto label12;

        $i2 = lengthof $r5;

        $i2 = $i2 + $i0;

        $b3 = (byte) $i1;

        $r4[$i2] = $b3;

        $i0 = $i0 + 1;

        goto label10;

     label11:
        $i0 = $i0 + $i1;

        goto label07;

     label12:
        varReplacer4909 = 1;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4909, $r1);

        $r5 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

     label13:
        return $r5;

     label14:
        $r7 := @caughtexception;

        r14 = (java.security.NoSuchAlgorithmException) $r7;

        virtualinvoke r14.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        varReplacer4905 = null;

        return varReplacer4905;

     label15:
        $r8 := @caughtexception;

        r15 = (java.security.InvalidKeyException) $r8;

        virtualinvoke r15.<java.security.InvalidKeyException: void printStackTrace()>();

        varReplacer4906 = null;

        return varReplacer4906;

     label16:
        $r9 := @caughtexception;

        r16 = (javax.crypto.NoSuchPaddingException) $r9;

        virtualinvoke r16.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        varReplacer4910 = null;

        return varReplacer4910;

     label17:
        $r10 := @caughtexception;

        r17 = (javax.crypto.IllegalBlockSizeException) $r10;

        virtualinvoke r17.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        varReplacer4901 = null;

        return varReplacer4901;

     label18:
        $r11 := @caughtexception;

        r18 = (javax.crypto.BadPaddingException) $r11;

        virtualinvoke r18.<javax.crypto.BadPaddingException: void printStackTrace()>();

        varReplacer4898 = null;

        return varReplacer4898;

     label19:
        $r12 := @caughtexception;

        r19 = (java.io.UnsupportedEncodingException) $r12;

        virtualinvoke r19.<java.io.UnsupportedEncodingException: void printStackTrace()>();

     label20:
        varReplacer4902 = null;

        return varReplacer4902;

        catch java.security.NoSuchAlgorithmException from label03 to label04 with label14;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label14;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label14;
        catch java.security.NoSuchAlgorithmException from label12 to label13 with label14;
        catch java.security.InvalidKeyException from label03 to label04 with label15;
        catch java.security.InvalidKeyException from label05 to label06 with label15;
        catch java.security.InvalidKeyException from label08 to label09 with label15;
        catch java.security.InvalidKeyException from label12 to label13 with label15;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label16;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label16;
        catch javax.crypto.NoSuchPaddingException from label08 to label09 with label16;
        catch javax.crypto.NoSuchPaddingException from label12 to label13 with label16;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label17;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label17;
        catch javax.crypto.IllegalBlockSizeException from label08 to label09 with label17;
        catch javax.crypto.IllegalBlockSizeException from label12 to label13 with label17;
        catch javax.crypto.BadPaddingException from label03 to label04 with label18;
        catch javax.crypto.BadPaddingException from label05 to label06 with label18;
        catch javax.crypto.BadPaddingException from label08 to label09 with label18;
        catch javax.crypto.BadPaddingException from label12 to label13 with label18;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label19;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label19;
        catch java.io.UnsupportedEncodingException from label08 to label09 with label19;
        catch java.io.UnsupportedEncodingException from label12 to label13 with label19;
    }

    public static boolean encryptFile(java.lang.String)
    {
        java.lang.String $r0, $r3;
        java.io.File $r1, $r4, r20;
        com.baidu.ipcs.das.common.DasJniAgent $r2;
        boolean $z0;
        java.lang.StringBuilder $r5, r19;
        java.io.FileInputStream $r6, r21;
        byte[] $r7, $r8;
        javax.crypto.spec.SecretKeySpec $r9, r22;
        javax.crypto.Cipher $r10;
        javax.crypto.CipherOutputStream $r11, r24;
        java.io.FileOutputStream $r12, r23;
        int $i0;
        java.lang.Throwable $r13, $r14, $r15, $r16, $r17, $r18;
        java.io.FileNotFoundException r25;
        java.security.NoSuchAlgorithmException r26;
        java.security.InvalidKeyException r27;
        javax.crypto.NoSuchPaddingException r28;
        java.io.UnsupportedEncodingException r29;
        java.io.IOException r30;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.baidu.ipcs.das.common.DasJniAgent: com.baidu.ipcs.das.common.DasJniAgent a()>();

        if $r2 == null goto label03;

        $r3 = virtualinvoke $r2.<com.baidu.ipcs.das.common.DasJniAgent: java.lang.String dasPubKey()>();

     label01:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label02;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label04;

     label02:
        return 0;

     label03:
        $r3 = null;

        goto label01;

     label04:
        $r1 = new java.io.File;

        $r4 = $r1;

     label05:
        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

     label06:
        r20 = new java.io.File;

        $r1 = r20;

        r19 = new java.lang.StringBuilder;

        $r5 = r19;

     label07:
        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.io.File: void <init>(java.lang.String)>($r0);

     label08:
        r21 = new java.io.FileInputStream;

        $r6 = r21;

     label09:
        specialinvoke r21.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        $r7 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

     label10:
        $r8 = newarray (byte)[1024];

        r22 = new javax.crypto.spec.SecretKeySpec;

        $r9 = r22;

     label11:
        specialinvoke r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, "AES");

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/ECB/PKCS5Padding");

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r9);

     label12:
        r24 = new javax.crypto.CipherOutputStream;

        $r11 = r24;

        r23 = new java.io.FileOutputStream;

        $r12 = r23;

     label13:
        specialinvoke r23.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        specialinvoke r24.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r12, $r10);

     label14:
        $i0 = virtualinvoke $r6.<java.io.FileInputStream: int read(byte[])>($r8);

     label15:
        if $i0 <= 0 goto label20;

     label16:
        virtualinvoke $r11.<javax.crypto.CipherOutputStream: void write(byte[],int,int)>($r8, 0, $i0);

     label17:
        goto label14;

     label18:
        $r13 := @caughtexception;

        r25 = (java.io.FileNotFoundException) $r13;

        virtualinvoke r25.<java.io.FileNotFoundException: void printStackTrace()>();

     label19:
        return 0;

     label20:
        virtualinvoke $r11.<javax.crypto.CipherOutputStream: void flush()>();

        virtualinvoke $r11.<javax.crypto.CipherOutputStream: void close()>();

        virtualinvoke $r6.<java.io.FileInputStream: void close()>();

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        virtualinvoke $r1.<java.io.File: boolean renameTo(java.io.File)>($r4);

     label21:
        return 1;

     label22:
        $r14 := @caughtexception;

        r26 = (java.security.NoSuchAlgorithmException) $r14;

        virtualinvoke r26.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label19;

     label23:
        $r15 := @caughtexception;

        r27 = (java.security.InvalidKeyException) $r15;

        virtualinvoke r27.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label19;

     label24:
        $r16 := @caughtexception;

        r28 = (javax.crypto.NoSuchPaddingException) $r16;

        virtualinvoke r28.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label19;

     label25:
        $r17 := @caughtexception;

        r29 = (java.io.UnsupportedEncodingException) $r17;

        virtualinvoke r29.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label19;

     label26:
        $r18 := @caughtexception;

        r30 = (java.io.IOException) $r18;

        virtualinvoke r30.<java.io.IOException: void printStackTrace()>();

        goto label19;

        catch java.io.FileNotFoundException from label05 to label06 with label18;
        catch java.io.FileNotFoundException from label07 to label08 with label18;
        catch java.io.FileNotFoundException from label09 to label10 with label18;
        catch java.io.FileNotFoundException from label11 to label12 with label18;
        catch java.io.FileNotFoundException from label13 to label15 with label18;
        catch java.io.FileNotFoundException from label16 to label17 with label18;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label22;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label22;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label22;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label22;
        catch java.security.NoSuchAlgorithmException from label13 to label15 with label22;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label22;
        catch java.security.InvalidKeyException from label05 to label06 with label23;
        catch java.security.InvalidKeyException from label07 to label08 with label23;
        catch java.security.InvalidKeyException from label09 to label10 with label23;
        catch java.security.InvalidKeyException from label11 to label12 with label23;
        catch java.security.InvalidKeyException from label13 to label15 with label23;
        catch java.security.InvalidKeyException from label16 to label17 with label23;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label24;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label24;
        catch javax.crypto.NoSuchPaddingException from label09 to label10 with label24;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label24;
        catch javax.crypto.NoSuchPaddingException from label13 to label15 with label24;
        catch javax.crypto.NoSuchPaddingException from label16 to label17 with label24;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label25;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label25;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label25;
        catch java.io.UnsupportedEncodingException from label11 to label12 with label25;
        catch java.io.UnsupportedEncodingException from label13 to label15 with label25;
        catch java.io.UnsupportedEncodingException from label16 to label17 with label25;
        catch java.io.IOException from label05 to label06 with label26;
        catch java.io.IOException from label07 to label08 with label26;
        catch java.io.IOException from label09 to label10 with label26;
        catch java.io.IOException from label11 to label12 with label26;
        catch java.io.IOException from label13 to label15 with label26;
        catch java.io.IOException from label16 to label17 with label26;
        catch java.io.FileNotFoundException from label20 to label21 with label18;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label22;
        catch java.security.InvalidKeyException from label20 to label21 with label23;
        catch javax.crypto.NoSuchPaddingException from label20 to label21 with label24;
        catch java.io.UnsupportedEncodingException from label20 to label21 with label25;
        catch java.io.IOException from label20 to label21 with label26;
    }
}
