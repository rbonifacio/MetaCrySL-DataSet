public class skiracer.util.EncryptionUtil extends java.lang.Object
{
    public static boolean NO_ENCRYPTION_FOR_DEBUG;
    public static final byte[] encryptionKey;
    public static final byte[] xorEncryptionKey;

    static void <clinit>()
    {
        byte[] $r0;
        int varReplacer7487;

        nop;

        $r0 = newarray (byte)[8];

        $r0[0] = 1;

        $r0[1] = 35;

        $r0[2] = 69;

        $r0[3] = 103;

        $r0[4] = -119;

        $r0[5] = -85;

        $r0[6] = -51;

        $r0[7] = -17;

        <skiracer.util.EncryptionUtil: byte[] encryptionKey> = $r0;

        $r0 = newarray (byte)[8];

        $r0[0] = 84;

        $r0[1] = 104;

        $r0[2] = 105;

        $r0[3] = 115;

        $r0[4] = 32;

        $r0[5] = 105;

        $r0[6] = 115;

        $r0[7] = 32;

        <skiracer.util.EncryptionUtil: byte[] xorEncryptionKey> = $r0;

        varReplacer7487 = 0;

        <skiracer.util.EncryptionUtil: boolean NO_ENCRYPTION_FOR_DEBUG> = varReplacer7487;

        return;
    }

    public void <init>()
    {
        skiracer.util.EncryptionUtil $r0;

        $r0 := @this: skiracer.util.EncryptionUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decrypt(byte[], java.io.InputStream, int) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
    {
        byte[] $r0;
        java.io.InputStream $r1;
        int $i0, varReplacer7484, varReplacer7486;
        javax.crypto.CipherInputStream $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.Cipher $r4;
        java.io.ByteArrayOutputStream $r5;
        java.lang.String varReplacer7483, varReplacer7485;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.InputStream;

        $i0 := @parameter2: int;

        varReplacer7483 = "DES/ECB/PKCS5Padding";

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer7483);

        $r3 = new javax.crypto.spec.SecretKeySpec;

        varReplacer7485 = "DES";

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer7485);

        varReplacer7484 = 2;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer7484, $r3);

        $r2 = new javax.crypto.CipherInputStream;

        specialinvoke $r2.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r1, $r4);

        if $i0 <= 0 goto label3;

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

     label1:
        $r0 = newarray (byte)[256];

     label2:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r0);

        if -1 == $i0 goto label4;

        varReplacer7486 = 0;

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r0, varReplacer7486, $i0);

        goto label2;

     label3:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        goto label1;

     label4:
        $r0 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r0;
    }

    public static byte[] decrypt(byte[], byte[]) throws java.io.IOException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, java.lang.IllegalStateException, java.security.InvalidKeyException, javax.crypto.NoSuchPaddingException, java.security.NoSuchAlgorithmException
    {
        byte[] $r0, $r2;
        javax.crypto.spec.SecretKeySpec $r1;
        boolean $z0;
        java.io.PrintStream $r3;
        javax.crypto.Cipher $r4;

        $r0 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $z0 = <skiracer.util.EncryptionUtil: boolean NO_ENCRYPTION_FOR_DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("hbist: NOT DECRYPTING RETURNING DATA");

        return $r2;

     label1:
        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/PKCS5Padding");

        $r1 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "DES");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r1);

        $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        return $r0;
    }

    public static byte[] decryptXor(byte[], java.io.InputStream, int) throws java.io.IOException
    {
        byte[] $r0, $r2;
        java.io.InputStream $r1;
        int $i0, $i1, $i3, $i4, varReplacer7725, varReplacer7726;
        java.io.PrintStream $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, varReplacer7727;
        java.io.ByteArrayOutputStream $r6;
        byte $b2, $b5;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.io.InputStream;

        $i0 := @parameter2: int;

        $r2 = newarray (byte)[100];

        if $i0 <= 0 goto label3;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer7727 = "hbist:";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer7727);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

     label1:
        $i0 = lengthof $r2;

        varReplacer7725 = 0;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r2, varReplacer7725, $i0);

        if $i0 < 0 goto label5;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $b2 = $r2[$i1];

        $b2 = $b2 ^ 0;

        $r2[$i1] = $b2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        goto label1;

     label4:
        varReplacer7726 = 0;

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, varReplacer7726, $i0);

        goto label1;

     label5:
        $r2 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i1 = lengthof $r2;

        $i0 = lengthof $r0;

        $i3 = 0;

     label6:
        if $i3 >= $i1 goto label7;

        $b2 = $r2[$i3];

        $r0 = <skiracer.util.EncryptionUtil: byte[] xorEncryptionKey>;

        $i4 = $i3 % $i0;

        $b5 = $r0[$i4];

        $b2 = $b2 ^ $b5;

        $r2[$i3] = $b2;

        $i3 = $i3 + 1;

        goto label6;

     label7:
        return $r2;
    }

    public static byte[] encrypt(byte[], byte[]) throws java.io.IOException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, java.lang.IllegalStateException, java.security.InvalidKeyException, javax.crypto.NoSuchPaddingException, java.security.NoSuchAlgorithmException
    {
        byte[] $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.Cipher $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES/ECB/PKCS5Padding");

        $r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "DES");

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r2);

        $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

        return $r0;
    }

    public static byte[] encryptXor(byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3;
        byte $b4, $b5;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r1;

        $r2 = newarray (byte)[$i0];

        $i1 = lengthof $r2;

        $i0 = lengthof $r0;

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label2;

        $b4 = $r1[$i3];

        $r0 = <skiracer.util.EncryptionUtil: byte[] xorEncryptionKey>;

        $i2 = $i3 % $i0;

        $b5 = $r0[$i2];

        $b4 = $b4 ^ $b5;

        $r2[$i3] = $b4;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return $r2;
    }
}
