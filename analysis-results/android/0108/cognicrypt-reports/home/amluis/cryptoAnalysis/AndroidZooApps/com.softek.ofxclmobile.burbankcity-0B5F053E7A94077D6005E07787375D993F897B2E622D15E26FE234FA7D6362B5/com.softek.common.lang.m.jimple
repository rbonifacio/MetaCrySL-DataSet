public class com.softek.common.lang.m extends java.lang.Object
{
    public static final java.lang.Runnable a;
    public static final com.softek.common.lang.a.c b;
    public static final javax.crypto.SecretKeyFactory c;
    private static final com.softek.common.lang.j d;
    private static final java.util.concurrent.atomic.AtomicLong e;
    private static final java.util.concurrent.atomic.AtomicLong f;
    private static final java.lang.String g;
    private static final java.util.Map h;

    static void <clinit>()
    {
        com.softek.common.lang.j $r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        java.lang.String $r2, varReplacer574;
        com.softek.common.lang.m$1 $r3;
        com.softek.common.lang.m$2 $r4;
        java.util.concurrent.ConcurrentHashMap $r5;
        javax.crypto.SecretKeyFactory $r6;
        long varReplacer573;
        int varReplacer575;

        nop;

        $r0 = staticinvoke <com.softek.common.lang.j$a: com.softek.common.lang.j a()>();

        <com.softek.common.lang.m: com.softek.common.lang.j d> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        <com.softek.common.lang.m: java.util.concurrent.atomic.AtomicLong e> = $r1;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer573 = 1001L;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer573);

        <com.softek.common.lang.m: java.util.concurrent.atomic.AtomicLong f> = $r1;

        varReplacer575 = 8;

        $r2 = staticinvoke <com.softek.jarjar.org.apache.commons.lang3.f: java.lang.String a(int)>(varReplacer575);

        <com.softek.common.lang.m: java.lang.String g> = $r2;

        $r3 = new com.softek.common.lang.m$1;

        specialinvoke $r3.<com.softek.common.lang.m$1: void <init>()>();

        <com.softek.common.lang.m: java.lang.Runnable a> = $r3;

        $r4 = new com.softek.common.lang.m$2;

        specialinvoke $r4.<com.softek.common.lang.m$2: void <init>()>();

        <com.softek.common.lang.m: com.softek.common.lang.a.c b> = $r4;

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <com.softek.common.lang.m: java.util.Map h> = $r5;

        varReplacer574 = "PBKDF2WithHmacSHA1";

        $r6 = staticinvoke <com.softek.common.lang.m: javax.crypto.SecretKeyFactory f(java.lang.String)>(varReplacer574);

        <com.softek.common.lang.m: javax.crypto.SecretKeyFactory c> = $r6;

        return;
    }

    private void <init>()
    {
        com.softek.common.lang.m $r0;

        $r0 := @this: com.softek.common.lang.m;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int a(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= $i1 goto label1;

        return -1;

     label1:
        if $i0 != $i1 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static long a()
    {
        long $l0;
        java.util.concurrent.atomic.AtomicLong $r0;

        nop;

        $r0 = <com.softek.common.lang.m: java.util.concurrent.atomic.AtomicLong e>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        return $l0;
    }

    public static java.lang.Class a(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.IllegalStateException $r1;
        java.lang.Class $r2;
        java.lang.ClassNotFoundException $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r1;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.Enum a(java.lang.Class, int)
    {
        java.lang.Class $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Enum $r1;
        java.lang.Object[] $r2;
        java.lang.Enum[] $r3;
        java.lang.IllegalStateException $r4;

        $r0 := @parameter0: java.lang.Class;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        $r3 = (java.lang.Enum[]) $r2;

        $i1 = lengthof $r3;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $r1 = $r3[$i2];

        $i3 = virtualinvoke $r1.<java.lang.Enum: int ordinal()>();

        if $i3 != $i0 goto label2;

        return $r1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;
    }

    public static java.lang.Enum a(java.lang.Class, java.lang.String)
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        java.lang.Enum $r3;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label4;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>($r0, $r1);

     label2:
        return $r3;

     label3:
        $r2 := @caughtexception;

     label4:
        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static java.lang.Object a(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        nop;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 != null goto label1;

        return $r1;

     label1:
        return $r0;
    }

    public static java.lang.Object a(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1, $r2;

        nop;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.lang.Object;

        if $r2 == null goto label1;

        return $r2;

     label1:
        if $r0 == null goto label2;

        return $r0;

     label2:
        return $r1;
    }

    public static java.lang.Object a(java.lang.ref.Reference)
    {
        java.lang.ref.Reference $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.ref.Reference;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.ref.Reference: java.lang.Object get()>();

        return $r1;
    }

    public static java.util.List a(java.util.List, java.util.Collection)
    {
        java.util.List $r0;
        java.util.Collection $r1;

        nop;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.Collection;

        interfaceinvoke $r0.<java.util.List: boolean removeAll(java.util.Collection)>($r1);

        return $r0;
    }

    public static transient java.util.List a(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.util.ArrayList $r1;
        java.util.List $r2;

        nop;

        $r0 := @parameter0: java.lang.Object[];

        $r1 = new java.util.ArrayList;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    public static java.util.Set a(java.lang.Class)
    {
        java.util.HashSet $r0;
        java.lang.Class $r1;
        java.lang.reflect.Field[] $r2;

        $r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r0, $r2);

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.Set a(java.lang.Class, java.lang.Class)
    {
        java.lang.Class $r0, $r3;
        java.util.HashSet $r1;
        int $i0, $i1;
        java.lang.reflect.Field $r2;
        java.lang.reflect.Field[] $r4;
        boolean $z0;

        nop;

        $r3 := @parameter0: java.lang.Class;

        $r0 := @parameter1: java.lang.Class;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

     label1:
        if $r3 == null goto label5;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r4;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r2 = $r4[$i1];

        $z0 = virtualinvoke $r2.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>($r0);

        if $z0 == 0 goto label3;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r3 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        return $r1;
    }

    public static void a(long)
    {
        long $l0, varReplacer6547;
        java.lang.Throwable $r0;
        java.lang.IllegalStateException $r1;

        nop;

        $l0 := @parameter0: long;

     label1:
        varReplacer6547 = 500L;

        staticinvoke <java.lang.Thread: void sleep(long)>(varReplacer6547);

     label2:
        return;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r0);

        throw $r1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void a(android.database.Cursor)
    {
        android.database.Cursor $r0;
        java.lang.Throwable $r1;
        com.softek.common.lang.j $r2;

        nop;

        $r0 := @parameter0: android.database.Cursor;

        if $r0 == null goto label4;

     label1:
        interfaceinvoke $r0.<android.database.Cursor: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r2.<com.softek.common.lang.j: void d(java.lang.Throwable)>($r1);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void a(com.softek.common.lang.a.c, java.lang.Object)
    {
        com.softek.common.lang.a.c $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        com.softek.common.lang.j $r3;

        $r0 := @parameter0: com.softek.common.lang.a.c;

        $r1 := @parameter1: java.lang.Object;

        if $r0 == null goto label4;

     label1:
        interfaceinvoke $r0.<com.softek.common.lang.a.c: void a(java.lang.Object)>($r1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r3.<com.softek.common.lang.j: void d(java.lang.Throwable)>($r2);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void a(java.io.Closeable)
    {
        java.io.Closeable $r0;
        java.lang.Throwable $r1;
        com.softek.common.lang.j $r2;

        nop;

        $r0 := @parameter0: java.io.Closeable;

        if $r0 == null goto label4;

     label1:
        interfaceinvoke $r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r2.<com.softek.common.lang.j: void d(java.lang.Throwable)>($r1);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void a(java.io.File)
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.io.File;

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot delete file ");

        $r3 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        return;
    }

    public static void a(java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        java.util.Iterator $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.Runnable $r3;

        nop;

        $r0 := @parameter0: java.lang.Iterable;

        if $r0 != null goto label1;

        return;

     label1:
        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Runnable) $r2;

        staticinvoke <com.softek.common.lang.m: void a(java.lang.Runnable)>($r3);

        goto label2;

     label3:
        return;
    }

    public static void a(java.lang.Iterable, java.lang.Object)
    {
        java.lang.Iterable $r0;
        java.lang.Object $r1, $r3;
        java.util.Iterator $r2;
        boolean $z0;
        com.softek.common.lang.a.c $r4;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.lang.Object;

        if $r0 != null goto label1;

        return;

     label1:
        $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.softek.common.lang.a.c) $r3;

        staticinvoke <com.softek.common.lang.m: void a(com.softek.common.lang.a.c,java.lang.Object)>($r4, $r1);

        goto label2;

     label3:
        return;
    }

    public static void a(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.Throwable $r1;
        com.softek.common.lang.j $r2;

        $r0 := @parameter0: java.lang.Object;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.lang.Object: void wait()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r2.<com.softek.common.lang.j: void d(java.lang.Throwable)>($r1);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void a(java.lang.Runnable)
    {
        java.lang.Runnable $r0;

        nop;

        $r0 := @parameter0: java.lang.Runnable;

        if $r0 == null goto label1;

        interfaceinvoke $r0.<java.lang.Runnable: void run()>();

     label1:
        return;
    }

    public static void a(java.net.Socket)
    {
        java.net.Socket $r0;
        java.lang.Throwable $r1;
        com.softek.common.lang.j $r2;

        $r0 := @parameter0: java.net.Socket;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.net.Socket: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r2.<com.softek.common.lang.j: void d(java.lang.Throwable)>($r1);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void a(java.util.concurrent.CountDownLatch)
    {
        java.util.concurrent.CountDownLatch $r0;
        java.lang.Throwable $r1;
        java.lang.IllegalStateException $r2;

        nop;

        $r0 := @parameter0: java.util.concurrent.CountDownLatch;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static boolean a(com.softek.common.lang.a.f)
    {
        com.softek.common.lang.a.f $r0;
        com.softek.common.lang.j $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        int varReplacer854, varReplacer855;

        nop;

        $r0 := @parameter0: com.softek.common.lang.a.f;

     label1:
        $r2 = interfaceinvoke $r0.<com.softek.common.lang.a.f: java.lang.Object b()>();

        $r3 = (java.lang.Class) $r2;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4);

     label2:
        varReplacer855 = 1;

        return varReplacer855;

     label3:
        $r5 := @caughtexception;

        $r1 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r1.<com.softek.common.lang.j: void b(java.lang.Throwable)>($r5);

        varReplacer854 = 0;

        return varReplacer854;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Enum b(java.lang.Class, java.lang.String)
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r5;
        int $i0, $i1;
        java.lang.Object[] $r2;
        java.lang.Enum[] $r3;
        java.lang.Enum $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label1;

        if $r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        $r3 = (java.lang.Enum[]) $r2;

        $i0 = lengthof $r3;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        $r4 = $r3[$i1];

        $r5 = virtualinvoke $r4.<java.lang.Enum: java.lang.String name()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label4;

        return $r4;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return null;
    }

    public static java.lang.String b(java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer6808, varReplacer6810;
        byte[] $r2;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException $r4;
        null_type varReplacer6809;

        nop;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        varReplacer6809 = null;

        return varReplacer6809;

     label1:
        $r1 = new java.lang.String;

     label2:
        varReplacer6810 = "UTF-8";

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer6810);

        $r2 = staticinvoke <com.softek.jarjar.org.apache.commons.codec.a.a: byte[] a(byte[])>($r2);

        varReplacer6808 = "UTF-8";

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, varReplacer6808);

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public static short b()
    {
        long $l0;
        java.util.concurrent.atomic.AtomicLong $r0;
        byte $b1;
        java.lang.IllegalStateException $r1;
        int $i2;
        short $s3;

        nop;

        $r0 = <com.softek.common.lang.m: java.util.concurrent.atomic.AtomicLong f>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $b1 = $l0 cmp 32767L;

        if $b1 <= 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        $i2 = (int) $l0;

        $s3 = (short) $i2;

        return $s3;
    }

    public static void b(com.softek.common.lang.a.c, java.lang.Object)
    {
        com.softek.common.lang.a.c $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: com.softek.common.lang.a.c;

        $r1 := @parameter1: java.lang.Object;

        if $r0 == null goto label1;

        interfaceinvoke $r0.<com.softek.common.lang.a.c: void a(java.lang.Object)>($r1);

     label1:
        return;
    }

    public static void b(java.io.File)
    {
        java.io.File $r0;
        java.lang.Throwable $r1;
        com.softek.common.lang.j $r2;

        nop;

        $r0 := @parameter0: java.io.File;

     label1:
        staticinvoke <org.apache.commons.a.b: void e(java.io.File)>($r0);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r2.<com.softek.common.lang.j: void d(java.lang.Throwable)>($r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void b(java.lang.Iterable)
    {
        java.lang.Iterable $r0;
        java.util.Iterator $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.Runnable $r3;

        $r0 := @parameter0: java.lang.Iterable;

        if $r0 != null goto label1;

        return;

     label1:
        $r1 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Runnable) $r2;

        staticinvoke <com.softek.common.lang.m: void b(java.lang.Runnable)>($r3);

        goto label2;

     label3:
        return;
    }

    public static void b(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.Throwable $r1;
        java.lang.IllegalStateException $r2;

        $r0 := @parameter0: java.lang.Object;

        if $r0 == null goto label4;

     label1:
        virtualinvoke $r0.<java.lang.Object: void wait()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void b(java.lang.Runnable)
    {
        java.lang.Runnable $r0;
        java.lang.Throwable $r1;
        com.softek.common.lang.j $r2;

        $r0 := @parameter0: java.lang.Runnable;

     label1:
        staticinvoke <com.softek.common.lang.m: void a(java.lang.Runnable)>($r0);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r2.<com.softek.common.lang.j: void d(java.lang.Throwable)>($r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static boolean b(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;
        int varReplacer802, varReplacer803;

        nop;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 == $r1 goto label1;

        if $r0 == null goto label2;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        varReplacer803 = 1;

        return varReplacer803;

     label2:
        varReplacer802 = 0;

        return varReplacer802;
    }

    public static com.softek.common.lang.a.f c(java.lang.Runnable)
    {
        java.lang.Runnable $r0;
        com.softek.common.lang.m$3 $r1;

        $r0 := @parameter0: java.lang.Runnable;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.softek.common.lang.m$3;

        specialinvoke $r1.<com.softek.common.lang.m$3: void <init>(java.lang.Runnable)>($r0);

        return $r1;
    }

    public static java.lang.String c()
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;
        long $l0;

        nop;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r0 = <com.softek.common.lang.m: java.lang.String g>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $l0 = staticinvoke <com.softek.common.lang.m: long a()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static java.lang.String c(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        null_type varReplacer2694;

        nop;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        varReplacer2694 = null;

        return varReplacer2694;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String c(java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer6231, varReplacer6232;
        byte[] $r2;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException $r4;
        null_type varReplacer6233;

        nop;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        varReplacer6233 = null;

        return varReplacer6233;

     label1:
        $r1 = new java.lang.String;

     label2:
        varReplacer6232 = "UTF-8";

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer6232);

        $r2 = staticinvoke <com.softek.jarjar.org.apache.commons.codec.b.a: byte[] a(byte[])>($r2);

        $r2 = staticinvoke <com.softek.jarjar.org.apache.commons.codec.a.a: byte[] a(byte[])>($r2);

        varReplacer6231 = "UTF-8";

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, varReplacer6231);

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public static void c(com.softek.common.lang.a.c, java.lang.Object)
    {
        com.softek.common.lang.a.c $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        com.softek.common.lang.j $r3;

        $r0 := @parameter0: com.softek.common.lang.a.c;

        $r1 := @parameter1: java.lang.Object;

     label1:
        staticinvoke <com.softek.common.lang.m: void b(com.softek.common.lang.a.c,java.lang.Object)>($r0, $r1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r3.<com.softek.common.lang.j: void d(java.lang.Throwable)>($r2);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static boolean c(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        nop;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.softek.common.lang.m: java.lang.String c(java.lang.Object)>($r0);

        $r3 = staticinvoke <com.softek.common.lang.m: java.lang.String c(java.lang.Object)>($r1);

        $z0 = staticinvoke <com.softek.common.lang.m: boolean b(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $z0;
    }

    public static java.lang.String d(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.String $r1, varReplacer2821;

        nop;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        varReplacer2821 = "";

        return varReplacer2821;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String d(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.IllegalStateException $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "UTF-8");

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r2);

        throw $r1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static javax.xml.parsers.DocumentBuilderFactory d()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        javax.xml.parsers.DocumentBuilderFactory $r2;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException $r4;

        $r0 = class "Lcom/softek/common/lang/m;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance(java.lang.String,java.lang.ClassLoader)>("com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl", $r1);

     label1:
        virtualinvoke $r2.<javax.xml.parsers.DocumentBuilderFactory: void setFeature(java.lang.String,boolean)>("http://apache.org/xml/features/nonvalidating/load-external-dtd", 0);

     label2:
        virtualinvoke $r2.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
    }

    public static java.util.regex.Pattern e(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.util.regex.Pattern $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = <com.softek.common.lang.m: java.util.Map h>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (java.util.regex.Pattern) $r2;

        if $r3 != null goto label1;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r0);

        $r1 = <com.softek.common.lang.m: java.util.Map h>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r3);

     label1:
        return $r3;
    }

    public static javax.crypto.SecretKeyFactory f(java.lang.String)
    {
        java.lang.String $r0, varReplacer588;
        com.softek.common.lang.j $r1;
        javax.crypto.SecretKeyFactory $r2;
        java.lang.Throwable $r3;
        null_type varReplacer587;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer588 = "PBKDF2WithHmacSHA1";

        $r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer588);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r1 = <com.softek.common.lang.m: com.softek.common.lang.j d>;

        interfaceinvoke $r1.<com.softek.common.lang.j: void d(java.lang.Throwable)>($r3);

        varReplacer587 = null;

        return varReplacer587;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }
}
