public class okhttp3.w extends java.lang.Object implements java.lang.Cloneable, okhttp3.e$a
{
    static final java.util.List a;
    static final java.util.List b;
    final int A;
    final int B;
    final int C;
    final okhttp3.n c;
    final java.net.Proxy d;
    final java.util.List e;
    final java.util.List f;
    final java.util.List g;
    final java.util.List h;
    final okhttp3.p$a i;
    final java.net.ProxySelector j;
    final okhttp3.m k;
    final okhttp3.c l;
    final okhttp3.internal.a.e m;
    final javax.net.SocketFactory n;
    final javax.net.ssl.SSLSocketFactory o;
    final okhttp3.internal.g.b p;
    final javax.net.ssl.HostnameVerifier q;
    final okhttp3.g r;
    final okhttp3.b s;
    final okhttp3.b t;
    final okhttp3.j u;
    final okhttp3.o v;
    final boolean w;
    final boolean x;
    final boolean y;
    final int z;

    static void <clinit>()
    {
        okhttp3.Protocol[] $r0;
        okhttp3.Protocol $r1;
        java.util.List $r2;
        okhttp3.k[] $r3;
        okhttp3.k $r4;
        okhttp3.w$1 $r5;

        nop;

        $r0 = newarray (okhttp3.Protocol)[2];

        $r1 = <okhttp3.Protocol: okhttp3.Protocol d>;

        $r0[0] = $r1;

        $r1 = <okhttp3.Protocol: okhttp3.Protocol b>;

        $r0[1] = $r1;

        $r2 = staticinvoke <okhttp3.internal.b: java.util.List a(java.lang.Object[])>($r0);

        <okhttp3.w: java.util.List a> = $r2;

        $r3 = newarray (okhttp3.k)[2];

        $r4 = <okhttp3.k: okhttp3.k a>;

        $r3[0] = $r4;

        $r4 = <okhttp3.k: okhttp3.k c>;

        $r3[1] = $r4;

        $r2 = staticinvoke <okhttp3.internal.b: java.util.List a(java.lang.Object[])>($r3);

        <okhttp3.w: java.util.List b> = $r2;

        $r5 = new okhttp3.w$1;

        specialinvoke $r5.<okhttp3.w$1: void <init>()>();

        <okhttp3.internal.a: okhttp3.internal.a a> = $r5;

        return;
    }

    public void <init>()
    {
        okhttp3.w $r0;
        okhttp3.w$a $r1;

        $r0 := @this: okhttp3.w;

        $r1 = new okhttp3.w$a;

        specialinvoke $r1.<okhttp3.w$a: void <init>()>();

        specialinvoke $r0.<okhttp3.w: void <init>(okhttp3.w$a)>($r1);

        return;
    }

    void <init>(okhttp3.w$a)
    {
        okhttp3.w $r0;
        okhttp3.w$a $r1;
        okhttp3.n $r2;
        java.net.Proxy $r3;
        java.util.List $r4;
        okhttp3.p$a $r5;
        java.net.ProxySelector $r6;
        okhttp3.m $r7;
        okhttp3.c $r8;
        okhttp3.internal.a.e $r9;
        javax.net.SocketFactory $r10;
        boolean $z0, $z1;
        java.util.Iterator $r11;
        java.lang.Object $r12;
        okhttp3.k $r13;
        javax.net.ssl.SSLSocketFactory $r14;
        okhttp3.internal.g.b $r15;
        javax.net.ssl.HostnameVerifier $r16;
        okhttp3.g $r17;
        okhttp3.b $r18;
        okhttp3.j $r19;
        okhttp3.o $r20;
        int $i0;
        javax.net.ssl.X509TrustManager $r21;

        nop;

        $r0 := @this: okhttp3.w;

        $r1 := @parameter0: okhttp3.w$a;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<okhttp3.w$a: okhttp3.n a>;

        $r0.<okhttp3.w: okhttp3.n c> = $r2;

        $r3 = $r1.<okhttp3.w$a: java.net.Proxy b>;

        $r0.<okhttp3.w: java.net.Proxy d> = $r3;

        $r4 = $r1.<okhttp3.w$a: java.util.List c>;

        $r0.<okhttp3.w: java.util.List e> = $r4;

        $r4 = $r1.<okhttp3.w$a: java.util.List d>;

        $r0.<okhttp3.w: java.util.List f> = $r4;

        $r4 = $r1.<okhttp3.w$a: java.util.List e>;

        $r4 = staticinvoke <okhttp3.internal.b: java.util.List a(java.util.List)>($r4);

        $r0.<okhttp3.w: java.util.List g> = $r4;

        $r4 = $r1.<okhttp3.w$a: java.util.List f>;

        $r4 = staticinvoke <okhttp3.internal.b: java.util.List a(java.util.List)>($r4);

        $r0.<okhttp3.w: java.util.List h> = $r4;

        $r5 = $r1.<okhttp3.w$a: okhttp3.p$a g>;

        $r0.<okhttp3.w: okhttp3.p$a i> = $r5;

        $r6 = $r1.<okhttp3.w$a: java.net.ProxySelector h>;

        $r0.<okhttp3.w: java.net.ProxySelector j> = $r6;

        $r7 = $r1.<okhttp3.w$a: okhttp3.m i>;

        $r0.<okhttp3.w: okhttp3.m k> = $r7;

        $r8 = $r1.<okhttp3.w$a: okhttp3.c j>;

        $r0.<okhttp3.w: okhttp3.c l> = $r8;

        $r9 = $r1.<okhttp3.w$a: okhttp3.internal.a.e k>;

        $r0.<okhttp3.w: okhttp3.internal.a.e m> = $r9;

        $r10 = $r1.<okhttp3.w$a: javax.net.SocketFactory l>;

        $r0.<okhttp3.w: javax.net.SocketFactory n> = $r10;

        $z0 = 0;

        $r4 = $r0.<okhttp3.w: java.util.List f>;

        $r11 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (okhttp3.k) $r12;

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r13.<okhttp3.k: boolean a()>();

        if $z0 == 0 goto label3;

     label2:
        $z0 = 1;

        goto label1;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $r14 = $r1.<okhttp3.w$a: javax.net.ssl.SSLSocketFactory m>;

        if $r14 != null goto label5;

        if $z0 != 0 goto label7;

     label5:
        $r14 = $r1.<okhttp3.w$a: javax.net.ssl.SSLSocketFactory m>;

        $r0.<okhttp3.w: javax.net.ssl.SSLSocketFactory o> = $r14;

        $r15 = $r1.<okhttp3.w$a: okhttp3.internal.g.b n>;

        $r0.<okhttp3.w: okhttp3.internal.g.b p> = $r15;

     label6:
        $r16 = $r1.<okhttp3.w$a: javax.net.ssl.HostnameVerifier o>;

        $r0.<okhttp3.w: javax.net.ssl.HostnameVerifier q> = $r16;

        $r17 = $r1.<okhttp3.w$a: okhttp3.g p>;

        $r15 = $r0.<okhttp3.w: okhttp3.internal.g.b p>;

        $r17 = virtualinvoke $r17.<okhttp3.g: okhttp3.g a(okhttp3.internal.g.b)>($r15);

        $r0.<okhttp3.w: okhttp3.g r> = $r17;

        $r18 = $r1.<okhttp3.w$a: okhttp3.b q>;

        $r0.<okhttp3.w: okhttp3.b s> = $r18;

        $r18 = $r1.<okhttp3.w$a: okhttp3.b r>;

        $r0.<okhttp3.w: okhttp3.b t> = $r18;

        $r19 = $r1.<okhttp3.w$a: okhttp3.j s>;

        $r0.<okhttp3.w: okhttp3.j u> = $r19;

        $r20 = $r1.<okhttp3.w$a: okhttp3.o t>;

        $r0.<okhttp3.w: okhttp3.o v> = $r20;

        $z0 = $r1.<okhttp3.w$a: boolean u>;

        $r0.<okhttp3.w: boolean w> = $z0;

        $z0 = $r1.<okhttp3.w$a: boolean v>;

        $r0.<okhttp3.w: boolean x> = $z0;

        $z0 = $r1.<okhttp3.w$a: boolean w>;

        $r0.<okhttp3.w: boolean y> = $z0;

        $i0 = $r1.<okhttp3.w$a: int x>;

        $r0.<okhttp3.w: int z> = $i0;

        $i0 = $r1.<okhttp3.w$a: int y>;

        $r0.<okhttp3.w: int A> = $i0;

        $i0 = $r1.<okhttp3.w$a: int z>;

        $r0.<okhttp3.w: int B> = $i0;

        $i0 = $r1.<okhttp3.w$a: int A>;

        $r0.<okhttp3.w: int C> = $i0;

        return;

     label7:
        $r21 = specialinvoke $r0.<okhttp3.w: javax.net.ssl.X509TrustManager y()>();

        $r14 = specialinvoke $r0.<okhttp3.w: javax.net.ssl.SSLSocketFactory a(javax.net.ssl.X509TrustManager)>($r21);

        $r0.<okhttp3.w: javax.net.ssl.SSLSocketFactory o> = $r14;

        $r15 = staticinvoke <okhttp3.internal.g.b: okhttp3.internal.g.b a(javax.net.ssl.X509TrustManager)>($r21);

        $r0.<okhttp3.w: okhttp3.internal.g.b p> = $r15;

        goto label6;
    }

    private javax.net.ssl.SSLSocketFactory a(javax.net.ssl.X509TrustManager)
    {
        okhttp3.w $r0;
        javax.net.ssl.X509TrustManager $r1;
        java.lang.Throwable $r2;
        javax.net.ssl.SSLContext $r3;
        java.lang.Object[] $r4;
        javax.net.ssl.SSLSocketFactory $r5;
        java.lang.AssertionError r6;
        javax.net.ssl.TrustManager[] r7;
        java.lang.String varReplacer2319;
        null_type varReplacer2320, varReplacer2321;

        nop;

        $r0 := @this: okhttp3.w;

        $r1 := @parameter0: javax.net.ssl.X509TrustManager;

     label1:
        varReplacer2319 = "TLS";

        $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2319);

     label2:
        $r4 = newarray (javax.net.ssl.TrustManager)[1];

        $r4[0] = $r1;

        r7 = (javax.net.ssl.TrustManager[]) $r4;

     label3:
        varReplacer2320 = null;

        varReplacer2321 = null;

        virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2320, r7, varReplacer2320);

        $r5 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label4:
        return $r5;

     label5:
        $r2 := @caughtexception;

        r6 = new java.lang.AssertionError;

        specialinvoke r6.<java.lang.AssertionError: void <init>()>();

        throw r6;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }

    private javax.net.ssl.X509TrustManager y()
    {
        okhttp3.w $r0;
        java.lang.Throwable $r1;
        java.lang.String $r2, varReplacer2318;
        javax.net.ssl.TrustManagerFactory $r3;
        javax.net.ssl.TrustManager[] $r4;
        int $i0;
        javax.net.ssl.TrustManager $r5;
        boolean $z0;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7;
        java.lang.AssertionError $r8;
        javax.net.ssl.X509TrustManager $r9;
        null_type varReplacer2317;

        nop;

        $r0 := @this: okhttp3.w;

     label1:
        $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r2);

        varReplacer2317 = null;

        virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer2317);

        $r4 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

     label2:
        $i0 = lengthof $r4;

        if $i0 != 1 goto label3;

        $r5 = $r4[0];

        $z0 = $r5 instanceof javax.net.ssl.X509TrustManager;

        if $z0 != 0 goto label7;

     label3:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

     label4:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        varReplacer2318 = "Unexpected default trust managers:";

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2318);

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

     label5:
        throw $r6;

     label6:
        $r1 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label7:
        $r5 = $r4[0];

        $r9 = (javax.net.ssl.X509TrustManager) $r5;

        return $r9;

        catch java.security.GeneralSecurityException from label1 to label2 with label6;
        catch java.security.GeneralSecurityException from label4 to label5 with label6;
    }

    public int a()
    {
        okhttp3.w $r0;
        int i0;

        $r0 := @this: okhttp3.w;

        i0 = $r0.<okhttp3.w: int z>;

        return i0;
    }

    public okhttp3.e a(okhttp3.y)
    {
        okhttp3.w $r0;
        okhttp3.y $r1;
        okhttp3.x r2;
        okhttp3.e r3;
        int varReplacer2316;

        nop;

        $r0 := @this: okhttp3.w;

        $r1 := @parameter0: okhttp3.y;

        r2 = new okhttp3.x;

        varReplacer2316 = 0;

        specialinvoke r2.<okhttp3.x: void <init>(okhttp3.w,okhttp3.y,boolean)>($r0, $r1, varReplacer2316);

        r3 = (okhttp3.e) r2;

        return r3;
    }

    public int b()
    {
        okhttp3.w $r0;
        int i0;

        $r0 := @this: okhttp3.w;

        i0 = $r0.<okhttp3.w: int A>;

        return i0;
    }

    public int c()
    {
        okhttp3.w $r0;
        int i0;

        $r0 := @this: okhttp3.w;

        i0 = $r0.<okhttp3.w: int B>;

        return i0;
    }

    public java.net.Proxy d()
    {
        okhttp3.w $r0;
        java.net.Proxy r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: java.net.Proxy d>;

        return r1;
    }

    public java.net.ProxySelector e()
    {
        okhttp3.w $r0;
        java.net.ProxySelector r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: java.net.ProxySelector j>;

        return r1;
    }

    public okhttp3.m f()
    {
        okhttp3.w $r0;
        okhttp3.m r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: okhttp3.m k>;

        return r1;
    }

    okhttp3.internal.a.e g()
    {
        okhttp3.w $r0;
        okhttp3.c $r1;
        okhttp3.internal.a.e r2;

        $r0 := @this: okhttp3.w;

        $r1 = $r0.<okhttp3.w: okhttp3.c l>;

        if $r1 == null goto label1;

        $r1 = $r0.<okhttp3.w: okhttp3.c l>;

        r2 = $r1.<okhttp3.c: okhttp3.internal.a.e a>;

        return r2;

     label1:
        r2 = $r0.<okhttp3.w: okhttp3.internal.a.e m>;

        return r2;
    }

    public okhttp3.o h()
    {
        okhttp3.w $r0;
        okhttp3.o r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: okhttp3.o v>;

        return r1;
    }

    public javax.net.SocketFactory i()
    {
        okhttp3.w $r0;
        javax.net.SocketFactory r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: javax.net.SocketFactory n>;

        return r1;
    }

    public javax.net.ssl.SSLSocketFactory j()
    {
        okhttp3.w $r0;
        javax.net.ssl.SSLSocketFactory r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: javax.net.ssl.SSLSocketFactory o>;

        return r1;
    }

    public javax.net.ssl.HostnameVerifier k()
    {
        okhttp3.w $r0;
        javax.net.ssl.HostnameVerifier r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: javax.net.ssl.HostnameVerifier q>;

        return r1;
    }

    public okhttp3.g l()
    {
        okhttp3.w $r0;
        okhttp3.g r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: okhttp3.g r>;

        return r1;
    }

    public okhttp3.b m()
    {
        okhttp3.w $r0;
        okhttp3.b r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: okhttp3.b t>;

        return r1;
    }

    public okhttp3.b n()
    {
        okhttp3.w $r0;
        okhttp3.b r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: okhttp3.b s>;

        return r1;
    }

    public okhttp3.j o()
    {
        okhttp3.w $r0;
        okhttp3.j r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: okhttp3.j u>;

        return r1;
    }

    public boolean p()
    {
        okhttp3.w $r0;
        boolean z0;

        $r0 := @this: okhttp3.w;

        z0 = $r0.<okhttp3.w: boolean w>;

        return z0;
    }

    public boolean q()
    {
        okhttp3.w $r0;
        boolean z0;

        $r0 := @this: okhttp3.w;

        z0 = $r0.<okhttp3.w: boolean x>;

        return z0;
    }

    public boolean r()
    {
        okhttp3.w $r0;
        boolean z0;

        $r0 := @this: okhttp3.w;

        z0 = $r0.<okhttp3.w: boolean y>;

        return z0;
    }

    public okhttp3.n s()
    {
        okhttp3.w $r0;
        okhttp3.n r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: okhttp3.n c>;

        return r1;
    }

    public java.util.List t()
    {
        okhttp3.w $r0;
        java.util.List r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: java.util.List e>;

        return r1;
    }

    public java.util.List u()
    {
        okhttp3.w $r0;
        java.util.List r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: java.util.List f>;

        return r1;
    }

    public java.util.List v()
    {
        okhttp3.w $r0;
        java.util.List r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: java.util.List g>;

        return r1;
    }

    public java.util.List w()
    {
        okhttp3.w $r0;
        java.util.List r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: java.util.List h>;

        return r1;
    }

    okhttp3.p$a x()
    {
        okhttp3.w $r0;
        okhttp3.p$a r1;

        $r0 := @this: okhttp3.w;

        r1 = $r0.<okhttp3.w: okhttp3.p$a i>;

        return r1;
    }
}
