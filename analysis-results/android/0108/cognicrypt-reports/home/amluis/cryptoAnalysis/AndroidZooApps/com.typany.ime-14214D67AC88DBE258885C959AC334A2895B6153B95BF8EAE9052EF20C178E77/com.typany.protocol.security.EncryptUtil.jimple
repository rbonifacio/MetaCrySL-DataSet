public class com.typany.protocol.security.EncryptUtil extends java.lang.Object
{
    private static final java.lang.String a;
    private static byte[] b;
    private static byte[] c;

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;
        byte[] $r2;

        nop;

        $r1 = class "Lcom/typany/protocol/security/EncryptUtil;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.typany.protocol.security.EncryptUtil: java.lang.String a> = $r0;

        $r2 = newarray (byte)[16];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r2[8] = 0;

        $r2[9] = 0;

        $r2[10] = 0;

        $r2[11] = 0;

        $r2[12] = 0;

        $r2[13] = 0;

        $r2[14] = 0;

        $r2[15] = 0;

        <com.typany.protocol.security.EncryptUtil: byte[] b> = $r2;

        return;
    }

    public void <init>()
    {
        com.typany.protocol.security.EncryptUtil $r0;

        $r0 := @this: com.typany.protocol.security.EncryptUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String a(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        byte[] $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.Cipher $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "AES");

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/ECB/PKCS5Padding");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r3);

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        $r0 = staticinvoke <com.typany.protocol.security.EncryptUtil: java.lang.String e(byte[])>($r2);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        return $r0;
    }

    public static java.lang.String a(byte[])
    {
        byte[] $r0;
        java.security.MessageDigest $r1;
        java.lang.String $r2;
        java.lang.Exception $r3;

        $r0 := @parameter0: byte[];

     label1:
        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte[])>($r0);

        $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>();

        $r2 = staticinvoke <com.typany.protocol.security.EncryptUtil: java.lang.String e(byte[])>($r0);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static byte[] a(byte[], java.lang.String)
    {
        byte[] $r0, $r3;
        java.lang.String $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.Cipher $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "AES");

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/ECB/PKCS5Padding");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r2);

        $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    public static java.lang.String b(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        byte[] $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.Cipher $r4;
        java.lang.Exception $r5, $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label01:
        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label02:
        $r3 = new javax.crypto.spec.SecretKeySpec;

     label03:
        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "AES");

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/ECB/PKCS5Padding");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r3);

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.typany.protocol.security.EncryptUtil: byte[] f(byte[])>($r2);

     label04:
        $r2 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

     label05:
        $r0 = new java.lang.String;

     label06:
        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

     label07:
        $r1 = new java.lang.String;

     label08:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, "UTF-8");

     label09:
        return $r1;

     label10:
        $r5 := @caughtexception;

        return null;

     label11:
        $r6 := @caughtexception;

        return null;

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Exception from label04 to label05 with label10;
        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public static byte[] b(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $r0 = staticinvoke <com.typany.protocol.security.EncryptUtil: byte[] d(byte[])>($r0);

        return $r0;
    }

    public static java.lang.String c(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <com.typany.protocol.security.Base64: java.lang.String a(byte[])>($r0);

        return $r1;
    }

    public static byte[] c(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer5085, varReplacer5088, varReplacer5089, varReplacer5091;
        byte[] $r2, $r3;
        java.security.MessageDigest $r4;
        int $i0, varReplacer5086, varReplacer5087, varReplacer5090, varReplacer5092, varReplacer5093;
        javax.crypto.spec.IvParameterSpec $r5;
        javax.crypto.spec.SecretKeySpec $r6;
        javax.crypto.Cipher $r7;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        varReplacer5087 = 0;

        $r2 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r0, varReplacer5087);

        varReplacer5089 = "UTF-8";

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer5089);

        <com.typany.protocol.security.EncryptUtil: byte[] c> = $r3;

        varReplacer5085 = "SHA-256";

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer5085);

        $r3 = <com.typany.protocol.security.EncryptUtil: byte[] c>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

        $r3 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        <com.typany.protocol.security.EncryptUtil: byte[] c> = $r3;

        varReplacer5092 = 0;

        varReplacer5093 = 16;

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r2, varReplacer5092, varReplacer5093);

        $i0 = lengthof $r2;

        varReplacer5090 = 16;

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r2, varReplacer5090, $i0);

        $r5 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3);

        $r6 = new javax.crypto.spec.SecretKeySpec;

        $r3 = <com.typany.protocol.security.EncryptUtil: byte[] c>;

        varReplacer5091 = "AES";

        specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer5091);

        varReplacer5088 = "AES/CBC/PKCS5Padding";

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer5088);

        varReplacer5086 = 2;

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer5086, $r6, $r5);

        $r2 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        return $r2;
    }

    private static byte[] d(byte[])
    {
        java.io.ByteArrayOutputStream $r0, r10;
        byte[] $r1, $r3;
        java.util.zip.Deflater $r2, r9;
        int $i0;
        boolean $z0;
        java.lang.Exception $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8;
        java.io.IOException r11;

        $r1 := @parameter0: byte[];

        r9 = new java.util.zip.Deflater;

        $r2 = r9;

        specialinvoke r9.<java.util.zip.Deflater: void <init>()>();

        virtualinvoke $r2.<java.util.zip.Deflater: void reset()>();

        virtualinvoke $r2.<java.util.zip.Deflater: void setInput(byte[])>($r1);

        virtualinvoke $r2.<java.util.zip.Deflater: void finish()>();

        r10 = new java.io.ByteArrayOutputStream;

        $r0 = r10;

        $i0 = lengthof $r1;

        specialinvoke r10.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

     label01:
        $r3 = newarray (byte)[1024];

     label02:
        $z0 = virtualinvoke $r2.<java.util.zip.Deflater: boolean finished()>();

     label03:
        if $z0 != 0 goto label10;

     label04:
        $i0 = virtualinvoke $r2.<java.util.zip.Deflater: int deflate(byte[])>($r3);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r3, 0, $i0);

     label05:
        goto label02;

     label06:
        $r4 := @caughtexception;

     label07:
        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label08:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label09:
        virtualinvoke $r2.<java.util.zip.Deflater: void end()>();

        return $r1;

     label10:
        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label11:
        $r1 = $r3;

     label12:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label13:
        goto label09;

     label14:
        $r5 := @caughtexception;

        r11 = (java.io.IOException) $r5;

        virtualinvoke r11.<java.io.IOException: void printStackTrace()>();

        goto label09;

     label15:
        $r6 := @caughtexception;

        r11 = (java.io.IOException) $r6;

        virtualinvoke r11.<java.io.IOException: void printStackTrace()>();

        goto label09;

     label16:
        $r7 := @caughtexception;

     label17:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label18:
        throw $r7;

     label19:
        $r8 := @caughtexception;

        r11 = (java.io.IOException) $r8;

        virtualinvoke r11.<java.io.IOException: void printStackTrace()>();

        goto label18;

        catch java.lang.Exception from label01 to label03 with label06;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.io.IOException from label08 to label09 with label15;
        catch java.lang.Exception from label10 to label11 with label06;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label17 to label18 with label19;
    }

    private static java.lang.String e(byte[])
    {
        byte[] $r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1;
        byte $b2;
        java.lang.Object[] $r2;
        short $s3;
        java.lang.Integer $r3;
        java.lang.String $r4;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = $r0[$i1];

        $r2 = newarray (java.lang.Object)[1];

        $s3 = $b2 & 255;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s3);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02X", $r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static byte[] f(byte[])
    {
        byte[] $r0, $r2;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r3;
        byte $b3;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        $i1 = $i1 % 2;

        if $i1 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length is not even");

        throw $r1;

     label1:
        $i1 = lengthof $r0;

        $i1 = $i1 / 2;

        $r2 = newarray (byte)[$i1];

        $i1 = 0;

     label2:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label3;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int)>($r0, $i1, 2);

        $i2 = $i1 / 2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        $b3 = (byte) $i0;

        $r2[$i2] = $b3;

        $i1 = $i1 + 2;

        goto label2;

     label3:
        return $r2;
    }
}
