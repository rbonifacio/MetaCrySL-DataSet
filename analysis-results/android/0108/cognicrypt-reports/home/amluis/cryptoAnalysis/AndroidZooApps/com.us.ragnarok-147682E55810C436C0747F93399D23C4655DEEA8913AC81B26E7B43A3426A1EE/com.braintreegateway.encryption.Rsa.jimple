public class com.braintreegateway.encryption.Rsa extends java.lang.Object
{
    private final java.lang.String ALGORITHM;
    private final java.lang.String TRANSFORMATION;
    private java.lang.String publicKeyString;

    public void <init>(java.lang.String)
    {
        com.braintreegateway.encryption.Rsa $r0;
        java.lang.String $r1, varReplacer5222, varReplacer5223;

        nop;

        $r0 := @this: com.braintreegateway.encryption.Rsa;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        varReplacer5222 = "RSA";

        $r0.<com.braintreegateway.encryption.Rsa: java.lang.String ALGORITHM> = varReplacer5222;

        varReplacer5223 = "RSA/ECB/PKCS1Padding";

        $r0.<com.braintreegateway.encryption.Rsa: java.lang.String TRANSFORMATION> = varReplacer5223;

        $r0.<com.braintreegateway.encryption.Rsa: java.lang.String publicKeyString> = $r1;

        return;
    }

    private java.security.PublicKey publicKey()
    {
        com.braintreegateway.encryption.Rsa $r0;
        com.braintree.org.bouncycastle.asn1.ASN1InputStream $r1, r14;
        java.security.spec.RSAPublicKeySpec $r2, r15;
        java.lang.String $r3, varReplacer5231;
        byte[] $r4;
        com.braintree.org.bouncycastle.asn1.DERObject $r5;
        com.braintree.org.bouncycastle.asn1.x509.RSAPublicKeyStructure $r6;
        java.math.BigInteger $r7, $r8;
        java.security.KeyFactory $r9;
        java.security.PublicKey $r10;
        java.lang.Throwable $r11, $r12, $r13;
        java.security.NoSuchAlgorithmException r16;
        java.security.spec.InvalidKeySpecException r17;
        java.io.IOException r18;
        null_type varReplacer5230;

        nop;

        $r0 := @this: com.braintreegateway.encryption.Rsa;

        $r3 = $r0.<com.braintreegateway.encryption.Rsa: java.lang.String publicKeyString>;

     label01:
        $r4 = staticinvoke <com.braintree.org.bouncycastle.util.encoders.Base64: byte[] decode(java.lang.String)>($r3);

     label02:
        r14 = new com.braintree.org.bouncycastle.asn1.ASN1InputStream;

        $r1 = r14;

     label03:
        specialinvoke r14.<com.braintree.org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r4);

        $r5 = virtualinvoke $r1.<com.braintree.org.bouncycastle.asn1.ASN1InputStream: com.braintree.org.bouncycastle.asn1.DERObject readObject()>();

        $r6 = staticinvoke <com.braintree.org.bouncycastle.asn1.x509.RSAPublicKeyStructure: com.braintree.org.bouncycastle.asn1.x509.RSAPublicKeyStructure getInstance(java.lang.Object)>($r5);

     label04:
        r15 = new java.security.spec.RSAPublicKeySpec;

        $r2 = r15;

     label05:
        $r7 = virtualinvoke $r6.<com.braintree.org.bouncycastle.asn1.x509.RSAPublicKeyStructure: java.math.BigInteger getModulus()>();

        $r8 = virtualinvoke $r6.<com.braintree.org.bouncycastle.asn1.x509.RSAPublicKeyStructure: java.math.BigInteger getPublicExponent()>();

        specialinvoke r15.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r7, $r8);

        varReplacer5231 = "RSA";

        $r9 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer5231);

        $r10 = virtualinvoke $r9.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r2);

     label06:
        return $r10;

     label07:
        $r11 := @caughtexception;

        r16 = (java.security.NoSuchAlgorithmException) $r11;

        virtualinvoke r16.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label08:
        varReplacer5230 = null;

        return varReplacer5230;

     label09:
        $r12 := @caughtexception;

        r17 = (java.security.spec.InvalidKeySpecException) $r12;

        virtualinvoke r17.<java.security.spec.InvalidKeySpecException: void printStackTrace()>();

        goto label08;

     label10:
        $r13 := @caughtexception;

        r18 = (java.io.IOException) $r13;

        virtualinvoke r18.<java.io.IOException: void printStackTrace()>();

        goto label08;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label07;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label07;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label07;
        catch java.security.spec.InvalidKeySpecException from label01 to label02 with label09;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label09;
        catch java.security.spec.InvalidKeySpecException from label05 to label06 with label09;
        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label05 to label06 with label10;
    }

    public java.lang.String encrypt(byte[])
    {
        com.braintreegateway.encryption.Rsa $r0;
        byte[] $r1;
        javax.crypto.Cipher $r2;
        java.security.PublicKey $r3;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8;
        java.lang.String r9, varReplacer5225;
        java.security.NoSuchAlgorithmException r10;
        javax.crypto.NoSuchPaddingException r11;
        java.security.InvalidKeyException r12;
        javax.crypto.IllegalBlockSizeException r13;
        javax.crypto.BadPaddingException r14;
        int varReplacer5224;
        null_type varReplacer5226;

        nop;

        $r0 := @this: com.braintreegateway.encryption.Rsa;

        $r1 := @parameter0: byte[];

     label01:
        varReplacer5225 = "RSA/ECB/PKCS1Padding";

        $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer5225);

        $r3 = specialinvoke $r0.<com.braintreegateway.encryption.Rsa: java.security.PublicKey publicKey()>();

        varReplacer5224 = 1;

        virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer5224, $r3);

        $r1 = staticinvoke <com.braintree.org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>($r1);

        $r1 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label02:
        r9 = new java.lang.String;

     label03:
        $r1 = staticinvoke <com.braintree.org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>($r1);

        specialinvoke r9.<java.lang.String: void <init>(byte[])>($r1);

     label04:
        return r9;

     label05:
        $r4 := @caughtexception;

        r10 = (java.security.NoSuchAlgorithmException) $r4;

        virtualinvoke r10.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label06:
        varReplacer5226 = null;

        return varReplacer5226;

     label07:
        $r5 := @caughtexception;

        r11 = (javax.crypto.NoSuchPaddingException) $r5;

        virtualinvoke r11.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label06;

     label08:
        $r6 := @caughtexception;

        r12 = (java.security.InvalidKeyException) $r6;

        virtualinvoke r12.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label06;

     label09:
        $r7 := @caughtexception;

        r13 = (javax.crypto.IllegalBlockSizeException) $r7;

        virtualinvoke r13.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label06;

     label10:
        $r8 := @caughtexception;

        r14 = (javax.crypto.BadPaddingException) $r8;

        virtualinvoke r14.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label06;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label05;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label07;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label07;
        catch java.security.InvalidKeyException from label01 to label02 with label08;
        catch java.security.InvalidKeyException from label03 to label04 with label08;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label09;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label09;
        catch javax.crypto.BadPaddingException from label01 to label02 with label10;
        catch javax.crypto.BadPaddingException from label03 to label04 with label10;
    }
}
