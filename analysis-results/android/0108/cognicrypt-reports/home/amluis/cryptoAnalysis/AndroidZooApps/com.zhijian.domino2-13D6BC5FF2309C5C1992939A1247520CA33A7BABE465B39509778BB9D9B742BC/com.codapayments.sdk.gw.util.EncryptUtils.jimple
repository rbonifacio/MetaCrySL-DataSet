public class com.codapayments.sdk.gw.util.EncryptUtils extends java.lang.Object
{
    private static final java.lang.String ALGO;

    public void <init>()
    {
        com.codapayments.sdk.gw.util.EncryptUtils $r0;

        $r0 := @this: com.codapayments.sdk.gw.util.EncryptUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String decrypt(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, java.io.IOException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        java.lang.String $r0, $r1, varReplacer391, varReplacer394;
        java.security.Key $r2;
        javax.crypto.Cipher $r3;
        byte[] $r4;
        int varReplacer392, varReplacer393;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.codapayments.sdk.gw.util.EncryptUtils: java.security.Key generateKey(java.lang.String)>($r0);

        varReplacer391 = "AES";

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer391);

        varReplacer393 = 2;

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer393, $r2);

        varReplacer392 = 0;

        $r4 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r1, varReplacer392);

        $r4 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        $r0 = new java.lang.String;

        varReplacer394 = "UTF-8";

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, varReplacer394);

        return $r0;
    }

    public static java.lang.String encrypt(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, java.io.IOException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        java.lang.String $r0, $r1, $r6;
        java.security.Key $r2;
        javax.crypto.Cipher $r3;
        byte[] $r4;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.codapayments.sdk.gw.util.EncryptUtils: java.security.Key generateKey(java.lang.String)>($r0);

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES");

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r2);

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r4 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, 0);

        $r1 = <com.codapayments.sdk.util.Global: java.lang.String EncryptUtils>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Encrypted string : ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r1, $r6);

        return $r0;
    }

    private static java.security.Key generateKey(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.lang.String $r0, varReplacer407, varReplacer408;
        javax.crypto.spec.SecretKeySpec $r1;
        byte[] $r2;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = new javax.crypto.spec.SecretKeySpec;

        varReplacer407 = "UTF-8";

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer407);

        varReplacer408 = "AES";

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer408);

        return $r1;
    }
}
