public final class de.schildbach.pte.util.HttpClient extends java.lang.Object
{
    private static final okhttp3.OkHttpClient OKHTTP_CLIENT;
    private static final java.util.regex.Pattern P_EXPIRED;
    private static final java.util.regex.Pattern P_INTERNAL_ERROR;
    private static final java.util.regex.Pattern P_REDIRECT_HTTP_EQUIV;
    private static final java.util.regex.Pattern P_REDIRECT_SCRIPT;
    private static final javax.net.ssl.HostnameVerifier SSL_ACCEPT_ALL_HOSTNAMES;
    private static final javax.net.ssl.X509TrustManager TRUST_ALL_CERTIFICATES;
    private static final org.slf4j.Logger log;
    private okhttp3.CertificatePinner certificatePinner;
    private java.util.Map headers;
    private java.net.Proxy proxy;
    private okhttp3.Cookie sessionCookie;
    private java.lang.String sessionCookieName;
    private boolean sslAcceptAllHostnames;
    private boolean trustAllCertificates;
    private java.lang.String userAgent;

    static void <clinit>()
    {
        okhttp3.OkHttpClient$Builder $r0;
        okhttp3.logging.HttpLoggingInterceptor $r1;
        java.util.concurrent.TimeUnit $r2;
        de.schildbach.pte.util.HttpClient$1 $r3;
        okhttp3.logging.HttpLoggingInterceptor$Level $r4;
        okhttp3.OkHttpClient $r5;
        org.slf4j.Logger $r6;
        java.util.regex.Pattern $r7;
        de.schildbach.pte.util.HttpClient$3 $r8;
        de.schildbach.pte.util.HttpClient$4 $r9;
        int varReplacer7071, varReplacer7074, varReplacer7075, varReplacer7080;
        long varReplacer7072, varReplacer7078, varReplacer7081;
        java.lang.String varReplacer7073, varReplacer7076, varReplacer7077, varReplacer7079;

        nop;

        $r1 = new okhttp3.logging.HttpLoggingInterceptor;

        $r3 = new de.schildbach.pte.util.HttpClient$1;

        specialinvoke $r3.<de.schildbach.pte.util.HttpClient$1: void <init>()>();

        specialinvoke $r1.<okhttp3.logging.HttpLoggingInterceptor: void <init>(okhttp3.logging.HttpLoggingInterceptor$Logger)>($r3);

        $r4 = <okhttp3.logging.HttpLoggingInterceptor$Level: okhttp3.logging.HttpLoggingInterceptor$Level BASIC>;

        virtualinvoke $r1.<okhttp3.logging.HttpLoggingInterceptor: okhttp3.logging.HttpLoggingInterceptor setLevel(okhttp3.logging.HttpLoggingInterceptor$Level)>($r4);

        $r0 = new okhttp3.OkHttpClient$Builder;

        specialinvoke $r0.<okhttp3.OkHttpClient$Builder: void <init>()>();

        varReplacer7071 = 0;

        virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder followRedirects(boolean)>(varReplacer7071);

        varReplacer7075 = 1;

        virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder followSslRedirects(boolean)>(varReplacer7075);

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        varReplacer7078 = 10L;

        virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(varReplacer7078, $r2);

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        varReplacer7072 = 10L;

        virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit)>(varReplacer7072, $r2);

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        varReplacer7081 = 15L;

        virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(varReplacer7081, $r2);

        virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor)>($r1);

        $r5 = virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>();

        <de.schildbach.pte.util.HttpClient: okhttp3.OkHttpClient OKHTTP_CLIENT> = $r5;

        $r6 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lde/schildbach/pte/util/HttpClient;");

        <de.schildbach.pte.util.HttpClient: org.slf4j.Logger log> = $r6;

        varReplacer7079 = "<META\\s+http-equiv=\"?refresh\"?\\s+content=\"\\d+;\\s*URL=([^\"]+)\"";

        varReplacer7080 = 2;

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(varReplacer7079, varReplacer7080);

        <de.schildbach.pte.util.HttpClient: java.util.regex.Pattern P_REDIRECT_HTTP_EQUIV> = $r7;

        varReplacer7073 = "<script\\s+(?:type=\"text/javascript\"|language=\"javascript\")>\\s*(?:window.location|location.href)\\s*=\\s*\"([^\"]+)\"";

        varReplacer7074 = 2;

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(varReplacer7073, varReplacer7074);

        <de.schildbach.pte.util.HttpClient: java.util.regex.Pattern P_REDIRECT_SCRIPT> = $r7;

        varReplacer7077 = ">\\s*(Your session has expired\\.|Session Expired|Ihre Verbindungskennung ist nicht mehr g.ltig\\.)\\s*<";

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(varReplacer7077);

        <de.schildbach.pte.util.HttpClient: java.util.regex.Pattern P_EXPIRED> = $r7;

        varReplacer7076 = ">\\s*(Internal Error|Server ein Fehler aufgetreten|Internal error in gateway|VRN - Keine Verbindung zum Server m.glich)\\s*<";

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(varReplacer7076);

        <de.schildbach.pte.util.HttpClient: java.util.regex.Pattern P_INTERNAL_ERROR> = $r7;

        $r8 = new de.schildbach.pte.util.HttpClient$3;

        specialinvoke $r8.<de.schildbach.pte.util.HttpClient$3: void <init>()>();

        <de.schildbach.pte.util.HttpClient: javax.net.ssl.X509TrustManager TRUST_ALL_CERTIFICATES> = $r8;

        $r9 = new de.schildbach.pte.util.HttpClient$4;

        specialinvoke $r9.<de.schildbach.pte.util.HttpClient$4: void <init>()>();

        <de.schildbach.pte.util.HttpClient: javax.net.ssl.HostnameVerifier SSL_ACCEPT_ALL_HOSTNAMES> = $r9;

        return;
    }

    public void <init>()
    {
        de.schildbach.pte.util.HttpClient $r0;
        java.util.HashMap $r1;
        null_type varReplacer7088, varReplacer7091, varReplacer7092, varReplacer7093, varReplacer7094;
        int varReplacer7089, varReplacer7090;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        varReplacer7093 = null;

        $r0.<de.schildbach.pte.util.HttpClient: java.lang.String userAgent> = varReplacer7093;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<de.schildbach.pte.util.HttpClient: java.util.Map headers> = $r1;

        varReplacer7091 = null;

        $r0.<de.schildbach.pte.util.HttpClient: java.lang.String sessionCookieName> = varReplacer7091;

        varReplacer7092 = null;

        $r0.<de.schildbach.pte.util.HttpClient: okhttp3.Cookie sessionCookie> = varReplacer7092;

        varReplacer7094 = null;

        $r0.<de.schildbach.pte.util.HttpClient: java.net.Proxy proxy> = varReplacer7094;

        varReplacer7090 = 0;

        $r0.<de.schildbach.pte.util.HttpClient: boolean trustAllCertificates> = varReplacer7090;

        varReplacer7088 = null;

        $r0.<de.schildbach.pte.util.HttpClient: okhttp3.CertificatePinner certificatePinner> = varReplacer7088;

        varReplacer7089 = 0;

        $r0.<de.schildbach.pte.util.HttpClient: boolean sslAcceptAllHostnames> = varReplacer7089;

        return;
    }

    static org.slf4j.Logger access$000()
    {
        org.slf4j.Logger r0;

        r0 = <de.schildbach.pte.util.HttpClient: org.slf4j.Logger log>;

        return r0;
    }

    public static boolean testExpired(java.lang.String)
    {
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;
        int varReplacer8079, varReplacer8080;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = <de.schildbach.pte.util.HttpClient: java.util.regex.Pattern P_EXPIRED>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        varReplacer8080 = 1;

        return varReplacer8080;

     label1:
        varReplacer8079 = 0;

        return varReplacer8079;
    }

    public static boolean testInternalError(java.lang.String)
    {
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;
        int varReplacer8077, varReplacer8078;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = <de.schildbach.pte.util.HttpClient: java.util.regex.Pattern P_INTERNAL_ERROR>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        varReplacer8078 = 1;

        return varReplacer8078;

     label1:
        varReplacer8077 = 0;

        return varReplacer8077;
    }

    public static okhttp3.HttpUrl testRedirect(okhttp3.HttpUrl, java.lang.String)
    {
        okhttp3.HttpUrl $r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        int varReplacer8081, varReplacer8083;
        null_type varReplacer8082;

        nop;

        $r0 := @parameter0: okhttp3.HttpUrl;

        $r1 := @parameter1: java.lang.String;

        $r2 = <de.schildbach.pte.util.HttpClient: java.util.regex.Pattern P_REDIRECT_HTTP_EQUIV>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        varReplacer8083 = 1;

        $r1 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(varReplacer8083);

        $r0 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>($r1);

        return $r0;

     label1:
        $r2 = <de.schildbach.pte.util.HttpClient: java.util.regex.Pattern P_REDIRECT_SCRIPT>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        varReplacer8081 = 1;

        $r1 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(varReplacer8081);

        $r0 = virtualinvoke $r0.<okhttp3.HttpUrl: okhttp3.HttpUrl resolve(java.lang.String)>($r1);

        return $r0;

     label2:
        varReplacer8082 = null;

        return varReplacer8082;
    }

    private void trustAllCertificates(okhttp3.OkHttpClient$Builder)
    {
        de.schildbach.pte.util.HttpClient $r0;
        okhttp3.OkHttpClient$Builder $r1;
        java.lang.Exception $r2;
        javax.net.ssl.X509TrustManager $r3;
        javax.net.ssl.SSLContext $r4;
        java.lang.Object[] $r5;
        javax.net.ssl.SSLSocketFactory $r6;
        java.lang.RuntimeException r7;
        javax.net.ssl.TrustManager[] r8;
        java.lang.String varReplacer8210;
        null_type varReplacer8211, varReplacer8212;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $r1 := @parameter0: okhttp3.OkHttpClient$Builder;

     label1:
        varReplacer8210 = "SSL";

        $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer8210);

        $r5 = newarray (javax.net.ssl.TrustManager)[1];

     label2:
        $r3 = <de.schildbach.pte.util.HttpClient: javax.net.ssl.X509TrustManager TRUST_ALL_CERTIFICATES>;

     label3:
        $r5[0] = $r3;

        r8 = (javax.net.ssl.TrustManager[]) $r5;

        varReplacer8211 = null;

        varReplacer8212 = null;

        virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer8211, r8, varReplacer8211);

        $r6 = virtualinvoke $r4.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label4:
        $r3 = <de.schildbach.pte.util.HttpClient: javax.net.ssl.X509TrustManager TRUST_ALL_CERTIFICATES>;

     label5:
        virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory,javax.net.ssl.X509TrustManager)>($r6, $r3);

     label6:
        return;

     label7:
        $r2 := @caughtexception;

        r7 = new java.lang.RuntimeException;

        specialinvoke r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw r7;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public java.lang.CharSequence get(okhttp3.HttpUrl) throws java.io.IOException
    {
        de.schildbach.pte.util.HttpClient $r0;
        okhttp3.HttpUrl $r1;
        java.lang.CharSequence $r2;
        null_type varReplacer8058, varReplacer8059;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $r1 := @parameter0: okhttp3.HttpUrl;

        varReplacer8058 = null;

        varReplacer8059 = null;

        $r2 = virtualinvoke $r0.<de.schildbach.pte.util.HttpClient: java.lang.CharSequence get(okhttp3.HttpUrl,java.lang.String,java.lang.String)>($r1, varReplacer8058, varReplacer8058);

        return $r2;
    }

    public java.lang.CharSequence get(okhttp3.HttpUrl, java.lang.String, java.lang.String) throws java.io.IOException
    {
        de.schildbach.pte.util.HttpClient $r0;
        okhttp3.HttpUrl $r1;
        java.lang.String $r2, $r3;
        de.schildbach.pte.util.HttpClient$2 $r4;
        java.lang.StringBuilder $r5;
        null_type varReplacer8060;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $r1 := @parameter0: okhttp3.HttpUrl;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r4 = new de.schildbach.pte.util.HttpClient$2;

        specialinvoke $r4.<de.schildbach.pte.util.HttpClient$2: void <init>(de.schildbach.pte.util.HttpClient,java.lang.StringBuilder)>($r0, $r5);

        varReplacer8060 = null;

        virtualinvoke $r0.<de.schildbach.pte.util.HttpClient: void getInputStream(de.schildbach.pte.util.HttpClient$Callback,okhttp3.HttpUrl,java.lang.String,java.lang.String,java.lang.String)>($r4, $r1, $r2, $r3, varReplacer8060);

        return $r5;
    }

    public void getInputStream(de.schildbach.pte.util.HttpClient$Callback, okhttp3.HttpUrl) throws java.io.IOException
    {
        de.schildbach.pte.util.HttpClient $r0;
        de.schildbach.pte.util.HttpClient$Callback $r1;
        okhttp3.HttpUrl $r2;
        null_type varReplacer9379;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $r1 := @parameter0: de.schildbach.pte.util.HttpClient$Callback;

        $r2 := @parameter1: okhttp3.HttpUrl;

        varReplacer9379 = null;

        virtualinvoke $r0.<de.schildbach.pte.util.HttpClient: void getInputStream(de.schildbach.pte.util.HttpClient$Callback,okhttp3.HttpUrl,java.lang.String)>($r1, $r2, varReplacer9379);

        return;
    }

    public void getInputStream(de.schildbach.pte.util.HttpClient$Callback, okhttp3.HttpUrl, java.lang.String) throws java.io.IOException
    {
        de.schildbach.pte.util.HttpClient $r0;
        de.schildbach.pte.util.HttpClient$Callback $r1;
        okhttp3.HttpUrl $r2;
        java.lang.String $r3;
        null_type varReplacer8381, varReplacer8382;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $r1 := @parameter0: de.schildbach.pte.util.HttpClient$Callback;

        $r2 := @parameter1: okhttp3.HttpUrl;

        $r3 := @parameter2: java.lang.String;

        varReplacer8381 = null;

        varReplacer8382 = null;

        virtualinvoke $r0.<de.schildbach.pte.util.HttpClient: void getInputStream(de.schildbach.pte.util.HttpClient$Callback,okhttp3.HttpUrl,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, varReplacer8381, varReplacer8381, $r3);

        return;
    }

    public void getInputStream(de.schildbach.pte.util.HttpClient$Callback, okhttp3.HttpUrl, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        de.schildbach.pte.util.HttpClient $r0;
        de.schildbach.pte.util.HttpClient$Callback $r1;
        okhttp3.HttpUrl $r2, $r24;
        java.lang.String $r3, $r4, $r5, $r11, $r13, varReplacer8062, varReplacer8063, varReplacer8064, varReplacer8065, varReplacer8066, varReplacer8067, varReplacer8068, varReplacer8069, varReplacer8070, varReplacer8071, varReplacer8072, varReplacer8073;
        okhttp3.Request$Builder $r6;
        int $i0, $i1;
        java.util.Map $r7;
        okhttp3.Headers $r8;
        okhttp3.MediaType $r9;
        okhttp3.RequestBody $r10;
        okhttp3.Cookie $r12;
        boolean $z0;
        java.net.Proxy $r14;
        okhttp3.CertificatePinner $r15;
        okhttp3.OkHttpClient $r16;
        okhttp3.OkHttpClient$Builder $r17;
        javax.net.ssl.HostnameVerifier $r18;
        okhttp3.Request $r19;
        okhttp3.Call $r20;
        okhttp3.Response $r21, $r22;
        okhttp3.ResponseBody $r23;
        de.schildbach.pte.exception.UnexpectedRedirectException $r25;
        java.lang.Throwable $r26;
        de.schildbach.pte.exception.SessionExpiredException $r27;
        de.schildbach.pte.exception.InternalErrorException $r28;
        java.util.List $r29;
        java.util.Iterator $r30;
        java.lang.Object $r31;
        de.schildbach.pte.exception.BlockedException $r32;
        de.schildbach.pte.exception.NotFoundException $r33;
        java.lang.StringBuilder $r34;
        org.slf4j.Logger $r35;
        java.io.IOException $r36;
        long varReplacer8061;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $r1 := @parameter0: de.schildbach.pte.util.HttpClient$Callback;

        $r2 := @parameter1: okhttp3.HttpUrl;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $i1 = 3;

     label01:
        $r6 = new okhttp3.Request$Builder;

        specialinvoke $r6.<okhttp3.Request$Builder: void <init>()>();

        virtualinvoke $r6.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r2);

        $r7 = $r0.<de.schildbach.pte.util.HttpClient: java.util.Map headers>;

        $r8 = staticinvoke <okhttp3.Headers: okhttp3.Headers of(java.util.Map)>($r7);

        virtualinvoke $r6.<okhttp3.Request$Builder: okhttp3.Request$Builder headers(okhttp3.Headers)>($r8);

        if $r3 == null goto label02;

        $r9 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r4);

        $r10 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r9, $r3);

        virtualinvoke $r6.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r10);

     label02:
        varReplacer8067 = "Accept";

        varReplacer8068 = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";

        virtualinvoke $r6.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>(varReplacer8067, varReplacer8068);

        $r11 = $r0.<de.schildbach.pte.util.HttpClient: java.lang.String userAgent>;

        if $r11 == null goto label03;

        $r11 = $r0.<de.schildbach.pte.util.HttpClient: java.lang.String userAgent>;

        varReplacer8065 = "User-Agent";

        virtualinvoke $r6.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>(varReplacer8065, $r11);

     label03:
        if $r5 == null goto label04;

        varReplacer8064 = "Referer";

        virtualinvoke $r6.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>(varReplacer8064, $r5);

     label04:
        $r12 = $r0.<de.schildbach.pte.util.HttpClient: okhttp3.Cookie sessionCookie>;

        if $r12 == null goto label05;

        $r11 = virtualinvoke $r12.<okhttp3.Cookie: java.lang.String name()>();

        $r13 = $r0.<de.schildbach.pte.util.HttpClient: java.lang.String sessionCookieName>;

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label05;

        $r11 = virtualinvoke $r12.<okhttp3.Cookie: java.lang.String toString()>();

        varReplacer8073 = "Cookie";

        virtualinvoke $r6.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>(varReplacer8073, $r11);

     label05:
        $r14 = $r0.<de.schildbach.pte.util.HttpClient: java.net.Proxy proxy>;

        if $r14 != null goto label06;

        $z0 = $r0.<de.schildbach.pte.util.HttpClient: boolean trustAllCertificates>;

        if $z0 != 0 goto label06;

        $r15 = $r0.<de.schildbach.pte.util.HttpClient: okhttp3.CertificatePinner certificatePinner>;

        if $r15 != null goto label06;

        $z0 = $r0.<de.schildbach.pte.util.HttpClient: boolean sslAcceptAllHostnames>;

        if $z0 == 0 goto label22;

     label06:
        $r16 = <de.schildbach.pte.util.HttpClient: okhttp3.OkHttpClient OKHTTP_CLIENT>;

        $r17 = virtualinvoke $r16.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>();

        $r14 = $r0.<de.schildbach.pte.util.HttpClient: java.net.Proxy proxy>;

        if $r14 == null goto label07;

        $r14 = $r0.<de.schildbach.pte.util.HttpClient: java.net.Proxy proxy>;

        virtualinvoke $r17.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder proxy(java.net.Proxy)>($r14);

     label07:
        $z0 = $r0.<de.schildbach.pte.util.HttpClient: boolean trustAllCertificates>;

        if $z0 == 0 goto label08;

        specialinvoke $r0.<de.schildbach.pte.util.HttpClient: void trustAllCertificates(okhttp3.OkHttpClient$Builder)>($r17);

     label08:
        $r15 = $r0.<de.schildbach.pte.util.HttpClient: okhttp3.CertificatePinner certificatePinner>;

        if $r15 == null goto label09;

        $r15 = $r0.<de.schildbach.pte.util.HttpClient: okhttp3.CertificatePinner certificatePinner>;

        virtualinvoke $r17.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner)>($r15);

     label09:
        $z0 = $r0.<de.schildbach.pte.util.HttpClient: boolean sslAcceptAllHostnames>;

        if $z0 == 0 goto label10;

        $r18 = <de.schildbach.pte.util.HttpClient: javax.net.ssl.HostnameVerifier SSL_ACCEPT_ALL_HOSTNAMES>;

        virtualinvoke $r17.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier)>($r18);

     label10:
        $r16 = virtualinvoke $r17.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>();

     label11:
        $r19 = virtualinvoke $r6.<okhttp3.Request$Builder: okhttp3.Request build()>();

        $r20 = virtualinvoke $r16.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r19);

        $r21 = null;

     label12:
        $r22 = interfaceinvoke $r20.<okhttp3.Call: okhttp3.Response execute()>();

     label13:
        $r21 = $r22;

     label14:
        $i0 = virtualinvoke $r22.<okhttp3.Response: int code()>();

        varReplacer8061 = 8192L;

        $r23 = virtualinvoke $r22.<okhttp3.Response: okhttp3.ResponseBody peekBody(long)>(varReplacer8061);

        $r11 = virtualinvoke $r23.<okhttp3.ResponseBody: java.lang.String string()>();

        varReplacer8070 = "\\p{C}";

        varReplacer8071 = "";

        $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(varReplacer8070, varReplacer8071);

     label15:
        if $i0 != 200 goto label39;

     label16:
        $r24 = staticinvoke <de.schildbach.pte.util.HttpClient: okhttp3.HttpUrl testRedirect(okhttp3.HttpUrl,java.lang.String)>($r2, $r11);

     label17:
        if $r24 == null goto label23;

     label18:
        $r25 = new de.schildbach.pte.exception.UnexpectedRedirectException;

        specialinvoke $r25.<de.schildbach.pte.exception.UnexpectedRedirectException: void <init>(okhttp3.HttpUrl,okhttp3.HttpUrl)>($r2, $r24);

        throw $r25;

     label19:
        $r26 := @caughtexception;

     label20:
        if $r21 == null goto label21;

        virtualinvoke $r21.<okhttp3.Response: void close()>();

     label21:
        throw $r26;

     label22:
        $r16 = <de.schildbach.pte.util.HttpClient: okhttp3.OkHttpClient OKHTTP_CLIENT>;

        goto label11;

     label23:
        $z0 = staticinvoke <de.schildbach.pte.util.HttpClient: boolean testExpired(java.lang.String)>($r11);

     label24:
        if $z0 == 0 goto label26;

     label25:
        $r27 = new de.schildbach.pte.exception.SessionExpiredException;

        specialinvoke $r27.<de.schildbach.pte.exception.SessionExpiredException: void <init>()>();

        throw $r27;

     label26:
        $z0 = staticinvoke <de.schildbach.pte.util.HttpClient: boolean testInternalError(java.lang.String)>($r11);

     label27:
        if $z0 == 0 goto label29;

     label28:
        $r28 = new de.schildbach.pte.exception.InternalErrorException;

        specialinvoke $r28.<de.schildbach.pte.exception.InternalErrorException: void <init>(okhttp3.HttpUrl,java.lang.CharSequence)>($r2, $r11);

        throw $r28;

     label29:
        $r3 = $r0.<de.schildbach.pte.util.HttpClient: java.lang.String sessionCookieName>;

     label30:
        if $r3 == null goto label37;

     label31:
        $r8 = virtualinvoke $r22.<okhttp3.Response: okhttp3.Headers headers()>();

        $r29 = staticinvoke <okhttp3.Cookie: java.util.List parseAll(okhttp3.HttpUrl,okhttp3.Headers)>($r2, $r8);

        $r30 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>();

     label32:
        $z0 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

     label33:
        if $z0 == 0 goto label37;

     label34:
        $r31 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (okhttp3.Cookie) $r31;

        $r3 = virtualinvoke $r12.<okhttp3.Cookie: java.lang.String name()>();

        $r4 = $r0.<de.schildbach.pte.util.HttpClient: java.lang.String sessionCookieName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label35:
        if $z0 == 0 goto label32;

     label36:
        $r0.<de.schildbach.pte.util.HttpClient: okhttp3.Cookie sessionCookie> = $r12;

     label37:
        $r23 = virtualinvoke $r22.<okhttp3.Response: okhttp3.ResponseBody body()>();

        interfaceinvoke $r1.<de.schildbach.pte.util.HttpClient$Callback: void onSuccessful(java.lang.CharSequence,okhttp3.ResponseBody)>($r11, $r23);

     label38:
        if $r22 == null goto label54;

        virtualinvoke $r22.<okhttp3.Response: void close()>();

        return;

     label39:
        if $i0 == 400 goto label40;

        if $i0 == 401 goto label40;

        if $i0 == 403 goto label40;

        if $i0 == 406 goto label40;

        if $i0 != 503 goto label41;

     label40:
        $r32 = new de.schildbach.pte.exception.BlockedException;

        specialinvoke $r32.<de.schildbach.pte.exception.BlockedException: void <init>(okhttp3.HttpUrl,java.lang.CharSequence)>($r2, $r11);

        throw $r32;

     label41:
        if $i0 != 404 goto label43;

     label42:
        $r33 = new de.schildbach.pte.exception.NotFoundException;

        specialinvoke $r33.<de.schildbach.pte.exception.NotFoundException: void <init>(okhttp3.HttpUrl,java.lang.CharSequence)>($r2, $r11);

        throw $r33;

     label43:
        if $i0 == 301 goto label44;

        if $i0 != 302 goto label45;

     label44:
        $r25 = new de.schildbach.pte.exception.UnexpectedRedirectException;

        varReplacer8069 = "Location";

        $r3 = virtualinvoke $r22.<okhttp3.Response: java.lang.String header(java.lang.String)>(varReplacer8069);

        $r24 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r3);

        specialinvoke $r25.<de.schildbach.pte.exception.UnexpectedRedirectException: void <init>(okhttp3.HttpUrl,okhttp3.HttpUrl)>($r2, $r24);

        throw $r25;

     label45:
        if $i0 != 500 goto label47;

     label46:
        $r28 = new de.schildbach.pte.exception.InternalErrorException;

        specialinvoke $r28.<de.schildbach.pte.exception.InternalErrorException: void <init>(okhttp3.HttpUrl,java.lang.CharSequence)>($r2, $r11);

        throw $r28;

     label47:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        varReplacer8072 = "got response: ";

        $r34 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer8072);

        $r34 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer8062 = " ";

        $r34 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer8062);

        $r11 = virtualinvoke $r22.<okhttp3.Response: java.lang.String message()>();

        $r34 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

     label48:
        $i0 = $i1 + -1;

        if $i1 <= 0 goto label52;

     label49:
        $r35 = <de.schildbach.pte.util.HttpClient: org.slf4j.Logger log>;

        varReplacer8066 = "{}, retrying...";

        interfaceinvoke $r35.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>(varReplacer8066, $r11);

     label50:
        if $r22 == null goto label51;

        virtualinvoke $r22.<okhttp3.Response: void close()>();

     label51:
        $i1 = $i0;

        goto label01;

     label52:
        $r36 = new java.io.IOException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        varReplacer8063 = ": ";

        $r34 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer8063);

        $r34 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r36;

     label53:
        $r26 := @caughtexception;

        goto label20;

     label54:
        return;

        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label23 to label24 with label19;
        catch java.lang.Throwable from label25 to label27 with label19;
        catch java.lang.Throwable from label28 to label30 with label19;
        catch java.lang.Throwable from label31 to label33 with label19;
        catch java.lang.Throwable from label34 to label35 with label19;
        catch java.lang.Throwable from label36 to label38 with label19;
        catch java.lang.Throwable from label40 to label41 with label19;
        catch java.lang.Throwable from label42 to label43 with label19;
        catch java.lang.Throwable from label44 to label45 with label19;
        catch java.lang.Throwable from label46 to label48 with label19;
        catch java.lang.Throwable from label49 to label50 with label53;
        catch java.lang.Throwable from label52 to label53 with label53;
    }

    public void setHeader(java.lang.String, java.lang.String)
    {
        de.schildbach.pte.util.HttpClient $r0;
        java.lang.String $r1, $r2, varReplacer10324, varReplacer10325;
        java.util.Map $r3;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = $r0.<de.schildbach.pte.util.HttpClient: java.util.Map headers>;

        varReplacer10324 = "Authorization";

        varReplacer10325 = "577e5781-23ee-4ff0-a5b3-92e5b04887e5";

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(varReplacer10324, varReplacer10325);

        return;
    }

    public void setSessionCookieName(java.lang.String)
    {
        de.schildbach.pte.util.HttpClient $r0;
        java.lang.String $r1;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $r1 := @parameter0: java.lang.String;

        $r0.<de.schildbach.pte.util.HttpClient: java.lang.String sessionCookieName> = $r1;

        return;
    }

    public void setSslAcceptAllHostnames(boolean)
    {
        de.schildbach.pte.util.HttpClient $r0;
        boolean $z0;
        int varReplacer10323;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $z0 := @parameter0: boolean;

        varReplacer10323 = 1;

        $r0.<de.schildbach.pte.util.HttpClient: boolean sslAcceptAllHostnames> = varReplacer10323;

        return;
    }

    public void setUserAgent(java.lang.String)
    {
        de.schildbach.pte.util.HttpClient $r0;
        java.lang.String $r1, varReplacer7242;

        nop;

        $r0 := @this: de.schildbach.pte.util.HttpClient;

        $r1 := @parameter0: java.lang.String;

        varReplacer7242 = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36";

        $r0.<de.schildbach.pte.util.HttpClient: java.lang.String userAgent> = varReplacer7242;

        return;
    }
}
