public final class de.schildbach.wallet.ui.send.RequestWalletBalanceTask extends java.lang.Object
{
    private static final javax.net.ssl.X509TrustManager TRUST_ALL_CERTIFICATES;
    private static final org.slf4j.Logger log;
    private final android.os.Handler backgroundHandler;
    private final android.os.Handler callbackHandler;
    private final de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback resultCallback;

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask$4 $r1;

        nop;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lde/schildbach/wallet/ui/send/RequestWalletBalanceTask;");

        <de.schildbach.wallet.ui.send.RequestWalletBalanceTask: org.slf4j.Logger log> = $r0;

        $r1 = new de.schildbach.wallet.ui.send.RequestWalletBalanceTask$4;

        specialinvoke $r1.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask$4: void <init>()>();

        <de.schildbach.wallet.ui.send.RequestWalletBalanceTask: javax.net.ssl.X509TrustManager TRUST_ALL_CERTIFICATES> = $r1;

        return;
    }

    public void <init>(android.os.Handler, de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback)
    {
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask $r0;
        android.os.Handler $r1;
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback $r2;
        android.os.Looper $r3;

        nop;

        $r0 := @this: de.schildbach.wallet.ui.send.RequestWalletBalanceTask;

        $r1 := @parameter0: android.os.Handler;

        $r2 := @parameter1: de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask: android.os.Handler backgroundHandler> = $r1;

        $r1 = new android.os.Handler;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>($r3);

        $r0.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask: android.os.Handler callbackHandler> = $r1;

        $r0.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask: de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback resultCallback> = $r2;

        return;
    }

    static java.util.List access$000(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.util.List $r1;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <de.schildbach.wallet.ui.send.RequestWalletBalanceTask: java.util.List loadElectrumServers(java.io.InputStream)>($r0);

        return $r1;
    }

    static org.slf4j.Logger access$100()
    {
        org.slf4j.Logger r0;

        nop;

        r0 = <de.schildbach.wallet.ui.send.RequestWalletBalanceTask: org.slf4j.Logger log>;

        return r0;
    }

    static javax.net.ssl.SSLSocketFactory access$200(de.schildbach.wallet.ui.send.RequestWalletBalanceTask)
    {
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask $r0;
        javax.net.ssl.SSLSocketFactory $r1;

        nop;

        $r0 := @parameter0: de.schildbach.wallet.ui.send.RequestWalletBalanceTask;

        $r1 = specialinvoke $r0.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask: javax.net.ssl.SSLSocketFactory sslTrustAllCertificates()>();

        return $r1;
    }

    static java.lang.String access$300(de.schildbach.wallet.ui.send.RequestWalletBalanceTask, java.security.cert.Certificate)
    {
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask $r0;
        java.security.cert.Certificate $r1;
        java.lang.String $r2;

        nop;

        $r0 := @parameter0: de.schildbach.wallet.ui.send.RequestWalletBalanceTask;

        $r1 := @parameter1: java.security.cert.Certificate;

        $r2 = specialinvoke $r0.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask: java.lang.String sslCertificateFingerprint(java.security.cert.Certificate)>($r1);

        return $r2;
    }

    static de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback access$400(de.schildbach.wallet.ui.send.RequestWalletBalanceTask)
    {
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask $r0;
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback r1;

        nop;

        $r0 := @parameter0: de.schildbach.wallet.ui.send.RequestWalletBalanceTask;

        r1 = $r0.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask: de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ResultCallback resultCallback>;

        return r1;
    }

    private static java.util.List loadElectrumServers(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.BufferedReader $r1, $r4;
        java.util.LinkedList $r2;
        com.google.common.base.Splitter $r3;
        java.lang.String $r5, $r8, $r12, $r13, $r14, varReplacer10565, varReplacer10566;
        java.io.InputStreamReader $r6;
        java.nio.charset.Charset $r7;
        int $i0, varReplacer10563, varReplacer10564;
        char $c1;
        java.lang.Iterable $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        boolean $z0;
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer $r15;
        java.lang.Exception $r16;
        java.lang.RuntimeException $r17;
        java.lang.StringBuilder $r18;
        java.lang.Throwable $r19;

        nop;

        $r0 := @parameter0: java.io.InputStream;

        varReplacer10563 = 58;

        $r3 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(char)>(varReplacer10563);

        $r3 = virtualinvoke $r3.<com.google.common.base.Splitter: com.google.common.base.Splitter trimResults()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r4 = null;

        $r5 = null;

     label01:
        $r1 = new java.io.BufferedReader;

        $r6 = new java.io.InputStreamReader;

        $r7 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;

     label02:
        specialinvoke $r6.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r0, $r7);

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r6);

     label03:
        $r8 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

     label04:
        $r5 = $r8;

        if $r8 != null goto label06;

        if $r1 == null goto label05;

        virtualinvoke $r1.<java.io.BufferedReader: void close()>();

     label05:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

        return $r2;

     label06:
        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

     label07:
        $r5 = $r8;

     label08:
        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

     label09:
        if $i0 == 0 goto label03;

     label10:
        varReplacer10564 = 0;

        $c1 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(varReplacer10564);

     label11:
        if $c1 == 35 goto label03;

     label12:
        $r9 = virtualinvoke $r3.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r8);

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r11;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.String) $r11;

        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label13:
        if $z0 == 0 goto label26;

     label14:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.lang.String) $r11;

        $r13 = staticinvoke <com.google.common.base.Strings: java.lang.String emptyToNull(java.lang.String)>($r13);

     label15:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label16:
        if $z0 == 0 goto label27;

     label17:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.String) $r11;

        $r14 = staticinvoke <com.google.common.base.Strings: java.lang.String emptyToNull(java.lang.String)>($r14);

     label18:
        $r15 = new de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer;

     label19:
        specialinvoke $r15.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask$ElectrumServer: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, $r12, $r13, $r14);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r15);

     label20:
        goto label03;

     label21:
        $r16 := @caughtexception;

        $r4 = $r1;

     label22:
        $r17 = new java.lang.RuntimeException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        varReplacer10565 = "Error while parsing: \'";

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer10565);

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        varReplacer10566 = "\'";

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer10566);

        $r5 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r16);

        throw $r17;

     label23:
        $r19 := @caughtexception;

     label24:
        if $r4 == null goto label25;

        virtualinvoke $r4.<java.io.BufferedReader: void close()>();

     label25:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

        throw $r19;

     label26:
        $r13 = null;

        goto label15;

     label27:
        $r14 = null;

        goto label18;

     label28:
        $r19 := @caughtexception;

        $r4 = $r1;

        goto label24;

     label29:
        $r16 := @caughtexception;

        goto label22;

        catch java.lang.Exception from label02 to label03 with label29;
        catch java.lang.Throwable from label01 to label03 with label23;
        catch java.lang.Exception from label03 to label04 with label21;
        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Exception from label06 to label07 with label21;
        catch java.lang.Exception from label08 to label09 with label21;
        catch java.lang.Exception from label10 to label11 with label21;
        catch java.lang.Exception from label12 to label13 with label21;
        catch java.lang.Exception from label14 to label15 with label21;
        catch java.lang.Exception from label15 to label16 with label21;
        catch java.lang.Exception from label17 to label18 with label21;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.lang.Throwable from label12 to label13 with label28;
        catch java.lang.Throwable from label14 to label15 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label18 to label20 with label28;
        catch java.lang.Throwable from label22 to label23 with label23;
    }

    private java.lang.String sslCertificateFingerprint(java.security.cert.Certificate)
    {
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask $r0;
        java.security.cert.Certificate $r1;
        java.lang.Exception $r2;
        com.google.common.hash.HashFunction $r3;
        com.google.common.hash.Hasher $r4;
        byte[] $r5;
        com.google.common.hash.HashCode $r6;
        java.lang.String $r7;
        java.lang.RuntimeException $r8;

        nop;

        $r0 := @this: de.schildbach.wallet.ui.send.RequestWalletBalanceTask;

        $r1 := @parameter0: java.security.cert.Certificate;

     label1:
        $r3 = staticinvoke <com.google.common.hash.Hashing: com.google.common.hash.HashFunction sha256()>();

        $r4 = interfaceinvoke $r3.<com.google.common.hash.HashFunction: com.google.common.hash.Hasher newHasher()>();

        $r5 = virtualinvoke $r1.<java.security.cert.Certificate: byte[] getEncoded()>();

        $r4 = interfaceinvoke $r4.<com.google.common.hash.Hasher: com.google.common.hash.Hasher putBytes(byte[])>($r5);

        $r6 = interfaceinvoke $r4.<com.google.common.hash.Hasher: com.google.common.hash.HashCode hash()>();

        $r7 = virtualinvoke $r6.<com.google.common.hash.HashCode: java.lang.String toString()>();

     label2:
        return $r7;

     label3:
        $r2 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private javax.net.ssl.SSLSocketFactory sslTrustAllCertificates()
    {
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask $r0;
        java.lang.Exception $r1;
        javax.net.ssl.X509TrustManager $r2;
        javax.net.ssl.SSLContext $r3;
        java.lang.Object[] $r4;
        javax.net.ssl.SSLSocketFactory $r5;
        java.lang.RuntimeException r6;
        javax.net.ssl.TrustManager[] r7;
        null_type varReplacer11394, varReplacer11395;
        java.lang.String varReplacer11396;

        nop;

        $r0 := @this: de.schildbach.wallet.ui.send.RequestWalletBalanceTask;

     label1:
        varReplacer11396 = "SSL";

        $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer11396);

        $r4 = newarray (javax.net.ssl.TrustManager)[1];

     label2:
        $r2 = <de.schildbach.wallet.ui.send.RequestWalletBalanceTask: javax.net.ssl.X509TrustManager TRUST_ALL_CERTIFICATES>;

     label3:
        $r4[0] = $r2;

        r7 = (javax.net.ssl.TrustManager[]) $r4;

        varReplacer11394 = null;

        varReplacer11395 = null;

        virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer11394, r7, varReplacer11394);

        $r5 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label4:
        return $r5;

     label5:
        $r1 := @caughtexception;

        r6 = new java.lang.RuntimeException;

        specialinvoke r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r1);

        throw r6;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected transient void onFail(int, java.lang.Object[])
    {
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask $r0;
        int $i0;
        java.lang.Object[] $r1;
        android.os.Handler $r2;
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask$3 $r3;

        nop;

        $r0 := @this: de.schildbach.wallet.ui.send.RequestWalletBalanceTask;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = $r0.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask: android.os.Handler callbackHandler>;

        $r3 = new de.schildbach.wallet.ui.send.RequestWalletBalanceTask$3;

        specialinvoke $r3.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask$3: void <init>(de.schildbach.wallet.ui.send.RequestWalletBalanceTask,int,java.lang.Object[])>($r0, $i0, $r1);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    protected void onResult(java.util.Set)
    {
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask $r0;
        java.util.Set $r1;
        android.os.Handler $r2;
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask$2 $r3;

        nop;

        $r0 := @this: de.schildbach.wallet.ui.send.RequestWalletBalanceTask;

        $r1 := @parameter0: java.util.Set;

        $r2 = $r0.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask: android.os.Handler callbackHandler>;

        $r3 = new de.schildbach.wallet.ui.send.RequestWalletBalanceTask$2;

        specialinvoke $r3.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask$2: void <init>(de.schildbach.wallet.ui.send.RequestWalletBalanceTask,java.util.Set)>($r0, $r1);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    public void requestWalletBalance(android.content.res.AssetManager, org.bitcoinj.core.Address)
    {
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask $r0;
        android.content.res.AssetManager $r1;
        org.bitcoinj.core.Address $r2;
        android.os.Handler $r3;
        de.schildbach.wallet.ui.send.RequestWalletBalanceTask$1 $r4;

        nop;

        $r0 := @this: de.schildbach.wallet.ui.send.RequestWalletBalanceTask;

        $r1 := @parameter0: android.content.res.AssetManager;

        $r2 := @parameter1: org.bitcoinj.core.Address;

        $r3 = $r0.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask: android.os.Handler backgroundHandler>;

        $r4 = new de.schildbach.wallet.ui.send.RequestWalletBalanceTask$1;

        specialinvoke $r4.<de.schildbach.wallet.ui.send.RequestWalletBalanceTask$1: void <init>(de.schildbach.wallet.ui.send.RequestWalletBalanceTask,android.content.res.AssetManager,org.bitcoinj.core.Address)>($r0, $r1, $r2);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }
}
