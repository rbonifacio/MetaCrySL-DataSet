public class com.lambdaworks.crypto.SCrypt extends java.lang.Object
{
    private static final boolean native_library_loaded;

    static void <clinit>()
    {
        com.lambdaworks.jni.LibraryLoader $r0;
        boolean $z0;
        java.lang.String varReplacer6449;
        int varReplacer6450;

        nop;

        $r0 = staticinvoke <com.lambdaworks.jni.LibraryLoaders: com.lambdaworks.jni.LibraryLoader loader()>();

        varReplacer6449 = "scrypt";

        varReplacer6450 = 1;

        $z0 = interfaceinvoke $r0.<com.lambdaworks.jni.LibraryLoader: boolean load(java.lang.String,boolean)>(varReplacer6449, varReplacer6450);

        <com.lambdaworks.crypto.SCrypt: boolean native_library_loaded> = $z0;

        return;
    }

    public void <init>()
    {
        com.lambdaworks.crypto.SCrypt $r0;

        $r0 := @this: com.lambdaworks.crypto.SCrypt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int R(int, int)
    {
        int $i0, $i1, $i2;

        nop;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }

    public static void blockmix_salsa8(byte[], int, int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, varReplacer6495, varReplacer6496, varReplacer6497, varReplacer6498, varReplacer6499, varReplacer6500, varReplacer6501, varReplacer6502, varReplacer6503;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 = newarray (byte)[64];

        $i3 = 2;

        $i3 = 1;

        $i3 = 64;

        $i3 = 64;

        varReplacer6497 = 64;

        varReplacer6498 = 0;

        varReplacer6499 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer6497, $r1, varReplacer6498, varReplacer6497);

        $i3 = 0;

     label1:
        $i4 = 2;

        if $i3 >= 2 goto label2;

        $i4 = $i3 * 64;

        varReplacer6502 = 0;

        varReplacer6503 = 64;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockxor(byte[],int,byte[],int,int)>($r0, $i4, $r1, varReplacer6502, varReplacer6503);

        staticinvoke <com.lambdaworks.crypto.SCrypt: void salsa20_8(byte[])>($r1);

        $i4 = $i3 * 64;

        $i4 = $i4 + 128;

        varReplacer6495 = 0;

        varReplacer6496 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer6495, $r0, $i4, varReplacer6496);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $i3 = 0;

     label3:
        if $i3 >= 1 goto label4;

        $i4 = $i3 * 2;

        $i4 = $i4 * 64;

        $i4 = $i4 + 128;

        $i5 = $i3 * 64;

        $i5 = $i5 + 0;

        varReplacer6501 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, $r0, $i5, varReplacer6501);

        $i3 = $i3 + 1;

        goto label3;

     label4:
        $i3 = 0;

     label5:
        if $i3 >= 1 goto label6;

        $i4 = $i3 * 2;

        $i4 = $i4 + 1;

        $i4 = $i4 * 64;

        $i4 = $i4 + 128;

        $i5 = $i3 + 1;

        $i5 = $i5 * 64;

        $i5 = $i5 + 0;

        varReplacer6500 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, $r0, $i5, varReplacer6500);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        return;
    }

    public static void blockxor(byte[], int, byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        byte $b5, $b7;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i4 = 0;

     label1:
        if $i4 >= $i2 goto label2;

        $i3 = 0 + $i4;

        $b5 = $r1[$i3];

        $i6 = $i0 + $i4;

        $b7 = $r0[$i6];

        $b5 = $b5 ^ $b7;

        $r1[$i3] = $b5;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return;
    }

    public static int integerify(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i4;
        byte $b2;
        short $s3;

        nop;

        $r0 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i0 = 2;

        $i0 = 1;

        $i0 = 64;

        $i1 = 64;

        $i0 = 64;

        $b2 = $r0[64];

        $s3 = $b2 & 255;

        $i0 = $s3 << 0;

        $i4 = 65;

        $b2 = $r0[65];

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        $i0 = $i0 | $i4;

        $i4 = 66;

        $b2 = $r0[66];

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        $i0 = $i0 | $i4;

        $i1 = 67;

        $b2 = $r0[67];

        $s3 = $b2 & 255;

        $i1 = $s3 << 24;

        $i1 = $i0 | $i1;

        return $i1;
    }

    public static void salsa20_8(byte[])
    {
        byte[] $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i4, $i5, varReplacer6504, varReplacer6505, varReplacer6506, varReplacer6507, varReplacer6508, varReplacer6509, varReplacer6510, varReplacer6511, varReplacer6512, varReplacer6513, varReplacer6514, varReplacer6515, varReplacer6516, varReplacer6517, varReplacer6518, varReplacer6519, varReplacer6520, varReplacer6521, varReplacer6522, varReplacer6523, varReplacer6524, varReplacer6525, varReplacer6526, varReplacer6527, varReplacer6528, varReplacer6529, varReplacer6530, varReplacer6531, varReplacer6532, varReplacer6533, varReplacer6534, varReplacer6535, varReplacer6536, varReplacer6537, varReplacer6538;
        byte $b2;
        short $s3;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = newarray (int)[16];

        $r2 = newarray (int)[16];

        $i0 = 0;

     label1:
        if $i0 >= 16 goto label2;

        $i1 = $i0 * 4;

        $b2 = $r0[$i1];

        $s3 = $b2 & 255;

        $i1 = $s3 << 0;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 1;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 2;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 3;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 24;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        varReplacer6522 = 0;

        varReplacer6523 = 0;

        varReplacer6524 = 16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer6522, $r2, varReplacer6522, varReplacer6524);

        $i0 = 8;

     label3:
        if $i0 <= 0 goto label4;

        $i1 = $r2[4];

        $i4 = $r2[0];

        $i5 = $r2[12];

        $i4 = $i4 + $i5;

        varReplacer6530 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6530);

        $i1 = $i1 ^ $i4;

        $r2[4] = $i1;

        $i1 = $r2[8];

        $i4 = $r2[4];

        $i5 = $r2[0];

        $i4 = $i4 + $i5;

        varReplacer6506 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6506);

        $i1 = $i1 ^ $i4;

        $r2[8] = $i1;

        $i1 = $r2[12];

        $i4 = $r2[8];

        $i5 = $r2[4];

        $i4 = $i4 + $i5;

        varReplacer6526 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6526);

        $i1 = $i1 ^ $i4;

        $r2[12] = $i1;

        $i1 = $r2[0];

        $i4 = $r2[12];

        $i5 = $r2[8];

        $i4 = $i4 + $i5;

        varReplacer6537 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6537);

        $i1 = $i1 ^ $i4;

        $r2[0] = $i1;

        $i1 = $r2[9];

        $i4 = $r2[5];

        $i5 = $r2[1];

        $i4 = $i4 + $i5;

        varReplacer6507 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6507);

        $i1 = $i1 ^ $i4;

        $r2[9] = $i1;

        $i1 = $r2[13];

        $i4 = $r2[9];

        $i5 = $r2[5];

        $i4 = $i4 + $i5;

        varReplacer6528 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6528);

        $i1 = $i1 ^ $i4;

        $r2[13] = $i1;

        $i1 = $r2[1];

        $i4 = $r2[13];

        $i5 = $r2[9];

        $i4 = $i4 + $i5;

        varReplacer6527 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6527);

        $i1 = $i1 ^ $i4;

        $r2[1] = $i1;

        $i1 = $r2[5];

        $i4 = $r2[1];

        $i5 = $r2[13];

        $i4 = $i4 + $i5;

        varReplacer6533 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6533);

        $i1 = $i1 ^ $i4;

        $r2[5] = $i1;

        $i1 = $r2[14];

        $i4 = $r2[10];

        $i5 = $r2[6];

        $i4 = $i4 + $i5;

        varReplacer6512 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6512);

        $i1 = $i1 ^ $i4;

        $r2[14] = $i1;

        $i1 = $r2[2];

        $i4 = $r2[14];

        $i5 = $r2[10];

        $i4 = $i4 + $i5;

        varReplacer6517 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6517);

        $i1 = $i1 ^ $i4;

        $r2[2] = $i1;

        $i1 = $r2[6];

        $i4 = $r2[2];

        $i5 = $r2[14];

        $i4 = $i4 + $i5;

        varReplacer6520 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6520);

        $i1 = $i1 ^ $i4;

        $r2[6] = $i1;

        $i1 = $r2[10];

        $i4 = $r2[6];

        $i5 = $r2[2];

        $i4 = $i4 + $i5;

        varReplacer6509 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6509);

        $i1 = $i1 ^ $i4;

        $r2[10] = $i1;

        $i1 = $r2[3];

        $i4 = $r2[15];

        $i5 = $r2[11];

        $i4 = $i4 + $i5;

        varReplacer6518 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6518);

        $i1 = $i1 ^ $i4;

        $r2[3] = $i1;

        $i1 = $r2[7];

        $i4 = $r2[3];

        $i5 = $r2[15];

        $i4 = $i4 + $i5;

        varReplacer6515 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6515);

        $i1 = $i1 ^ $i4;

        $r2[7] = $i1;

        $i1 = $r2[11];

        $i4 = $r2[7];

        $i5 = $r2[3];

        $i4 = $i4 + $i5;

        varReplacer6529 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6529);

        $i1 = $i1 ^ $i4;

        $r2[11] = $i1;

        $i1 = $r2[15];

        $i4 = $r2[11];

        $i5 = $r2[7];

        $i4 = $i4 + $i5;

        varReplacer6531 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6531);

        $i1 = $i1 ^ $i4;

        $r2[15] = $i1;

        $i1 = $r2[1];

        $i4 = $r2[0];

        $i5 = $r2[3];

        $i4 = $i4 + $i5;

        varReplacer6514 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6514);

        $i1 = $i1 ^ $i4;

        $r2[1] = $i1;

        $i1 = $r2[2];

        $i4 = $r2[1];

        $i5 = $r2[0];

        $i4 = $i4 + $i5;

        varReplacer6532 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6532);

        $i1 = $i1 ^ $i4;

        $r2[2] = $i1;

        $i1 = $r2[3];

        $i4 = $r2[2];

        $i5 = $r2[1];

        $i4 = $i4 + $i5;

        varReplacer6508 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6508);

        $i1 = $i1 ^ $i4;

        $r2[3] = $i1;

        $i1 = $r2[0];

        $i4 = $r2[3];

        $i5 = $r2[2];

        $i4 = $i4 + $i5;

        varReplacer6519 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6519);

        $i1 = $i1 ^ $i4;

        $r2[0] = $i1;

        $i1 = $r2[6];

        $i4 = $r2[5];

        $i5 = $r2[4];

        $i4 = $i4 + $i5;

        varReplacer6513 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6513);

        $i1 = $i1 ^ $i4;

        $r2[6] = $i1;

        $i1 = $r2[7];

        $i4 = $r2[6];

        $i5 = $r2[5];

        $i4 = $i4 + $i5;

        varReplacer6535 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6535);

        $i1 = $i1 ^ $i4;

        $r2[7] = $i1;

        $i1 = $r2[4];

        $i4 = $r2[7];

        $i5 = $r2[6];

        $i4 = $i4 + $i5;

        varReplacer6521 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6521);

        $i1 = $i1 ^ $i4;

        $r2[4] = $i1;

        $i1 = $r2[5];

        $i4 = $r2[4];

        $i5 = $r2[7];

        $i4 = $i4 + $i5;

        varReplacer6510 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6510);

        $i1 = $i1 ^ $i4;

        $r2[5] = $i1;

        $i1 = $r2[11];

        $i4 = $r2[10];

        $i5 = $r2[9];

        $i4 = $i4 + $i5;

        varReplacer6511 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6511);

        $i1 = $i1 ^ $i4;

        $r2[11] = $i1;

        $i1 = $r2[8];

        $i4 = $r2[11];

        $i5 = $r2[10];

        $i4 = $i4 + $i5;

        varReplacer6538 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6538);

        $i1 = $i1 ^ $i4;

        $r2[8] = $i1;

        $i1 = $r2[9];

        $i4 = $r2[8];

        $i5 = $r2[11];

        $i4 = $i4 + $i5;

        varReplacer6505 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6505);

        $i1 = $i1 ^ $i4;

        $r2[9] = $i1;

        $i1 = $r2[10];

        $i4 = $r2[9];

        $i5 = $r2[8];

        $i4 = $i4 + $i5;

        varReplacer6525 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6525);

        $i1 = $i1 ^ $i4;

        $r2[10] = $i1;

        $i1 = $r2[12];

        $i4 = $r2[15];

        $i5 = $r2[14];

        $i4 = $i4 + $i5;

        varReplacer6504 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6504);

        $i1 = $i1 ^ $i4;

        $r2[12] = $i1;

        $i1 = $r2[13];

        $i4 = $r2[12];

        $i5 = $r2[15];

        $i4 = $i4 + $i5;

        varReplacer6516 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6516);

        $i1 = $i1 ^ $i4;

        $r2[13] = $i1;

        $i1 = $r2[14];

        $i4 = $r2[13];

        $i5 = $r2[12];

        $i4 = $i4 + $i5;

        varReplacer6534 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6534);

        $i1 = $i1 ^ $i4;

        $r2[14] = $i1;

        $i1 = $r2[15];

        $i4 = $r2[14];

        $i5 = $r2[13];

        $i4 = $i4 + $i5;

        varReplacer6536 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6536);

        $i1 = $i1 ^ $i4;

        $r2[15] = $i1;

        $i0 = $i0 + -2;

        goto label3;

     label4:
        $i0 = 0;

     label5:
        if $i0 >= 16 goto label6;

        $i1 = $r2[$i0];

        $i4 = $r1[$i0];

        $i1 = $i1 + $i4;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = 0;

     label7:
        if $i0 >= 16 goto label8;

        $i1 = $i0 * 4;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 0;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 1;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 8;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 2;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 16;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 3;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 24;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i0 = $i0 + 1;

        goto label7;

     label8:
        return;
    }

    public static byte[] scrypt(byte[], byte[], int, int, int, int) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, varReplacer6451, varReplacer6452, varReplacer6453, varReplacer6454, varReplacer6455, varReplacer6456, varReplacer6457, varReplacer6458;
        boolean $z0;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $z0 = <com.lambdaworks.crypto.SCrypt: boolean native_library_loaded>;

        if $z0 == 0 goto label1;

        varReplacer6455 = 1024;

        varReplacer6456 = 1;

        varReplacer6457 = 1;

        varReplacer6458 = 32;

        $r0 = staticinvoke <com.lambdaworks.crypto.SCrypt: byte[] scryptN(byte[],byte[],int,int,int,int)>($r0, $r1, varReplacer6455, varReplacer6456, varReplacer6456, varReplacer6458);

        return $r0;

     label1:
        varReplacer6451 = 1024;

        varReplacer6452 = 1;

        varReplacer6453 = 1;

        varReplacer6454 = 32;

        $r0 = staticinvoke <com.lambdaworks.crypto.SCrypt: byte[] scryptJ(byte[],byte[],int,int,int,int)>($r0, $r1, varReplacer6451, varReplacer6452, varReplacer6452, varReplacer6454);

        return $r0;
    }

    public static byte[] scryptJ(byte[], byte[], int, int, int, int) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, varReplacer6463, varReplacer6464, varReplacer6465, varReplacer6466, varReplacer6467, varReplacer6468;
        javax.crypto.Mac $r5;
        java.lang.IllegalArgumentException $r6;
        javax.crypto.spec.SecretKeySpec $r7;
        java.lang.String varReplacer6461, varReplacer6462;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $i4 = 1023;

        $i4 = 0;

        goto label1;

     label1:
        $i4 = 16777215;

        goto label2;

     label2:
        $i4 = 16777215;

        goto label3;

     label3:
        varReplacer6461 = "HmacSHA256";

        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer6461);

        $r7 = new javax.crypto.spec.SecretKeySpec;

        varReplacer6462 = "HmacSHA256";

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer6462);

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r7);

        $r4 = newarray (byte)[32];

        $i4 = 128;

        $i4 = 128;

        $r0 = newarray (byte)[128];

        $i4 = 256;

        $r3 = newarray (byte)[256];

        $i4 = 128;

        $i4 = 131072;

        $r2 = newarray (byte)[131072];

        $i4 = 128;

        $i4 = 128;

        varReplacer6463 = 1;

        varReplacer6464 = 128;

        staticinvoke <com.lambdaworks.crypto.PBKDF: void pbkdf2(javax.crypto.Mac,byte[],int,byte[],int)>($r5, $r1, varReplacer6463, $r0, varReplacer6464);

        $i4 = 0;

     label4:
        if $i4 >= 1 goto label5;

        $i5 = $i4 * 128;

        $i5 = $i5 * 1;

        varReplacer6467 = 1;

        varReplacer6468 = 1024;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void smix(byte[],int,int,int,byte[],byte[])>($r0, $i5, varReplacer6467, varReplacer6468, $r2, $r3);

        $i4 = $i4 + 1;

        goto label4;

     label5:
        varReplacer6465 = 1;

        varReplacer6466 = 32;

        staticinvoke <com.lambdaworks.crypto.PBKDF: void pbkdf2(javax.crypto.Mac,byte[],int,byte[],int)>($r5, $r0, varReplacer6465, $r4, varReplacer6466);

        return $r4;
    }

    public static native byte[] scryptN(byte[], byte[], int, int, int, int);

    public static void smix(byte[], int, int, int, byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, varReplacer6479, varReplacer6480, varReplacer6481, varReplacer6482, varReplacer6483, varReplacer6484, varReplacer6485, varReplacer6486, varReplacer6487, varReplacer6488, varReplacer6489, varReplacer6490, varReplacer6491, varReplacer6492, varReplacer6493, varReplacer6494;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: byte[];

        $r2 := @parameter5: byte[];

        $i3 = 128;

        $i5 = 128;

        varReplacer6491 = 0;

        varReplacer6492 = 128;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r2, varReplacer6491, varReplacer6492);

        $i5 = 0;

     label1:
        if $i5 >= 1024 goto label2;

        $i4 = 128;

        $i4 = 128 * $i5;

        $i6 = 128;

        varReplacer6489 = 0;

        varReplacer6490 = 128;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer6489, $r1, $i4, varReplacer6490);

        varReplacer6479 = 0;

        varReplacer6480 = 128;

        varReplacer6481 = 1;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockmix_salsa8(byte[],int,int,int)>($r2, varReplacer6479, varReplacer6480, varReplacer6481);

        $i5 = $i5 + 1;

        goto label1;

     label2:
        $i5 = 0;

     label3:
        if $i5 >= 1024 goto label4;

        varReplacer6493 = 0;

        varReplacer6494 = 1;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int integerify(byte[],int,int)>($r2, varReplacer6493, varReplacer6494);

        $i6 = 1023;

        $i4 = $i4 & 1023;

        $i6 = 128;

        $i4 = 128 * $i4;

        $i6 = 128;

        varReplacer6487 = 0;

        varReplacer6488 = 128;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockxor(byte[],int,byte[],int,int)>($r1, $i4, $r2, varReplacer6487, varReplacer6488);

        varReplacer6482 = 0;

        varReplacer6483 = 128;

        varReplacer6484 = 1;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockmix_salsa8(byte[],int,int,int)>($r2, varReplacer6482, varReplacer6483, varReplacer6484);

        $i5 = $i5 + 1;

        goto label3;

     label4:
        $i1 = 128;

        varReplacer6485 = 0;

        varReplacer6486 = 128;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer6485, $r0, $i0, varReplacer6486);

        return;
    }
}
