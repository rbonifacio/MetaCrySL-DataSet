public class com.lambdaworks.crypto.SCrypt extends java.lang.Object
{
    private static final boolean native_library_loaded;

    static void <clinit>()
    {
        com.lambdaworks.jni.LibraryLoader $r0;
        boolean $z0;
        java.lang.String varReplacer6579;
        int varReplacer6580;

        nop;

        $r0 = staticinvoke <com.lambdaworks.jni.LibraryLoaders: com.lambdaworks.jni.LibraryLoader loader()>();

        varReplacer6579 = "scrypt";

        varReplacer6580 = 1;

        $z0 = interfaceinvoke $r0.<com.lambdaworks.jni.LibraryLoader: boolean load(java.lang.String,boolean)>(varReplacer6579, varReplacer6580);

        <com.lambdaworks.crypto.SCrypt: boolean native_library_loaded> = $z0;

        return;
    }

    public void <init>()
    {
        com.lambdaworks.crypto.SCrypt $r0;

        $r0 := @this: com.lambdaworks.crypto.SCrypt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int R(int, int)
    {
        int $i0, $i1, $i2;

        nop;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }

    public static void blockmix_salsa8(byte[], int, int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, varReplacer6625, varReplacer6626, varReplacer6627, varReplacer6628, varReplacer6629, varReplacer6630, varReplacer6631, varReplacer6632, varReplacer6633;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 = newarray (byte)[64];

        $i3 = 2;

        $i3 = 1;

        $i3 = 64;

        $i3 = 64;

        varReplacer6630 = 64;

        varReplacer6631 = 0;

        varReplacer6632 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, varReplacer6630, $r1, varReplacer6631, varReplacer6630);

        $i3 = 0;

     label1:
        $i4 = 2;

        if $i3 >= 2 goto label2;

        $i4 = $i3 * 64;

        varReplacer6627 = 0;

        varReplacer6628 = 64;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockxor(byte[],int,byte[],int,int)>($r0, $i4, $r1, varReplacer6627, varReplacer6628);

        staticinvoke <com.lambdaworks.crypto.SCrypt: void salsa20_8(byte[])>($r1);

        $i4 = $i3 * 64;

        $i4 = $i4 + 128;

        varReplacer6625 = 0;

        varReplacer6626 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer6625, $r0, $i4, varReplacer6626);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $i3 = 0;

     label3:
        if $i3 >= 1 goto label4;

        $i4 = $i3 * 2;

        $i4 = $i4 * 64;

        $i4 = $i4 + 128;

        $i5 = $i3 * 64;

        $i5 = $i5 + 0;

        varReplacer6633 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, $r0, $i5, varReplacer6633);

        $i3 = $i3 + 1;

        goto label3;

     label4:
        $i3 = 0;

     label5:
        if $i3 >= 1 goto label6;

        $i4 = $i3 * 2;

        $i4 = $i4 + 1;

        $i4 = $i4 * 64;

        $i4 = $i4 + 128;

        $i5 = $i3 + 1;

        $i5 = $i5 * 64;

        $i5 = $i5 + 0;

        varReplacer6629 = 64;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i4, $r0, $i5, varReplacer6629);

        $i3 = $i3 + 1;

        goto label5;

     label6:
        return;
    }

    public static void blockxor(byte[], int, byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        byte $b5, $b7;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i4 = 0;

     label1:
        if $i4 >= $i2 goto label2;

        $i3 = 0 + $i4;

        $b5 = $r1[$i3];

        $i6 = $i0 + $i4;

        $b7 = $r0[$i6];

        $b5 = $b5 ^ $b7;

        $r1[$i3] = $b5;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return;
    }

    public static int integerify(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i4;
        byte $b2;
        short $s3;

        nop;

        $r0 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i0 = 2;

        $i0 = 1;

        $i0 = 64;

        $i1 = 64;

        $i0 = 64;

        $b2 = $r0[64];

        $s3 = $b2 & 255;

        $i0 = $s3 << 0;

        $i4 = 65;

        $b2 = $r0[65];

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        $i0 = $i0 | $i4;

        $i4 = 66;

        $b2 = $r0[66];

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        $i0 = $i0 | $i4;

        $i1 = 67;

        $b2 = $r0[67];

        $s3 = $b2 & 255;

        $i1 = $s3 << 24;

        $i1 = $i0 | $i1;

        return $i1;
    }

    public static void salsa20_8(byte[])
    {
        byte[] $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i4, $i5, varReplacer6634, varReplacer6635, varReplacer6636, varReplacer6637, varReplacer6638, varReplacer6639, varReplacer6640, varReplacer6641, varReplacer6642, varReplacer6643, varReplacer6644, varReplacer6645, varReplacer6646, varReplacer6647, varReplacer6648, varReplacer6649, varReplacer6650, varReplacer6651, varReplacer6652, varReplacer6653, varReplacer6654, varReplacer6655, varReplacer6656, varReplacer6657, varReplacer6658, varReplacer6659, varReplacer6660, varReplacer6661, varReplacer6662, varReplacer6663, varReplacer6664, varReplacer6665, varReplacer6666, varReplacer6667, varReplacer6668;
        byte $b2;
        short $s3;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = newarray (int)[16];

        $r2 = newarray (int)[16];

        $i0 = 0;

     label1:
        if $i0 >= 16 goto label2;

        $i1 = $i0 * 4;

        $b2 = $r0[$i1];

        $s3 = $b2 & 255;

        $i1 = $s3 << 0;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 1;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 2;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i1 = $r1[$i0];

        $i4 = $i0 * 4;

        $i4 = $i4 + 3;

        $b2 = $r0[$i4];

        $s3 = $b2 & 255;

        $i4 = $s3 << 24;

        $i1 = $i1 | $i4;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        varReplacer6635 = 0;

        varReplacer6636 = 0;

        varReplacer6637 = 16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, varReplacer6635, $r2, varReplacer6635, varReplacer6637);

        $i0 = 8;

     label3:
        if $i0 <= 0 goto label4;

        $i1 = $r2[4];

        $i4 = $r2[0];

        $i5 = $r2[12];

        $i4 = $i4 + $i5;

        varReplacer6634 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6634);

        $i1 = $i1 ^ $i4;

        $r2[4] = $i1;

        $i1 = $r2[8];

        $i4 = $r2[4];

        $i5 = $r2[0];

        $i4 = $i4 + $i5;

        varReplacer6644 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6644);

        $i1 = $i1 ^ $i4;

        $r2[8] = $i1;

        $i1 = $r2[12];

        $i4 = $r2[8];

        $i5 = $r2[4];

        $i4 = $i4 + $i5;

        varReplacer6666 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6666);

        $i1 = $i1 ^ $i4;

        $r2[12] = $i1;

        $i1 = $r2[0];

        $i4 = $r2[12];

        $i5 = $r2[8];

        $i4 = $i4 + $i5;

        varReplacer6654 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6654);

        $i1 = $i1 ^ $i4;

        $r2[0] = $i1;

        $i1 = $r2[9];

        $i4 = $r2[5];

        $i5 = $r2[1];

        $i4 = $i4 + $i5;

        varReplacer6643 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6643);

        $i1 = $i1 ^ $i4;

        $r2[9] = $i1;

        $i1 = $r2[13];

        $i4 = $r2[9];

        $i5 = $r2[5];

        $i4 = $i4 + $i5;

        varReplacer6667 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6667);

        $i1 = $i1 ^ $i4;

        $r2[13] = $i1;

        $i1 = $r2[1];

        $i4 = $r2[13];

        $i5 = $r2[9];

        $i4 = $i4 + $i5;

        varReplacer6653 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6653);

        $i1 = $i1 ^ $i4;

        $r2[1] = $i1;

        $i1 = $r2[5];

        $i4 = $r2[1];

        $i5 = $r2[13];

        $i4 = $i4 + $i5;

        varReplacer6639 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6639);

        $i1 = $i1 ^ $i4;

        $r2[5] = $i1;

        $i1 = $r2[14];

        $i4 = $r2[10];

        $i5 = $r2[6];

        $i4 = $i4 + $i5;

        varReplacer6665 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6665);

        $i1 = $i1 ^ $i4;

        $r2[14] = $i1;

        $i1 = $r2[2];

        $i4 = $r2[14];

        $i5 = $r2[10];

        $i4 = $i4 + $i5;

        varReplacer6660 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6660);

        $i1 = $i1 ^ $i4;

        $r2[2] = $i1;

        $i1 = $r2[6];

        $i4 = $r2[2];

        $i5 = $r2[14];

        $i4 = $i4 + $i5;

        varReplacer6655 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6655);

        $i1 = $i1 ^ $i4;

        $r2[6] = $i1;

        $i1 = $r2[10];

        $i4 = $r2[6];

        $i5 = $r2[2];

        $i4 = $i4 + $i5;

        varReplacer6656 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6656);

        $i1 = $i1 ^ $i4;

        $r2[10] = $i1;

        $i1 = $r2[3];

        $i4 = $r2[15];

        $i5 = $r2[11];

        $i4 = $i4 + $i5;

        varReplacer6647 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6647);

        $i1 = $i1 ^ $i4;

        $r2[3] = $i1;

        $i1 = $r2[7];

        $i4 = $r2[3];

        $i5 = $r2[15];

        $i4 = $i4 + $i5;

        varReplacer6658 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6658);

        $i1 = $i1 ^ $i4;

        $r2[7] = $i1;

        $i1 = $r2[11];

        $i4 = $r2[7];

        $i5 = $r2[3];

        $i4 = $i4 + $i5;

        varReplacer6664 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6664);

        $i1 = $i1 ^ $i4;

        $r2[11] = $i1;

        $i1 = $r2[15];

        $i4 = $r2[11];

        $i5 = $r2[7];

        $i4 = $i4 + $i5;

        varReplacer6659 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6659);

        $i1 = $i1 ^ $i4;

        $r2[15] = $i1;

        $i1 = $r2[1];

        $i4 = $r2[0];

        $i5 = $r2[3];

        $i4 = $i4 + $i5;

        varReplacer6650 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6650);

        $i1 = $i1 ^ $i4;

        $r2[1] = $i1;

        $i1 = $r2[2];

        $i4 = $r2[1];

        $i5 = $r2[0];

        $i4 = $i4 + $i5;

        varReplacer6661 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6661);

        $i1 = $i1 ^ $i4;

        $r2[2] = $i1;

        $i1 = $r2[3];

        $i4 = $r2[2];

        $i5 = $r2[1];

        $i4 = $i4 + $i5;

        varReplacer6641 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6641);

        $i1 = $i1 ^ $i4;

        $r2[3] = $i1;

        $i1 = $r2[0];

        $i4 = $r2[3];

        $i5 = $r2[2];

        $i4 = $i4 + $i5;

        varReplacer6638 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6638);

        $i1 = $i1 ^ $i4;

        $r2[0] = $i1;

        $i1 = $r2[6];

        $i4 = $r2[5];

        $i5 = $r2[4];

        $i4 = $i4 + $i5;

        varReplacer6662 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6662);

        $i1 = $i1 ^ $i4;

        $r2[6] = $i1;

        $i1 = $r2[7];

        $i4 = $r2[6];

        $i5 = $r2[5];

        $i4 = $i4 + $i5;

        varReplacer6646 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6646);

        $i1 = $i1 ^ $i4;

        $r2[7] = $i1;

        $i1 = $r2[4];

        $i4 = $r2[7];

        $i5 = $r2[6];

        $i4 = $i4 + $i5;

        varReplacer6668 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6668);

        $i1 = $i1 ^ $i4;

        $r2[4] = $i1;

        $i1 = $r2[5];

        $i4 = $r2[4];

        $i5 = $r2[7];

        $i4 = $i4 + $i5;

        varReplacer6657 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6657);

        $i1 = $i1 ^ $i4;

        $r2[5] = $i1;

        $i1 = $r2[11];

        $i4 = $r2[10];

        $i5 = $r2[9];

        $i4 = $i4 + $i5;

        varReplacer6663 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6663);

        $i1 = $i1 ^ $i4;

        $r2[11] = $i1;

        $i1 = $r2[8];

        $i4 = $r2[11];

        $i5 = $r2[10];

        $i4 = $i4 + $i5;

        varReplacer6651 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6651);

        $i1 = $i1 ^ $i4;

        $r2[8] = $i1;

        $i1 = $r2[9];

        $i4 = $r2[8];

        $i5 = $r2[11];

        $i4 = $i4 + $i5;

        varReplacer6648 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6648);

        $i1 = $i1 ^ $i4;

        $r2[9] = $i1;

        $i1 = $r2[10];

        $i4 = $r2[9];

        $i5 = $r2[8];

        $i4 = $i4 + $i5;

        varReplacer6649 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6649);

        $i1 = $i1 ^ $i4;

        $r2[10] = $i1;

        $i1 = $r2[12];

        $i4 = $r2[15];

        $i5 = $r2[14];

        $i4 = $i4 + $i5;

        varReplacer6645 = 7;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6645);

        $i1 = $i1 ^ $i4;

        $r2[12] = $i1;

        $i1 = $r2[13];

        $i4 = $r2[12];

        $i5 = $r2[15];

        $i4 = $i4 + $i5;

        varReplacer6640 = 9;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6640);

        $i1 = $i1 ^ $i4;

        $r2[13] = $i1;

        $i1 = $r2[14];

        $i4 = $r2[13];

        $i5 = $r2[12];

        $i4 = $i4 + $i5;

        varReplacer6642 = 13;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6642);

        $i1 = $i1 ^ $i4;

        $r2[14] = $i1;

        $i1 = $r2[15];

        $i4 = $r2[14];

        $i5 = $r2[13];

        $i4 = $i4 + $i5;

        varReplacer6652 = 18;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int R(int,int)>($i4, varReplacer6652);

        $i1 = $i1 ^ $i4;

        $r2[15] = $i1;

        $i0 = $i0 + -2;

        goto label3;

     label4:
        $i0 = 0;

     label5:
        if $i0 >= 16 goto label6;

        $i1 = $r2[$i0];

        $i4 = $r1[$i0];

        $i1 = $i1 + $i4;

        $r1[$i0] = $i1;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = 0;

     label7:
        if $i0 >= 16 goto label8;

        $i1 = $i0 * 4;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 0;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 1;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 8;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 2;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 16;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i1 = $i0 * 4;

        $i1 = $i1 + 3;

        $i4 = $r1[$i0];

        $i4 = $i4 >> 24;

        $i4 = $i4 & 255;

        $b2 = (byte) $i4;

        $r0[$i1] = $b2;

        $i0 = $i0 + 1;

        goto label7;

     label8:
        return;
    }

    public static byte[] scrypt(byte[], byte[], int, int, int, int) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, varReplacer6581, varReplacer6582, varReplacer6583, varReplacer6584, varReplacer6585, varReplacer6586, varReplacer6587, varReplacer6588;
        boolean $z0;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $z0 = <com.lambdaworks.crypto.SCrypt: boolean native_library_loaded>;

        if $z0 == 0 goto label1;

        varReplacer6585 = 1024;

        varReplacer6586 = 1;

        varReplacer6587 = 1;

        varReplacer6588 = 32;

        $r0 = staticinvoke <com.lambdaworks.crypto.SCrypt: byte[] scryptN(byte[],byte[],int,int,int,int)>($r0, $r1, varReplacer6585, varReplacer6586, varReplacer6586, varReplacer6588);

        return $r0;

     label1:
        varReplacer6581 = 1024;

        varReplacer6582 = 1;

        varReplacer6583 = 1;

        varReplacer6584 = 32;

        $r0 = staticinvoke <com.lambdaworks.crypto.SCrypt: byte[] scryptJ(byte[],byte[],int,int,int,int)>($r0, $r1, varReplacer6581, varReplacer6582, varReplacer6582, varReplacer6584);

        return $r0;
    }

    public static byte[] scryptJ(byte[], byte[], int, int, int, int) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, varReplacer6591, varReplacer6592, varReplacer6595, varReplacer6596, varReplacer6597, varReplacer6598;
        javax.crypto.Mac $r5;
        java.lang.IllegalArgumentException $r6;
        javax.crypto.spec.SecretKeySpec $r7;
        java.lang.String varReplacer6593, varReplacer6594;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $i4 = 1023;

        $i4 = 0;

        goto label1;

     label1:
        $i4 = 16777215;

        goto label2;

     label2:
        $i4 = 16777215;

        goto label3;

     label3:
        varReplacer6594 = "HmacSHA256";

        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer6594);

        $r7 = new javax.crypto.spec.SecretKeySpec;

        varReplacer6593 = "HmacSHA256";

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer6593);

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>($r7);

        $r4 = newarray (byte)[32];

        $i4 = 128;

        $i4 = 128;

        $r0 = newarray (byte)[128];

        $i4 = 256;

        $r3 = newarray (byte)[256];

        $i4 = 128;

        $i4 = 131072;

        $r2 = newarray (byte)[131072];

        $i4 = 128;

        $i4 = 128;

        varReplacer6595 = 1;

        varReplacer6596 = 128;

        staticinvoke <com.lambdaworks.crypto.PBKDF: void pbkdf2(javax.crypto.Mac,byte[],int,byte[],int)>($r5, $r1, varReplacer6595, $r0, varReplacer6596);

        $i4 = 0;

     label4:
        if $i4 >= 1 goto label5;

        $i5 = $i4 * 128;

        $i5 = $i5 * 1;

        varReplacer6597 = 1;

        varReplacer6598 = 1024;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void smix(byte[],int,int,int,byte[],byte[])>($r0, $i5, varReplacer6597, varReplacer6598, $r2, $r3);

        $i4 = $i4 + 1;

        goto label4;

     label5:
        varReplacer6591 = 1;

        varReplacer6592 = 32;

        staticinvoke <com.lambdaworks.crypto.PBKDF: void pbkdf2(javax.crypto.Mac,byte[],int,byte[],int)>($r5, $r0, varReplacer6591, $r4, varReplacer6592);

        return $r4;
    }

    public static native byte[] scryptN(byte[], byte[], int, int, int, int);

    public static void smix(byte[], int, int, int, byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, varReplacer6609, varReplacer6610, varReplacer6611, varReplacer6612, varReplacer6613, varReplacer6614, varReplacer6615, varReplacer6616, varReplacer6617, varReplacer6618, varReplacer6619, varReplacer6620, varReplacer6621, varReplacer6622, varReplacer6623, varReplacer6624;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: byte[];

        $r2 := @parameter5: byte[];

        $i3 = 128;

        $i5 = 128;

        varReplacer6621 = 0;

        varReplacer6622 = 128;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r2, varReplacer6621, varReplacer6622);

        $i5 = 0;

     label1:
        if $i5 >= 1024 goto label2;

        $i4 = 128;

        $i4 = 128 * $i5;

        $i6 = 128;

        varReplacer6619 = 0;

        varReplacer6620 = 128;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer6619, $r1, $i4, varReplacer6620);

        varReplacer6609 = 0;

        varReplacer6610 = 128;

        varReplacer6611 = 1;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockmix_salsa8(byte[],int,int,int)>($r2, varReplacer6609, varReplacer6610, varReplacer6611);

        $i5 = $i5 + 1;

        goto label1;

     label2:
        $i5 = 0;

     label3:
        if $i5 >= 1024 goto label4;

        varReplacer6614 = 0;

        varReplacer6615 = 1;

        $i4 = staticinvoke <com.lambdaworks.crypto.SCrypt: int integerify(byte[],int,int)>($r2, varReplacer6614, varReplacer6615);

        $i6 = 1023;

        $i4 = $i4 & 1023;

        $i6 = 128;

        $i4 = 128 * $i4;

        $i6 = 128;

        varReplacer6612 = 0;

        varReplacer6613 = 128;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockxor(byte[],int,byte[],int,int)>($r1, $i4, $r2, varReplacer6612, varReplacer6613);

        varReplacer6616 = 0;

        varReplacer6617 = 128;

        varReplacer6618 = 1;

        staticinvoke <com.lambdaworks.crypto.SCrypt: void blockmix_salsa8(byte[],int,int,int)>($r2, varReplacer6616, varReplacer6617, varReplacer6618);

        $i5 = $i5 + 1;

        goto label3;

     label4:
        $i1 = 128;

        varReplacer6623 = 0;

        varReplacer6624 = 128;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer6623, $r0, $i0, varReplacer6624);

        return;
    }
}
