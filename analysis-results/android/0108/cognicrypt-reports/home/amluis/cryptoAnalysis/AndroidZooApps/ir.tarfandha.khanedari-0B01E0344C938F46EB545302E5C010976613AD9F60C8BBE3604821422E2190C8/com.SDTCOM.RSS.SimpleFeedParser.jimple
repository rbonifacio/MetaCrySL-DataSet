public abstract class com.SDTCOM.RSS.SimpleFeedParser extends java.lang.Object implements com.SDTCOM.RSS.FeedParser
{
    static final java.lang.String CONTENT;
    static final java.lang.String DESCRIPTION;
    static final javax.net.ssl.HostnameVerifier DO_NOT_VERIFY;
    static final java.lang.String ITEM;
    static final java.lang.String LINK;
    static final java.lang.String PUB_DATE;
    static final java.lang.String TITLE;
    final java.net.URL feedUrl;

    static void <clinit>()
    {
        com.SDTCOM.RSS.SimpleFeedParser$1 $r0;

        nop;

        $r0 = new com.SDTCOM.RSS.SimpleFeedParser$1;

        specialinvoke $r0.<com.SDTCOM.RSS.SimpleFeedParser$1: void <init>()>();

        <com.SDTCOM.RSS.SimpleFeedParser: javax.net.ssl.HostnameVerifier DO_NOT_VERIFY> = $r0;

        return;
    }

    protected void <init>(java.lang.String)
    {
        com.SDTCOM.RSS.SimpleFeedParser $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        java.net.URL $r3;
        java.lang.RuntimeException $r4;

        nop;

        $r0 := @this: com.SDTCOM.RSS.SimpleFeedParser;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = new java.net.URL;

     label1:
        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r1);

     label2:
        $r0.<com.SDTCOM.RSS.SimpleFeedParser: java.net.URL feedUrl> = $r3;

        return;

     label3:
        $r2 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    private static void trustAllHosts()
    {
        java.lang.Exception $r0;
        java.lang.Object[] $r1;
        javax.net.ssl.SSLContext $r2;
        java.security.SecureRandom $r3, r6;
        javax.net.ssl.SSLSocketFactory $r4;
        com.SDTCOM.RSS.SimpleFeedParser$2 r5;
        javax.net.ssl.TrustManager[] r7;
        java.lang.String varReplacer3963;
        null_type varReplacer3964;

        nop;

        $r1 = newarray (javax.net.ssl.TrustManager)[1];

        r5 = new com.SDTCOM.RSS.SimpleFeedParser$2;

        specialinvoke r5.<com.SDTCOM.RSS.SimpleFeedParser$2: void <init>()>();

        $r1[0] = r5;

     label1:
        varReplacer3963 = "TLS";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3963);

     label2:
        r6 = new java.security.SecureRandom;

        $r3 = r6;

     label3:
        specialinvoke r6.<java.security.SecureRandom: void <init>()>();

        r7 = (javax.net.ssl.TrustManager[]) $r1;

        varReplacer3964 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3964, r7, $r3);

        $r4 = virtualinvoke $r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        staticinvoke <javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>($r4);

     label4:
        return;

     label5:
        $r0 := @caughtexception;

        virtualinvoke $r0.<java.lang.Exception: void printStackTrace()>();

        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected java.io.InputStream getInputStream()
    {
        com.SDTCOM.RSS.SimpleFeedParser $r0;
        java.lang.Throwable $r1;
        java.net.URL $r2;
        java.lang.String $r3, varReplacer3962;
        boolean $z0;
        java.net.URLConnection $r4;
        javax.net.ssl.HttpsURLConnection $r5;
        javax.net.ssl.HostnameVerifier $r6;
        java.lang.Object $r7;
        java.io.InputStream $r8;
        java.net.HttpURLConnection $r9;
        java.lang.RuntimeException r10;

        nop;

        $r0 := @this: com.SDTCOM.RSS.SimpleFeedParser;

        $r2 = $r0.<com.SDTCOM.RSS.SimpleFeedParser: java.net.URL feedUrl>;

     label01:
        $r3 = virtualinvoke $r2.<java.net.URL: java.lang.String getProtocol()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        varReplacer3962 = "https";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer3962);

     label02:
        if $z0 == 0 goto label12;

     label03:
        staticinvoke <com.SDTCOM.RSS.SimpleFeedParser: void trustAllHosts()>();

     label04:
        $r2 = $r0.<com.SDTCOM.RSS.SimpleFeedParser: java.net.URL feedUrl>;

     label05:
        $r4 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>();

     label06:
        $r5 = (javax.net.ssl.HttpsURLConnection) $r4;

        $r6 = <com.SDTCOM.RSS.SimpleFeedParser: javax.net.ssl.HostnameVerifier DO_NOT_VERIFY>;

     label07:
        virtualinvoke $r5.<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>($r6);

     label08:
        $r7 = $r5;

     label09:
        $r9 = (java.net.HttpURLConnection) $r7;

     label10:
        $r8 = virtualinvoke $r9.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

     label11:
        return $r8;

     label12:
        $r2 = $r0.<com.SDTCOM.RSS.SimpleFeedParser: java.net.URL feedUrl>;

     label13:
        $r4 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>();

     label14:
        $r7 = (java.net.HttpURLConnection) $r4;

        goto label09;

     label15:
        $r1 := @caughtexception;

        r10 = new java.lang.RuntimeException;

        specialinvoke r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r1);

        throw r10;

        catch java.io.IOException from label01 to label02 with label15;
        catch java.io.IOException from label03 to label04 with label15;
        catch java.io.IOException from label05 to label06 with label15;
        catch java.io.IOException from label07 to label08 with label15;
        catch java.io.IOException from label10 to label11 with label15;
        catch java.io.IOException from label13 to label14 with label15;
    }
}
