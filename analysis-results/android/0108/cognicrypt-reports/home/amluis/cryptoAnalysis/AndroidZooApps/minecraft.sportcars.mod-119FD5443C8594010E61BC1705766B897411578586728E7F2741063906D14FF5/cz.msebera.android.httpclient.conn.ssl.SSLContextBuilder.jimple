public class cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder extends java.lang.Object
{
    static final java.lang.String SSL;
    static final java.lang.String TLS;
    private java.util.Set keymanagers;
    private java.lang.String protocol;
    private java.security.SecureRandom secureRandom;
    private java.util.Set trustmanagers;

    public void <init>()
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;
        java.util.HashSet $r1;

        nop;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set keymanagers> = $r1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set trustmanagers> = $r1;

        return;
    }

    public javax.net.ssl.SSLContext build() throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;
        java.lang.String $r1;
        javax.net.ssl.SSLContext $r2;
        java.util.Set $r3, $r4;
        boolean $z0;
        int $i0;
        javax.net.ssl.KeyManager[] $r5;
        java.lang.Object[] $r6;
        javax.net.ssl.TrustManager[] $r7;
        java.security.SecureRandom $r8;

        nop;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        $r1 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.lang.String protocol>;

        if $r1 == null goto label4;

        $r1 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.lang.String protocol>;

     label1:
        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r1);

        $r3 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set keymanagers>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r3 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set keymanagers>;

        $r4 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set keymanagers>;

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        $r5 = newarray (javax.net.ssl.KeyManager)[$i0];

        $r6 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r5 = (javax.net.ssl.KeyManager[]) $r6;

     label2:
        $r3 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set trustmanagers>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r3 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set trustmanagers>;

        $r4 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set trustmanagers>;

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        $r7 = newarray (javax.net.ssl.TrustManager)[$i0];

        $r6 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r7 = (javax.net.ssl.TrustManager[]) $r6;

     label3:
        $r8 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.security.SecureRandom secureRandom>;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r5, $r7, $r8);

        return $r2;

     label4:
        $r1 = "TLS";

        goto label1;

     label5:
        $r5 = null;

        goto label2;

     label6:
        $r7 = null;

        goto label3;
    }

    public cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder loadKeyMaterial(java.security.KeyStore, char[]) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;
        java.security.KeyStore $r1;
        char[] $r2;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 := @parameter1: char[];

        virtualinvoke $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder loadKeyMaterial(java.security.KeyStore,char[],cz.msebera.android.httpclient.conn.ssl.PrivateKeyStrategy)>($r1, $r2, null);

        return $r0;
    }

    public cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder loadKeyMaterial(java.security.KeyStore, char[], cz.msebera.android.httpclient.conn.ssl.PrivateKeyStrategy) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;
        java.security.KeyStore $r1;
        char[] $r2;
        cz.msebera.android.httpclient.conn.ssl.PrivateKeyStrategy $r3;
        int $i0, $i1;
        java.util.Set $r4;
        java.lang.String $r5;
        javax.net.ssl.KeyManagerFactory $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8;
        boolean $z0;
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder$KeyManagerDelegate $r9;
        javax.net.ssl.X509KeyManager $r10;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 := @parameter1: char[];

        $r3 := @parameter2: cz.msebera.android.httpclient.conn.ssl.PrivateKeyStrategy;

        $r5 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r6 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r5);

        virtualinvoke $r6.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r1, $r2);

        $r7 = virtualinvoke $r6.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        if $r7 == null goto label5;

        if $r3 == null goto label3;

        $i0 = 0;

     label1:
        $i1 = lengthof $r7;

        if $i0 >= $i1 goto label3;

        $r8 = $r7[$i0];

        $z0 = $r8 instanceof javax.net.ssl.X509KeyManager;

        if $z0 == 0 goto label2;

        $r9 = new cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder$KeyManagerDelegate;

        $r10 = (javax.net.ssl.X509KeyManager) $r8;

        specialinvoke $r9.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder$KeyManagerDelegate: void <init>(javax.net.ssl.X509KeyManager,cz.msebera.android.httpclient.conn.ssl.PrivateKeyStrategy)>($r10, $r3);

        $r7[$i0] = $r9;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = lengthof $r7;

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label5;

        $r8 = $r7[$i1];

        $r4 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set keymanagers>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r8);

        $i1 = $i1 + 1;

        goto label4;

     label5:
        return $r0;
    }

    public cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder loadTrustMaterial(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;
        java.security.KeyStore $r1;
        null_type varReplacer7920;

        nop;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        $r1 := @parameter0: java.security.KeyStore;

        varReplacer7920 = null;

        $r0 = virtualinvoke $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder loadTrustMaterial(java.security.KeyStore,cz.msebera.android.httpclient.conn.ssl.TrustStrategy)>($r1, varReplacer7920);

        return $r0;
    }

    public cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder loadTrustMaterial(java.security.KeyStore, cz.msebera.android.httpclient.conn.ssl.TrustStrategy) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;
        java.security.KeyStore $r1;
        cz.msebera.android.httpclient.conn.ssl.TrustStrategy $r2;
        int $i0, $i1;
        java.util.Set $r3;
        java.lang.String $r4;
        javax.net.ssl.TrustManagerFactory $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        boolean $z0;
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder$TrustManagerDelegate $r8;
        javax.net.ssl.X509TrustManager $r9;

        nop;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 := @parameter1: cz.msebera.android.httpclient.conn.ssl.TrustStrategy;

        $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r5 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r4);

        virtualinvoke $r5.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r1);

        $r6 = virtualinvoke $r5.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        if $r6 == null goto label3;

        goto label1;

     label1:
        $i0 = lengthof $r6;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r7 = $r6[$i1];

        $r3 = $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.util.Set trustmanagers>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $r0;
    }

    public cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder setSecureRandom(java.security.SecureRandom)
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;
        java.security.SecureRandom $r1;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        $r1 := @parameter0: java.security.SecureRandom;

        $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.security.SecureRandom secureRandom> = $r1;

        return $r0;
    }

    public cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder useProtocol(java.lang.String)
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;
        java.lang.String $r1;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        $r1 := @parameter0: java.lang.String;

        $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.lang.String protocol> = $r1;

        return $r0;
    }

    public cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder useSSL()
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.lang.String protocol> = "SSL";

        return $r0;
    }

    public cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder useTLS()
    {
        cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder $r0;

        $r0 := @this: cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder;

        $r0.<cz.msebera.android.httpclient.conn.ssl.SSLContextBuilder: java.lang.String protocol> = "TLS";

        return $r0;
    }
}
