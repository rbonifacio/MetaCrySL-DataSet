Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer287)
		Method: <se.accumulate.android.security.EncryptionEngine: boolean isSignatureValid(byte[],byte[],java.security.PublicKey)>
		SHA-256: e2763bcacf81aa95ac62ca352d5bfda9ca4f649ce69564f019e1ea5b3a243084
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer516)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String decrypt(java.lang.String)>
		SHA-256: caccb1df0bc95e904aebb69e7dbd9929fb817369096ee7737261e3fa5a62991f
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer424)
		Method: <se.accumulate.android.properties.DeviceId: java.lang.String generateRandomDeviceIdAlphaNum(int)>
		SHA-256: 918ffd4e5771202985f052e911e3f970d3f8e9eb7d2a893f04f2b357e7fcc5e8
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKey
		Statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: javax.crypto.SecretKey generatePBEKey(char[],byte[],java.lang.String,int,int)>
		SHA-256: eaeaaecacf2670f8492c48d5a7da8774e5792d0c44de2cfcad7cee46498bf98e
		Secure: false
	Object:
		Variable: varReplacer337
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer337)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] calculateRfc2104Hmac(byte[],byte[])>
		SHA-256: 2c2a80f7fee7e25c2c79e5ecfef6e346486d635e837b9034c04fdd33b72c4501
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.KeyGenerator
		Statement: $r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer145)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String generateAesKeyValue()>
		SHA-256: 6238b011b270dbed4d99a823cb5d1cf5d43b0ec7f4cf41508d485db4b80473fe
		Secure: true
	Object:
		Variable: varReplacer340
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer340)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],android.content.Context)>
		SHA-256: 2511fb33f09d45072b9fe99babaf0f2ae5104c0c1358fab16381e38997025057
		Secure: false
	Object:
		Variable: $r13
		Type: javax.crypto.Cipher
		Statement: $r13 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer254)
		Method: <se.accumulate.android.security.AppIdHandler: void storeAppIdentity(se.accumulate.me.core.communication.AppIdentity,se.accumulate.android.IMeContext)>
		SHA-256: 580759c72e78994627305b07d2572a7f6a6efc29c8884eddc857130a217c5d09
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r1 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: bb1708c8c860625e653bfcd02a2ceee7637202c4b42f9c00f973d1f7fa710711
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Mac
		Statement: $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer339)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] calculateRfc2104Hmac(byte[],byte[])>
		SHA-256: 9a6b74bf0bb841023f2d91e6a1895becec6c91cd196c3a37936d9fddbe44bf67
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: 6f87aa551956e792d888baca017d28b3f2e620c6d4125798a0801f8126adc7db
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer525)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String encrypt(java.lang.String)>
		SHA-256: 29e815a3b023378bbfe33091b777dd166454464cf9ba108bf88a11239fb4b731
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r10.<java.security.MessageDigest: byte[] digest()>()
		Method: <se.accumulate.android.security.TamperValidation: java.lang.String createChecksum(android.content.Context)>
		SHA-256: 8df82fcd171bcb61e114c323c0cb34d1dd229c966ed2f9bb56bb8cab9d2345bc
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.Cipher
		Statement: $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer341)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],android.content.Context)>
		SHA-256: 5663bd796398d4140d7c72444b8f48f17c1da3f555c68ad1170efba079d487c4
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.Cipher
		Statement: $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer344)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],android.content.Context)>
		SHA-256: 5f626b5a7d601ac66c40924120e42f2a084ee1da6c89f2f8198c42347df1edc9
		Secure: true
	Object:
		Variable: $r15
		Type: javax.crypto.Cipher
		Statement: $r15 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer354)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: 8cfd0f07d615004a194db0830dd2a4ea0a57ffe8eae3f62f9d2aef6bc4161b07
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer337)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] calculateRfc2104Hmac(byte[],byte[])>
		SHA-256: 5513f7158389af30b1268098026555e62f5c3d2cb22ff292125b245d6007c58d
		Secure: false
	Object:
		Variable: varReplacer238
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer238)
		Method: <se.accumulate.android.security.AppIdHandler: se.accumulate.me.core.communication.AppIdentity loadAppIdentity(se.accumulate.android.IMeContext,java.lang.String,byte[])>
		SHA-256: 748f8a1d873539dbc55501e92c547ca7543ea7b72a5e402b6776919e8632b728
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: eadddf7e499ac035f9bf9bca15223b714ce8e753100638a3074519bd34aa2789
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKey
		Statement: $r4 = virtualinvoke $r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String generateAesKeyValue()>
		SHA-256: bafde10d5e3a632b365993b80334f04c4e68006454b8e7a8f6d80dd28cddcef9
		Secure: true
	Object:
		Variable: varReplacer155
		Type: int
		Statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, $i1, varReplacer155)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: javax.crypto.SecretKey generatePBEKey(char[],byte[],java.lang.String,int,int)>
		SHA-256: 864348492d1854c35ccb9a167619daa6624278102bf746b16e13cfa7a6b0881a
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKeyFactory
		Statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r2, varReplacer156)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: javax.crypto.SecretKey generatePBEKey(char[],byte[],java.lang.String,int,int)>
		SHA-256: 58ff634e28eed06c389bb2fbdbfea88ee914d956b72234efad72c536ecac8386
		Secure: false
	Object:
		Variable: varReplacer525
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer525)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String encrypt(java.lang.String)>
		SHA-256: b250f9663ecaf3a14279b5107389a94e93725ebc59968fb3f6b0173dd5231d64
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: bb25b1e0936fe595c08f3cd3c1c2677924423a8b2f0968b009e3523aa6a1e309
		Secure: false
	Object:
		Variable: varReplacer355
		Type: java.lang.String
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer355)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: 322731a6592f555cba011a8a3ece07ec05d8eac166733c1c15e11783f03e7a71
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] encrypt(byte[],android.content.Context)>
		SHA-256: fbc134d51694694aae4cc0173f3f67c72979ad9ff65e1c78cd5d80b5ecde64ff
		Secure: false
	Object:
		Variable: $r12
		Type: byte[]
		Statement: $r12 = virtualinvoke $r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r12)
		Method: <se.accumulate.android.security.AppIdHandler: void storeAppIdentity(se.accumulate.me.core.communication.AppIdentity,se.accumulate.android.IMeContext)>
		SHA-256: 4bd72abec839b0d9e3d2aa8fce2924f3fbf4597c3429c2d8befc71cc0cc4d6c3
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r7)
		Method: <se.accumulate.android.security.AppIdHandler: byte[] getAppIdKeyDeprecated(se.accumulate.android.IMeContext)>
		SHA-256: adae5e692cabcf8975b8aefa3eb19966d9c2104e980a9f780ed32efab58d4313
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r2 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)
		Method: <se.accumulate.android.security.AppIdHandler: se.accumulate.me.core.communication.AppIdentity loadAppIdentity(se.accumulate.android.IMeContext,java.lang.String,byte[])>
		SHA-256: 4110cbc75bdbbbb3d8e885b630c40a9471c9c7923ba6b2d1cda3cbe9a15dcdfc
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.Cipher
		Statement: $r15 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer352)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: 26299bc9d23f73309cf6aa8193ba1406ca3518a891ef8a403d454050f465ab50
		Secure: true
	Object:
		Variable: varReplacer253
		Type: java.lang.String
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r12, varReplacer253)
		Method: <se.accumulate.android.security.AppIdHandler: void storeAppIdentity(se.accumulate.me.core.communication.AppIdentity,se.accumulate.android.IMeContext)>
		SHA-256: 8e905168981723ef8390940f4e65b12d63a6dde8bdbd9e335dd1f9bf0a1f3355
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.MessageDigest
		Statement: $r10 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer242)
		Method: <se.accumulate.android.security.AppIdHandler: byte[] getAppIdKey(se.accumulate.android.IMeContext)>
		SHA-256: 3a565eed40f499efee66a8e3039d2562e005f59978fdbdb7996e60c02774a4f6
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer350)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] rsaEncrypt(byte[],java.security.PublicKey)>
		SHA-256: 1148a11ce21c739d48e9644fa119e01a344e063e2910f22679ae55817014756
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.Cipher
		Statement: $r15 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer358)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: 854c2c53d85cc1f1d433a770cd6626d09c0e1648202b2a09f3930ac485acef6b
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.Cipher
		Statement: $r15 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer360)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: 1220e58c3c59789a3703d0ae1c9f86e9c61f0ed2a5b8aa79a2a69047c5dc979c
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer521, varReplacer522)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String encrypt(java.lang.String)>
		SHA-256: 2513c8af41a9a2b81bc1fb044194e852b2ebcff305c6ac747e0892d9bf3241a2
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, $i1, varReplacer155)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: javax.crypto.SecretKey generatePBEKey(char[],byte[],java.lang.String,int,int)>
		SHA-256: bf667d7535008b37c3463480423fc60d9b734b8b37c15af0e868f53f6798d0d4
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String decrypt(java.lang.String)>
		SHA-256: 44a09f863490cad53038f05fdddf0b35da10368876a0def9f20b85674f34550a
		Secure: false
	Object:
		Variable: varReplacer516
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer516)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String decrypt(java.lang.String)>
		SHA-256: 94a576e60514064681e2f9046a847157909ea98d4bc966e604356a76658e12b
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] rsaEncrypt(byte[],java.security.PublicKey)>
		SHA-256: e90dee8d5261837dbf33199083e5e3f6fe4d3c945193e55f969ea3bd94789ece
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $z0 = virtualinvoke $r4.<java.security.Signature: boolean verify(byte[])>($r1)
		Method: <se.accumulate.android.security.EncryptionEngine: boolean isSignatureValid(byte[],byte[],java.security.PublicKey)>
		SHA-256: ad8b99ea1a3ec78b4316d42ee007304f5d4327ab04e1549f95e43c9be6a794c5
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.Cipher
		Statement: $r15 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer236)
		Method: <se.accumulate.android.security.AppIdHandler: se.accumulate.me.core.communication.AppIdentity loadAppIdentity(se.accumulate.android.IMeContext,java.lang.String,byte[])>
		SHA-256: 4ef7e318b5553758f3f3c28fc1c31057d79067e1864836c5f071a76f204dbe2f
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r12, varReplacer253)
		Method: <se.accumulate.android.security.AppIdHandler: void storeAppIdentity(se.accumulate.me.core.communication.AppIdentity,se.accumulate.android.IMeContext)>
		SHA-256: c82fcd79c00e0e8e4f26fdd8688c026b74ac926bcda00c396e4a19c98fb8321f
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>($r0)
		Method: <se.accumulate.android.connection.RSAHandshakeEngine: byte[] generateAesKey()>
		SHA-256: 230e6ca74d728dc81b5b32b8cdcb4add406b92b15a000cfe54f25e2d0cf3fbe3
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String generateAesKeyValue()>
		SHA-256: 3c0c9222f6ff5fe291d2a302296dd5888b6150d346934cb0b35748687f8093c1
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r9 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] decrypt(byte[],android.content.Context)>
		SHA-256: 5c7e7cc797658fcdabe52bbbb897b6ae34970f5234dad239977a0cc51197c8a1
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] encrypt(byte[],android.content.Context)>
		SHA-256: fbc134d51694694aae4cc0173f3f67c72979ad9ff65e1c78cd5d80b5ecde64ff
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer238)
		Method: <se.accumulate.android.security.AppIdHandler: se.accumulate.me.core.communication.AppIdentity loadAppIdentity(se.accumulate.android.IMeContext,java.lang.String,byte[])>
		SHA-256: cbe6686fdfb34278e6a67f6d4af621f80ebf92a5a870c6da727ac7a9eda295c
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer340)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],android.content.Context)>
		SHA-256: c79efac401d67dde35ff0f49969050348b764d337c25673057f566fe609ac154
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.MessageDigest
		Statement: $r10 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer281)
		Method: <se.accumulate.android.security.TamperValidation: java.lang.String createChecksum(android.content.Context)>
		SHA-256: f2cc26c4fb1a560754b831c61a32fa764a8aecc942d9becbfab53ec17eb03497
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = interfaceinvoke $r4.<javax.crypto.SecretKey: byte[] getEncoded()>()
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String generateAesKeyValue()>
		SHA-256: f3aa2d57e0b0838ed695325010934935338d83c59f3159f4d2152fa7347da8fa
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)
		Method: <se.accumulate.android.security.AppIdHandler: se.accumulate.me.core.communication.AppIdentity loadAppIdentity(se.accumulate.android.IMeContext,java.lang.String,byte[])>
		SHA-256: 6d9c8a53d499df04d3ef89dc04e9e4f55e3433fdea9f8fb808d9d3861c83734e
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer355)
		Method: <se.accumulate.android.security.EncryptionEngine: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)>
		SHA-256: b91e6a1f5cc9512d877afb2322e28ffc02a2d539821a03edf677a7d2d943f7
		Secure: false
	Object:
		Variable: $r14
		Type: byte[]
		Statement: $r14 = virtualinvoke $r10.<java.security.MessageDigest: byte[] digest()>()
		Method: <se.accumulate.android.security.AppIdHandler: byte[] getAppIdKey(se.accumulate.android.IMeContext)>
		SHA-256: 6aed4d401adb0022a425271ca37332b72849ee38d27cc82c9bcf035184f21cc7
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r0)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] calculateRfc2104Hmac(byte[],byte[])>
		SHA-256: d7437a70ea3acf99f48ab7f1a49ab29eddc6f266d1f39bf3da154e8f097c48cc
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer514, varReplacer515)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String decrypt(java.lang.String)>
		SHA-256: d71c0ab2b28b1ba1238370407afb26e8c7386b945e3df1f861a079fe37402799
		Secure: false
	Object:
		Variable: $r9
		Type: byte[]
		Statement: $r9 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <se.accumulate.android.security.EncryptionEngine: byte[] decrypt(byte[],android.content.Context)>
		SHA-256: 81a5ce0740ce2b3d42c6b74a57cc960694a25a2b5be879ed96b6018b57af99fa
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.closepayment.mobileorder.model.storage.SecurePreferences: java.lang.String encrypt(java.lang.String)>
		SHA-256: c76a90aa0f353570596d0ed8c9f75aa729fb49e5a2af5f0aa4ebc1438abc87b2
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer326)
		Method: <se.accumulate.android.connection.RSAHandshakeEngine: byte[] generateAesKey()>
		SHA-256: 95d18e500ea6e4f62ff254d88271c3b2ac729681beeed4e9a815fe0e3ded4ab6
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer259)
		Method: <se.accumulate.android.security.AppIdHandler: byte[] getAppIdKeyDeprecated(se.accumulate.android.IMeContext)>
		SHA-256: 42c5ee96f961296d0815e4d2eb98819931ea3aa8937e5616c75c50f39ee85268
		Secure: true

Findings in Java Class: com.closepayment.mobileorder.model.storage.SecurePreferences

	 in Method: javax.crypto.SecretKey generatePBEKey(char[],byte[],java.lang.String,int,int)
		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #bf667d7535008b37c3463480423fc60d9b734b8b37c15af0e868f53f6798d0d4)
			Third parameter (with value 2000)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, $i1, varReplacer155)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #bf667d7535008b37c3463480423fc60d9b734b8b37c15af0e868f53f6798d0d4)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #bf667d7535008b37c3463480423fc60d9b734b8b37c15af0e868f53f6798d0d4)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, $i1, varReplacer155)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #58ff634e28eed06c389bb2fbdbfea88ee914d956b72234efad72c536ecac8386)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithSHAAND192BITAES-CBC-BC, DESede, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithMD5ANDDES, PBEwithSHAAND128BITAES-CBC-BC, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, PBEwithMD5ANDRC2, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC}
			at statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r2, varReplacer156)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, $i1, varReplacer155)


	 in Method: java.lang.String decrypt(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d71c0ab2b28b1ba1238370407afb26e8c7386b945e3df1f861a079fe37402799)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer514, varReplacer515)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer516)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer518, $r3)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d71c0ab2b28b1ba1238370407afb26e8c7386b945e3df1f861a079fe37402799)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer514, varReplacer515)


	 in Method: java.lang.String encrypt(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #2513c8af41a9a2b81bc1fb044194e852b2ebcff305c6ac747e0892d9bf3241a2)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer521, varReplacer522)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #2513c8af41a9a2b81bc1fb044194e852b2ebcff305c6ac747e0892d9bf3241a2)
			First parameter (with value "AES") should be any of AES/{OFB, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer521, varReplacer522)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer525)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer524, $r4)


Findings in Java Class: se.accumulate.android.security.TamperValidation

	 in Method: java.lang.String createChecksum(android.content.Context)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #f2cc26c4fb1a560754b831c61a32fa764a8aecc942d9becbfab53ec17eb03497)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r3 = virtualinvoke $r10.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: se.accumulate.android.security.EncryptionEngine

	 in Method: void setAesKey(byte[],byte[],java.lang.String,java.lang.String,byte[],int,android.content.Context)
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #854c2c53d85cc1f1d433a770cd6626d09c0e1648202b2a09f3930ac485acef6b)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: $r1 = virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r15.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer361, $r20)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer355)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r15.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer356, $r10)


	 in Method: byte[] rsaEncrypt(byte[],java.security.PublicKey)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer351, $r2)


	 in Method: boolean isSignatureValid(byte[],byte[],java.security.PublicKey)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initVerify(java.security.PublicKey)>($r2)


	 in Method: byte[] calculateRfc2104Hmac(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer337)


	 in Method: void setAesKey(byte[],android.content.Context)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer340)


Findings in Java Class: se.accumulate.android.security.AppIdHandler

	 in Method: void storeAppIdentity(se.accumulate.me.core.communication.AppIdentity,se.accumulate.android.IMeContext)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r12, varReplacer253)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r13.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer255, $r5)


	 in Method: se.accumulate.me.core.communication.AppIdentity loadAppIdentity(se.accumulate.android.IMeContext,java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer238)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r15.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer239, $r8)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 60

	CogniCrypt found the following violations. For details see description above.
	TypestateError: 2
	ConstraintError: 6
	RequiredPredicateError: 18
	NeverTypeOfError: 1
	IncompleteOperationError: 1
=====================================================================