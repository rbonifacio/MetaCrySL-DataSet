Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.avg.cleaner-07C3917AFAC3A74FE24C7264A85477EFB03843B9F8F2BC1A3482EF8516DD024F.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 25d3835610df116c8d3f054724d99f7905e07400f4267757f6af4ad048311bb9
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: a174b835bb6e8b85e055455e3c62292dee48db170aff034fbce5926441c5624c
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKeyFactory
		Statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer12359)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: 6436479108f02519e2792543a4f3f1613866a87d54cf70beb0ffdd1ac2cf9fd7
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2990)
		Method: <com.squareup.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>
		SHA-256: 80966937f64b454e6c055323e8d33ae06216e4fa2785064799e25dca0f089002
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer11319)
		Method: <mp.lib.d: java.math.BigInteger b(java.lang.String)>
		SHA-256: bf491acfadffe3eecd9f7ca273a9745ae2c8f9a78862f574b45d3898470a8b8d
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.exacttarget.etpushsdk.util.m: java.lang.String b(java.lang.String)>
		SHA-256: 7a27ae3fcb22a8835c2cccb1442097f62ec8d440eacaa1ba0b380c27be480f5b
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer12348)
		Method: <com.exacttarget.etpushsdk.util.m: java.lang.String b(java.lang.String)>
		SHA-256: 743c634f6c12b802e977249e49411907ac0e4b6daab8e4173b7afab4b1bba1a8
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKey
		Statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: f7da95d0039900083d1c5bf4c9c17ba6b6f0a7c1bba0cc231e44dd229c9caa62
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r2.<javax.crypto.Mac: byte[] doFinal(byte[])>($r0)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>
		SHA-256: c6dc4131ca13a700f69eebff9cf4d4cbd1f442867ec8377fecf98f1bef3306a4
		Secure: true
	Object:
		Variable: varReplacer12367
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer12367)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: 48a418d218afe5b926bac314b98b06c84ecda5dc05fa4c4a222c3316b72b7d4f
		Secure: false
	Object:
		Variable: varReplacer12366
		Type: int
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r1, varReplacer12365, varReplacer12366)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: 7120bdf111fca464ac136f778819d96a15340422d4e00cca6ba461fd9138b83d
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.KeyPair
		Statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r7, $r9)
		Method: <com.google.android.gms.iid.zzd: java.security.KeyPair zzkk(java.lang.String)>
		SHA-256: f768922fa43b6517f5cbb7b5c0e8dff878a97528e590f1df3666b51af353f078
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: byte[] decrypt(com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$CipherTextIvMac,com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 36da9e361da26f0f9650bfcbd38588efc7fa4e7a5a1d92c4a966ccf918fc9e45
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: byte[] decrypt(com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$CipherTextIvMac,com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 197fe427bb47c7000549fc2bae1257af55f252f1907d92d197d440873bb7d19d
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.KeyPairGenerator
		Statement: $r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer17273)
		Method: <com.google.android.gms.iid.zza: java.security.KeyPair zzblv()>
		SHA-256: 20d2763e0fae1835e24b17c0c4f58fb261d71b29c86f383c82b5414121f06b72
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: $r5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer12386)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: d0532f26bf7b284247ca71bcd05369ff8d40059b67ba04f167e73d405e60dfea
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <mp.lib.d: java.math.BigInteger b(java.lang.String)>
		SHA-256: 48e8e980974f07ac338299b101f5c169c0cbcfd332640677ec09471b33bac880
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer15664)
		Method: <com.squareup.okhttp.internal.Util: f.f sha1(f.f)>
		SHA-256: de043d28f51f582a131c83658374018389d218b76505e0cf0d4ded88246bcc04
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer17211)
		Method: <com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>
		SHA-256: 14d4f4f4f953df790821d97632eaed0c25ea2b0dfaf501b26b94abbf3da89767
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: 279db3d9da58ae94c02e1ba6db8deae9057d6b5f9f4f37662fc46c910a8d6da3
		Secure: true
	Object:
		Variable: $r8
		Type: java.security.PrivateKey
		Statement: $r8 = virtualinvoke $r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <com.google.android.gms.iid.zzd: java.security.KeyPair zze(java.lang.String,long)>
		SHA-256: 4c7add4d41f06fa92bd57618e77b2df1a78eb8d44e5f363952002486d67608cc
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.KeyPair
		Statement: $r1 = virtualinvoke $r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.google.android.gms.iid.zza: java.security.KeyPair zzblv()>
		SHA-256: 112022bca94cdaa98ec8bb4e28d641de4a8f23ab1fc0b368e2d06d6a02e13c6a
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer12360)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: 2b407c3ce77b5942891bedd3ce0bc267a9a131d47a63f35f4aad3c7dcb4e96a2
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer12373)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: byte[] decrypt(com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$CipherTextIvMac,com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 399e487c9c0704c5f15b63dcaad688375cd043a8201239936f12395827807729
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer12357)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 7ec2f165851a9bf6bceabac5efa50c90f7a8c7d02652e4f2ccb9c7cc61645063
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>
		SHA-256: d877fb4dd7f0d0a4e150d0fd992249ddc9a19f0582b52e1ac77d90be8042bdc0
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer12367)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: 4184b556883f000f0d164b8585c99e41682162d37d50034c391fa735138e8279
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.squareup.okhttp.internal.Util: f.f sha1(f.f)>
		SHA-256: edbf0fb2bfe0c263fc769f68ee377a5ac04ba061b9ab95fdebb5ffc8a7b78c46
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.PublicKey
		Statement: $r5 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <com.google.android.gms.iid.zzd: java.security.KeyPair zze(java.lang.String,long)>
		SHA-256: f944777d9d8e89e0f8adf0af9c3ccd064733a31fa3f1e06304f27dc756cb592b
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r1, varReplacer12365, varReplacer12366)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: 9d370467d6170683719d89baf1f305095bbd1f59fe541de755673b0ebf581c89
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer12381)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: e02d10fe35fd898cc9f61e6ec805b6dd7965c44fb6ad84d5ea026934bff52cd
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r5.<java.security.Signature: byte[] sign()>()
		Method: <com.google.android.gms.iid.zzc: java.lang.String zza(java.security.KeyPair,java.lang.String[])>
		SHA-256: 620c3090ee39f9e0f53b404a831eb8d63671b99583b54bc50694556834220d96
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 418c2ad98edc91011d89c3be10f36bd98972111ac309f4208c409f9fb9324bc5
		Secure: false
	Object:
		Variable: varReplacer12360
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer12360)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: e43dae89c61a90f46dab7a4c81d51580d8b81b6d77558753bbbc62b8611cedbb
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Mac
		Statement: $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer12374)
		Method: <com.exacttarget.etpushsdk.util.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>
		SHA-256: f4013ecf73e6966ce3621fc56180c104393efeb8fd3420f20e59d902fadfe657
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.Signature
		Statement: $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2)
		Method: <com.google.android.gms.iid.zzc: java.lang.String zza(java.security.KeyPair,java.lang.String[])>
		SHA-256: 3d513363b6c375f87a40f665c5ec4fa58169cb093ce4df37102581b14944da3e
		Secure: false

Findings in Java Class: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity

	 in Method: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #6436479108f02519e2792543a4f3f1613866a87d54cf70beb0ffdd1ac2cf9fd7)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithSHAAND192BITAES-CBC-BC, DESede, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithMD5ANDDES, PBEwithSHAAND128BITAES-CBC-BC, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, PBEwithMD5ANDRC2, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC}
			at statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer12359)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #9d370467d6170683719d89baf1f305095bbd1f59fe541de755673b0ebf581c89)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer12367)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r1, varReplacer12365, varReplacer12366)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, varReplacer12360)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #9d370467d6170683719d89baf1f305095bbd1f59fe541de755673b0ebf581c89)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r1, varReplacer12365, varReplacer12366)


	 in Method: byte[] decrypt(com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$CipherTextIvMac,com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer12372, $r5, $r2)


	 in Method: com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.exacttarget.etpushsdk.util.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer12358, $r5, $r2)


Findings in Java Class: com.google.android.gms.iid.zzc

	 in Method: java.lang.String zza(java.security.KeyPair,java.lang.String[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke $r5.<java.security.Signature: void initSign(java.security.PrivateKey)>($r4)

		ConstraintError violating CrySL rule for java.security.Signature (on Object #3d513363b6c375f87a40f665c5ec4fa58169cb093ce4df37102581b14944da3e)
			First parameter (with value "SHA256withECDSA") should be any of {SHA1withRSA/ISO9796-2, RSASSA-PSS, SHA1withDSA, SHA256withDSA, NONEwithDSA, SHA256withRSA, DSA, SHA512withRSA, SHA384withRSA, MD5withRSA/ISO9796-2, SHA1withRSA, MD4withRSA, MD5withRSA, DSAwithSHA1}
			at statement: $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2)


Findings in Java Class: com.google.android.gms.iid.InstanceID

	 in Method: java.lang.String zza(java.security.KeyPair)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #14d4f4f4f953df790821d97632eaed0c25ea2b0dfaf501b26b94abbf3da89767)
			First parameter (with value "SHA1") should be any of {SHA-224, SHA-256, SHA-1, SHA-384, SHA-512, MD5}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer17211)


Findings in Java Class: com.squareup.okhttp.OkHttpClient

	 in Method: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2987, varReplacer2987, varReplacer2987)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2987, varReplacer2987, varReplacer2987)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 36

	CogniCrypt found the following violations. For details see description above.
	IncompleteOperationError: 1
	NeverTypeOfError: 1
	ConstraintError: 3
	RequiredPredicateError: 10
=====================================================================
