Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.calathea.clockwidget-0C66266BF1106B7EA8A397BC0E981229E0D1E1B5F0D904F11E3CFC7511AC01E2.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer5194)
		Method: <okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>
		SHA-256: 14fe8dcd84bb1d262ffea3e0c8b06f13e098306b24fa13cb98f86baa89de2dfe
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4629)
		Method: <com.calathea.clockwidget.utils.Utils: java.lang.String getSHA1(java.lang.String)>
		SHA-256: b4190bae8d23c9cc9409c7b1a8bfec4323eed2be912524f9b944e0d0c3587dd1
		Secure: true
	Object:
		Variable: r11
		Type: java.security.SecureRandom
		Statement: specialinvoke r11.<java.security.SecureRandom: void <init>()>()
		Method: <com.calathea.clockwidget.net.RemoteAgent: okhttp3.OkHttpClient getUnsafeOkHttpClient()>
		SHA-256: e546ed694bae1b13888eed129a0042f74069d873d354bff6f4749fe5804328a9
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer6264)
		Method: <com.calathea.clockwidget.utils.Utils: java.lang.String getSha256(java.lang.String)>
		SHA-256: 9bf36a6c5fd87b0018d77b6104429bc33a6ef443aba8047e904ba4c1f615eafd
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.calathea.clockwidget.utils.Utils: java.lang.String getSha256(java.lang.String)>
		SHA-256: 61445fe378c4ea7fb0f47896e24b2b9380951c6fecb2d5607a919b56722b7858
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>
		SHA-256: 35b0119aad99960d8bec3a1c0a0d18ad4ede33706412ee7d9291554433d85f77
		Secure: true
	Object:
		Variable: $r17
		Type: javax.net.ssl.SSLContext
		Statement: $r17 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3425)
		Method: <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>
		SHA-256: d852b6929aace22ece0aacaa1ca60927a658e58bcb1eeb2a19ad898043adb8fc
		Secure: false
	Object:
		Variable: $r5
		Type: javax.net.ssl.SSLContext
		Statement: $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3650)
		Method: <com.calathea.clockwidget.net.RemoteAgent: okhttp3.OkHttpClient getUnsafeOkHttpClient()>
		SHA-256: ab49597e78dbd0044636d851bdad13f1b1dc381c3f65836508599b7ad6134877
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.calathea.clockwidget.utils.Utils: java.lang.String getSHA1(java.lang.String)>
		SHA-256: a08359b613d2fb83e028321ac84e4f559f4b853d299d032d5f914f5c31ff79b2
		Secure: true

Findings in Java Class: com.calathea.clockwidget.net.RemoteAgent

	 in Method: okhttp3.OkHttpClient getUnsafeOkHttpClient()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3647, r15, $r6)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #ab49597e78dbd0044636d851bdad13f1b1dc381c3f65836508599b7ad6134877)
			First parameter (with value "SSL") should be any of {TLS}
			at statement: $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3650)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3647, r15, $r6)


Findings in Java Class: okhttp3.OkHttpClient

	 in Method: void <init>(okhttp3.OkHttpClient$Builder)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r17.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3426, varReplacer3426, varReplacer3426)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r17.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3426, varReplacer3426, varReplacer3426)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 9

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 1
	RequiredPredicateError: 4
=====================================================================
