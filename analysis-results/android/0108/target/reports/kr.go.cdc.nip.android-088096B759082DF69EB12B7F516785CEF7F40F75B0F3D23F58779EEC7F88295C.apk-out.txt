Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/kr.go.cdc.nip.android-088096B759082DF69EB12B7F516785CEF7F40F75B0F3D23F58779EEC7F88295C.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Alive 28012  5000
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: $r6 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer2056)
		Method: <com.lumensoft.icrp.a: java.util.Hashtable a()>
		SHA-256: a8c403b0a7870e19dace3ce62795b1f12c861b4c0f4994288f69ff865dd907c
		Secure: true
	Object:
		Variable: r28
		Type: java.security.SecureRandom
		Statement: specialinvoke r28.<java.security.SecureRandom: void <init>()>()
		Method: <com.bitdefender.antimalware.Updater: byte[] e(java.lang.String)>
		SHA-256: a742abf8abad14f6fd2bf21ae33fa2084e244ec7fb479a6cb7036d5d103bd48e
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String I(java.lang.String)>
		SHA-256: 72dbaaff5cd171f6096b90c419e52d21ed5803121b79335a7ec8d5f696320c7a
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <com.softsecurity.transkey.TransKeyCipher: void generateSecureKey()>
		SHA-256: 3afd84bc236f30a8929ad47eea0b5b836525dcc20b957fde6749e0facc06014b
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String e(java.lang.String)>
		SHA-256: 17ce4da22a78ec74e0b21d7c43dcffae48a35106c4cd53f59c6ac7f87d0616b4
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2651)
		Method: <kr.go.cdc.nip.android.GlSurfaceView: void trustAllHosts()>
		SHA-256: b12bb531f46201c825efe3cdc48151f2b11af8a0f256434d796ec008bcaef32f
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2904)
		Method: <kr.go.cdc.nip.android.WebViewImageUploadHelper: void trustAllHosts()>
		SHA-256: ef9741288620b2193f5e3c7a6835c68ec5e6c80fbcac463c5ae224558e55be04
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.SecureRandom
		Statement: $r11 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r6)
		Method: <com.softsecurity.transkey.TransKeyView: void setIntentData(android.content.Intent)>
		SHA-256: ba03d9964f16ea3fac63ae366c88663ffc9f221e3d0257c0f5d7ab05c238bfe7
		Secure: true
	Object:
		Variable: $r7
		Type: byte[]
		Statement: virtualinvoke $r0.<javax.crypto.Mac: void doFinal(byte[],int)>($r7, varReplacer5689)
		Method: <com.softsecurity.transkey.a.o: void J(javax.crypto.Mac,byte[],int,byte[],int)>
		SHA-256: 8890a2dc358daec16612e15d742689a3e99383174f1c6ca473ea7ec48ee06eeb
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r0)
		Method: <com.softsecurity.transkey.a.o: byte[] J(java.lang.String,byte[],byte[],int,int)>
		SHA-256: aceaf5b41d15acd537b56774a7f8d54002487bb6a724a3336935b6d360c49315
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String I(java.lang.String)>
		SHA-256: 6654894e9b4bf4fac3060300b5052745687a89347b52e95e013848af6ed1181b
		Secure: true
	Object:
		Variable: r7
		Type: java.security.SecureRandom
		Statement: specialinvoke r7.<java.security.SecureRandom: void <init>()>()
		Method: <kr.go.cdc.nip.android.WebViewImageUploadHelper: void trustAllHosts()>
		SHA-256: 1b3d04157d934dccec33c90e960729e42dd98f932dacf9715c99497e5625a231
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: $r4 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r3)
		Method: <com.softsecurity.transkey.TransKeyCipher: void generateSecureKey()>
		SHA-256: 1213fed018ac628b7eccb245067487aa19c81713c13b6cce857bf1c2fc51f7bb
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r4.<java.security.SecureRandom: byte[] generateSeed(int)>(varReplacer5594)
		Method: <com.softsecurity.transkey.TransKeyCipher: void generateSecureKey()>
		SHA-256: 674f37102f644d5667846b10cfbbea8b383120ba8b423c459e9b8f500412b2e3
		Secure: true
	Object:
		Variable: $r12
		Type: byte[]
		Statement: virtualinvoke $r11.<java.security.SecureRandom: void nextBytes(byte[])>($r12)
		Method: <com.softsecurity.transkey.TransKeyView: void setIntentData(android.content.Intent)>
		SHA-256: 146c51930857392d8b71c69d1567da9d04a63533d70bce3c35d1a70da189b382
		Secure: true
	Object:
		Variable: $r8
		Type: java.security.MessageDigest
		Statement: $r8 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <com.secureland.smartmedic.CheckIntegrity: java.lang.String e(java.lang.String)>
		SHA-256: 6c85030e9525d9e9361c634d07e89777353d9a588304e9f9f791c0b9028b8b48
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Mac
		Statement: $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r0)
		Method: <com.softsecurity.transkey.a.o: byte[] J(java.lang.String,byte[],byte[],int,int)>
		SHA-256: ff64d1436c65c7a02e9c948275c7c8339205f223385af4ffc9c4455e5b5f097e
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r5.<java.security.SecureRandom: byte[] generateSeed(int)>(varReplacer2053)
		Method: <com.lumensoft.icrp.a: java.util.Hashtable a()>
		SHA-256: 3cee60b3767d3c13cfa22c3c8ae897d7934d82ffe5d99789befccb461ecd58c1
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.bitdefender.antimalware.Updater: java.lang.String anyValidIdentifierName(java.security.MessageDigest)>
		SHA-256: e6faf7a803844f5fc4d565b419af6c01480df29a092ad30893fac0fc401ddb25
		Secure: true
	Object:
		Variable: r7
		Type: java.security.SecureRandom
		Statement: specialinvoke r7.<java.security.SecureRandom: void <init>()>()
		Method: <kr.go.cdc.nip.android.GlSurfaceView: void trustAllHosts()>
		SHA-256: f4c0f9abe5f82a304790c8e8ce3b36b51092bb48cc19a3295d37d5b3aa72a074
		Secure: true
	Object:
		Variable: $r5
		Type: javax.net.ssl.SSLContext
		Statement: $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r1)
		Method: <com.bitdefender.antimalware.Updater: byte[] e(java.lang.String)>
		SHA-256: 3e752792447720b134fa8d25cbdb7a33e6c31cfea8567bcd63dea429fe05f2df
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: $r5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r4)
		Method: <com.softsecurity.transkey.KeypadView: void J(android.content.Context)>
		SHA-256: 84d4080505f3e525109e868f4285ece887935cef894931e5da8b79a73a98cedb
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.bitdefender.antimalware.Updater: java.security.MessageDigest anyValidIdentifierName()>
		SHA-256: 5ebac59f7c96b26733d86d8465dc9e75def047aba08380f8cc98b6ac0589ef7c
		Secure: false
	Object:
		Variable: $r0
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r0)
		Method: <com.softsecurity.transkey.a.o: byte[] J(java.lang.String,byte[],byte[],int,int)>
		SHA-256: 318571b4848d73b0187aa97a3891f915a6310bec42d0b154cd1e52ea84924dc0
		Secure: false

Findings in Java Class: com.secureland.smartmedic.CheckIntegrity

	 in Method: java.lang.String e(java.lang.String)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #6c85030e9525d9e9361c634d07e89777353d9a588304e9f9f791c0b9028b8b48)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r2 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.bitdefender.antimalware.Updater

	 in Method: java.lang.String anyValidIdentifierName(java.security.MessageDigest)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #5ebac59f7c96b26733d86d8465dc9e75def047aba08380f8cc98b6ac0589ef7c)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()


	 in Method: byte[] e(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3730, r32, $r7)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3730, r32, $r7)


Findings in Java Class: com.softsecurity.transkey.a.o

	 in Method: void J(javax.crypto.Mac,byte[],int,byte[],int)
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Mac
			Constraint length(output1) + 0 > outOffset + 0 could not be evaluted due to insufficient information.
			at statement: virtualinvoke $r0.<javax.crypto.Mac: void doFinal(byte[],int)>($r7, varReplacer5693)

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #ff64d1436c65c7a02e9c948275c7c8339205f223385af4ffc9c4455e5b5f097e)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke $r0.<javax.crypto.Mac: void update(byte[])>($r7)

		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #ff64d1436c65c7a02e9c948275c7c8339205f223385af4ffc9c4455e5b5f097e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: $i3 = virtualinvoke $r0.<javax.crypto.Mac: int getMacLength()>()

		TypestateError violating CrySL rule for javax.crypto.Mac (on Object #ff64d1436c65c7a02e9c948275c7c8339205f223385af4ffc9c4455e5b5f097e)
			Unexpected call to method update on object of type javax.crypto.Mac.
			at statement: virtualinvoke $r0.<javax.crypto.Mac: void update(byte[])>($r4)


	 in Method: byte[] J(java.lang.String,byte[],byte[],int,int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Mac (on Object #ff64d1436c65c7a02e9c948275c7c8339205f223385af4ffc9c4455e5b5f097e)
			Operation on object of type javax.crypto.Mac object not completed. Expected call to update, doFinal
			at statement: staticinvoke <com.softsecurity.transkey.a.o: void J(javax.crypto.Mac,byte[],int,byte[],int)>($r3, $r2, varReplacer5687, $r1, varReplacer5688)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r0)


Findings in Java Class: kr.go.cdc.nip.android.GlSurfaceView

	 in Method: void trustAllHosts()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2652, r8, $r3)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2652, r8, $r3)


Findings in Java Class: kr.go.cdc.nip.android.WebViewImageUploadHelper

	 in Method: void trustAllHosts()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2905, r8, $r3)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2905, r8, $r3)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 24

	CogniCrypt found the following violations. For details see description above.
	IncompleteOperationError: 2
	TypestateError: 4
	ImpreciseValueExtractionError: 1
	RequiredPredicateError: 7
=====================================================================
