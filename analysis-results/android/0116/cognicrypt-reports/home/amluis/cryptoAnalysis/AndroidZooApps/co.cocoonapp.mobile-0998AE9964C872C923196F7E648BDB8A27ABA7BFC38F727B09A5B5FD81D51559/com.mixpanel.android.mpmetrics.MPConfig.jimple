public class com.mixpanel.android.mpmetrics.MPConfig extends java.lang.Object
{
    public static boolean DEBUG;
    private static final java.lang.String LOGTAG;
    static final int MAX_NOTIFICATION_CACHE_COUNT;
    static final java.lang.String REFERRER_PREFS_NAME;
    public static final int UI_FEATURES_MIN_API;
    public static final java.lang.String VERSION;
    private static com.mixpanel.android.mpmetrics.MPConfig sInstance;
    private static final java.lang.Object sInstanceLock;
    private final boolean mAutoShowMixpanelUpdates;
    private final int mBulkUploadLimit;
    private final int mDataExpiration;
    private final java.lang.String mDecideEndpoint;
    private final java.lang.String mDecideFallbackEndpoint;
    private final boolean mDisableAppOpenEvent;
    private final boolean mDisableDecideChecker;
    private final boolean mDisableEmulatorBindingUI;
    private final boolean mDisableFallback;
    private final boolean mDisableGestureBindingUI;
    private final boolean mDisableViewCrawler;
    private final java.lang.String[] mDisableViewCrawlerForProjects;
    private final java.lang.String mEditorUrl;
    private final java.lang.String mEventsEndpoint;
    private final java.lang.String mEventsFallbackEndpoint;
    private final int mFlushInterval;
    private final int mImageCacheMaxMemoryFactor;
    private final int mMinimumDatabaseLimit;
    private com.mixpanel.android.util.OfflineMode mOfflineMode;
    private final java.lang.String mPeopleEndpoint;
    private final java.lang.String mPeopleFallbackEndpoint;
    private final java.lang.String mResourcePackageName;
    private javax.net.ssl.SSLSocketFactory mSSLSocketFactory;
    private final boolean mTestMode;

    static void <clinit>()
    {
        java.lang.Object $r0;
        int varReplacer1140;

        nop;

        varReplacer1140 = 0;

        <com.mixpanel.android.mpmetrics.MPConfig: boolean DEBUG> = varReplacer1140;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.mixpanel.android.mpmetrics.MPConfig: java.lang.Object sInstanceLock> = $r0;

        return;
    }

    void <init>(android.os.Bundle, android.content.Context)
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        android.os.Bundle $r1;
        android.content.Context $r2;
        java.lang.Throwable $r3;
        javax.net.ssl.SSLContext $r4;
        javax.net.ssl.SSLSocketFactory $r5;
        boolean $z0, $z1;
        int $i0, varReplacer1145, varReplacer1148, varReplacer1154, varReplacer1160, varReplacer1167, varReplacer1170, varReplacer1172, varReplacer1176, varReplacer1181, varReplacer1183, varReplacer1188, varReplacer1195, varReplacer1202, varReplacer1204, varReplacer1215, varReplacer1217;
        java.lang.String $r6, $r7, varReplacer1144, varReplacer1146, varReplacer1147, varReplacer1149, varReplacer1150, varReplacer1151, varReplacer1152, varReplacer1153, varReplacer1155, varReplacer1156, varReplacer1157, varReplacer1158, varReplacer1159, varReplacer1161, varReplacer1162, varReplacer1166, varReplacer1168, varReplacer1169, varReplacer1171, varReplacer1173, varReplacer1174, varReplacer1175, varReplacer1177, varReplacer1178, varReplacer1179, varReplacer1180, varReplacer1182, varReplacer1184, varReplacer1185, varReplacer1186, varReplacer1187, varReplacer1189, varReplacer1190, varReplacer1191, varReplacer1192, varReplacer1193, varReplacer1194, varReplacer1196, varReplacer1197, varReplacer1198, varReplacer1199, varReplacer1200, varReplacer1201, varReplacer1203, varReplacer1205, varReplacer1206, varReplacer1207, varReplacer1208, varReplacer1209, varReplacer1210, varReplacer1211, varReplacer1212, varReplacer1213, varReplacer1214, varReplacer1216;
        android.content.res.Resources $r8;
        java.lang.String[] $r9;
        java.lang.StringBuilder $r10;
        null_type varReplacer1163, varReplacer1164, varReplacer1165;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        $r1 := @parameter0: android.os.Bundle;

        $r2 := @parameter1: android.content.Context;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

     label01:
        varReplacer1189 = "TLS";

        $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1189);

        varReplacer1163 = null;

        varReplacer1164 = null;

        varReplacer1165 = null;

        virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1163, varReplacer1163, varReplacer1163);

        $r5 = virtualinvoke $r4.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label02:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: javax.net.ssl.SSLSocketFactory mSSLSocketFactory> = $r5;

        varReplacer1182 = "com.mixpanel.android.MPConfig.EnableDebugLogging";

        varReplacer1183 = 0;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1182, varReplacer1183);

        <com.mixpanel.android.mpmetrics.MPConfig: boolean DEBUG> = $z0;

        varReplacer1150 = "com.mixpanel.android.MPConfig.AutoCheckForSurveys";

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean containsKey(java.lang.String)>(varReplacer1150);

        if $z0 == 0 goto label03;

        varReplacer1207 = "MixpanelAPI.Conf";

        varReplacer1208 = "com.mixpanel.android.MPConfig.AutoCheckForSurveys has been deprecated in favor of com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates. Please update this key as soon as possible.";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(varReplacer1207, varReplacer1208);

     label03:
        varReplacer1209 = "com.mixpanel.android.MPConfig.DebugFlushInterval";

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean containsKey(java.lang.String)>(varReplacer1209);

        if $z0 == 0 goto label04;

        varReplacer1199 = "MixpanelAPI.Conf";

        varReplacer1200 = "We do not support com.mixpanel.android.MPConfig.DebugFlushInterval anymore. There will only be one flush interval. Please, update your AndroidManifest.xml.";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(varReplacer1199, varReplacer1200);

     label04:
        varReplacer1175 = "com.mixpanel.android.MPConfig.BulkUploadLimit";

        varReplacer1176 = 40;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>(varReplacer1175, varReplacer1176);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mBulkUploadLimit> = $i0;

        varReplacer1171 = "com.mixpanel.android.MPConfig.FlushInterval";

        varReplacer1172 = 60000;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>(varReplacer1171, varReplacer1172);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mFlushInterval> = $i0;

        varReplacer1147 = "com.mixpanel.android.MPConfig.DataExpiration";

        varReplacer1148 = 432000000;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>(varReplacer1147, varReplacer1148);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mDataExpiration> = $i0;

        varReplacer1194 = "com.mixpanel.android.MPConfig.MinimumDatabaseLimit";

        varReplacer1195 = 20971520;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>(varReplacer1194, varReplacer1195);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mMinimumDatabaseLimit> = $i0;

        varReplacer1214 = "com.mixpanel.android.MPConfig.DisableFallback";

        varReplacer1215 = 1;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1214, varReplacer1215);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableFallback> = $z0;

        varReplacer1205 = "com.mixpanel.android.MPConfig.ResourcePackageName";

        $r6 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(varReplacer1205);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mResourcePackageName> = $r6;

        varReplacer1153 = "com.mixpanel.android.MPConfig.DisableGestureBindingUI";

        varReplacer1154 = 0;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1153, varReplacer1154);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableGestureBindingUI> = $z0;

        varReplacer1216 = "com.mixpanel.android.MPConfig.DisableEmulatorBindingUI";

        varReplacer1217 = 0;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1216, varReplacer1217);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableEmulatorBindingUI> = $z0;

        varReplacer1203 = "com.mixpanel.android.MPConfig.DisableAppOpenEvent";

        varReplacer1204 = 1;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1203, varReplacer1204);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableAppOpenEvent> = $z0;

        varReplacer1180 = "com.mixpanel.android.MPConfig.DisableViewCrawler";

        varReplacer1181 = 0;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1180, varReplacer1181);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableViewCrawler> = $z0;

        varReplacer1159 = "com.mixpanel.android.MPConfig.DisableDecideChecker";

        varReplacer1160 = 0;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1159, varReplacer1160);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableDecideChecker> = $z0;

        varReplacer1187 = "com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor";

        varReplacer1188 = 10;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>(varReplacer1187, varReplacer1188);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mImageCacheMaxMemoryFactor> = $i0;

        varReplacer1166 = "com.mixpanel.android.MPConfig.AutoCheckForSurveys";

        varReplacer1167 = 1;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1166, varReplacer1167);

        varReplacer1144 = "com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates";

        varReplacer1145 = 1;

        $z1 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1144, varReplacer1145);

        if $z0 == 0 goto label15;

        if $z1 == 0 goto label15;

        $z0 = 1;

     label05:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mAutoShowMixpanelUpdates> = $z0;

        varReplacer1169 = "com.mixpanel.android.MPConfig.TestMode";

        varReplacer1170 = 0;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(varReplacer1169, varReplacer1170);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mTestMode> = $z0;

        varReplacer1198 = "com.mixpanel.android.MPConfig.EventsEndpoint";

        $r6 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(varReplacer1198);

        $r7 = $r6;

        if $r6 != null goto label06;

        $r7 = "https://api.mixpanel.com/track?ip=1";

     label06:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mEventsEndpoint> = $r7;

        varReplacer1206 = "com.mixpanel.android.MPConfig.EventsFallbackEndpoint";

        $r6 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(varReplacer1206);

        $r7 = $r6;

        if $r6 != null goto label07;

        $r7 = "http://api.mixpanel.com/track?ip=1";

     label07:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mEventsFallbackEndpoint> = $r7;

        varReplacer1149 = "com.mixpanel.android.MPConfig.PeopleEndpoint";

        $r6 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(varReplacer1149);

        $r7 = $r6;

        if $r6 != null goto label08;

        $r7 = "https://api.mixpanel.com/engage";

     label08:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mPeopleEndpoint> = $r7;

        varReplacer1191 = "com.mixpanel.android.MPConfig.PeopleFallbackEndpoint";

        $r6 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(varReplacer1191);

        $r7 = $r6;

        if $r6 != null goto label09;

        $r7 = "http://api.mixpanel.com/engage";

     label09:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mPeopleFallbackEndpoint> = $r7;

        varReplacer1161 = "com.mixpanel.android.MPConfig.DecideEndpoint";

        $r6 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(varReplacer1161);

        $r7 = $r6;

        if $r6 != null goto label10;

        $r7 = "https://decide.mixpanel.com/decide";

     label10:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mDecideEndpoint> = $r7;

        varReplacer1173 = "com.mixpanel.android.MPConfig.DecideFallbackEndpoint";

        $r6 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(varReplacer1173);

        $r7 = $r6;

        if $r6 != null goto label11;

        $r7 = "http://decide.mixpanel.com/decide";

     label11:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mDecideFallbackEndpoint> = $r7;

        varReplacer1162 = "com.mixpanel.android.MPConfig.EditorUrl";

        $r6 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(varReplacer1162);

        $r7 = $r6;

        if $r6 != null goto label12;

        $r7 = "wss://switchboard.mixpanel.com/connect/";

     label12:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mEditorUrl> = $r7;

        varReplacer1201 = "com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects";

        varReplacer1202 = -1;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>(varReplacer1201, varReplacer1202);

        if $i0 == -1 goto label16;

        $r8 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r9 = virtualinvoke $r8.<android.content.res.Resources: java.lang.String[] getStringArray(int)>($i0);

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String[] mDisableViewCrawlerForProjects> = $r9;

     label13:
        $z0 = <com.mixpanel.android.mpmetrics.MPConfig: boolean DEBUG>;

        if $z0 == 0 goto label17;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        varReplacer1192 = "Mixpanel (4.9.2) configured with:\n    AutoShowMixpanelUpdates ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1192);

        $z0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean getAutoShowMixpanelUpdates()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer1196 = "\n    BulkUploadLimit ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1196);

        $i0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: int getBulkUploadLimit()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer1184 = "\n    FlushInterval ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1184);

        $i0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: int getFlushInterval()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer1190 = "\n    DataExpiration ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1190);

        $i0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: int getDataExpiration()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer1174 = "\n    MinimumDatabaseLimit ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1174);

        $i0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: int getMinimumDatabaseLimit()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer1211 = "\n    DisableFallback ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1211);

        $z0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean getDisableFallback()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer1212 = "\n    DisableAppOpenEvent ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1212);

        $z0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean getDisableAppOpenEvent()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer1156 = "\n    DisableViewCrawler ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1156);

        $z0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean getDisableViewCrawler()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer1210 = "\n    DisableDeviceUIBinding ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1210);

        $z0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean getDisableGestureBindingUI()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer1177 = "\n    DisableEmulatorUIBinding ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1177);

        $z0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean getDisableEmulatorBindingUI()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer1213 = "\n    EnableDebugLogging ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1213);

        $z0 = <com.mixpanel.android.mpmetrics.MPConfig: boolean DEBUG>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer1168 = "\n    TestMode ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1168);

        $z0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean getTestMode()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer1185 = "\n    EventsEndpoint ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1185);

        $r6 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String getEventsEndpoint()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer1179 = "\n    PeopleEndpoint ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1179);

        $r6 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String getPeopleEndpoint()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer1197 = "\n    DecideEndpoint ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1197);

        $r6 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String getDecideEndpoint()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer1193 = "\n    EventsFallbackEndpoint ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1193);

        $r6 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String getEventsFallbackEndpoint()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer1178 = "\n    PeopleFallbackEndpoint ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1178);

        $r6 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String getPeopleFallbackEndpoint()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer1146 = "\n    DecideFallbackEndpoint ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1146);

        $r6 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String getDecideFallbackEndpoint()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer1155 = "\n    EditorUrl ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1155);

        $r6 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String getEditorUrl()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer1186 = "\n    DisableDecideChecker ";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1186);

        $z0 = virtualinvoke $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean getDisableDecideChecker()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer1152 = "\n";

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1152);

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer1151 = "MixpanelAPI.Conf";

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(varReplacer1151, $r6);

        return;

     label14:
        $r3 := @caughtexception;

        varReplacer1157 = "MixpanelAPI.Conf";

        varReplacer1158 = "System has no SSL support. Built-in events editor will not be available";

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>(varReplacer1157, varReplacer1158, $r3);

        $r5 = null;

        goto label02;

     label15:
        $z0 = 0;

        goto label05;

     label16:
        $r9 = newarray (java.lang.String)[0];

        $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String[] mDisableViewCrawlerForProjects> = $r9;

        goto label13;

     label17:
        return;

        catch java.security.GeneralSecurityException from label01 to label02 with label14;
    }

    public static com.mixpanel.android.mpmetrics.MPConfig getInstance(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Object $r1;
        com.mixpanel.android.mpmetrics.MPConfig $r2;
        java.lang.Throwable $r3;

        nop;

        $r0 := @parameter0: android.content.Context;

        $r1 = <com.mixpanel.android.mpmetrics.MPConfig: java.lang.Object sInstanceLock>;

        entermonitor $r1;

     label1:
        $r2 = <com.mixpanel.android.mpmetrics.MPConfig: com.mixpanel.android.mpmetrics.MPConfig sInstance>;

        if $r2 != null goto label2;

        $r0 = virtualinvoke $r0.<android.content.Context: android.content.Context getApplicationContext()>();

        $r2 = staticinvoke <com.mixpanel.android.mpmetrics.MPConfig: com.mixpanel.android.mpmetrics.MPConfig readConfig(android.content.Context)>($r0);

        <com.mixpanel.android.mpmetrics.MPConfig: com.mixpanel.android.mpmetrics.MPConfig sInstance> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = <com.mixpanel.android.mpmetrics.MPConfig: com.mixpanel.android.mpmetrics.MPConfig sInstance>;

        return $r2;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static com.mixpanel.android.mpmetrics.MPConfig readConfig(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Throwable $r1;
        java.lang.String $r2, varReplacer1141;
        android.content.pm.PackageManager $r3;
        android.content.pm.ApplicationInfo $r4;
        android.os.Bundle $r5;
        com.mixpanel.android.mpmetrics.MPConfig $r6;
        java.lang.RuntimeException $r7;
        java.lang.StringBuilder $r8;
        int varReplacer1142;

        nop;

        $r0 := @parameter0: android.content.Context;

        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        $r3 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        varReplacer1142 = 128;

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r2, varReplacer1142);

     label2:
        $r5 = $r4.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        if $r5 != null goto label4;

        $r5 = new android.os.Bundle;

     label3:
        specialinvoke $r5.<android.os.Bundle: void <init>()>();

     label4:
        $r6 = new com.mixpanel.android.mpmetrics.MPConfig;

     label5:
        specialinvoke $r6.<com.mixpanel.android.mpmetrics.MPConfig: void <init>(android.os.Bundle,android.content.Context)>($r5, $r0);

     label6:
        return $r6;

     label7:
        $r1 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        varReplacer1141 = "Can\'t configure Mixpanel with package name ";

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1141);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r1);

        throw $r7;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label7;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label7;
        catch android.content.pm.PackageManager$NameNotFoundException from label5 to label6 with label7;
    }

    public boolean getAutoShowMixpanelUpdates()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        boolean z0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        z0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mAutoShowMixpanelUpdates>;

        return z0;
    }

    public int getBulkUploadLimit()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        int i0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        i0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mBulkUploadLimit>;

        return i0;
    }

    public int getDataExpiration()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        int i0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        i0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mDataExpiration>;

        return i0;
    }

    public java.lang.String getDecideEndpoint()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        r1 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mDecideEndpoint>;

        return r1;
    }

    public java.lang.String getDecideFallbackEndpoint()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        r1 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mDecideFallbackEndpoint>;

        return r1;
    }

    public boolean getDisableAppOpenEvent()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        boolean z0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        z0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableAppOpenEvent>;

        return z0;
    }

    public boolean getDisableDecideChecker()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        boolean z0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        z0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableDecideChecker>;

        return z0;
    }

    public boolean getDisableEmulatorBindingUI()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        boolean z0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        z0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableEmulatorBindingUI>;

        return z0;
    }

    public boolean getDisableFallback()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        boolean z0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        z0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableFallback>;

        return z0;
    }

    public boolean getDisableGestureBindingUI()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        boolean z0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        z0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableGestureBindingUI>;

        return z0;
    }

    public boolean getDisableViewCrawler()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        boolean z0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        z0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mDisableViewCrawler>;

        return z0;
    }

    public java.lang.String[] getDisableViewCrawlerForProjects()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.String[] r1;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        r1 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String[] mDisableViewCrawlerForProjects>;

        return r1;
    }

    public java.lang.String getEditorUrl()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        r1 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mEditorUrl>;

        return r1;
    }

    public java.lang.String getEventsEndpoint()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        r1 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mEventsEndpoint>;

        return r1;
    }

    public java.lang.String getEventsFallbackEndpoint()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        r1 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mEventsFallbackEndpoint>;

        return r1;
    }

    public int getFlushInterval()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        int i0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        i0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mFlushInterval>;

        return i0;
    }

    public int getImageCacheMaxMemoryFactor()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        int i0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        i0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mImageCacheMaxMemoryFactor>;

        return i0;
    }

    public int getMinimumDatabaseLimit()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        int i0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        i0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: int mMinimumDatabaseLimit>;

        return i0;
    }

    public com.mixpanel.android.util.OfflineMode getOfflineMode()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.Throwable $r1;
        com.mixpanel.android.util.OfflineMode r2;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        entermonitor $r0;

     label1:
        r2 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: com.mixpanel.android.util.OfflineMode mOfflineMode>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getPeopleEndpoint()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        r1 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mPeopleEndpoint>;

        return r1;
    }

    public java.lang.String getPeopleFallbackEndpoint()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        r1 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mPeopleFallbackEndpoint>;

        return r1;
    }

    public java.lang.String getResourcePackageName()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        r1 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: java.lang.String mResourcePackageName>;

        return r1;
    }

    public javax.net.ssl.SSLSocketFactory getSSLSocketFactory()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        java.lang.Throwable $r1;
        javax.net.ssl.SSLSocketFactory r2;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        entermonitor $r0;

     label1:
        r2 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: javax.net.ssl.SSLSocketFactory mSSLSocketFactory>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getTestMode()
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        boolean z0;

        nop;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        z0 = $r0.<com.mixpanel.android.mpmetrics.MPConfig: boolean mTestMode>;

        return z0;
    }

    public void setOfflineMode(com.mixpanel.android.util.OfflineMode)
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        com.mixpanel.android.util.OfflineMode $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        $r1 := @parameter0: com.mixpanel.android.util.OfflineMode;

        entermonitor $r0;

     label1:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: com.mixpanel.android.util.OfflineMode mOfflineMode> = $r1;

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)
    {
        com.mixpanel.android.mpmetrics.MPConfig $r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.mixpanel.android.mpmetrics.MPConfig;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        entermonitor $r0;

     label1:
        $r0.<com.mixpanel.android.mpmetrics.MPConfig: javax.net.ssl.SSLSocketFactory mSSLSocketFactory> = $r1;

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
