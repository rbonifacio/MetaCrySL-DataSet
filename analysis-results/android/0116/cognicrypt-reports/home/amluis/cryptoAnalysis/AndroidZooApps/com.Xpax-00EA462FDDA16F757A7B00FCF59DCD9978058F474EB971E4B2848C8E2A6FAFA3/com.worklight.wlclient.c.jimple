public class com.worklight.wlclient.c extends java.lang.Object
{
    private static com.worklight.wlclient.c a;
    private static com.worklight.common.a g;
    private org.apache.http.impl.client.DefaultHttpClient b;
    private org.apache.http.impl.client.DefaultHttpClient c;
    private org.apache.http.protocol.HttpContext d;
    private java.lang.String e;
    private com.worklight.wlclient.b.b f;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        com.worklight.common.a $r2;

        nop;

        $r0 = class "Lcom/worklight/wlclient/c;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <com.worklight.common.a: com.worklight.common.a a(java.lang.String)>($r1);

        <com.worklight.wlclient.c: com.worklight.common.a g> = $r2;

        return;
    }

    private void <init>(android.content.Context)
    {
        com.worklight.wlclient.c $r0;
        android.content.Context $r1;
        com.worklight.wlclient.b.b $r2, r27;
        org.apache.http.params.BasicHttpParams $r3, r28;
        org.apache.http.conn.scheme.SchemeRegistry $r4, r29;
        com.worklight.common.d $r5;
        java.lang.String $r6, $r7, varReplacer466, varReplacer467, varReplacer468, varReplacer469, varReplacer470, varReplacer471, varReplacer474, varReplacer477, varReplacer479, varReplacer481, varReplacer482, varReplacer485, varReplacer486, varReplacer487, varReplacer488;
        java.lang.Integer $r8;
        boolean $z0;
        org.apache.http.conn.scheme.Scheme $r9, r30;
        org.apache.http.conn.scheme.PlainSocketFactory $r10;
        java.security.KeyStore $r11;
        com.worklight.wlclient.e $r12, r31;
        org.apache.http.conn.ssl.X509HostnameVerifier $r13;
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager $r14, r32;
        org.apache.http.impl.client.DefaultHttpClient $r15, r33;
        org.apache.http.protocol.HttpContext $r16;
        org.apache.http.client.CookieStore $r17;
        java.lang.StringBuilder $r18, r37;
        com.worklight.common.a $r19;
        com.worklight.wlclient.i $r20, r38;
        java.lang.NoClassDefFoundError $r21;
        java.lang.Throwable $r22, $r23, $r24, $r25;
        org.apache.http.conn.ssl.StrictHostnameVerifier r26;
        com.worklight.wlclient.l r34;
        com.worklight.wlclient.q r35;
        org.apache.http.protocol.BasicHttpContext r36;
        java.lang.RuntimeException r39;
        org.apache.http.params.HttpParams r40;
        org.apache.http.conn.scheme.SocketFactory r41;
        org.apache.http.client.RedirectHandler r42;
        int varReplacer472, varReplacer473, varReplacer475, varReplacer476, varReplacer478, varReplacer480, varReplacer483, varReplacer484;

        nop;

        $r0 := @this: com.worklight.wlclient.c;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r27 = new com.worklight.wlclient.b.b;

        r26 = new org.apache.http.conn.ssl.StrictHostnameVerifier;

        specialinvoke r26.<org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>();

        specialinvoke r27.<com.worklight.wlclient.b.b: void <init>(org.apache.http.conn.ssl.X509HostnameVerifier)>(r26);

        $r0.<com.worklight.wlclient.c: com.worklight.wlclient.b.b f> = r27;

        r28 = new org.apache.http.params.BasicHttpParams;

        $r3 = r28;

        specialinvoke r28.<org.apache.http.params.BasicHttpParams: void <init>()>();

        r40 = (org.apache.http.params.HttpParams) $r3;

        varReplacer472 = 0;

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>(r40, varReplacer472);

        r40 = (org.apache.http.params.HttpParams) $r3;

        varReplacer483 = 60000;

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>(r40, varReplacer483);

        r40 = (org.apache.http.params.HttpParams) $r3;

        varReplacer476 = 60000;

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>(r40, varReplacer476);

        r40 = (org.apache.http.params.HttpParams) $r3;

        varReplacer484 = 8192;

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>(r40, varReplacer484);

        r40 = (org.apache.http.params.HttpParams) $r3;

        varReplacer473 = 1;

        staticinvoke <org.apache.http.client.params.HttpClientParams: void setRedirecting(org.apache.http.params.HttpParams,boolean)>(r40, varReplacer473);

        r40 = (org.apache.http.params.HttpParams) $r3;

        varReplacer478 = 0;

        staticinvoke <org.apache.http.client.params.HttpClientParams: void setAuthenticating(org.apache.http.params.HttpParams,boolean)>(r40, varReplacer478);

        r29 = new org.apache.http.conn.scheme.SchemeRegistry;

        $r4 = r29;

        specialinvoke r29.<org.apache.http.conn.scheme.SchemeRegistry: void <init>()>();

        $r5 = staticinvoke <com.worklight.common.d: com.worklight.common.d a()>();

        $r6 = virtualinvoke $r5.<com.worklight.common.d: java.lang.String s()>();

        $r5 = staticinvoke <com.worklight.common.d: com.worklight.common.d a()>();

        $r7 = virtualinvoke $r5.<com.worklight.common.d: java.lang.String u()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r7);

        virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        varReplacer467 = "http";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(varReplacer467);

        if $z0 != 0 goto label01;

        varReplacer469 = "https";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(varReplacer469);

        if $z0 == 0 goto label18;

     label01:
        r30 = new org.apache.http.conn.scheme.Scheme;

        $r10 = staticinvoke <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>();

        r41 = (org.apache.http.conn.scheme.SocketFactory) $r10;

        varReplacer479 = "http";

        varReplacer480 = 80;

        specialinvoke r30.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>(varReplacer479, r41, varReplacer480);

        virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>(r30);

     label02:
        $r6 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r11 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r6);

     label03:
        r31 = new com.worklight.wlclient.e;

     label04:
        $r12 = r31;

     label05:
        specialinvoke r31.<com.worklight.wlclient.e: void <init>(java.security.KeyStore)>($r11);

     label06:
        $r2 = $r0.<com.worklight.wlclient.c: com.worklight.wlclient.b.b f>;

     label07:
        $r13 = virtualinvoke $r2.<com.worklight.wlclient.b.b: org.apache.http.conn.ssl.X509HostnameVerifier a()>();

        virtualinvoke $r12.<com.worklight.wlclient.e: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>($r13);

     label08:
        r30 = new org.apache.http.conn.scheme.Scheme;

     label09:
        $r9 = r30;

     label10:
        varReplacer474 = "https";

        varReplacer475 = 443;

        specialinvoke r30.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>(varReplacer474, $r12, varReplacer475);

        virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r9);

     label11:
        r32 = new org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        $r14 = r32;

        r40 = (org.apache.http.params.HttpParams) $r3;

        specialinvoke r32.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>(r40, $r4);

        r33 = new org.apache.http.impl.client.DefaultHttpClient;

        r40 = (org.apache.http.params.HttpParams) $r3;

        specialinvoke r33.<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>($r14, r40);

        $r0.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient b> = r33;

        $r15 = $r0.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient b>;

        r34 = new com.worklight.wlclient.l;

        specialinvoke r34.<com.worklight.wlclient.l: void <init>(android.content.Context)>($r1);

        virtualinvoke $r15.<org.apache.http.impl.client.DefaultHttpClient: void setCookieStore(org.apache.http.client.CookieStore)>(r34);

        $r15 = $r0.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient b>;

        r35 = new com.worklight.wlclient.q;

        specialinvoke r35.<com.worklight.wlclient.q: void <init>()>();

        r42 = (org.apache.http.client.RedirectHandler) r35;

        virtualinvoke $r15.<org.apache.http.impl.client.DefaultHttpClient: void setRedirectHandler(org.apache.http.client.RedirectHandler)>(r42);

        r33 = new org.apache.http.impl.client.DefaultHttpClient;

        r40 = (org.apache.http.params.HttpParams) $r3;

        specialinvoke r33.<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>($r14, r40);

        $r0.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient c> = r33;

        r36 = new org.apache.http.protocol.BasicHttpContext;

        specialinvoke r36.<org.apache.http.protocol.BasicHttpContext: void <init>()>();

        $r0.<com.worklight.wlclient.c: org.apache.http.protocol.HttpContext d> = r36;

        $r16 = $r0.<com.worklight.wlclient.c: org.apache.http.protocol.HttpContext d>;

        $r15 = $r0.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient b>;

        $r17 = virtualinvoke $r15.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.CookieStore getCookieStore()>();

        varReplacer470 = "http.cookie-store";

        interfaceinvoke $r16.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>(varReplacer470, $r17);

        varReplacer486 = "http.agent";

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(varReplacer486);

        $r0.<com.worklight.wlclient.c: java.lang.String e> = $r6;

        $r6 = $r0.<com.worklight.wlclient.c: java.lang.String e>;

        varReplacer468 = "Worklight";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>(varReplacer468);

        if $z0 != 0 goto label12;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        $r6 = $r0.<com.worklight.wlclient.c: java.lang.String e>;

        $r18 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer481 = "/Worklight/";

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer481);

        $r5 = staticinvoke <com.worklight.common.d: com.worklight.common.d a()>();

        $r6 = virtualinvoke $r5.<com.worklight.common.d: java.lang.String x()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0.<com.worklight.wlclient.c: java.lang.String e> = $r6;

     label12:
        varReplacer482 = "wl.resource_request";

        $r19 = staticinvoke <com.worklight.common.a: com.worklight.common.a a(java.lang.String)>(varReplacer482);

        r38 = new com.worklight.wlclient.i;

        $r20 = r38;

        $r5 = staticinvoke <com.worklight.common.d: com.worklight.common.d a()>();

        specialinvoke r38.<com.worklight.wlclient.i: void <init>(com.worklight.common.a,com.worklight.common.d)>($r19, $r5);

        $r15 = $r0.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient b>;

        virtualinvoke $r15.<org.apache.http.impl.client.DefaultHttpClient: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)>($r20);

        $r15 = $r0.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient b>;

        virtualinvoke $r15.<org.apache.http.impl.client.DefaultHttpClient: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)>($r20);

        return;

     label13:
        $r21 := @caughtexception;

        $r19 = <com.worklight.wlclient.c: com.worklight.common.a g>;

        varReplacer466 = "Error while registering the https schema";

        virtualinvoke $r19.<com.worklight.common.a: void a(java.lang.String,java.lang.Throwable)>(varReplacer466, $r21);

        goto label11;

     label14:
        $r22 := @caughtexception;

        $r19 = <com.worklight.wlclient.c: com.worklight.common.a g>;

        varReplacer488 = "Error while getting the keystore instance";

        virtualinvoke $r19.<com.worklight.common.a: void a(java.lang.String,java.lang.Throwable)>(varReplacer488, $r22);

        goto label11;

     label15:
        $r23 := @caughtexception;

        $r19 = <com.worklight.wlclient.c: com.worklight.common.a g>;

        varReplacer485 = "KeyManagementException Error while creating the socket instance";

        virtualinvoke $r19.<com.worklight.common.a: void a(java.lang.String,java.lang.Throwable)>(varReplacer485, $r23);

        goto label11;

     label16:
        $r24 := @caughtexception;

        $r19 = <com.worklight.wlclient.c: com.worklight.common.a g>;

        varReplacer471 = "UnrecoverableKeyException Error while creating the socket instance";

        virtualinvoke $r19.<com.worklight.common.a: void a(java.lang.String,java.lang.Throwable)>(varReplacer471, $r24);

        goto label11;

     label17:
        $r25 := @caughtexception;

        $r19 = <com.worklight.wlclient.c: com.worklight.common.a g>;

        varReplacer477 = "NoSuchAlgorithmException Error while creating the socket instance";

        virtualinvoke $r19.<com.worklight.common.a: void a(java.lang.String,java.lang.Throwable)>(varReplacer477, $r25);

        goto label11;

     label18:
        r39 = new java.lang.RuntimeException;

        r37 = new java.lang.StringBuilder;

        varReplacer487 = "HttpClientFactory: Can\'t create HttpClient with protocol ";

        specialinvoke r37.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer487);

        $r18 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r39.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw r39;

        catch java.lang.NoClassDefFoundError from label02 to label04 with label13;
        catch java.lang.NoClassDefFoundError from label05 to label09 with label13;
        catch java.lang.NoClassDefFoundError from label10 to label11 with label13;
        catch java.security.KeyStoreException from label02 to label03 with label14;
        catch java.security.KeyStoreException from label05 to label06 with label14;
        catch java.security.KeyStoreException from label07 to label08 with label14;
        catch java.security.KeyStoreException from label10 to label11 with label14;
        catch java.security.KeyManagementException from label02 to label03 with label15;
        catch java.security.KeyManagementException from label05 to label06 with label15;
        catch java.security.KeyManagementException from label07 to label08 with label15;
        catch java.security.KeyManagementException from label10 to label11 with label15;
        catch java.security.UnrecoverableKeyException from label02 to label03 with label16;
        catch java.security.UnrecoverableKeyException from label05 to label06 with label16;
        catch java.security.UnrecoverableKeyException from label07 to label08 with label16;
        catch java.security.UnrecoverableKeyException from label10 to label11 with label16;
        catch java.security.NoSuchAlgorithmException from label02 to label03 with label17;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label17;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label17;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label17;
    }

    public static com.worklight.wlclient.c a()
    {
        com.worklight.wlclient.c $r0;
        java.lang.IllegalStateException $r1;
        java.lang.String varReplacer1062;

        nop;

        $r0 = <com.worklight.wlclient.c: com.worklight.wlclient.c a>;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalStateException;

        varReplacer1062 = "HttpClientManager should be created first (before calling getInstance";

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1062);

        throw $r1;

     label1:
        $r0 = <com.worklight.wlclient.c: com.worklight.wlclient.c a>;

        return $r0;
    }

    public static void a(android.content.Context)
    {
        android.content.Context $r0;
        com.worklight.wlclient.c $r1;
        java.lang.Throwable $r2;

        nop;

        $r0 := @parameter0: android.content.Context;

        entermonitor class "Lcom/worklight/wlclient/c;";

     label1:
        $r1 = <com.worklight.wlclient.c: com.worklight.wlclient.c a>;

        if $r1 != null goto label2;

        $r1 = new com.worklight.wlclient.c;

        specialinvoke $r1.<com.worklight.wlclient.c: void <init>(android.content.Context)>($r0);

        <com.worklight.wlclient.c: com.worklight.wlclient.c a> = $r1;

     label2:
        exitmonitor class "Lcom/worklight/wlclient/c;";

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor class "Lcom/worklight/wlclient/c;";

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static void a(org.apache.http.conn.ssl.SSLSocketFactory)
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        com.worklight.wlclient.c $r1;
        org.apache.http.impl.client.DefaultHttpClient $r2;
        org.apache.http.conn.ClientConnectionManager $r3;
        org.apache.http.conn.scheme.SchemeRegistry $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.String $r8;
        org.apache.http.conn.scheme.Scheme $r9, $r10;
        int $i0;

        $r0 := @parameter0: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 = <com.worklight.wlclient.c: com.worklight.wlclient.c a>;

        $r2 = $r1.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient b>;

        $r3 = virtualinvoke $r2.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $r4 = interfaceinvoke $r3.<org.apache.http.conn.ClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>();

        $r5 = virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: java.util.List getSchemeNames()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("https");

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>("https");

        virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme unregister(java.lang.String)>("https");

        $r10 = new org.apache.http.conn.scheme.Scheme;

        $i0 = virtualinvoke $r9.<org.apache.http.conn.scheme.Scheme: int getDefaultPort()>();

        specialinvoke $r10.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>("https", $r0, $i0);

        virtualinvoke $r4.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r10);

     label2:
        return;
    }

    public static boolean a(java.security.KeyStore, char[])
    {
        java.security.KeyStore $r0, $r4;
        char[] $r1;
        org.apache.http.conn.ssl.SSLSocketFactory $r2;
        java.lang.String $r3;
        com.worklight.wlclient.c $r5;
        org.apache.http.impl.client.DefaultHttpClient $r6;
        com.worklight.wlclient.b.b $r7;
        org.apache.http.conn.ssl.X509HostnameVerifier $r8;
        java.lang.Exception $r9;

        $r0 := @parameter0: java.security.KeyStore;

        $r1 := @parameter1: char[];

     label01:
        $r4 = staticinvoke <com.worklight.wlclient.c: java.security.KeyStore e()>();

     label02:
        if $r4 != null goto label03;

        return 0;

     label03:
        $r2 = new org.apache.http.conn.ssl.SSLSocketFactory;

        $r3 = new java.lang.String;

     label04:
        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r1);

        specialinvoke $r2.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore,java.lang.String,java.security.KeyStore)>($r0, $r3, $r4);

     label05:
        $r5 = <com.worklight.wlclient.c: com.worklight.wlclient.c a>;

        if $r5 == null goto label09;

        $r5 = <com.worklight.wlclient.c: com.worklight.wlclient.c a>;

     label06:
        $r6 = $r5.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient b>;

     label07:
        if $r6 == null goto label09;

        $r5 = <com.worklight.wlclient.c: com.worklight.wlclient.c a>;

     label08:
        $r7 = $r5.<com.worklight.wlclient.c: com.worklight.wlclient.b.b f>;

        $r8 = virtualinvoke $r7.<com.worklight.wlclient.b.b: org.apache.http.conn.ssl.X509HostnameVerifier a()>();

        virtualinvoke $r2.<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>($r8);

        staticinvoke <com.worklight.wlclient.c: void a(org.apache.http.conn.ssl.SSLSocketFactory)>($r2);

     label09:
        return 1;

     label10:
        $r9 := @caughtexception;

        return 0;

        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label04 to label05 with label10;
        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    static void b(android.content.Context)
    {
        android.content.Context $r0;
        com.worklight.wlclient.c $r1;
        java.lang.Throwable $r2;

        nop;

        $r0 := @parameter0: android.content.Context;

        entermonitor class "Lcom/worklight/wlclient/c;";

     label1:
        $r1 = new com.worklight.wlclient.c;

        specialinvoke $r1.<com.worklight.wlclient.c: void <init>(android.content.Context)>($r0);

        <com.worklight.wlclient.c: com.worklight.wlclient.c a> = $r1;

     label2:
        exitmonitor class "Lcom/worklight/wlclient/c;";

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor class "Lcom/worklight/wlclient/c;";

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.security.KeyStore e()
    {
        java.security.KeyStore $r0;
        java.lang.String $r1;
        javax.net.ssl.TrustManagerFactory $r2;
        java.lang.Throwable $r3;

     label1:
        $r0 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidCAStore");

        $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1);

        virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r0);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void a(java.security.cert.Certificate)
    {
        com.worklight.wlclient.c $r0;
        java.security.cert.Certificate $r1;
        com.worklight.wlclient.b.b $r2;

        $r0 := @this: com.worklight.wlclient.c;

        $r1 := @parameter0: java.security.cert.Certificate;

        $r2 = $r0.<com.worklight.wlclient.c: com.worklight.wlclient.b.b f>;

        virtualinvoke $r2.<com.worklight.wlclient.b.b: void a(java.security.cert.Certificate)>($r1);

        return;
    }

    public final org.apache.http.impl.client.DefaultHttpClient b()
    {
        com.worklight.wlclient.c $r0;
        org.apache.http.impl.client.DefaultHttpClient r1;

        nop;

        $r0 := @this: com.worklight.wlclient.c;

        r1 = $r0.<com.worklight.wlclient.c: org.apache.http.impl.client.DefaultHttpClient b>;

        return r1;
    }

    public final org.apache.http.protocol.HttpContext c()
    {
        com.worklight.wlclient.c $r0;
        org.apache.http.protocol.HttpContext r1;

        nop;

        $r0 := @this: com.worklight.wlclient.c;

        r1 = $r0.<com.worklight.wlclient.c: org.apache.http.protocol.HttpContext d>;

        return r1;
    }

    public final java.lang.String d()
    {
        com.worklight.wlclient.c $r0;
        java.lang.String r1;

        $r0 := @this: com.worklight.wlclient.c;

        r1 = $r0.<com.worklight.wlclient.c: java.lang.String e>;

        return r1;
    }
}
