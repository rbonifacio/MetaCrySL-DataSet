public final class jp.profilepassport.android.obfuscated.C.e extends java.lang.Object
{

    public static byte[] a(byte[])
    {
        byte[] $r0, $r3;
        javax.crypto.spec.SecretKeySpec $r1;
        java.lang.String $r2, varReplacer5118, varReplacer5120, varReplacer5121;
        javax.crypto.Cipher $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9, $r10;
        null_type varReplacer5119;
        int varReplacer5122;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = new javax.crypto.spec.SecretKeySpec;

        $r2 = "q3bpjxksmrb56j45";

     label1:
        varReplacer5121 = "UTF-8";

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer5121);

        varReplacer5120 = "AES";

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer5120);

        varReplacer5118 = "AES/ECB/PKCS5Padding";

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer5118);

        varReplacer5122 = 1;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer5122, $r1);

        $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label2:
        return $r0;

     label3:
        $r5 := @caughtexception;

     label4:
        varReplacer5119 = null;

        return varReplacer5119;

     label5:
        $r6 := @caughtexception;

        goto label4;

     label6:
        $r7 := @caughtexception;

        goto label4;

     label7:
        $r8 := @caughtexception;

        goto label4;

     label8:
        $r9 := @caughtexception;

        goto label4;

     label9:
        $r10 := @caughtexception;

        goto label4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label9;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label8;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label7;
        catch java.security.InvalidKeyException from label1 to label2 with label6;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label5;
        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
    }
}
