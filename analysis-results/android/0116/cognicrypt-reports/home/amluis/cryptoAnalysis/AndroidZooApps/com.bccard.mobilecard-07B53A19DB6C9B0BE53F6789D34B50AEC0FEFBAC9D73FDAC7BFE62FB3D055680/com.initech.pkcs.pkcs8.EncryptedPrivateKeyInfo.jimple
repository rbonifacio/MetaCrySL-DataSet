public class com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo extends com.initech.asn1.useful.ASN1Object
{
    private static java.lang.Class d;
    private com.initech.asn1.useful.AlgorithmID a;
    private byte[] b;
    private com.initech.pkcs.pkcs8.PrivateKeyInfo c;

    public void <init>()
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.asn1.useful.AlgorithmID $r1;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        specialinvoke $r0.<com.initech.asn1.useful.ASN1Object: void <init>()>();

        $r1 = new com.initech.asn1.useful.AlgorithmID;

        specialinvoke $r1.<com.initech.asn1.useful.AlgorithmID: void <init>()>();

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a> = $r1;

        return;
    }

    public void <init>(com.initech.pkcs.pkcs8.PrivateKeyInfo, com.initech.cryptox.spec.PBEKeySpec, com.initech.asn1.useful.AlgorithmID)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.pkcs.pkcs8.PrivateKeyInfo $r1;
        com.initech.cryptox.spec.PBEKeySpec $r2;
        com.initech.asn1.useful.AlgorithmID $r3, $r4;

        nop;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: com.initech.pkcs.pkcs8.PrivateKeyInfo;

        $r2 := @parameter1: com.initech.cryptox.spec.PBEKeySpec;

        $r3 := @parameter2: com.initech.asn1.useful.AlgorithmID;

        specialinvoke $r0.<com.initech.asn1.useful.ASN1Object: void <init>()>();

        $r4 = new com.initech.asn1.useful.AlgorithmID;

        specialinvoke $r4.<com.initech.asn1.useful.AlgorithmID: void <init>()>();

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a> = $r4;

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.pkcs.pkcs8.PrivateKeyInfo c> = $r1;

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a> = $r3;

        $r1 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.pkcs.pkcs8.PrivateKeyInfo c>;

        virtualinvoke $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] encrypt(com.initech.pkcs.pkcs8.PrivateKeyInfo,com.initech.cryptox.spec.PBEKeySpec,com.initech.asn1.useful.AlgorithmID)>($r1, $r2, $r3);

        return;
    }

    public void <init>(com.initech.pkcs.pkcs8.PrivateKeyInfo, javax.crypto.spec.PBEKeySpec, com.initech.asn1.useful.AlgorithmID)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.pkcs.pkcs8.PrivateKeyInfo $r1;
        javax.crypto.spec.PBEKeySpec $r2;
        com.initech.asn1.useful.AlgorithmID $r3;
        java.lang.Object $r4;
        com.initech.cryptox.spec.PBEKeySpec $r5;

        nop;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: com.initech.pkcs.pkcs8.PrivateKeyInfo;

        $r2 := @parameter1: javax.crypto.spec.PBEKeySpec;

        $r3 := @parameter2: com.initech.asn1.useful.AlgorithmID;

        $r4 = staticinvoke <com.initech.provider.AutoJCE: java.lang.Object toJCEX(java.lang.Object)>($r2);

        $r5 = (com.initech.cryptox.spec.PBEKeySpec) $r4;

        specialinvoke $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: void <init>(com.initech.pkcs.pkcs8.PrivateKeyInfo,com.initech.cryptox.spec.PBEKeySpec,com.initech.asn1.useful.AlgorithmID)>($r1, $r5, $r3);

        return;
    }

    public void <init>(java.io.InputStream)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        java.io.InputStream $r1;
        com.initech.asn1.useful.AlgorithmID $r2;
        com.initech.asn1.BERDecoder $r3;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke $r0.<com.initech.asn1.useful.ASN1Object: void <init>()>();

        $r2 = new com.initech.asn1.useful.AlgorithmID;

        specialinvoke $r2.<com.initech.asn1.useful.AlgorithmID: void <init>()>();

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a> = $r2;

        $r3 = new com.initech.asn1.BERDecoder;

        specialinvoke $r3.<com.initech.asn1.BERDecoder: void <init>(java.io.InputStream)>($r1);

        virtualinvoke $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: void decode(com.initech.asn1.ASN1Decoder)>($r3);

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: boolean modified> = 1;

        return;
    }

    public void <init>(byte[])
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        byte[] $r1;
        java.lang.Object $r2;
        com.initech.asn1.useful.AlgorithmID $r3;
        com.initech.asn1.BERDecoder $r4;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: byte[];

        specialinvoke $r0.<com.initech.asn1.useful.ASN1Object: void <init>()>();

        $r3 = new com.initech.asn1.useful.AlgorithmID;

        specialinvoke $r3.<com.initech.asn1.useful.AlgorithmID: void <init>()>();

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a> = $r3;

        $r4 = new com.initech.asn1.BERDecoder;

        specialinvoke $r4.<com.initech.asn1.BERDecoder: void <init>(byte[])>($r1);

        virtualinvoke $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: void decode(com.initech.asn1.ASN1Decoder)>($r4);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (byte[]) $r2;

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] encoded> = $r1;

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: boolean modified> = 0;

        return;
    }

    private static java.lang.Class a(java.lang.String)
    {
        java.lang.String $r0, varReplacer28107;
        java.lang.NoClassDefFoundError $r1;
        java.lang.Class $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.Throwable $r4;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer28107 = "com.initech.cryptox.spec.PBEParameterSpec";

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(varReplacer28107);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r1 = new java.lang.NoClassDefFoundError;

        specialinvoke $r1.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void decode(com.initech.asn1.ASN1Decoder)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.asn1.ASN1Decoder $r1;
        int $i0;
        com.initech.asn1.useful.AlgorithmID $r2;
        byte[] $r3;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: com.initech.asn1.ASN1Decoder;

        $i0 = virtualinvoke $r1.<com.initech.asn1.ASN1Decoder: int decodeSequence()>();

        $r2 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a>;

        virtualinvoke $r2.<com.initech.asn1.useful.AlgorithmID: void decode(com.initech.asn1.ASN1Decoder)>($r1);

        $r3 = virtualinvoke $r1.<com.initech.asn1.ASN1Decoder: byte[] decodeOctetString()>();

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] b> = $r3;

        virtualinvoke $r1.<com.initech.asn1.ASN1Decoder: boolean endOf(int)>($i0);

        return;
    }

    public java.security.PrivateKey decrypt(com.initech.cryptox.spec.PBEKeySpec)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.cryptox.spec.PBEKeySpec $r1;
        com.initech.asn1.useful.AlgorithmID $r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        com.initech.cryptox.Cipher $r5;
        com.initech.cryptox.SecretKeyFactory $r6;
        com.initech.cryptox.SecretKey $r7;
        com.initech.provider.pkcs.pkcs5.PBES2Data $r8;
        byte[] $r9;
        com.initech.cryptox.spec.PBEParameterSpec $r10;
        int $i0, $i1;
        java.security.AlgorithmParameters $r11;
        com.initech.provider.crypto.spec.PBES2ParameterSpec $r12;
        com.initech.provider.pkcs.pkcs5.PBEKey $r13;
        com.initech.pkcs.pkcs8.spec.EnhancedPKCS8EncodedKeySpec $r14;
        java.security.KeyFactory $r15;
        java.security.PrivateKey $r16;
        com.initech.asn1.ASN1Exception $r17;
        java.io.IOException $r18;
        java.lang.Throwable $r19;
        javax.crypto.BadPaddingException $r20;
        java.security.InvalidAlgorithmParameterException $r21;
        java.lang.Class $r22, $r23;
        java.security.spec.AlgorithmParameterSpec $r24;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: com.initech.cryptox.spec.PBEKeySpec;

        $r2 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a>;

        $r3 = virtualinvoke $r2.<com.initech.asn1.useful.AlgorithmID: java.lang.String getAlgName()>();

        $r4 = $r3;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("SEEDcbc");

        if $z0 == 0 goto label01;

        $r4 = "PBEWithSHA1AndSeedcbcKICA";

     label01:
        $r3 = <com.initech.provider.crypto.InitechProvider: java.lang.String NAME>;

        $r5 = staticinvoke <com.initech.cryptox.Cipher: com.initech.cryptox.Cipher getInstance(java.lang.String,java.lang.String)>($r4, $r3);

        $r3 = <com.initech.provider.crypto.InitechProvider: java.lang.String NAME>;

        $r6 = staticinvoke <com.initech.cryptox.SecretKeyFactory: com.initech.cryptox.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>("PKCS5", $r3);

        $r7 = virtualinvoke $r6.<com.initech.cryptox.SecretKeyFactory: com.initech.cryptox.SecretKey generateSecret(java.security.spec.KeySpec)>($r1);

     label02:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("PBES2");

     label03:
        if $z0 == 0 goto label36;

        $r8 = new com.initech.provider.pkcs.pkcs5.PBES2Data;

        $r2 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a>;

     label04:
        $r9 = virtualinvoke $r2.<com.initech.asn1.useful.AlgorithmID: byte[] getParameter()>();

        specialinvoke $r8.<com.initech.provider.pkcs.pkcs5.PBES2Data: void <init>(byte[])>($r9);

     label05:
        $r10 = new com.initech.cryptox.spec.PBEParameterSpec;

     label06:
        $r9 = virtualinvoke $r8.<com.initech.provider.pkcs.pkcs5.PBES2Data: byte[] getSalt()>();

        $i0 = virtualinvoke $r8.<com.initech.provider.pkcs.pkcs5.PBES2Data: int getIterationCount()>();

        specialinvoke $r10.<com.initech.cryptox.spec.PBEParameterSpec: void <init>(byte[],int)>($r9, $i0);

        $r2 = virtualinvoke $r8.<com.initech.provider.pkcs.pkcs5.PBES2Data: com.initech.asn1.useful.AlgorithmID getEncryptionScheme()>();

        $r4 = virtualinvoke $r2.<com.initech.asn1.useful.AlgorithmID: java.lang.String getAlgName()>();

     label07:
        $r3 = <com.initech.provider.crypto.InitechProvider: java.lang.String NAME>;

     label08:
        $r11 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>($r4, $r3);

        $r9 = virtualinvoke $r2.<com.initech.asn1.useful.AlgorithmID: byte[] getParameter()>();

        virtualinvoke $r11.<java.security.AlgorithmParameters: void init(byte[])>($r9);

        $i0 = virtualinvoke $r8.<com.initech.provider.pkcs.pkcs5.PBES2Data: int getKeyLength()>();

     label09:
        $i1 = $i0;

        if $i0 != -1 goto label12;

     label10:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("DEScbc");

     label11:
        if $z0 == 0 goto label27;

        $i1 = 8;

     label12:
        $r12 = new com.initech.provider.crypto.spec.PBES2ParameterSpec;

     label13:
        specialinvoke $r12.<com.initech.provider.crypto.spec.PBES2ParameterSpec: void <init>(com.initech.cryptox.spec.PBEParameterSpec,java.lang.String,int,java.security.AlgorithmParameters)>($r10, $r4, $i1, $r11);

        virtualinvoke $r5.<com.initech.cryptox.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r7, $r12);

     label14:
        $r9 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] b>;

     label15:
        $r9 = virtualinvoke $r5.<com.initech.cryptox.Cipher: byte[] doFinal(byte[])>($r9);

     label16:
        $r13 = (com.initech.provider.pkcs.pkcs5.PBEKey) $r7;

     label17:
        virtualinvoke $r13.<com.initech.provider.pkcs.pkcs5.PBEKey: void zeroize()>();

     label18:
        $r14 = new com.initech.pkcs.pkcs8.spec.EnhancedPKCS8EncodedKeySpec;

     label19:
        specialinvoke $r14.<com.initech.pkcs.pkcs8.spec.EnhancedPKCS8EncodedKeySpec: void <init>(byte[])>($r9);

     label20:
        $r4 = <com.initech.provider.crypto.InitechProvider: java.lang.String NAME>;

     label21:
        $r15 = virtualinvoke $r14.<com.initech.pkcs.pkcs8.spec.EnhancedPKCS8EncodedKeySpec: java.security.KeyFactory getKeyFactory(java.lang.String)>($r4);

        $r16 = virtualinvoke $r15.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r14);

     label22:
        return $r16;

     label23:
        $r17 := @caughtexception;

        $r18 = new java.io.IOException;

     label24:
        $r4 = virtualinvoke $r17.<com.initech.asn1.ASN1Exception: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r4);

     label25:
        throw $r18;

     label26:
        $r19 := @caughtexception;

        $r13 = (com.initech.provider.pkcs.pkcs5.PBEKey) $r7;

        virtualinvoke $r13.<com.initech.provider.pkcs.pkcs5.PBEKey: void zeroize()>();

        $r20 = new javax.crypto.BadPaddingException;

        specialinvoke $r20.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>("PrivateKey Decrypt Bad padding");

        throw $r20;

     label27:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("DESedecbc");

     label28:
        if $z0 == 0 goto label29;

        $i1 = 24;

        goto label12;

     label29:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("SEEDcbc");

     label30:
        if $z0 == 0 goto label31;

        $i1 = 16;

        goto label12;

     label31:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("ARIAcbc");

     label32:
        if $z0 == 0 goto label33;

        $i1 = 16;

        goto label12;

     label33:
        $r21 = new java.security.InvalidAlgorithmParameterException;

     label34:
        specialinvoke $r21.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Key Length needed");

     label35:
        throw $r21;

     label36:
        $r2 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a>;

     label37:
        $r9 = virtualinvoke $r2.<com.initech.asn1.useful.AlgorithmID: byte[] getParameter()>();

     label38:
        $r4 = <com.initech.provider.crypto.InitechProvider: java.lang.String NAME>;

     label39:
        $r11 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>("PBE", $r4);

        virtualinvoke $r11.<java.security.AlgorithmParameters: void init(byte[])>($r9);

     label40:
        $r22 = <com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: java.lang.Class d>;

        if $r22 != null goto label45;

     label41:
        $r22 = staticinvoke <com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: java.lang.Class a(java.lang.String)>("com.initech.cryptox.spec.PBEParameterSpec");

     label42:
        $r23 = $r22;

        <com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: java.lang.Class d> = $r22;

     label43:
        $r24 = virtualinvoke $r11.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r23);

        virtualinvoke $r5.<com.initech.cryptox.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r7, $r24);

     label44:
        goto label14;

     label45:
        $r23 = <com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: java.lang.Class d>;

        goto label43;

        catch javax.crypto.BadPaddingException from label02 to label03 with label26;
        catch com.initech.asn1.ASN1Exception from label04 to label05 with label23;
        catch javax.crypto.BadPaddingException from label04 to label05 with label26;
        catch javax.crypto.BadPaddingException from label06 to label07 with label26;
        catch javax.crypto.BadPaddingException from label08 to label09 with label26;
        catch javax.crypto.BadPaddingException from label10 to label11 with label26;
        catch javax.crypto.BadPaddingException from label13 to label14 with label26;
        catch javax.crypto.BadPaddingException from label15 to label16 with label26;
        catch javax.crypto.BadPaddingException from label17 to label18 with label26;
        catch javax.crypto.BadPaddingException from label19 to label20 with label26;
        catch javax.crypto.BadPaddingException from label21 to label22 with label26;
        catch javax.crypto.BadPaddingException from label24 to label25 with label26;
        catch javax.crypto.BadPaddingException from label27 to label28 with label26;
        catch javax.crypto.BadPaddingException from label29 to label30 with label26;
        catch javax.crypto.BadPaddingException from label31 to label32 with label26;
        catch javax.crypto.BadPaddingException from label34 to label35 with label26;
        catch javax.crypto.BadPaddingException from label37 to label38 with label26;
        catch javax.crypto.BadPaddingException from label39 to label40 with label26;
        catch javax.crypto.BadPaddingException from label41 to label42 with label26;
        catch javax.crypto.BadPaddingException from label43 to label44 with label26;
    }

    public java.security.PrivateKey decrypt(javax.crypto.spec.PBEKeySpec)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        javax.crypto.spec.PBEKeySpec $r1;
        java.lang.Object $r2;
        com.initech.cryptox.spec.PBEKeySpec $r3;
        java.security.PrivateKey $r4;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: javax.crypto.spec.PBEKeySpec;

        $r2 = staticinvoke <com.initech.provider.AutoJCE: java.lang.Object toJCEX(java.lang.Object)>($r1);

        $r3 = (com.initech.cryptox.spec.PBEKeySpec) $r2;

        $r4 = virtualinvoke $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: java.security.PrivateKey decrypt(com.initech.cryptox.spec.PBEKeySpec)>($r3);

        return $r4;
    }

    public void encode(com.initech.asn1.ASN1Encoder)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.asn1.ASN1Encoder $r1;
        int $i0;
        com.initech.asn1.useful.AlgorithmID $r2;
        byte[] $r3;

        nop;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: com.initech.asn1.ASN1Encoder;

        $r2 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a>;

        virtualinvoke $r2.<com.initech.asn1.useful.AlgorithmID: java.lang.String getAlgName()>();

        $r2 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a>;

        virtualinvoke $r2.<com.initech.asn1.useful.AlgorithmID: java.lang.String getAlg()>();

        $i0 = virtualinvoke $r1.<com.initech.asn1.ASN1Encoder: int encodeSequence()>();

        $r2 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a>;

        virtualinvoke $r2.<com.initech.asn1.useful.AlgorithmID: void encode(com.initech.asn1.ASN1Encoder)>($r1);

        $r3 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] b>;

        virtualinvoke $r1.<com.initech.asn1.ASN1Encoder: void encodeOctetString(byte[])>($r3);

        virtualinvoke $r1.<com.initech.asn1.ASN1Encoder: void endOf(int)>($i0);

        return;
    }

    protected byte[] encrypt(com.initech.pkcs.pkcs8.PrivateKeyInfo, com.initech.cryptox.spec.PBEKeySpec, com.initech.asn1.useful.AlgorithmID)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.pkcs.pkcs8.PrivateKeyInfo $r1;
        com.initech.cryptox.spec.PBEKeySpec $r2;
        com.initech.asn1.useful.AlgorithmID $r3, $r13;
        int $i0, $i1, varReplacer28100, varReplacer28103;
        byte[] $r4, $r11;
        java.lang.String $r5, $r6, varReplacer28095, varReplacer28096, varReplacer28097, varReplacer28098, varReplacer28099, varReplacer28101, varReplacer28102, varReplacer28104, varReplacer28105, varReplacer28106;
        com.initech.cryptox.Cipher $r7;
        com.initech.cryptox.SecretKeyFactory $r8;
        com.initech.cryptox.SecretKey $r9;
        boolean $z0;
        com.initech.provider.pkcs.pkcs5.PBES2Data $r10;
        com.initech.cryptox.spec.PBEParameterSpec $r12;
        java.security.AlgorithmParameters $r14;
        com.initech.provider.crypto.spec.PBES2ParameterSpec $r15;
        com.initech.provider.pkcs.pkcs5.PBEKey $r16;
        com.initech.asn1.DEREncoder $r17;
        com.initech.asn1.ASN1Exception $r18, $r20, $r27;
        java.io.IOException $r19;
        java.lang.Throwable $r21;
        javax.crypto.BadPaddingException $r22;
        java.security.InvalidAlgorithmParameterException $r23;
        java.lang.Class $r24, $r25;
        java.security.spec.AlgorithmParameterSpec $r26;

        nop;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: com.initech.pkcs.pkcs8.PrivateKeyInfo;

        $r2 := @parameter1: com.initech.cryptox.spec.PBEKeySpec;

        $r3 := @parameter2: com.initech.asn1.useful.AlgorithmID;

        $i0 = 16;

     label01:
        $r4 = virtualinvoke $r1.<com.initech.pkcs.pkcs8.PrivateKeyInfo: byte[] getEncoded()>();

     label02:
        $r5 = virtualinvoke $r3.<com.initech.asn1.useful.AlgorithmID: java.lang.String getAlgName()>();

        $r6 = <com.initech.provider.crypto.InitechProvider: java.lang.String NAME>;

        $r7 = staticinvoke <com.initech.cryptox.Cipher: com.initech.cryptox.Cipher getInstance(java.lang.String,java.lang.String)>($r5, $r6);

        $r6 = <com.initech.provider.crypto.InitechProvider: java.lang.String NAME>;

        varReplacer28101 = "PKCS5";

        $r8 = staticinvoke <com.initech.cryptox.SecretKeyFactory: com.initech.cryptox.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>(varReplacer28101, $r6);

        $r9 = virtualinvoke $r8.<com.initech.cryptox.SecretKeyFactory: com.initech.cryptox.SecretKey generateSecret(java.security.spec.KeySpec)>($r2);

     label03:
        varReplacer28104 = "PBES2";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer28104);

     label04:
        if $z0 == 0 goto label37;

        $r10 = new com.initech.provider.pkcs.pkcs5.PBES2Data;

     label05:
        $r11 = virtualinvoke $r3.<com.initech.asn1.useful.AlgorithmID: byte[] getParameter()>();

        specialinvoke $r10.<com.initech.provider.pkcs.pkcs5.PBES2Data: void <init>(byte[])>($r11);

     label06:
        $r12 = new com.initech.cryptox.spec.PBEParameterSpec;

     label07:
        $r11 = virtualinvoke $r10.<com.initech.provider.pkcs.pkcs5.PBES2Data: byte[] getSalt()>();

        $i1 = virtualinvoke $r10.<com.initech.provider.pkcs.pkcs5.PBES2Data: int getIterationCount()>();

        specialinvoke $r12.<com.initech.cryptox.spec.PBEParameterSpec: void <init>(byte[],int)>($r11, $i1);

        $r13 = virtualinvoke $r10.<com.initech.provider.pkcs.pkcs5.PBES2Data: com.initech.asn1.useful.AlgorithmID getEncryptionScheme()>();

        $r5 = virtualinvoke $r13.<com.initech.asn1.useful.AlgorithmID: java.lang.String getAlgName()>();

     label08:
        $r6 = <com.initech.provider.crypto.InitechProvider: java.lang.String NAME>;

     label09:
        $r14 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>($r5, $r6);

        $r11 = virtualinvoke $r13.<com.initech.asn1.useful.AlgorithmID: byte[] getParameter()>();

        virtualinvoke $r14.<java.security.AlgorithmParameters: void init(byte[])>($r11);

        $i1 = virtualinvoke $r10.<com.initech.provider.pkcs.pkcs5.PBES2Data: int getKeyLength()>();

     label10:
        if $i1 != -1 goto label49;

     label11:
        varReplacer28098 = "DEScbc";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer28098);

     label12:
        if $z0 == 0 goto label29;

        $i0 = 8;

     label13:
        $r15 = new com.initech.provider.crypto.spec.PBES2ParameterSpec;

     label14:
        specialinvoke $r15.<com.initech.provider.crypto.spec.PBES2ParameterSpec: void <init>(com.initech.cryptox.spec.PBEParameterSpec,java.lang.String,int,java.security.AlgorithmParameters)>($r12, $r5, $i0, $r14);

        varReplacer28100 = 1;

        virtualinvoke $r7.<com.initech.cryptox.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer28100, $r9, $r15);

     label15:
        $r4 = virtualinvoke $r7.<com.initech.cryptox.Cipher: byte[] doFinal(byte[])>($r4);

     label16:
        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] b> = $r4;

        $r16 = (com.initech.provider.pkcs.pkcs5.PBEKey) $r9;

     label17:
        virtualinvoke $r16.<com.initech.provider.pkcs.pkcs5.PBEKey: void zeroize()>();

     label18:
        $r17 = new com.initech.asn1.DEREncoder;

     label19:
        specialinvoke $r17.<com.initech.asn1.DEREncoder: void <init>()>();

     label20:
        $i0 = virtualinvoke $r17.<com.initech.asn1.DEREncoder: int encodeSequence()>();

        virtualinvoke $r3.<com.initech.asn1.useful.AlgorithmID: void encode(com.initech.asn1.ASN1Encoder)>($r17);

     label21:
        $r4 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] b>;

     label22:
        virtualinvoke $r17.<com.initech.asn1.DEREncoder: void encodeOctetString(byte[])>($r4);

        virtualinvoke $r17.<com.initech.asn1.DEREncoder: void endOf(int)>($i0);

        $r4 = virtualinvoke $r17.<com.initech.asn1.DEREncoder: byte[] toByteArray()>();

     label23:
        return $r4;

     label24:
        $r18 := @caughtexception;

        $r19 = new java.io.IOException;

        $r5 = virtualinvoke $r18.<com.initech.asn1.ASN1Exception: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r19;

     label25:
        $r20 := @caughtexception;

        $r19 = new java.io.IOException;

     label26:
        $r5 = virtualinvoke $r20.<com.initech.asn1.ASN1Exception: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r5);

     label27:
        throw $r19;

     label28:
        $r21 := @caughtexception;

        $r16 = (com.initech.provider.pkcs.pkcs5.PBEKey) $r9;

        virtualinvoke $r16.<com.initech.provider.pkcs.pkcs5.PBEKey: void zeroize()>();

        $r22 = new javax.crypto.BadPaddingException;

        varReplacer28106 = "PrivateKey Decrypt Bad padding";

        specialinvoke $r22.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>(varReplacer28106);

        throw $r22;

     label29:
        varReplacer28096 = "DESedecbc";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer28096);

     label30:
        if $z0 == 0 goto label31;

        $i0 = 24;

        goto label13;

     label31:
        varReplacer28105 = "SEEDcbc";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer28105);

     label32:
        if $z0 != 0 goto label13;

     label33:
        varReplacer28095 = "ARIAcbc";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer28095);

     label34:
        if $z0 != 0 goto label13;

        $r23 = new java.security.InvalidAlgorithmParameterException;

     label35:
        varReplacer28102 = "Key Length needed";

        specialinvoke $r23.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>(varReplacer28102);

     label36:
        throw $r23;

     label37:
        $r11 = virtualinvoke $r3.<com.initech.asn1.useful.AlgorithmID: byte[] getParameter()>();

     label38:
        $r5 = <com.initech.provider.crypto.InitechProvider: java.lang.String NAME>;

     label39:
        varReplacer28097 = "PBE";

        $r14 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>(varReplacer28097, $r5);

        virtualinvoke $r14.<java.security.AlgorithmParameters: void init(byte[])>($r11);

     label40:
        $r24 = <com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: java.lang.Class d>;

        if $r24 != null goto label45;

     label41:
        varReplacer28099 = "com.initech.cryptox.spec.PBEParameterSpec";

        $r24 = staticinvoke <com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: java.lang.Class a(java.lang.String)>(varReplacer28099);

     label42:
        $r25 = $r24;

        <com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: java.lang.Class d> = $r24;

     label43:
        $r26 = virtualinvoke $r14.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r25);

        varReplacer28103 = 1;

        virtualinvoke $r7.<com.initech.cryptox.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer28103, $r9, $r26);

     label44:
        goto label15;

     label45:
        $r25 = <com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: java.lang.Class d>;

        goto label43;

     label46:
        $r27 := @caughtexception;

        $r19 = new java.io.IOException;

     label47:
        $r5 = virtualinvoke $r27.<com.initech.asn1.ASN1Exception: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r5);

     label48:
        throw $r19;

     label49:
        $i0 = $i1;

        goto label13;

        catch com.initech.asn1.ASN1Exception from label01 to label02 with label24;
        catch javax.crypto.BadPaddingException from label03 to label04 with label28;
        catch com.initech.asn1.ASN1Exception from label05 to label06 with label25;
        catch javax.crypto.BadPaddingException from label05 to label06 with label28;
        catch javax.crypto.BadPaddingException from label07 to label08 with label28;
        catch javax.crypto.BadPaddingException from label09 to label10 with label28;
        catch javax.crypto.BadPaddingException from label11 to label12 with label28;
        catch javax.crypto.BadPaddingException from label14 to label16 with label28;
        catch javax.crypto.BadPaddingException from label17 to label18 with label28;
        catch javax.crypto.BadPaddingException from label19 to label20 with label28;
        catch com.initech.asn1.ASN1Exception from label20 to label21 with label46;
        catch com.initech.asn1.ASN1Exception from label22 to label23 with label46;
        catch javax.crypto.BadPaddingException from label20 to label21 with label28;
        catch javax.crypto.BadPaddingException from label22 to label23 with label28;
        catch javax.crypto.BadPaddingException from label26 to label27 with label28;
        catch javax.crypto.BadPaddingException from label29 to label30 with label28;
        catch javax.crypto.BadPaddingException from label31 to label32 with label28;
        catch javax.crypto.BadPaddingException from label33 to label34 with label28;
        catch javax.crypto.BadPaddingException from label35 to label36 with label28;
        catch javax.crypto.BadPaddingException from label37 to label38 with label28;
        catch javax.crypto.BadPaddingException from label39 to label40 with label28;
        catch javax.crypto.BadPaddingException from label41 to label42 with label28;
        catch javax.crypto.BadPaddingException from label43 to label44 with label28;
        catch javax.crypto.BadPaddingException from label47 to label48 with label28;
    }

    protected byte[] encrypt(com.initech.pkcs.pkcs8.PrivateKeyInfo, javax.crypto.spec.PBEKeySpec, com.initech.asn1.useful.AlgorithmID)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.pkcs.pkcs8.PrivateKeyInfo $r1;
        javax.crypto.spec.PBEKeySpec $r2;
        com.initech.asn1.useful.AlgorithmID $r3;
        java.lang.Object $r4;
        com.initech.cryptox.spec.PBEKeySpec $r5;
        byte[] $r6;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: com.initech.pkcs.pkcs8.PrivateKeyInfo;

        $r2 := @parameter1: javax.crypto.spec.PBEKeySpec;

        $r3 := @parameter2: com.initech.asn1.useful.AlgorithmID;

        $r4 = staticinvoke <com.initech.provider.AutoJCE: java.lang.Object toJCEX(java.lang.Object)>($r2);

        $r5 = (com.initech.cryptox.spec.PBEKeySpec) $r4;

        $r6 = virtualinvoke $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] encrypt(com.initech.pkcs.pkcs8.PrivateKeyInfo,com.initech.cryptox.spec.PBEKeySpec,com.initech.asn1.useful.AlgorithmID)>($r1, $r5, $r3);

        return $r6;
    }

    public com.initech.asn1.useful.AlgorithmID getAlgorithmID()
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.asn1.useful.AlgorithmID r1;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        r1 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a>;

        return r1;
    }

    public byte[] getEncryptedData()
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        byte[] r1;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        r1 = $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] b>;

        return r1;
    }

    public void setAlgorithmID(com.initech.asn1.useful.AlgorithmID)
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        com.initech.asn1.useful.AlgorithmID $r1;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: com.initech.asn1.useful.AlgorithmID;

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: com.initech.asn1.useful.AlgorithmID a> = $r1;

        return;
    }

    public void setEncryptedData(byte[])
    {
        com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo $r0;
        byte[] $r1;

        $r0 := @this: com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo;

        $r1 := @parameter0: byte[];

        $r0.<com.initech.pkcs.pkcs8.EncryptedPrivateKeyInfo: byte[] b> = $r1;

        return;
    }
}
