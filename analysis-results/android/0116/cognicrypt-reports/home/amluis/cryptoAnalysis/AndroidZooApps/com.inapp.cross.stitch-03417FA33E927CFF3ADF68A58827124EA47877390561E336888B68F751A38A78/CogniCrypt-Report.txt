Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: r6
		Type: java.security.SecureRandom
		Statement: specialinvoke r6.<java.security.SecureRandom: void <init>()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] a()>
		SHA-256: a212a32d25e5836ac936eca4bb3774642296c7c151bea8c797ded6872c071780
		Secure: true
	Object:
		Variable: r17
		Type: java.security.SecureRandom
		Statement: specialinvoke r17.<java.security.SecureRandom: void <init>()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 3471e7361ae58e3d1c565e8b90ebc1741f759d996e09b82daf3f7a41eb065adf
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2253)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: c90b1384c9548994c977b82a43d29a1679f5b5d43e7ed8497314e10cbd40d46e
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.gi: java.lang.String a(java.lang.String)>
		SHA-256: efb90d6c0588cba5ebcef086856e6845e8300ba68ce490c6310b52d33b1bbec2
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1993)
		Method: <u.aly.gi: java.lang.String b(java.lang.String)>
		SHA-256: 21c45304d30facdf204b5f0929f047411c2790dbb3173f29f01b680bf0ea2962
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKeyFactory
		Statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer374)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: 7fef2ae68813ad210918986c8488c1fb02ea0d6139c43bd6699cb799221e26ee
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3662)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 50459689727a4f0f65dbbffc0d1dfc58d8f3d8b12db594e4eff46a5fb5ebb72a
		Secure: false
	Object:
		Variable: $r11
		Type: java.security.MessageDigest
		Statement: $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2042)
		Method: <u.aly.gh: java.lang.String p(android.content.Context)>
		SHA-256: 8bd72bcdefea03e2c5ef22e5a14ff44907df09656793355a39cde907e99c6042
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer787)
		Method: <com.eyewind.cross_stitch.util.billing.p: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: e697d7de31cd93b16e5e71edbcc89601ab8a3f84934b64708ecb3a34824b05d1
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2254)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: 53a1762c8fc191302cdc608cd054238b5cb7d9dc080a8f14d5bdc08362cff032
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: abff8bd008aa8e630f3c565ff73f43fe4ad825b545c79672aa0ecbf5f80e56e1
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.umeng.analytics.s: byte[] b(byte[])>
		SHA-256: fb40d49f1980c4b1fc0c80b54eb58455d51dcf103627d44d4367f91734a9ea00
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer381)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a()>
		SHA-256: 3c5e0f44293f4a2c2c648bc2f2520338146803e91d97c3b6c24c3a5f46fce849
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.gi: java.lang.String b(java.lang.String)>
		SHA-256: db7ce7715a4d20c843f3b647efb03b4185a332616382d09772954c5afcd1dedf
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2256)
		Method: <com.umeng.analytics.s: byte[] b(byte[])>
		SHA-256: 951b3794af309144822a608ce02518bae541a0e83cea273f220709dd81b7d041
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKey
		Statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: eabac5d4694f0c3a1c1a78ee1edbf39575e287a76765f7a2bbbfa518dfe94c3d
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $z0 = virtualinvoke $r4.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.eyewind.cross_stitch.util.billing.p: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: f154e72054c3e5fcf84c1d9625748db9f190ce8a7471aa9ae18a5fdecc0fefc2
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKey
		Statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 5c116a0fc5fd5864b9d3b5a9773e309eacebfeef81e48f6293a3e61003089211
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer372)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: 1cae5d5065454ee7d3ba911ec25ea70cad653b9be003b87f744072e2eb9a9341
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2550)
		Method: <com.eyewind.cross_stitch.util.e: java.lang.String d(java.lang.String)>
		SHA-256: e72f79586bb7d70cfed2a5955deb3b4364e444b02621f47ade1ab052d5a88773
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.eyewind.cross_stitch.util.e: java.lang.String d(java.lang.String)>
		SHA-256: 27f82111816bf99e6a2a10880c4210634b4624ba132e568446a0d29d52dd4b2d
		Secure: true
	Object:
		Variable: varReplacer2253
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2253)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: 6650ea24a11398c7c26ef707ac58451cd5cea420a8e570cadc4e40cd832d1c1c
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: 20c5e227023f83179f48f2d29725faedbdb908d9c821320416214b63e2139378
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 141880d770344d9c6cee1cdc0028c41461b3f74707dded4ed9a4ae43ded6a71
		Secure: false
	Object:
		Variable: r17
		Type: java.security.SecureRandom
		Statement: specialinvoke r17.<java.security.SecureRandom: void <init>()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: e6f2e13bd9cf1e838ff5047a99a203627e8a9186865c7c1bb76ce3e4ba14648c
		Secure: true
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest(byte[])>($r6)
		Method: <u.aly.gh: java.lang.String p(android.content.Context)>
		SHA-256: 6672633037273bc684c7a56184a60c650c59ccbf9844873a409252ec13a74329
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] a()>
		SHA-256: 4c007d82661266b5817bbe92225f4b95e375d4009b399b6ad4a1c654005f0fd7
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKeyFactory
		Statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer3663)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: b748e0e75e800e4524b23f563b8586db2b8cf68d1d2e1884112c9e536419465d
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: da0001f2f60063ff8c3ff8a4f94b86183eb95033c873c3302a0bb4d3f9677725
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2325)
		Method: <u.aly.gi: java.lang.String a(java.lang.String)>
		SHA-256: b4aea599841135556bc257bcddad8682f5291e44ddfc5fcb563460cd0ef8225b
		Secure: true

Findings in Java Class: com.eyewind.cross_stitch.util.b

	 in Method: byte[] a(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer376, $r6, $r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #1cae5d5065454ee7d3ba911ec25ea70cad653b9be003b87f744072e2eb9a9341)
			First parameter (with value "DES") should be any of {ARC4, AES, BLOWFISH, DESede, RSA}
			at statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer372)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #7fef2ae68813ad210918986c8488c1fb02ea0d6139c43bd6699cb799221e26ee)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithSHAANDTWOFISH-CBC	, PBEwithSHAAND192BITAES-CBC-BC, DESede, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithSHAAND40BITRC4, PBEwithMD5ANDDES, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, PBEwithMD5ANDRC2, PBKDF2withHmacSHA1, PBEwithSHAAND128BITRC4, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC, PBEwithSHAAND128BITRC2-CBC, PBEwithSHAAND128BITAES-CBC-BC}
			at statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer374)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer376, $r6, $r1)


	 in Method: byte[] a()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #3c5e0f44293f4a2c2c648bc2f2520338146803e91d97c3b6c24c3a5f46fce849)
			First parameter (with value "DES") should be any of {ARC4, HmacSHA256, HmacSHA1, AES, DESede, HmacMD5, HmacSHA512, HmacSHA384, BLOWFISH}
			at statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer381)

		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			First parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(java.security.SecureRandom)>($r0)


	 in Method: byte[] b(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer3658, $r6, $r1)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #b748e0e75e800e4524b23f563b8586db2b8cf68d1d2e1884112c9e536419465d)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithSHAANDTWOFISH-CBC	, PBEwithSHAAND192BITAES-CBC-BC, DESede, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithSHAAND40BITRC4, PBEwithMD5ANDDES, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, PBEwithMD5ANDRC2, PBKDF2withHmacSHA1, PBEwithSHAAND128BITRC4, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC, PBEwithSHAAND128BITRC2-CBC, PBEwithSHAAND128BITAES-CBC-BC}
			at statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer3663)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #50459689727a4f0f65dbbffc0d1dfc58d8f3d8b12db594e4eff46a5fb5ebb72a)
			First parameter (with value "DES") should be any of {ARC4, AES, BLOWFISH, DESede, RSA}
			at statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3662)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer3658, $r6, $r1)


Findings in Java Class: com.umeng.analytics.s

	 in Method: byte[] a(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer2252, $r2, $r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2253)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer2252, $r2, $r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)


Findings in Java Class: com.eyewind.cross_stitch.util.billing.p

	 in Method: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 30

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 12
	ConstraintError: 5
=====================================================================