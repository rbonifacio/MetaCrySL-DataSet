public class a.aw extends java.lang.Object implements java.lang.Cloneable
{
    private static final java.util.List A;
    private static final java.util.List z;
    final a.af a;
    final java.net.Proxy b;
    final java.util.List c;
    final java.util.List d;
    final java.util.List e;
    final java.util.List f;
    final java.net.ProxySelector g;
    final a.ad h;
    final a.d i;
    final a.a.m j;
    final javax.net.SocketFactory k;
    final javax.net.ssl.SSLSocketFactory l;
    final a.a.d.f m;
    final javax.net.ssl.HostnameVerifier n;
    final a.q o;
    final a.b p;
    final a.b q;
    final a.x r;
    final a.ag s;
    final boolean t;
    final boolean u;
    final boolean v;
    final int w;
    final int x;
    final int y;

    static void <clinit>()
    {
        a.az[] $r0;
        a.az $r1;
        java.util.List $r2;
        a.z[] $r3;
        a.z $r4;
        a.ax $r5;

        nop;

        $r0 = newarray (a.az)[3];

        $r1 = <a.az: a.az HTTP_2>;

        $r0[0] = $r1;

        $r1 = <a.az: a.az SPDY_3>;

        $r0[1] = $r1;

        $r1 = <a.az: a.az HTTP_1_1>;

        $r0[2] = $r1;

        $r2 = staticinvoke <a.a.u: java.util.List immutableList(java.lang.Object[])>($r0);

        <a.aw: java.util.List z> = $r2;

        $r3 = newarray (a.z)[3];

        $r4 = <a.z: a.z MODERN_TLS>;

        $r3[0] = $r4;

        $r4 = <a.z: a.z COMPATIBLE_TLS>;

        $r3[1] = $r4;

        $r4 = <a.z: a.z CLEARTEXT>;

        $r3[2] = $r4;

        $r2 = staticinvoke <a.a.u: java.util.List immutableList(java.lang.Object[])>($r3);

        <a.aw: java.util.List A> = $r2;

        $r5 = new a.ax;

        specialinvoke $r5.<a.ax: void <init>()>();

        <a.a.l: a.a.l instance> = $r5;

        return;
    }

    public void <init>()
    {
        a.aw $r0;
        a.ay $r1;

        $r0 := @this: a.aw;

        $r1 = new a.ay;

        specialinvoke $r1.<a.ay: void <init>()>();

        specialinvoke $r0.<a.aw: void <init>(a.ay)>($r1);

        return;
    }

    private void <init>(a.ay)
    {
        a.aw $r0;
        a.ay $r1;
        a.af $r2;
        java.net.Proxy $r3;
        java.util.List $r4;
        java.net.ProxySelector $r5;
        a.ad $r6;
        a.d $r7;
        a.a.m $r8;
        javax.net.SocketFactory $r9;
        java.util.Iterator $r10;
        boolean $z0, $z1;
        java.lang.Object $r11;
        a.z $r12;
        javax.net.ssl.SSLSocketFactory $r13;
        a.a.d.f $r14;
        a.a.p $r15;
        javax.net.ssl.X509TrustManager $r16;
        java.lang.IllegalStateException $r17;
        java.lang.StringBuilder $r18;
        java.lang.Class $r19;
        java.lang.String $r20, varReplacer1481, varReplacer1482, varReplacer1483;
        javax.net.ssl.SSLContext $r21;
        java.lang.Throwable $r22;
        java.lang.AssertionError $r23;
        a.q $r24;
        a.s $r25;
        javax.net.ssl.HostnameVerifier $r26;
        a.b $r27;
        a.x $r28;
        a.ag $r29;
        int $i0;
        null_type varReplacer1484, varReplacer1485, varReplacer1486;

        nop;

        $r0 := @this: a.aw;

        $r1 := @parameter0: a.ay;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<a.ay: a.af a>;

        $r0.<a.aw: a.af a> = $r2;

        $r3 = $r1.<a.ay: java.net.Proxy b>;

        $r0.<a.aw: java.net.Proxy b> = $r3;

        $r4 = $r1.<a.ay: java.util.List c>;

        $r0.<a.aw: java.util.List c> = $r4;

        $r4 = $r1.<a.ay: java.util.List d>;

        $r0.<a.aw: java.util.List d> = $r4;

        $r4 = $r1.<a.ay: java.util.List e>;

        $r4 = staticinvoke <a.a.u: java.util.List immutableList(java.util.List)>($r4);

        $r0.<a.aw: java.util.List e> = $r4;

        $r4 = $r1.<a.ay: java.util.List f>;

        $r4 = staticinvoke <a.a.u: java.util.List immutableList(java.util.List)>($r4);

        $r0.<a.aw: java.util.List f> = $r4;

        $r5 = $r1.<a.ay: java.net.ProxySelector g>;

        $r0.<a.aw: java.net.ProxySelector g> = $r5;

        $r6 = $r1.<a.ay: a.ad h>;

        $r0.<a.aw: a.ad h> = $r6;

        $r7 = $r1.<a.ay: a.d i>;

        $r0.<a.aw: a.d i> = $r7;

        $r8 = $r1.<a.ay: a.a.m j>;

        $r0.<a.aw: a.a.m j> = $r8;

        $r9 = $r1.<a.ay: javax.net.SocketFactory k>;

        $r0.<a.aw: javax.net.SocketFactory k> = $r9;

        $r4 = $r0.<a.aw: java.util.List d>;

        $r10 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $z0 = 0;

     label01:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (a.z) $r11;

        if $z0 != 0 goto label02;

        $z0 = virtualinvoke $r12.<a.z: boolean isTls()>();

        if $z0 == 0 goto label04;

     label02:
        $z0 = 1;

     label03:
        goto label01;

     label04:
        $z0 = 0;

        goto label03;

     label05:
        $r13 = $r1.<a.ay: javax.net.ssl.SSLSocketFactory l>;

        if $r13 != null goto label06;

        if $z0 != 0 goto label08;

     label06:
        $r13 = $r1.<a.ay: javax.net.ssl.SSLSocketFactory l>;

        $r0.<a.aw: javax.net.ssl.SSLSocketFactory l> = $r13;

     label07:
        $r13 = $r0.<a.aw: javax.net.ssl.SSLSocketFactory l>;

        if $r13 == null goto label13;

        $r14 = $r1.<a.ay: a.a.d.f m>;

        if $r14 != null goto label13;

        $r15 = staticinvoke <a.a.p: a.a.p get()>();

        $r13 = $r0.<a.aw: javax.net.ssl.SSLSocketFactory l>;

        $r16 = virtualinvoke $r15.<a.a.p: javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory)>($r13);

        if $r16 != null goto label11;

        $r17 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        varReplacer1483 = "Unable to extract the trust manager on ";

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1483);

        $r15 = staticinvoke <a.a.p: a.a.p get()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        varReplacer1481 = ", sslSocketFactory is ";

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1481);

        $r13 = $r0.<a.aw: javax.net.ssl.SSLSocketFactory l>;

        $r19 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label08:
        varReplacer1482 = "TLS";

        $r21 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1482);

        varReplacer1484 = null;

        varReplacer1485 = null;

        varReplacer1486 = null;

        virtualinvoke $r21.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1484, varReplacer1484, varReplacer1484);

        $r13 = virtualinvoke $r21.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label09:
        $r0.<a.aw: javax.net.ssl.SSLSocketFactory l> = $r13;

        goto label07;

     label10:
        $r22 := @caughtexception;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label11:
        $r15 = staticinvoke <a.a.p: a.a.p get()>();

        $r14 = virtualinvoke $r15.<a.a.p: a.a.d.f trustRootIndex(javax.net.ssl.X509TrustManager)>($r16);

        $r0.<a.aw: a.a.d.f m> = $r14;

        $r24 = $r1.<a.ay: a.q o>;

        $r25 = virtualinvoke $r24.<a.q: a.s a()>();

        $r14 = $r0.<a.aw: a.a.d.f m>;

        $r25 = virtualinvoke $r25.<a.s: a.s trustRootIndex(a.a.d.f)>($r14);

        $r24 = virtualinvoke $r25.<a.s: a.q build()>();

        $r0.<a.aw: a.q o> = $r24;

     label12:
        $r26 = $r1.<a.ay: javax.net.ssl.HostnameVerifier n>;

        $r0.<a.aw: javax.net.ssl.HostnameVerifier n> = $r26;

        $r27 = $r1.<a.ay: a.b p>;

        $r0.<a.aw: a.b p> = $r27;

        $r27 = $r1.<a.ay: a.b q>;

        $r0.<a.aw: a.b q> = $r27;

        $r28 = $r1.<a.ay: a.x r>;

        $r0.<a.aw: a.x r> = $r28;

        $r29 = $r1.<a.ay: a.ag s>;

        $r0.<a.aw: a.ag s> = $r29;

        $z0 = $r1.<a.ay: boolean t>;

        $r0.<a.aw: boolean t> = $z0;

        $z0 = $r1.<a.ay: boolean u>;

        $r0.<a.aw: boolean u> = $z0;

        $z0 = $r1.<a.ay: boolean v>;

        $r0.<a.aw: boolean v> = $z0;

        $i0 = $r1.<a.ay: int w>;

        $r0.<a.aw: int w> = $i0;

        $i0 = $r1.<a.ay: int x>;

        $r0.<a.aw: int x> = $i0;

        $i0 = $r1.<a.ay: int y>;

        $r0.<a.aw: int y> = $i0;

        return;

     label13:
        $r14 = $r1.<a.ay: a.a.d.f m>;

        $r0.<a.aw: a.a.d.f m> = $r14;

        $r24 = $r1.<a.ay: a.q o>;

        $r0.<a.aw: a.q o> = $r24;

        goto label12;

        catch java.security.GeneralSecurityException from label08 to label09 with label10;
    }

    void <init>(a.ay, a.ax)
    {
        a.aw $r0;
        a.ay $r1;
        a.ax $r2;

        nop;

        $r0 := @this: a.aw;

        $r1 := @parameter0: a.ay;

        $r2 := @parameter1: a.ax;

        specialinvoke $r0.<a.aw: void <init>(a.ay)>($r1);

        return;
    }

    static java.util.List b()
    {
        java.util.List r0;

        nop;

        r0 = <a.aw: java.util.List z>;

        return r0;
    }

    static java.util.List c()
    {
        java.util.List r0;

        nop;

        r0 = <a.aw: java.util.List A>;

        return r0;
    }

    a.a.m a()
    {
        a.aw $r0;
        a.d $r1;
        a.a.m r2;

        nop;

        $r0 := @this: a.aw;

        $r1 = $r0.<a.aw: a.d i>;

        if $r1 == null goto label1;

        $r1 = $r0.<a.aw: a.d i>;

        r2 = $r1.<a.d: a.a.m a>;

        return r2;

     label1:
        r2 = $r0.<a.aw: a.a.m j>;

        return r2;
    }

    public a.b authenticator()
    {
        a.aw $r0;
        a.b r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: a.b q>;

        return r1;
    }

    public a.d cache()
    {
        a.aw $r0;
        a.d r1;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: a.d i>;

        return r1;
    }

    public a.q certificatePinner()
    {
        a.aw $r0;
        a.q r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: a.q o>;

        return r1;
    }

    public int connectTimeoutMillis()
    {
        a.aw $r0;
        int i0;

        nop;

        $r0 := @this: a.aw;

        i0 = $r0.<a.aw: int w>;

        return i0;
    }

    public a.x connectionPool()
    {
        a.aw $r0;
        a.x r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: a.x r>;

        return r1;
    }

    public java.util.List connectionSpecs()
    {
        a.aw $r0;
        java.util.List r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: java.util.List d>;

        return r1;
    }

    public a.ad cookieJar()
    {
        a.aw $r0;
        a.ad r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: a.ad h>;

        return r1;
    }

    public a.af dispatcher()
    {
        a.aw $r0;
        a.af r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: a.af a>;

        return r1;
    }

    public a.ag dns()
    {
        a.aw $r0;
        a.ag r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: a.ag s>;

        return r1;
    }

    public boolean followRedirects()
    {
        a.aw $r0;
        boolean z0;

        nop;

        $r0 := @this: a.aw;

        z0 = $r0.<a.aw: boolean u>;

        return z0;
    }

    public boolean followSslRedirects()
    {
        a.aw $r0;
        boolean z0;

        nop;

        $r0 := @this: a.aw;

        z0 = $r0.<a.aw: boolean t>;

        return z0;
    }

    public javax.net.ssl.HostnameVerifier hostnameVerifier()
    {
        a.aw $r0;
        javax.net.ssl.HostnameVerifier r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: javax.net.ssl.HostnameVerifier n>;

        return r1;
    }

    public java.util.List interceptors()
    {
        a.aw $r0;
        java.util.List r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: java.util.List e>;

        return r1;
    }

    public java.util.List networkInterceptors()
    {
        a.aw $r0;
        java.util.List r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: java.util.List f>;

        return r1;
    }

    public a.ay newBuilder()
    {
        a.aw $r0;
        a.ay $r1;

        $r0 := @this: a.aw;

        $r1 = new a.ay;

        specialinvoke $r1.<a.ay: void <init>(a.aw)>($r0);

        return $r1;
    }

    public a.o newCall(a.be)
    {
        a.aw $r0;
        a.be $r1;
        a.ba $r2;

        nop;

        $r0 := @this: a.aw;

        $r1 := @parameter0: a.be;

        $r2 = new a.ba;

        specialinvoke $r2.<a.ba: void <init>(a.aw,a.be)>($r0, $r1);

        return $r2;
    }

    public java.util.List protocols()
    {
        a.aw $r0;
        java.util.List r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: java.util.List c>;

        return r1;
    }

    public java.net.Proxy proxy()
    {
        a.aw $r0;
        java.net.Proxy r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: java.net.Proxy b>;

        return r1;
    }

    public a.b proxyAuthenticator()
    {
        a.aw $r0;
        a.b r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: a.b p>;

        return r1;
    }

    public java.net.ProxySelector proxySelector()
    {
        a.aw $r0;
        java.net.ProxySelector r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: java.net.ProxySelector g>;

        return r1;
    }

    public int readTimeoutMillis()
    {
        a.aw $r0;
        int i0;

        nop;

        $r0 := @this: a.aw;

        i0 = $r0.<a.aw: int x>;

        return i0;
    }

    public boolean retryOnConnectionFailure()
    {
        a.aw $r0;
        boolean z0;

        nop;

        $r0 := @this: a.aw;

        z0 = $r0.<a.aw: boolean v>;

        return z0;
    }

    public javax.net.SocketFactory socketFactory()
    {
        a.aw $r0;
        javax.net.SocketFactory r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: javax.net.SocketFactory k>;

        return r1;
    }

    public javax.net.ssl.SSLSocketFactory sslSocketFactory()
    {
        a.aw $r0;
        javax.net.ssl.SSLSocketFactory r1;

        nop;

        $r0 := @this: a.aw;

        r1 = $r0.<a.aw: javax.net.ssl.SSLSocketFactory l>;

        return r1;
    }

    public int writeTimeoutMillis()
    {
        a.aw $r0;
        int i0;

        nop;

        $r0 := @this: a.aw;

        i0 = $r0.<a.aw: int y>;

        return i0;
    }
}
