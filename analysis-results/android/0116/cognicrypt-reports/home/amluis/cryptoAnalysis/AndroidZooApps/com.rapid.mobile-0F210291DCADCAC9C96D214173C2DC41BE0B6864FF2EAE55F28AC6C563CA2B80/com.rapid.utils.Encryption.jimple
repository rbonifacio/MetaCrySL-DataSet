public class com.rapid.utils.Encryption extends java.lang.Object
{

    public void <init>()
    {
        com.rapid.utils.Encryption $r0;

        $r0 := @this: com.rapid.utils.Encryption;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] base64Decode(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;
        byte[] $r1;
        int varReplacer309;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        varReplacer309 = 0;

        $r1 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r1, varReplacer309);

        return $r1;
    }

    private static java.lang.String base64Encode(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        int varReplacer315;

        nop;

        $r0 := @parameter0: byte[];

        varReplacer315 = 0;

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r0, varReplacer315);

        return $r1;
    }

    public static java.lang.String decrypt(java.lang.String, com.rapid.utils.Encryption$EncryptionProvider) throws java.security.GeneralSecurityException, java.io.IOException
    {
        java.lang.String $r0, $r9, varReplacer301, varReplacer304, varReplacer305;
        com.rapid.utils.Encryption$EncryptionProvider $r1;
        javax.crypto.SecretKeyFactory $r2;
        javax.crypto.spec.PBEKeySpec $r3;
        char[] $r4;
        javax.crypto.SecretKey $r5;
        javax.crypto.Cipher $r6;
        javax.crypto.spec.PBEParameterSpec $r7;
        byte[] $r8;
        int varReplacer302, varReplacer303;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.rapid.utils.Encryption$EncryptionProvider;

        varReplacer301 = "PBEWithMD5AndDES";

        $r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer301);

        $r3 = new javax.crypto.spec.PBEKeySpec;

        $r4 = interfaceinvoke $r1.<com.rapid.utils.Encryption$EncryptionProvider: char[] getPassword()>();

        specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>($r4);

        $r5 = virtualinvoke $r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3);

        varReplacer304 = "PBEWithMD5AndDES";

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer304);

        $r7 = new javax.crypto.spec.PBEParameterSpec;

        $r8 = interfaceinvoke $r1.<com.rapid.utils.Encryption$EncryptionProvider: byte[] getSalt()>();

        varReplacer302 = 20;

        specialinvoke $r7.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r8, varReplacer302);

        varReplacer303 = 2;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer303, $r5, $r7);

        $r9 = new java.lang.String;

        $r8 = staticinvoke <com.rapid.utils.Encryption: byte[] base64Decode(java.lang.String)>($r0);

        $r8 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r8);

        varReplacer305 = "UTF-8";

        specialinvoke $r9.<java.lang.String: void <init>(byte[],java.lang.String)>($r8, varReplacer305);

        return $r9;
    }

    public static java.lang.String encrypt(java.lang.String, com.rapid.utils.Encryption$EncryptionProvider) throws java.security.GeneralSecurityException, java.io.UnsupportedEncodingException
    {
        java.lang.String $r0, varReplacer311, varReplacer312, varReplacer313;
        com.rapid.utils.Encryption$EncryptionProvider $r1;
        javax.crypto.SecretKeyFactory $r2;
        javax.crypto.spec.PBEKeySpec $r3;
        char[] $r4;
        javax.crypto.SecretKey $r5;
        javax.crypto.Cipher $r6;
        javax.crypto.spec.PBEParameterSpec $r7;
        byte[] $r8;
        int varReplacer310, varReplacer314;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.rapid.utils.Encryption$EncryptionProvider;

        varReplacer311 = "PBEWithMD5AndDES";

        $r2 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer311);

        $r3 = new javax.crypto.spec.PBEKeySpec;

        $r4 = interfaceinvoke $r1.<com.rapid.utils.Encryption$EncryptionProvider: char[] getPassword()>();

        specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>($r4);

        $r5 = virtualinvoke $r2.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3);

        varReplacer312 = "PBEWithMD5AndDES";

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer312);

        $r7 = new javax.crypto.spec.PBEParameterSpec;

        $r8 = interfaceinvoke $r1.<com.rapid.utils.Encryption$EncryptionProvider: byte[] getSalt()>();

        varReplacer314 = 20;

        specialinvoke $r7.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r8, varReplacer314);

        varReplacer310 = 1;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer310, $r5, $r7);

        varReplacer313 = "UTF-8";

        $r8 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer313);

        $r8 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r8);

        $r0 = staticinvoke <com.rapid.utils.Encryption: java.lang.String base64Encode(byte[])>($r8);

        return $r0;
    }
}
