Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: bf58e9be970bb4d9b8b9779a2db2332dda7629a9233a386367015fa09918a479
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer1274)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: 5018a8ee8fda3ff89c3fe849fbcc398b2afdb3e5414bd6028b2657df7a0d58e7
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer1278)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: c443471ce47b488ef22d6e05513531205a9d31db6262ae3f068debc93b16679f
		Secure: true
	Object:
		Variable: varReplacer4529
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer4529)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 7b0eb301d6209165d705286882fbf9c6e33966ade188af1d838299de76101c3c
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1272)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 8dcfaaf1532032d42d1580a76ba12dc180308158d6a4ffd5cb0e61ce2262f130
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4530)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 9d5ef91c4e5941ba785f1f7034adfe9753df14f5cf64a4de03d438c7aaf0d537
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 8de80dfde750b54a8dc4f0a31eeee957e344d00f114bdcad0dca32f685f88fae
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 4755c5e34f3121596ca9a7f33f965995bb6b82fd562703d3839051d031b7eed3
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer1270)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: d5866b7018a1fa23f7c298d409e6e6e90a581cf5ad023975354833dea77bfe72
		Secure: false
	Object:
		Variable: r12
		Type: java.security.SecureRandom
		Statement: specialinvoke r12.<java.security.SecureRandom: void <init>()>()
		Method: <com.google.android.apps.analytics.PersistentHitStore: void loadExistingSession(android.database.sqlite.SQLiteDatabase)>
		SHA-256: 28ce7f80687f60d700936748d1561bbe406957299dfe63f40eacb0b994499d24
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4943)
		Method: <com.google.ads.conversiontracking.g: java.lang.String e(android.content.Context)>
		SHA-256: 95dd2521668fe0b79a90ae325d16485dd74e374920ae2113b38e96f28b29799f
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: fa136a602799631e6b4b59350ee9e51490addbaa3e0a4d88762b38031b45344d
		Secure: false
	Object:
		Variable: varReplacer1270
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer1270)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: f41e809204f28fa643d307e4be96fba65a988db3580fdbc712e3e0c2b55d2e34
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 9a39546100165a37e889fd7cf2a6477829cbb9e55b2e972d72febc045529fcda
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.ads.conversiontracking.g: java.lang.String e(android.content.Context)>
		SHA-256: a79e94387df141fe9dcb34d2ae3fc05c5097b22bbdc3a1b0291ebb4f6436ceb4
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer1276, varReplacer1277)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: 88a199b7e8a12842519231e674770a0fea99d57a3808bfdcb6018b089c501a08
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer4529)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 87b204d848ebf20d60a6b01fe0c544dba0585f25ba8dcfe9f6dc1ba8c353f48e
		Secure: false

Findings in Java Class: com.spiceworks.db.SimpleCrypto

	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1271, $r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #8dcfaaf1532032d42d1580a76ba12dc180308158d6a4ffd5cb0e61ce2262f130)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1272)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer1270)


	 in Method: byte[] encrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer4529)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #9d5ef91c4e5941ba785f1f7034adfe9753df14f5cf64a4de03d438c7aaf0d537)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4530)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4528, $r2)


	 in Method: byte[] getRawKey(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			Second parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(varReplacer1275, $r2)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 17

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 5
	ConstraintError: 2
=====================================================================