public class com.vp.astrology.existence_of_aliens.storage.security.SecurityUtil extends java.lang.Object
{

    public void <init>()
    {
        com.vp.astrology.existence_of_aliens.storage.security.SecurityUtil $r0;

        $r0 := @this: com.vp.astrology.existence_of_aliens.storage.security.SecurityUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] encrypt(byte[], int, byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1;
        javax.crypto.spec.IvParameterSpec $r3;
        javax.crypto.spec.SecretKeySpec $r4;
        java.lang.String $r5, varReplacer117, varReplacer118, varReplacer119, varReplacer120, varReplacer121, varReplacer122, varReplacer123;
        java.lang.RuntimeException $r6;
        com.vp.astrology.existence_of_aliens.storage.security.CipherAlgorithmType $r7;
        javax.crypto.Cipher $r8;
        java.lang.Throwable $r9, $r10, $r11, $r12, $r13, $r14;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $r2 := @parameter3: byte[];

        $i1 = lengthof $r1;

        if $i1 != 16 goto label01;

        $i1 = lengthof $r2;

        if $i1 == 16 goto label02;

     label01:
        $r6 = new java.lang.RuntimeException;

        varReplacer117 = "Set the encryption parameters correctly. The must be 16 length long each";

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>(varReplacer117);

        throw $r6;

     label02:
        $r4 = new javax.crypto.spec.SecretKeySpec;

        $r7 = <com.vp.astrology.existence_of_aliens.storage.security.CipherAlgorithmType: com.vp.astrology.existence_of_aliens.storage.security.CipherAlgorithmType AES>;

     label03:
        $r5 = virtualinvoke $r7.<com.vp.astrology.existence_of_aliens.storage.security.CipherAlgorithmType: java.lang.String getAlgorithmName()>();

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r5);

     label04:
        $r3 = new javax.crypto.spec.IvParameterSpec;

     label05:
        specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2);

     label06:
        $r5 = <com.vp.astrology.existence_of_aliens.storage.security.CipherTransformationType: java.lang.String AES_CBC_PKCS5Padding>;

     label07:
        $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5);

        virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($i0, $r4, $r3);

        $r0 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label08:
        return $r0;

     label09:
        $r9 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        varReplacer120 = "Failed to encrypt/descrypt - Unknown Algorithm";

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer120, $r9);

        throw $r6;

     label10:
        $r10 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        varReplacer118 = "Failed to encrypt/descrypt- Unknown Padding";

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer118, $r10);

        throw $r6;

     label11:
        $r11 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        varReplacer123 = "Failed to encrypt/descrypt - Invalid Key";

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer123, $r11);

        throw $r6;

     label12:
        $r12 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        varReplacer119 = "Failed to encrypt/descrypt - Invalid Algorithm Parameter";

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer119, $r12);

        throw $r6;

     label13:
        $r13 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        varReplacer122 = "Failed to encrypt/descrypt";

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer122, $r13);

        throw $r6;

     label14:
        $r14 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        varReplacer121 = "Failed to encrypt/descrypt";

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer121, $r14);

        throw $r6;

        catch java.security.NoSuchAlgorithmException from label03 to label04 with label09;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label09;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label09;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label10;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label10;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label10;
        catch java.security.InvalidKeyException from label03 to label04 with label11;
        catch java.security.InvalidKeyException from label05 to label06 with label11;
        catch java.security.InvalidKeyException from label07 to label08 with label11;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label12;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label12;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label13;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label13;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label13;
        catch javax.crypto.BadPaddingException from label03 to label04 with label14;
        catch javax.crypto.BadPaddingException from label05 to label06 with label14;
        catch javax.crypto.BadPaddingException from label07 to label08 with label14;
    }

    public java.lang.String xor(java.lang.String, java.lang.String)
    {
        com.vp.astrology.existence_of_aliens.storage.security.SecurityUtil $r0;
        java.lang.String $r1, $r2;
        byte[] $r3, $r4, $r5;
        int $i0, $i1;
        byte $b2, $b3;
        java.lang.Throwable $r6;

        $r0 := @this: com.vp.astrology.existence_of_aliens.storage.security.SecurityUtil;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label1:
        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r5 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label2:
        $i0 = lengthof $r4;

        $r3 = newarray (byte)[$i0];

        $i0 = 0;

     label3:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label4;

        $b2 = $r4[$i0];

        $i1 = lengthof $r5;

        $i1 = $i0 % $i1;

        $b3 = $r5[$i1];

        $b2 = $b2 ^ $b3;

        $r3[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r1 = new java.lang.String;

     label5:
        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, "UTF-8");

     label6:
        return $r1;

     label7:
        $r6 := @caughtexception;

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label7;
        catch java.io.UnsupportedEncodingException from label5 to label6 with label7;
    }
}
