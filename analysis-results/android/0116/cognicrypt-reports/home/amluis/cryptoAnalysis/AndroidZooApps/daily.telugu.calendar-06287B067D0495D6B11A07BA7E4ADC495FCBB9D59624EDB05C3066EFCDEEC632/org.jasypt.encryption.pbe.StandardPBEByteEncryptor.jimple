public final class org.jasypt.encryption.pbe.StandardPBEByteEncryptor extends java.lang.Object
{
    private java.lang.String algorithm;
    private boolean algorithmSet;
    private org.jasypt.encryption.pbe.config.PBEConfig config;
    private javax.crypto.Cipher decryptCipher;
    private javax.crypto.Cipher encryptCipher;
    private boolean initialized;
    private boolean iterationsSet;
    private javax.crypto.SecretKey key;
    private int keyObtentionIterations;
    private char[] password;
    private boolean passwordSet;
    private java.security.Provider provider;
    private java.lang.String providerName;
    private boolean providerNameSet;
    private boolean providerSet;
    private org.jasypt.salt.SaltGenerator saltGenerator;
    private boolean saltGeneratorSet;
    private int saltSizeBytes;

    public void <init>()
    {
        org.jasypt.encryption.pbe.StandardPBEByteEncryptor $r0;
        int varReplacer3248, varReplacer3249, varReplacer3251, varReplacer3256, varReplacer3257, varReplacer3260, varReplacer3261, varReplacer3262, varReplacer3263;
        java.lang.String varReplacer3250;
        null_type varReplacer3252, varReplacer3253, varReplacer3254, varReplacer3255, varReplacer3258, varReplacer3259, varReplacer3264, varReplacer3265;

        nop;

        $r0 := @this: org.jasypt.encryption.pbe.StandardPBEByteEncryptor;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        varReplacer3250 = "PBEWithMD5AndDES";

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm> = varReplacer3250;

        varReplacer3258 = null;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String providerName> = varReplacer3258;

        varReplacer3265 = null;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.security.Provider provider> = varReplacer3265;

        varReplacer3255 = null;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: char[] password> = varReplacer3255;

        varReplacer3260 = 1000;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: int keyObtentionIterations> = varReplacer3260;

        varReplacer3259 = null;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.salt.SaltGenerator saltGenerator> = varReplacer3259;

        varReplacer3256 = 8;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: int saltSizeBytes> = varReplacer3256;

        varReplacer3254 = null;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config> = varReplacer3254;

        varReplacer3248 = 0;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean algorithmSet> = varReplacer3248;

        varReplacer3257 = 0;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean passwordSet> = varReplacer3257;

        varReplacer3261 = 0;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean iterationsSet> = varReplacer3261;

        varReplacer3262 = 0;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean saltGeneratorSet> = varReplacer3262;

        varReplacer3249 = 0;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean providerNameSet> = varReplacer3249;

        varReplacer3251 = 0;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean providerSet> = varReplacer3251;

        varReplacer3263 = 0;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean initialized> = varReplacer3263;

        varReplacer3252 = null;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.SecretKey key> = varReplacer3252;

        varReplacer3253 = null;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher encryptCipher> = varReplacer3253;

        varReplacer3264 = null;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher decryptCipher> = varReplacer3264;

        return;
    }

    private static void cleanPassword(char[])
    {
        char[] $r0;
        int $i0, $i1;
        java.lang.Throwable $r1;

        nop;

        $r0 := @parameter0: char[];

        if $r0 == null goto label7;

        entermonitor $r0;

     label1:
        $i0 = lengthof $r0;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r0[$i1] = 0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        exitmonitor $r0;

     label4:
        return;

     label5:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r1;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void handleInvalidKeyException(java.security.InvalidKeyException)
    {
        org.jasypt.encryption.pbe.StandardPBEByteEncryptor $r0;
        java.security.InvalidKeyException $r1;
        java.lang.String $r2, varReplacer3888, varReplacer3889;
        int $i0;
        org.jasypt.exceptions.EncryptionOperationNotPossibleException $r3;

        nop;

        $r0 := @this: org.jasypt.encryption.pbe.StandardPBEByteEncryptor;

        $r1 := @parameter0: java.security.InvalidKeyException;

        $r2 = virtualinvoke $r1.<java.security.InvalidKeyException: java.lang.String getMessage()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r1.<java.security.InvalidKeyException: java.lang.String getMessage()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        varReplacer3888 = "KEY SIZE";

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>(varReplacer3888);

        if $i0 == -1 goto label1;

        $r3 = new org.jasypt.exceptions.EncryptionOperationNotPossibleException;

        varReplacer3889 = "Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine";

        specialinvoke $r3.<org.jasypt.exceptions.EncryptionOperationNotPossibleException: void <init>(java.lang.String)>(varReplacer3889);

        throw $r3;

     label1:
        return;
    }

    private void resolveConfigurationPassword()
    {
        org.jasypt.encryption.pbe.StandardPBEByteEncryptor $r0;
        int $i0, varReplacer3876, varReplacer3877, varReplacer3878;
        boolean $z0;
        org.jasypt.encryption.pbe.config.PBEConfig $r1;
        char[] $r2, $r4;
        org.jasypt.encryption.pbe.config.PBECleanablePasswordConfig $r3;
        java.lang.String $r5, varReplacer3875;
        java.lang.Throwable $r6;

        nop;

        $r0 := @this: org.jasypt.encryption.pbe.StandardPBEByteEncryptor;

        entermonitor $r0;

     label01:
        $z0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean initialized>;

        if $z0 != 0 goto label06;

        $r1 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        if $r1 == null goto label06;

        $z0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean passwordSet>;

        if $z0 != 0 goto label06;

        $r2 = null;

        $r1 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $z0 = $r1 instanceof org.jasypt.encryption.pbe.config.PBECleanablePasswordConfig;

        if $z0 == 0 goto label07;

        $r1 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $r3 = (org.jasypt.encryption.pbe.config.PBECleanablePasswordConfig) $r1;

        $r2 = interfaceinvoke $r3.<org.jasypt.encryption.pbe.config.PBECleanablePasswordConfig: char[] getPasswordCharArray()>();

     label02:
        if $r2 == null goto label04;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label09;

        $z0 = 1;

     label03:
        varReplacer3875 = "Password cannot be set empty";

        staticinvoke <org.jasypt.commons.CommonUtils: void validateIsTrue(boolean,java.lang.String)>($z0, varReplacer3875);

     label04:
        if $r2 == null goto label05;

        $i0 = lengthof $r2;

        $r4 = newarray (char)[$i0];

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: char[] password> = $r4;

        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: char[] password>;

        $i0 = lengthof $r2;

        varReplacer3876 = 0;

        varReplacer3877 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, varReplacer3876, $r4, varReplacer3876, $i0);

        varReplacer3878 = 1;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean passwordSet> = varReplacer3878;

        staticinvoke <org.jasypt.encryption.pbe.StandardPBEByteEncryptor: void cleanPassword(char[])>($r2);

     label05:
        $r1 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $z0 = $r1 instanceof org.jasypt.encryption.pbe.config.PBECleanablePasswordConfig;

        if $z0 == 0 goto label06;

        $r1 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $r3 = (org.jasypt.encryption.pbe.config.PBECleanablePasswordConfig) $r1;

        interfaceinvoke $r3.<org.jasypt.encryption.pbe.config.PBECleanablePasswordConfig: void cleanPassword()>();

     label06:
        exitmonitor $r0;

        return;

     label07:
        $r1 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $r5 = interfaceinvoke $r1.<org.jasypt.encryption.pbe.config.PBEConfig: java.lang.String getPassword()>();

        if $r5 == null goto label02;

        $r2 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>();

     label08:
        goto label02;

     label09:
        $z0 = 0;

        goto label03;

     label10:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

        catch java.lang.Throwable from label01 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
    }

    public byte[] encrypt(byte[]) throws org.jasypt.exceptions.EncryptionOperationNotPossibleException
    {
        org.jasypt.encryption.pbe.StandardPBEByteEncryptor $r0;
        byte[] $r1, $r5;
        javax.crypto.spec.PBEParameterSpec $r2, r11;
        javax.crypto.SecretKey $r3;
        boolean $z0;
        org.jasypt.salt.SaltGenerator $r4;
        int $i0, varReplacer3881;
        javax.crypto.Cipher $r6, $r7;
        java.lang.Throwable $r8, $r9;
        java.lang.Exception $r10;
        org.jasypt.exceptions.EncryptionOperationNotPossibleException r12;
        java.security.InvalidKeyException r13;
        null_type varReplacer3880;

        nop;

        $r0 := @this: org.jasypt.encryption.pbe.StandardPBEByteEncryptor;

        $r1 := @parameter0: byte[];

        if $r1 != null goto label01;

        varReplacer3880 = null;

        return varReplacer3880;

     label01:
        $z0 = virtualinvoke $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean isInitialized()>();

        if $z0 != 0 goto label02;

        virtualinvoke $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: void initialize()>();

     label02:
        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.salt.SaltGenerator saltGenerator>;

        $i0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: int saltSizeBytes>;

     label03:
        $r5 = interfaceinvoke $r4.<org.jasypt.salt.SaltGenerator: byte[] generateSalt(int)>($i0);

     label04:
        r11 = new javax.crypto.spec.PBEParameterSpec;

        $r2 = r11;

     label05:
        $i0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: int keyObtentionIterations>;

     label06:
        specialinvoke r11.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r5, $i0);

     label07:
        $r6 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher encryptCipher>;

        entermonitor $r6;

     label08:
        $r7 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher encryptCipher>;

        $r3 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.SecretKey key>;

        varReplacer3881 = 1;

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer3881, $r3, $r2);

        $r7 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher encryptCipher>;

        $r1 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

        exitmonitor $r6;

     label09:
        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.salt.SaltGenerator saltGenerator>;

     label10:
        $z0 = interfaceinvoke $r4.<org.jasypt.salt.SaltGenerator: boolean includePlainSaltInEncryptionResults()>();

     label11:
        if $z0 == 0 goto label19;

     label12:
        $r1 = staticinvoke <org.jasypt.commons.CommonUtils: byte[] appendArrays(byte[],byte[])>($r5, $r1);

     label13:
        return $r1;

     label14:
        $r8 := @caughtexception;

     label15:
        exitmonitor $r6;

     label16:
        throw $r8;

     label17:
        $r9 := @caughtexception;

        r13 = (java.security.InvalidKeyException) $r9;

        specialinvoke $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: void handleInvalidKeyException(java.security.InvalidKeyException)>(r13);

        r12 = new org.jasypt.exceptions.EncryptionOperationNotPossibleException;

        specialinvoke r12.<org.jasypt.exceptions.EncryptionOperationNotPossibleException: void <init>()>();

        throw r12;

     label18:
        $r10 := @caughtexception;

        r12 = new org.jasypt.exceptions.EncryptionOperationNotPossibleException;

        specialinvoke r12.<org.jasypt.exceptions.EncryptionOperationNotPossibleException: void <init>()>();

        throw r12;

     label19:
        return $r1;

        catch java.security.InvalidKeyException from label03 to label04 with label17;
        catch java.security.InvalidKeyException from label06 to label07 with label17;
        catch java.lang.Exception from label02 to label04 with label18;
        catch java.lang.Exception from label05 to label08 with label18;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.security.InvalidKeyException from label10 to label11 with label17;
        catch java.security.InvalidKeyException from label12 to label13 with label17;
        catch java.lang.Exception from label09 to label11 with label18;
        catch java.lang.Exception from label12 to label13 with label18;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.security.InvalidKeyException from label16 to label17 with label17;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    public void initialize()
    {
        org.jasypt.encryption.pbe.StandardPBEByteEncryptor $r0;
        org.jasypt.exceptions.EncryptionInitializationException $r1;
        javax.crypto.spec.PBEKeySpec $r2;
        java.lang.Throwable $r3, $r16;
        boolean $z0, $z1;
        org.jasypt.encryption.pbe.config.PBEConfig $r4;
        java.lang.String $r5, $r6, $r10, $r11, varReplacer3859, varReplacer3860, varReplacer3862, varReplacer3863;
        java.lang.Integer $r7;
        int $i0, varReplacer3861;
        org.jasypt.salt.SaltGenerator $r8, $r9;
        java.security.Provider $r12, $r13;
        org.jasypt.salt.RandomSaltGenerator $r14;
        char[] $r15, $r17;
        javax.crypto.SecretKeyFactory $r18;
        javax.crypto.SecretKey $r19;
        javax.crypto.Cipher $r20;

        nop;

        $r0 := @this: org.jasypt.encryption.pbe.StandardPBEByteEncryptor;

        $z0 = 1;

        entermonitor $r0;

     label01:
        $z1 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean initialized>;

        if $z1 != 0 goto label40;

        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        if $r4 == null goto label16;

        specialinvoke $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: void resolveConfigurationPassword()>();

        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $r5 = interfaceinvoke $r4.<org.jasypt.encryption.pbe.config.PBEConfig: java.lang.String getAlgorithm()>();

        $r6 = $r5;

        if $r5 == null goto label02;

        varReplacer3863 = "Algorithm cannot be set empty";

        staticinvoke <org.jasypt.commons.CommonUtils: void validateNotEmpty(java.lang.String,java.lang.String)>($r5, varReplacer3863);

     label02:
        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $r7 = interfaceinvoke $r4.<org.jasypt.encryption.pbe.config.PBEConfig: java.lang.Integer getKeyObtentionIterations()>();

        if $r7 == null goto label04;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i0 <= 0 goto label22;

     label03:
        varReplacer3862 = "Number of iterations for key obtention must be greater than zero";

        staticinvoke <org.jasypt.commons.CommonUtils: void validateIsTrue(boolean,java.lang.String)>($z0, varReplacer3862);

     label04:
        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $r8 = interfaceinvoke $r4.<org.jasypt.encryption.pbe.config.PBEConfig: org.jasypt.salt.SaltGenerator getSaltGenerator()>();

        $r9 = $r8;

        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $r10 = interfaceinvoke $r4.<org.jasypt.encryption.pbe.config.PBEConfig: java.lang.String getProviderName()>();

        $r11 = $r10;

        if $r10 == null goto label05;

        varReplacer3859 = "Provider name cannot be empty";

        staticinvoke <org.jasypt.commons.CommonUtils: void validateNotEmpty(java.lang.String,java.lang.String)>($r10, varReplacer3859);

     label05:
        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.encryption.pbe.config.PBEConfig config>;

        $r12 = interfaceinvoke $r4.<org.jasypt.encryption.pbe.config.PBEConfig: java.security.Provider getProvider()>();

        $r13 = $r12;

        $z0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean algorithmSet>;

        if $z0 != 0 goto label06;

        if $r5 != null goto label07;

     label06:
        $r6 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

     label07:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm> = $r6;

        $z0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean iterationsSet>;

        if $z0 != 0 goto label08;

        if $r7 != null goto label23;

     label08:
        $i0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: int keyObtentionIterations>;

     label09:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: int keyObtentionIterations> = $i0;

        $z0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean saltGeneratorSet>;

        if $z0 != 0 goto label10;

        if $r8 != null goto label11;

     label10:
        $r9 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.salt.SaltGenerator saltGenerator>;

     label11:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.salt.SaltGenerator saltGenerator> = $r9;

        $z0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean providerNameSet>;

        if $z0 != 0 goto label12;

        if $r10 != null goto label13;

     label12:
        $r11 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String providerName>;

     label13:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String providerName> = $r11;

        $z0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean providerSet>;

        if $z0 != 0 goto label14;

        if $r12 != null goto label15;

     label14:
        $r13 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.security.Provider provider>;

     label15:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.security.Provider provider> = $r13;

     label16:
        $r8 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.salt.SaltGenerator saltGenerator>;

        if $r8 != null goto label17;

        $r14 = new org.jasypt.salt.RandomSaltGenerator;

        specialinvoke $r14.<org.jasypt.salt.RandomSaltGenerator: void <init>()>();

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: org.jasypt.salt.SaltGenerator saltGenerator> = $r14;

     label17:
        $r15 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: char[] password>;

        if $r15 != null goto label25;

        $r1 = new org.jasypt.exceptions.EncryptionInitializationException;

     label18:
        varReplacer3860 = "Password not set for Password Based Encryptor";

        specialinvoke $r1.<org.jasypt.exceptions.EncryptionInitializationException: void <init>(java.lang.String)>(varReplacer3860);

        throw $r1;

     label19:
        $r1 := @caughtexception;

     label20:
        throw $r1;

     label21:
        $r16 := @caughtexception;

        exitmonitor $r0;

        throw $r16;

     label22:
        $z0 = 0;

        goto label03;

     label23:
        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

     label24:
        goto label09;

     label25:
        $r15 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: char[] password>;

     label26:
        $r15 = staticinvoke <org.jasypt.normalization.Normalizer: char[] normalizeToNfc(char[])>($r15);

     label27:
        $r2 = new javax.crypto.spec.PBEKeySpec;

     label28:
        specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>($r15);

     label29:
        $r17 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: char[] password>;

     label30:
        staticinvoke <org.jasypt.encryption.pbe.StandardPBEByteEncryptor: void cleanPassword(char[])>($r17);

        staticinvoke <org.jasypt.encryption.pbe.StandardPBEByteEncryptor: void cleanPassword(char[])>($r15);

     label31:
        $r12 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.security.Provider provider>;

        if $r12 == null goto label41;

        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

        $r12 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.security.Provider provider>;

     label32:
        $r18 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)>($r5, $r12);

        $r19 = virtualinvoke $r18.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2);

     label33:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.SecretKey key> = $r19;

        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

        $r12 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.security.Provider provider>;

     label34:
        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>($r5, $r12);

     label35:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher encryptCipher> = $r20;

        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

        $r12 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.security.Provider provider>;

     label36:
        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>($r5, $r12);

     label37:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher decryptCipher> = $r20;

     label38:
        $r20 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher encryptCipher>;

        $i0 = virtualinvoke $r20.<javax.crypto.Cipher: int getBlockSize()>();

        if $i0 <= 0 goto label39;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: int saltSizeBytes> = $i0;

     label39:
        varReplacer3861 = 1;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean initialized> = varReplacer3861;

     label40:
        exitmonitor $r0;

        return;

     label41:
        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String providerName>;

        if $r5 == null goto label51;

        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

        $r6 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String providerName>;

     label42:
        $r18 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r5, $r6);

        $r19 = virtualinvoke $r18.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2);

     label43:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.SecretKey key> = $r19;

        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

        $r6 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String providerName>;

     label44:
        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r5, $r6);

     label45:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher encryptCipher> = $r20;

        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

        $r6 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String providerName>;

     label46:
        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r5, $r6);

     label47:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher decryptCipher> = $r20;

     label48:
        goto label38;

     label49:
        $r3 := @caughtexception;

     label50:
        $r1 = new org.jasypt.exceptions.EncryptionInitializationException;

        specialinvoke $r1.<org.jasypt.exceptions.EncryptionInitializationException: void <init>(java.lang.Throwable)>($r3);

        throw $r1;

     label51:
        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

     label52:
        $r18 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>($r5);

        $r19 = virtualinvoke $r18.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2);

     label53:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.SecretKey key> = $r19;

        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

     label54:
        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5);

     label55:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher encryptCipher> = $r20;

        $r5 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm>;

     label56:
        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5);

     label57:
        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: javax.crypto.Cipher decryptCipher> = $r20;

     label58:
        goto label38;

        catch java.lang.Throwable from label01 to label17 with label21;
        catch org.jasypt.exceptions.EncryptionInitializationException from label18 to label19 with label19;
        catch java.lang.Throwable from label17 to label19 with label49;
        catch java.lang.Throwable from label17 to label19 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label23 to label24 with label21;
        catch org.jasypt.exceptions.EncryptionInitializationException from label26 to label27 with label19;
        catch org.jasypt.exceptions.EncryptionInitializationException from label28 to label29 with label19;
        catch org.jasypt.exceptions.EncryptionInitializationException from label30 to label31 with label19;
        catch org.jasypt.exceptions.EncryptionInitializationException from label32 to label33 with label19;
        catch org.jasypt.exceptions.EncryptionInitializationException from label34 to label35 with label19;
        catch org.jasypt.exceptions.EncryptionInitializationException from label36 to label37 with label19;
        catch java.lang.Throwable from label25 to label38 with label49;
        catch java.lang.Throwable from label25 to label38 with label21;
        catch java.lang.Throwable from label38 to label40 with label21;
        catch org.jasypt.exceptions.EncryptionInitializationException from label42 to label43 with label19;
        catch org.jasypt.exceptions.EncryptionInitializationException from label44 to label45 with label19;
        catch org.jasypt.exceptions.EncryptionInitializationException from label46 to label47 with label19;
        catch java.lang.Throwable from label41 to label48 with label49;
        catch java.lang.Throwable from label41 to label48 with label21;
        catch java.lang.Throwable from label50 to label51 with label21;
        catch org.jasypt.exceptions.EncryptionInitializationException from label52 to label53 with label19;
        catch org.jasypt.exceptions.EncryptionInitializationException from label54 to label55 with label19;
        catch org.jasypt.exceptions.EncryptionInitializationException from label56 to label57 with label19;
        catch java.lang.Throwable from label51 to label58 with label49;
        catch java.lang.Throwable from label51 to label58 with label21;
    }

    public boolean isInitialized()
    {
        org.jasypt.encryption.pbe.StandardPBEByteEncryptor $r0;
        boolean z0;

        nop;

        $r0 := @this: org.jasypt.encryption.pbe.StandardPBEByteEncryptor;

        z0 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean initialized>;

        return z0;
    }

    public void setAlgorithm(java.lang.String)
    {
        org.jasypt.encryption.pbe.StandardPBEByteEncryptor $r0;
        java.lang.String $r1, varReplacer3847, varReplacer3848, varReplacer3849;
        boolean $z0;
        org.jasypt.exceptions.AlreadyInitializedException $r2;
        java.lang.Throwable $r3;
        int varReplacer3850;

        nop;

        $r0 := @this: org.jasypt.encryption.pbe.StandardPBEByteEncryptor;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        varReplacer3847 = "PBEWithMD5AndDES";

        varReplacer3848 = "Algorithm cannot be set empty";

        staticinvoke <org.jasypt.commons.CommonUtils: void validateNotEmpty(java.lang.String,java.lang.String)>(varReplacer3847, varReplacer3848);

        $z0 = virtualinvoke $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean isInitialized()>();

        if $z0 == 0 goto label3;

        $r2 = new org.jasypt.exceptions.AlreadyInitializedException;

        specialinvoke $r2.<org.jasypt.exceptions.AlreadyInitializedException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

     label3:
        varReplacer3849 = "PBEWithMD5AndDES";

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: java.lang.String algorithm> = varReplacer3849;

        varReplacer3850 = 1;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean algorithmSet> = varReplacer3850;

     label4:
        exitmonitor $r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void setPassword(java.lang.String)
    {
        org.jasypt.encryption.pbe.StandardPBEByteEncryptor $r0;
        java.lang.String $r1, varReplacer3893, varReplacer3894;
        boolean $z0;
        org.jasypt.exceptions.AlreadyInitializedException $r2;
        java.lang.Throwable $r3;
        char[] $r4;
        int varReplacer3895;

        nop;

        $r0 := @this: org.jasypt.encryption.pbe.StandardPBEByteEncryptor;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        varReplacer3893 = "@kmin_tech";

        varReplacer3894 = "Password cannot be set empty";

        staticinvoke <org.jasypt.commons.CommonUtils: void validateNotEmpty(java.lang.String,java.lang.String)>(varReplacer3893, varReplacer3894);

        $z0 = virtualinvoke $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean isInitialized()>();

        if $z0 == 0 goto label3;

        $r2 = new org.jasypt.exceptions.AlreadyInitializedException;

        specialinvoke $r2.<org.jasypt.exceptions.AlreadyInitializedException: void <init>()>();

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

     label3:
        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: char[] password>;

        if $r4 == null goto label4;

        $r4 = $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: char[] password>;

        staticinvoke <org.jasypt.encryption.pbe.StandardPBEByteEncryptor: void cleanPassword(char[])>($r4);

     label4:
        $r4 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: char[] password> = $r4;

        varReplacer3895 = 1;

        $r0.<org.jasypt.encryption.pbe.StandardPBEByteEncryptor: boolean passwordSet> = varReplacer3895;

     label5:
        exitmonitor $r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
    }
}
