public class hk.gov.police.mobile.push.KeyPairCrypto extends java.lang.Object
{

    public void <init>()
    {
        hk.gov.police.mobile.push.KeyPairCrypto $r0;

        $r0 := @this: hk.gov.police.mobile.push.KeyPairCrypto;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.security.Key bytesToKey(java.lang.String, byte[]) throws java.lang.ClassNotFoundException, java.security.NoSuchAlgorithmException, java.security.spec.InvalidKeySpecException
    {
        java.lang.String $r0, $r4;
        byte[] $r1;
        java.security.spec.PKCS8EncodedKeySpec $r2;
        java.security.spec.X509EncodedKeySpec $r3;
        boolean $z0;
        java.security.KeyFactory $r5;
        java.security.PublicKey $r6;
        java.security.PrivateKey $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r4 = "public-key";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r3 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1);

        $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r6 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

        return $r6;

     label1:
        $r4 = "private-key";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        $r2 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r2.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r1);

        $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r7 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r2);

        return $r7;

     label2:
        return null;
    }

    public static byte[] crypt(java.lang.String, int, java.security.Key, byte[]) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        java.lang.String $r0;
        int $i0;
        java.security.Key $r1;
        byte[] $r2;
        javax.crypto.Cipher $r3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.security.Key;

        $r2 := @parameter3: byte[];

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r0);

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>($i0, $r1);

        $r2 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        return $r2;
    }

    public static java.security.KeyPair genKeyPair() throws java.security.NoSuchAlgorithmException
    {
        java.security.KeyPairGenerator $r0;
        java.security.KeyPair $r1;
        java.lang.String varReplacer2342;
        int varReplacer2343;

        nop;

        varReplacer2342 = "RSA";

        $r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer2342);

        varReplacer2343 = 2048;

        virtualinvoke $r0.<java.security.KeyPairGenerator: void initialize(int)>(varReplacer2343);

        $r1 = virtualinvoke $r0.<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()>();

        return $r1;
    }

    public static byte[] keyToBytes(java.security.Key)
    {
        java.security.Key $r0;
        byte[] $r1;

        nop;

        $r0 := @parameter0: java.security.Key;

        $r1 = interfaceinvoke $r0.<java.security.Key: byte[] getEncoded()>();

        return $r1;
    }

    public static byte[] sign(java.security.PrivateKey, java.lang.String) throws java.security.SignatureException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        java.security.PrivateKey $r0;
        java.lang.String $r1, varReplacer2293;
        java.security.Signature $r2;
        byte[] $r3;
        null_type varReplacer2292;

        nop;

        $r0 := @parameter0: java.security.PrivateKey;

        $r1 := @parameter1: java.lang.String;

        varReplacer2293 = "SHA256withRSA";

        $r2 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer2293);

        varReplacer2292 = null;

        virtualinvoke $r2.<java.security.Signature: void initSign(java.security.PrivateKey)>(varReplacer2292);

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r2.<java.security.Signature: void update(byte[])>($r3);

        $r3 = virtualinvoke $r2.<java.security.Signature: byte[] sign()>();

        return $r3;
    }
}
