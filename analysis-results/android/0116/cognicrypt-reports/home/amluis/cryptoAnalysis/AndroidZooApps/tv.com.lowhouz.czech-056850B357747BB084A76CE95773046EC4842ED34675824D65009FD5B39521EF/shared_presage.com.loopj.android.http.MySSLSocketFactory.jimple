public class shared_presage.com.loopj.android.http.MySSLSocketFactory extends org.apache.http.conn.ssl.SSLSocketFactory
{
    javax.net.ssl.SSLContext sslContext;

    public void <init>(java.security.KeyStore)
    {
        shared_presage.com.loopj.android.http.MySSLSocketFactory $r0;
        java.security.KeyStore $r1;
        javax.net.ssl.SSLContext $r2;
        java.lang.Object[] $r3;
        shared_presage.com.loopj.android.http.e r4;
        javax.net.ssl.TrustManager[] r5;
        java.lang.String varReplacer1274;
        null_type varReplacer1275, varReplacer1276;

        nop;

        $r0 := @this: shared_presage.com.loopj.android.http.MySSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        specialinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore)>($r1);

        varReplacer1274 = "TLS";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1274);

        $r0.<shared_presage.com.loopj.android.http.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext> = $r2;

        r4 = new shared_presage.com.loopj.android.http.e;

        specialinvoke r4.<shared_presage.com.loopj.android.http.e: void <init>(shared_presage.com.loopj.android.http.MySSLSocketFactory)>($r0);

        $r2 = $r0.<shared_presage.com.loopj.android.http.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r3 = newarray (javax.net.ssl.TrustManager)[1];

        $r3[0] = r4;

        r5 = (javax.net.ssl.TrustManager[]) $r3;

        varReplacer1275 = null;

        varReplacer1276 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1275, r5, varReplacer1275);

        return;
    }

    public static org.apache.http.conn.ssl.SSLSocketFactory getFixedSocketFactory()
    {
        shared_presage.com.loopj.android.http.MySSLSocketFactory $r0;
        java.security.KeyStore $r1;
        org.apache.http.conn.ssl.X509HostnameVerifier $r2;
        java.lang.Throwable $r3;
        org.apache.http.conn.ssl.SSLSocketFactory $r4;

     label1:
        nop;

        $r0 = new shared_presage.com.loopj.android.http.MySSLSocketFactory;

        $r1 = staticinvoke <shared_presage.com.loopj.android.http.MySSLSocketFactory: java.security.KeyStore getKeystore()>();

        specialinvoke $r0.<shared_presage.com.loopj.android.http.MySSLSocketFactory: void <init>(java.security.KeyStore)>($r1);

        $r2 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER>;

        virtualinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>($r2);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace()>();

        $r4 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>();

        return $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.security.KeyStore getKeystore()
    {
        java.lang.String $r0;
        java.security.KeyStore $r1, $r2;
        java.lang.Throwable $r3, $r4;
        null_type varReplacer1272, varReplacer1273;

     label1:
        nop;

        $r0 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r0);

     label2:
        $r2 = $r1;

     label3:
        varReplacer1272 = null;

        varReplacer1273 = null;

        virtualinvoke $r1.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer1272, varReplacer1272);

     label4:
        return $r1;

     label5:
        $r3 := @caughtexception;

        $r2 = null;

        $r4 = $r3;

     label6:
        virtualinvoke $r4.<java.lang.Throwable: void printStackTrace()>();

        return $r2;

     label7:
        $r4 := @caughtexception;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    public java.net.Socket createSocket()
    {
        shared_presage.com.loopj.android.http.MySSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3;

        $r0 := @this: shared_presage.com.loopj.android.http.MySSLSocketFactory;

        $r1 = $r0.<shared_presage.com.loopj.android.http.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        return $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean)
    {
        shared_presage.com.loopj.android.http.MySSLSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        javax.net.ssl.SSLContext $r3;
        javax.net.ssl.SSLSocketFactory $r4;

        $r0 := @this: shared_presage.com.loopj.android.http.MySSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = $r0.<shared_presage.com.loopj.android.http.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r1 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);

        return $r1;
    }
}
