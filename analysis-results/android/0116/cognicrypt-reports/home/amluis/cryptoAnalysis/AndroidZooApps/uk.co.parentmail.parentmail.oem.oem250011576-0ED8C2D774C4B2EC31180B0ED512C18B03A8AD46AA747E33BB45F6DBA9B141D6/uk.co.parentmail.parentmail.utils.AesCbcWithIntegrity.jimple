public class uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity extends java.lang.Object
{
    private static final int AES_KEY_LENGTH_BITS;
    private static final boolean ALLOW_BROKEN_PRNG;
    public static final int BASE64_FLAGS;
    private static final java.lang.String CIPHER;
    private static final java.lang.String CIPHER_TRANSFORMATION;
    private static final java.lang.String HMAC_ALGORITHM;
    private static final int HMAC_KEY_LENGTH_BITS;
    private static final int IV_LENGTH_BYTES;
    private static final java.lang.String PBE_ALGORITHM;
    private static final int PBE_ITERATION_COUNT;
    private static final int PBE_SALT_LENGTH_BITS;
    private static final java.lang.String RANDOM_ALGORITHM;
    static final java.util.concurrent.atomic.AtomicBoolean prngFixed;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicBoolean $r0;
        int varReplacer3386;

        nop;

        $r0 = new java.util.concurrent.atomic.AtomicBoolean;

        varReplacer3386 = 0;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(varReplacer3386);

        <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: java.util.concurrent.atomic.AtomicBoolean prngFixed> = $r0;

        return;
    }

    public void <init>()
    {
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity $r0;

        $r0 := @this: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean constantTimeEq(byte[], byte[])
    {
        byte[] $r0, $r1;
        int $i0, $i1, varReplacer3403, varReplacer3404, varReplacer3405;
        byte $b2, $b3, $b4;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label1;

        varReplacer3403 = 0;

        return varReplacer3403;

     label1:
        $b2 = 0;

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $b3 = $r0[$i0];

        $b4 = $r1[$i0];

        $b3 = $b3 ^ $b4;

        $b2 = $b2 | $b3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        if $b2 != 0 goto label4;

        varReplacer3405 = 1;

        return varReplacer3405;

     label4:
        varReplacer3404 = 0;

        return varReplacer3404;
    }

    private static byte[] copyOfRange(byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, varReplacer3410;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = $i1 - $i0;

        $r1 = newarray (byte)[$i1];

        varReplacer3410 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r1, varReplacer3410, $i1);

        return $r1;
    }

    public static byte[] decrypt(uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac, uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys) throws java.security.GeneralSecurityException
    {
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac $r0;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r1;
        javax.crypto.spec.IvParameterSpec $r2;
        byte[] $r3, $r4;
        javax.crypto.SecretKey $r5;
        boolean $z0;
        javax.crypto.Cipher $r6;
        java.security.GeneralSecurityException $r7;
        int varReplacer3391;
        java.lang.String varReplacer3392, varReplacer3393;

        nop;

        $r0 := @parameter0: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac;

        $r1 := @parameter1: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        $r3 = virtualinvoke $r0.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: byte[] getIv()>();

        $r4 = virtualinvoke $r0.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: byte[] getCipherText()>();

        $r3 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: byte[] ivCipherConcat(byte[],byte[])>($r3, $r4);

        $r5 = virtualinvoke $r1.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys: javax.crypto.SecretKey getIntegrityKey()>();

        $r3 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>($r3, $r5);

        $r4 = virtualinvoke $r0.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: byte[] getMac()>();

        $z0 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: boolean constantTimeEq(byte[],byte[])>($r3, $r4);

        if $z0 == 0 goto label1;

        varReplacer3393 = "AES/CBC/PKCS5Padding";

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3393);

        $r5 = virtualinvoke $r1.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys: javax.crypto.SecretKey getConfidentialityKey()>();

        $r2 = new javax.crypto.spec.IvParameterSpec;

        $r3 = virtualinvoke $r0.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: byte[] getIv()>();

        specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3);

        varReplacer3391 = 2;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer3391, $r5, $r2);

        $r3 = virtualinvoke $r0.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: byte[] getCipherText()>();

        $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        return $r3;

     label1:
        $r7 = new java.security.GeneralSecurityException;

        varReplacer3392 = "MAC stored in civ does not match computed MAC.";

        specialinvoke $r7.<java.security.GeneralSecurityException: void <init>(java.lang.String)>(varReplacer3392);

        throw $r7;
    }

    public static java.lang.String decryptString(java.lang.String, java.lang.String, byte[])
    {
        java.lang.String $r0, $r1, r8, varReplacer3387, varReplacer3388;
        byte[] $r2;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r3;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac $r4, r7;
        java.lang.Throwable $r5, $r6;
        java.security.GeneralSecurityException r9;
        java.io.UnsupportedEncodingException r10;
        null_type varReplacer3389, varReplacer3390;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: byte[];

     label1:
        varReplacer3388 = "!?*&pmxSharedPrefPassword%%$$";

        $r3 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>(varReplacer3388, $r2);

     label2:
        r8 = new java.lang.String;

        r7 = new uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac;

        $r4 = r7;

     label3:
        specialinvoke r7.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: void <init>(java.lang.String)>($r0);

        $r2 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] decrypt(uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac,uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys)>($r4, $r3);

        varReplacer3387 = "UTF-8";

        specialinvoke r8.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, varReplacer3387);

     label4:
        return r8;

     label5:
        $r5 := @caughtexception;

        r9 = (java.security.GeneralSecurityException) $r5;

        virtualinvoke r9.<java.security.GeneralSecurityException: void printStackTrace()>();

        varReplacer3390 = null;

        return varReplacer3390;

     label6:
        $r6 := @caughtexception;

        r10 = (java.io.UnsupportedEncodingException) $r6;

        virtualinvoke r10.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        varReplacer3389 = null;

        return varReplacer3389;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
        catch java.io.UnsupportedEncodingException from label1 to label2 with label6;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label6;
    }

    public static java.lang.String decryptString(uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac, uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys) throws java.io.UnsupportedEncodingException, java.security.GeneralSecurityException
    {
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac $r0;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r1;
        java.lang.String $r2;

        $r0 := @parameter0: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac;

        $r1 := @parameter1: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        $r2 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: java.lang.String decryptString(uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac,uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys,java.lang.String)>($r0, $r1, "UTF-8");

        return $r2;
    }

    public static java.lang.String decryptString(uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac, uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys, java.lang.String) throws java.io.UnsupportedEncodingException, java.security.GeneralSecurityException
    {
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac $r0;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r1;
        java.lang.String $r2, $r3;
        byte[] $r4;

        $r0 := @parameter0: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac;

        $r1 := @parameter1: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        $r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.String;

        $r4 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] decrypt(uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac,uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys)>($r0, $r1);

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, $r2);

        return $r3;
    }

    public static uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac encrypt(java.lang.String, uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys) throws java.io.UnsupportedEncodingException, java.security.GeneralSecurityException
    {
        java.lang.String $r0;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r1;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        $r2 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac encrypt(java.lang.String,uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys,java.lang.String)>($r0, $r1, "UTF-8");

        return $r2;
    }

    public static uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac encrypt(java.lang.String, uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys, java.lang.String) throws java.io.UnsupportedEncodingException, java.security.GeneralSecurityException
    {
        java.lang.String $r0, $r2;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r1;
        byte[] $r3;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        $r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>($r2);

        $r4 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys)>($r3, $r1);

        return $r4;
    }

    public static uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[], uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r3, $r6;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r1;
        javax.crypto.spec.IvParameterSpec $r2;
        javax.crypto.Cipher $r4;
        javax.crypto.SecretKey $r5;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        $r3 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] generateIv()>();

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        $r5 = virtualinvoke $r1.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys: javax.crypto.SecretKey getConfidentialityKey()>();

        $r2 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3);

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r5, $r2);

        $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] getIV()>();

        $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        $r6 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: byte[] ivCipherConcat(byte[],byte[])>($r3, $r0);

        $r5 = virtualinvoke $r1.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys: javax.crypto.SecretKey getIntegrityKey()>();

        $r6 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>($r6, $r5);

        $r7 = new uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac;

        specialinvoke $r7.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: void <init>(byte[],byte[],byte[])>($r0, $r3, $r6);

        return $r7;
    }

    public static java.lang.String encyrptString(java.lang.String, java.lang.String, byte[])
    {
        java.lang.String $r0, $r1;
        byte[] $r2;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r3;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac $r4;
        java.lang.Throwable $r5, $r6;
        java.security.GeneralSecurityException r7;
        java.io.UnsupportedEncodingException r8;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: byte[];

     label1:
        $r3 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>($r1, $r2);

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r4 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys)>($r2, $r3);

        $r0 = virtualinvoke $r4.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$CipherTextIvMac: java.lang.String toString()>();

     label2:
        return $r0;

     label3:
        $r5 := @caughtexception;

        r7 = (java.security.GeneralSecurityException) $r5;

        virtualinvoke r7.<java.security.GeneralSecurityException: void printStackTrace()>();

        return null;

     label4:
        $r6 := @caughtexception;

        r8 = (java.io.UnsupportedEncodingException) $r6;

        virtualinvoke r8.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        return null;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    private static void fixPrng()
    {
        java.util.concurrent.atomic.AtomicBoolean $r0;
        boolean $z0;
        java.lang.Throwable $r1;
        int varReplacer3411;

        nop;

        $r0 = <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: java.util.concurrent.atomic.AtomicBoolean prngFixed>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label6;

        entermonitor class "Luk/co/parentmail/parentmail/utils/AesCbcWithIntegrity$PrngFixes;";

     label1:
        $r0 = <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: java.util.concurrent.atomic.AtomicBoolean prngFixed>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label2;

        staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$PrngFixes: void apply()>();

        $r0 = <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: java.util.concurrent.atomic.AtomicBoolean prngFixed>;

        varReplacer3411 = 1;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(varReplacer3411);

     label2:
        exitmonitor class "Luk/co/parentmail/parentmail/utils/AesCbcWithIntegrity$PrngFixes;";

     label3:
        return;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Luk/co/parentmail/parentmail/utils/AesCbcWithIntegrity$PrngFixes;";

     label5:
        throw $r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static byte[] generateIv() throws java.security.GeneralSecurityException
    {
        byte[] $r0;

        $r0 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] randomBytes(int)>(16);

        return $r0;
    }

    public static uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys generateKey() throws java.security.GeneralSecurityException
    {
        javax.crypto.spec.SecretKeySpec $r0;
        javax.crypto.KeyGenerator $r1;
        javax.crypto.SecretKey $r2;
        byte[] $r3;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r4;

        staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: void fixPrng()>();

        $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>("AES");

        virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(int)>(128);

        $r2 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        $r3 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] randomBytes(int)>(32);

        $r0 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "HmacSHA256");

        $r4 = new uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        specialinvoke $r4.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys: void <init>(javax.crypto.SecretKey,javax.crypto.SecretKey)>($r2, $r0);

        return $r4;
    }

    public static uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String, java.lang.String) throws java.security.GeneralSecurityException
    {
        java.lang.String $r0, $r1;
        byte[] $r2;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r1, 2);

        $r3 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>($r0, $r2);

        return $r3;
    }

    public static uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String, byte[]) throws java.security.GeneralSecurityException
    {
        java.lang.String $r0, varReplacer3394, varReplacer3395, varReplacer3396;
        byte[] $r1, $r8;
        javax.crypto.spec.SecretKeySpec $r2, $r3;
        javax.crypto.spec.PBEKeySpec $r4;
        char[] $r5;
        javax.crypto.SecretKeyFactory $r6;
        javax.crypto.SecretKey $r7;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r9;
        int varReplacer3397, varReplacer3398, varReplacer3399, varReplacer3400, varReplacer3401, varReplacer3402;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: void fixPrng()>();

        $r4 = new javax.crypto.spec.PBEKeySpec;

        $r5 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        varReplacer3397 = 10000;

        varReplacer3398 = 384;

        specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r1, varReplacer3397, varReplacer3398);

        varReplacer3396 = "PBKDF2WithHmacSHA1";

        $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer3396);

        $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4);

        $r8 = interfaceinvoke $r7.<javax.crypto.SecretKey: byte[] getEncoded()>();

        varReplacer3401 = 0;

        varReplacer3402 = 16;

        $r1 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] copyOfRange(byte[],int,int)>($r8, varReplacer3401, varReplacer3402);

        varReplacer3399 = 16;

        varReplacer3400 = 48;

        $r8 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] copyOfRange(byte[],int,int)>($r8, varReplacer3399, varReplacer3400);

        $r2 = new javax.crypto.spec.SecretKeySpec;

        varReplacer3394 = "AES";

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer3394);

        $r3 = new javax.crypto.spec.SecretKeySpec;

        varReplacer3395 = "HmacSHA256";

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer3395);

        $r9 = new uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        specialinvoke $r9.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys: void <init>(javax.crypto.SecretKey,javax.crypto.SecretKey)>($r2, $r3);

        return $r9;
    }

    public static byte[] generateMac(byte[], javax.crypto.SecretKey) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        byte[] $r0;
        javax.crypto.SecretKey $r1;
        javax.crypto.Mac $r2;
        java.lang.String varReplacer3406;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: javax.crypto.SecretKey;

        varReplacer3406 = "HmacSHA256";

        $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer3406);

        virtualinvoke $r2.<javax.crypto.Mac: void init(java.security.Key)>($r1);

        $r0 = virtualinvoke $r2.<javax.crypto.Mac: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    public static byte[] generateSalt() throws java.security.GeneralSecurityException
    {
        byte[] $r0;

        $r0 = staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: byte[] randomBytes(int)>(128);

        return $r0;
    }

    public static java.lang.String keyString(uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys)
    {
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r0;
        java.lang.String $r1;

        $r0 := @parameter0: uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        $r1 = virtualinvoke $r0.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys: java.lang.String toString()>();

        return $r1;
    }

    public static uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys keys(java.lang.String) throws java.security.InvalidKeyException
    {
        java.lang.String $r0;
        java.lang.String[] $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3, $r5;
        java.security.InvalidKeyException $r4;
        uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys $r6;
        javax.crypto.spec.SecretKeySpec $r7, $r8;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i0 = lengthof $r1;

        if $i0 == 2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot parse aesKey:hmacKey");

        throw $r2;

     label1:
        $r0 = $r1[0];

        $r3 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r0, 2);

        $i0 = lengthof $r3;

        if $i0 == 16 goto label2;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Base64 decoded key is not 128 bytes");

        throw $r4;

     label2:
        $r0 = $r1[1];

        $r5 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r0, 2);

        $i0 = lengthof $r5;

        if $i0 == 32 goto label3;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Base64 decoded key is not 256 bytes");

        throw $r4;

     label3:
        $r6 = new uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys;

        $r7 = new javax.crypto.spec.SecretKeySpec;

        $i0 = lengthof $r3;

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, 0, $i0, "AES");

        $r8 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, "HmacSHA256");

        specialinvoke $r6.<uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity$SecretKeys: void <init>(javax.crypto.SecretKey,javax.crypto.SecretKey)>($r7, $r8);

        return $r6;
    }

    private static byte[] randomBytes(int) throws java.security.GeneralSecurityException
    {
        int $i0;
        byte[] $r0;
        java.security.SecureRandom $r1;

        $i0 := @parameter0: int;

        staticinvoke <uk.co.parentmail.parentmail.utils.AesCbcWithIntegrity: void fixPrng()>();

        $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

        $r0 = newarray (byte)[$i0];

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0);

        return $r0;
    }

    public static java.lang.String saltString(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r0, 2);

        return $r1;
    }
}
