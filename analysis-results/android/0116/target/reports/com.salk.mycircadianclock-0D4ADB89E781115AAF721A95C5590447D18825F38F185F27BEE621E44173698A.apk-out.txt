Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.salk.mycircadianclock-0D4ADB89E781115AAF721A95C5590447D18825F38F185F27BEE621E44173698A.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.apptimize.de: java.lang.String b(byte[])>
		SHA-256: 3c5d9b2704b61f4a118484f4311c461c7cfd1d5da70d7bbfbb104d037f6e8267
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.apptimize.de: byte[] a(byte[],int,javax.crypto.Cipher)>
		SHA-256: c399a664a4935a4617c138ae2367df9490d535e2a967ec1d839fdd1b808900
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r0)
		Method: <com.apptimize.de: java.lang.String b(byte[])>
		SHA-256: 64b9c515abbb1b340f7a404f4a2250087014ef5d5f452c32c80b13aa69465247
		Secure: true
	Object:
		Variable: $r10
		Type: java.security.Signature
		Statement: $r10 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r4)
		Method: <com.apptimize.aL: org.json.JSONObject a(java.io.InputStream)>
		SHA-256: e0ceca6699b2a61fbe26fc4d3e5aabf4a9902d2dedccb9120b54e473b101630
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.android.gms.internal.zzfl: java.lang.String zzfb()>
		SHA-256: 52cebfb14bbbf7b204d5db18cd61ed704698d2324683caf2d188d8bcb4114742
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r2)
		Method: <com.apptimize.fS: javax.net.ssl.SSLSocketFactory d()>
		SHA-256: 37571220a52042fc8555d2c26691dfbc26762b80de9c8fc4aa185b83c7a46662
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.salk.mycircadianclock.AESCrypt: javax.crypto.spec.SecretKeySpec generateKey(java.lang.String)>
		SHA-256: b5e348efc1542db06404170f433662c28ecc445f791f9336d484030ceb56e427
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.apptimize.de: byte[] a(byte[],int,javax.crypto.Cipher)>
		SHA-256: 5e0b8e96c30ce15dfa034f32d15959371ad0b09c99bed48ff3bd150ddb6fb6fe
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.salk.mycircadianclock.AESCrypt: byte[] decrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>
		SHA-256: 46131b30e6dbff5e4957059c7f061b686375c0fd9432d47bfa1b42fb69d390dd
		Secure: false
	Object:
		Variable: varReplacer592
		Type: java.lang.String
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer592)
		Method: <com.salk.mycircadianclock.AESCrypt: javax.crypto.spec.SecretKeySpec generateKey(java.lang.String)>
		SHA-256: be40e2bfa10e09c5687d186bf55caf529d426f6a923f6bbdd0889f311f6d2ff3
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3937)
		Method: <crittercism.android.dr: java.lang.String a(java.lang.String)>
		SHA-256: 5156ca3b04d414a7846510895bd44cb6dd4b6c5bc7690a3d442717fdc27df9b1
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r1.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.apptimize.de: byte[] a(byte[],int,javax.crypto.Cipher)>
		SHA-256: 4afef2359ecd63e857ee98d096bceca54fd33a23fe7b433a1ace8a93a5bd4990
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.android.gms.internal.zzai: byte[] zzn(java.lang.String)>
		SHA-256: ae2dbc6a1515c66ca78d645e195440a31fecd4a8875a7e06597ed061a54e6d99
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.salk.mycircadianclock.AESCrypt: byte[] decrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>
		SHA-256: a022de71c0227843b420e1826f7ff407667761cff1de3dd74ce6eb4a8d44df1e
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer591)
		Method: <com.salk.mycircadianclock.AESCrypt: javax.crypto.spec.SecretKeySpec generateKey(java.lang.String)>
		SHA-256: 49ec22c2445ebd97007552e0f684131e8cf4732ab5615ff7e551b4df2b0108ae
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.salk.mycircadianclock.AESCrypt: byte[] encrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>
		SHA-256: d408b04740c1f9cb7bbe6f639ab339e94c6643087706c6d1e482b30ed6e4d665
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4978)
		Method: <com.google.android.gms.internal.zzaf: java.security.MessageDigest zzbE()>
		SHA-256: c6d2ef109d0780ed13d8e1dca91ffb3b860408e9367a203984bb6ba0b3550019
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <crittercism.android.dr: java.lang.String a(java.lang.String)>
		SHA-256: ef9e3714f4dbf8a38f1f2925fa62f8d77c8300d8ade20ea87536c317308ddfda
		Secure: true
	Object:
		Variable: r65
		Type: java.security.SecureRandom
		Statement: specialinvoke r65.<java.security.SecureRandom: void <init>()>()
		Method: <com.apptimize.er: void run()>
		SHA-256: e58bb09928956af5dd4aba93648a373574f95facf446557e49b10a56fea13976
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.salk.mycircadianclock.AESCrypt: byte[] encrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>
		SHA-256: 4080978943563087ba5b82ba5ef574c7ea76118a1da117fcd5d98f861e959e7e
		Secure: false
	Object:
		Variable: $r0
		Type: javax.net.ssl.SSLContext
		Statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1609)
		Method: <crittercism.android.y: java.security.Provider a()>
		SHA-256: cfed8527d888d5e5a776e409395670420431bba9a916719c83ae7a4a56b681
		Secure: false
	Object:
		Variable: $r7
		Type: byte[]
		Statement: $r7 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.apptimize.de: java.lang.String a(java.lang.String[])>
		SHA-256: 19bf9d61deaefee93e871a3f59da68e83837845314a55bfa8e39e36872c9cfa3
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $z0 = virtualinvoke $r10.<java.security.Signature: boolean verify(byte[])>($r2)
		Method: <com.apptimize.aL: org.json.JSONObject a(java.io.InputStream)>
		SHA-256: 24c81d3100afde00f594119234759866def9b0d1f08d0f697974b7afd8f0dded
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer588)
		Method: <com.salk.mycircadianclock.AESCrypt: byte[] encrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>
		SHA-256: 9dd6b711441aeb864d5f0824db6d84a380ddee27b2cb2e0500bf905d32fd362
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.MessageDigest
		Statement: $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2417)
		Method: <com.google.android.gms.internal.zzfl: java.lang.String zzfb()>
		SHA-256: a9d8512396d165625c1b4469518959ccaeaa7658db974b0306c4b7a67c043e9c
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer592)
		Method: <com.salk.mycircadianclock.AESCrypt: javax.crypto.spec.SecretKeySpec generateKey(java.lang.String)>
		SHA-256: dd1288caed4a0b070104627a94588a55e1874e2996389b5bbcc30f73a504612f
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2)
		Method: <com.apptimize.de: java.lang.String b(java.lang.String)>
		SHA-256: 1b47ebda67c60b8a9e2c44736383e16d5abd3f84c514ecb9daad9e579491fa01
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <com.apptimize.de: java.lang.String a(java.lang.String[])>
		SHA-256: 2a2fa7da40ec834a18422439db0b89a5f9a894d6bd9841a21d7a0efd87ef2941
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.salk.mycircadianclock.AESCrypt: byte[] encrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>
		SHA-256: 8193fa405bbbcdf03b31058a56a054cfd1d18a1d8d89817669473d1c96e3ba18
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.salk.mycircadianclock.AESCrypt: byte[] decrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>
		SHA-256: 77bd96c60bfbebb2c127159822af3242ad2f46352db5a08d44d70fd1ab15fe50
		Secure: false
	Object:
		Variable: $r5
		Type: javax.net.ssl.SSLContext
		Statement: $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3911)
		Method: <crittercism.android.g: java.net.HttpURLConnection c()>
		SHA-256: b21aa6ad82c85a6cb8c195fbb9eb87bc44c921e0ffdfed7a1e5199a2802aa121
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer598)
		Method: <com.salk.mycircadianclock.AESCrypt: byte[] decrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>
		SHA-256: 5ad88b7c355e3fe376e2dee087edf3a8ee512fd636ff8abfa3c083bcf0c8aca9
		Secure: false
	Object:
		Variable: $r0
		Type: javax.net.ssl.SSLContext
		Statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer4272)
		Method: <crittercism.android.dc: void <clinit>()>
		SHA-256: c03c93ab46b2a9600413b6f4abf333da385883cd2a4f47a294173f4524cc749c
		Secure: false

Findings in Java Class: crittercism.android.y

	 in Method: java.security.Provider a()
		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #cfed8527d888d5e5a776e409395670420431bba9a916719c83ae7a4a56b681)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1609)

		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #cfed8527d888d5e5a776e409395670420431bba9a916719c83ae7a4a56b681)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r1 = virtualinvoke $r0.<javax.net.ssl.SSLContext: java.security.Provider getProvider()>()


Findings in Java Class: com.apptimize.de

	 in Method: java.lang.String a(java.lang.String[])
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #2a2fa7da40ec834a18422439db0b89a5f9a894d6bd9841a21d7a0efd87ef2941)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte[]),java.security.MessageDigest: void update(byte)
			at statement: $r7 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()


	 in Method: byte[] a(byte[],int,javax.crypto.Cipher)
		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #1b47ebda67c60b8a9e2c44736383e16d5abd3f84c514ecb9daad9e579491fa01)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: $r0 = virtualinvoke $r1.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)

		TypestateError violating CrySL rule for javax.crypto.Cipher (on Object #1b47ebda67c60b8a9e2c44736383e16d5abd3f84c514ecb9daad9e579491fa01)
			Unexpected call to method doFinal on object of type javax.crypto.Cipher.
			at statement: $r3 = virtualinvoke $r1.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)


	 in Method: java.lang.String b(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3837, $r6)


Findings in Java Class: com.apptimize.aL

	 in Method: org.json.JSONObject a(java.io.InputStream)
		IncompleteOperationError violating CrySL rule for java.security.Signature (on Object #e0ceca6699b2a61fbe26fc4d3e5aabf4a9902d2dedccb9120b54e473b101630)
			Operation on object of type java.security.Signature object not completed. Expected call to initSign, initVerify
			at statement: $r10 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r4)

		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r10.<java.security.Signature: void initVerify(java.security.PublicKey)>($r11)


Findings in Java Class: com.google.android.gms.internal.zzag

	 in Method: java.lang.String zzp(java.lang.String)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #c6d2ef109d0780ed13d8e1dca91ffb3b860408e9367a203984bb6ba0b3550019)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r11 = virtualinvoke $r10.<com.google.android.gms.internal.zzaf: byte[] zzn(java.lang.String)>($r1)


	 in Method: java.lang.String zzo(java.lang.String)
		IncompleteOperationError violating CrySL rule for java.security.MessageDigest (on Object #c6d2ef109d0780ed13d8e1dca91ffb3b860408e9367a203984bb6ba0b3550019)
			Operation on object of type java.security.MessageDigest object not completed. Expected call to digest, update
			at statement: $r6 = virtualinvoke $r5.<com.google.android.gms.internal.zzaf: byte[] zzn(java.lang.String)>($r1)


Findings in Java Class: com.apptimize.fS

	 in Method: javax.net.ssl.SSLSocketFactory d()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer5113, $r4, varReplacer5113)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer5113, $r4, varReplacer5113)


Findings in Java Class: com.salk.mycircadianclock.AESCrypt

	 in Method: byte[] encrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer586, $r0, $r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer586, $r0, $r3)


	 in Method: javax.crypto.spec.SecretKeySpec generateKey(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer592)


	 in Method: byte[] decrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer599, $r0, $r3)


Findings in Java Class: crittercism.android.g

	 in Method: java.net.HttpURLConnection c()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3917, varReplacer3917, varReplacer3917)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3917, varReplacer3917, varReplacer3917)


Findings in Java Class: crittercism.android.dc

	 in Method: void <clinit>()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer4269, varReplacer4269, varReplacer4269)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer4269, varReplacer4269, varReplacer4269)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 33

	CogniCrypt found the following violations. For details see description above.
	IncompleteOperationError: 5
	TypestateError: 3
	RequiredPredicateError: 14
=====================================================================
