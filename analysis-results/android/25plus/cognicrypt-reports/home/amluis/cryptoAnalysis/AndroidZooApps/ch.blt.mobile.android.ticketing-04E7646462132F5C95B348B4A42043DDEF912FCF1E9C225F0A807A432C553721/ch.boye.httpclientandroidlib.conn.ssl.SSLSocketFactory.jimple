public class ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory extends java.lang.Object implements ch.boye.httpclientandroidlib.conn.scheme.LayeredSchemeSocketFactory, ch.boye.httpclientandroidlib.conn.scheme.LayeredSocketFactory, ch.boye.httpclientandroidlib.conn.scheme.SchemeLayeredSocketFactory
{
    public static final ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER;
    public static final ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
    private static final char[] EMPTY_PASSWORD;
    public static final java.lang.String SSL;
    public static final java.lang.String SSLV2;
    public static final ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER;
    public static final java.lang.String TLS;
    private volatile ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier;
    private final ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver;
    private final javax.net.ssl.SSLSocketFactory socketfactory;

    static void <clinit>()
    {
        char[] $r0;
        ch.boye.httpclientandroidlib.conn.ssl.AllowAllHostnameVerifier $r1;
        ch.boye.httpclientandroidlib.conn.ssl.BrowserCompatHostnameVerifier $r2;
        ch.boye.httpclientandroidlib.conn.ssl.StrictHostnameVerifier $r3;
        java.lang.String $r4;

        nop;

        $r1 = new ch.boye.httpclientandroidlib.conn.ssl.AllowAllHostnameVerifier;

        specialinvoke $r1.<ch.boye.httpclientandroidlib.conn.ssl.AllowAllHostnameVerifier: void <init>()>();

        <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER> = $r1;

        $r2 = new ch.boye.httpclientandroidlib.conn.ssl.BrowserCompatHostnameVerifier;

        specialinvoke $r2.<ch.boye.httpclientandroidlib.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>();

        <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER> = $r2;

        $r3 = new ch.boye.httpclientandroidlib.conn.ssl.StrictHostnameVerifier;

        specialinvoke $r3.<ch.boye.httpclientandroidlib.conn.ssl.StrictHostnameVerifier: void <init>()>();

        <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER> = $r3;

        $r4 = "";

        $r0 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD> = $r0;

        return;
    }

    public void <init>(ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy;

        $r2 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", null, null, null, null, $r1, $r2);

        return;
    }

    public void <init>(ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", null, null, null, null, $r1, $r2);

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1, $r3;
        java.security.KeyStore $r2, $r4;
        java.security.SecureRandom $r5;
        ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver $r6;
        javax.net.ssl.SSLContext $r7;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.KeyStore;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.security.KeyStore;

        $r5 := @parameter4: java.security.SecureRandom;

        $r6 := @parameter5: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver;

        $r7 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy)>($r1, $r2, $r3, $r4, $r5, null);

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver)>($r7, $r6);

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1, $r3;
        java.security.KeyStore $r2, $r4;
        java.security.SecureRandom $r5;
        ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy $r6;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r7;
        javax.net.ssl.SSLContext $r8;
        null_type varReplacer3671, varReplacer3672, varReplacer3673;

        nop;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.KeyStore;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.security.KeyStore;

        $r5 := @parameter4: java.security.SecureRandom;

        $r6 := @parameter5: ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy;

        $r7 := @parameter6: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        varReplacer3671 = null;

        varReplacer3672 = null;

        varReplacer3673 = null;

        $r8 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy)>(varReplacer3671, $r2, $r3, $r4, varReplacer3671, varReplacer3671);

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>($r8, $r7);

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.lang.String $r1, $r3;
        java.security.KeyStore $r2, $r4;
        java.security.SecureRandom $r5;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r6;
        javax.net.ssl.SSLContext $r7;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.KeyStore;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.security.KeyStore;

        $r5 := @parameter4: java.security.SecureRandom;

        $r6 := @parameter5: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        $r7 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy)>($r1, $r2, $r3, $r4, $r5, null);

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>($r7, $r6);

        return;
    }

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", null, null, $r1, null, null, $r2);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1;
        java.lang.String $r2;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r3;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 := @parameter1: java.lang.String;

        $r3 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", $r1, $r2, null, null, null, $r3);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String, java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1, $r3;
        java.lang.String $r2;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.security.KeyStore;

        $r4 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>("TLS", $r1, $r2, $r3, null, null, $r4);

        return;
    }

    public void <init>(javax.net.ssl.SSLContext)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;

        nop;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)>($r1, $r2);

        return;
    }

    public void <init>(javax.net.ssl.SSLContext, ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r3;

        $r4 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r4;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver> = $r2;

        return;
    }

    public void <init>(javax.net.ssl.SSLContext, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.String varReplacer3676;
        null_type varReplacer3677;

        nop;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        varReplacer3676 = "SSL context may not be null";

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer3676);

        throw $r4;

     label1:
        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r3;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r2;

        varReplacer3677 = null;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver> = varReplacer3677;

        return;
    }

    public void <init>(javax.net.ssl.SSLSocketFactory, ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLSocketFactory $r1;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        $r2 := @parameter1: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SSL socket factory may not be null");

        throw $r3;

     label1:
        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r1;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r2;

        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    private static javax.net.ssl.SSLContext createDefaultSSLContext() throws ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException
    {
        java.lang.Exception $r0;
        javax.net.ssl.SSLContext $r1;
        ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException $r2;
        java.lang.String varReplacer4784, varReplacer4790;
        null_type varReplacer4785, varReplacer4786, varReplacer4787, varReplacer4788, varReplacer4789;

     label1:
        nop;

        varReplacer4784 = "TLS";

        varReplacer4785 = null;

        varReplacer4786 = null;

        varReplacer4787 = null;

        varReplacer4788 = null;

        varReplacer4789 = null;

        $r1 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy)>(varReplacer4784, varReplacer4785, varReplacer4785, varReplacer4785, varReplacer4785, varReplacer4785);

     label2:
        return $r1;

     label3:
        $r0 := @caughtexception;

        $r2 = new ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException;

        varReplacer4790 = "Failure initializing default SSL context";

        specialinvoke $r2.<ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException: void <init>(java.lang.String,java.lang.Throwable)>(varReplacer4790, $r0);

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static javax.net.ssl.SSLContext createSSLContext(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.KeyManagementException
    {
        java.security.KeyStore $r0, $r2;
        java.lang.String $r1, $r5, $r6;
        java.security.SecureRandom $r3;
        ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy $r4;
        javax.net.ssl.KeyManagerFactory $r7;
        char[] $r8;
        javax.net.ssl.KeyManager[] $r9;
        javax.net.ssl.TrustManagerFactory $r10;
        java.lang.Object[] $r11;
        int $i0, $i1;
        java.lang.Object $r12;
        boolean $z0;
        javax.net.ssl.X509TrustManager $r13;
        javax.net.ssl.SSLContext $r14;
        ch.boye.httpclientandroidlib.conn.ssl.TrustManagerDecorator r15;
        javax.net.ssl.TrustManager[] r16;
        null_type varReplacer3674;

        nop;

        $r5 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.security.KeyStore;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.security.KeyStore;

        $r3 := @parameter4: java.security.SecureRandom;

        $r4 := @parameter5: ch.boye.httpclientandroidlib.conn.ssl.TrustStrategy;

        if $r5 != null goto label1;

        $r5 = "TLS";

     label1:
        $r6 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r7 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r6);

        if $r1 == null goto label3;

        $r8 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

     label2:
        virtualinvoke $r7.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r0, $r8);

        $r9 = virtualinvoke $r7.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r10 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1);

        virtualinvoke $r10.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r2);

        $r11 = virtualinvoke $r10.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        if $r11 == null goto label4;

        goto label4;

     label3:
        $r8 = null;

        goto label2;

     label4:
        $r14 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r5);

        r16 = (javax.net.ssl.TrustManager[]) $r11;

        varReplacer3674 = null;

        virtualinvoke $r14.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r9, r16, varReplacer3674);

        return $r14;
    }

    private static javax.net.ssl.SSLContext createSystemSSLContext() throws ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException
    {
        java.lang.Exception $r0;
        javax.net.ssl.SSLContext $r1;
        ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException $r2;

     label1:
        $r1 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSystemSSLContext(java.lang.String,java.security.SecureRandom)>("TLS", null);

     label2:
        return $r1;

     label3:
        $r0 := @caughtexception;

        $r2 = new ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException;

        specialinvoke $r2.<ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException: void <init>(java.lang.String,java.lang.Throwable)>("Failure initializing default system SSL context", $r0);

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static javax.net.ssl.SSLContext createSystemSSLContext(java.lang.String, java.security.SecureRandom) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.KeyStoreException, java.security.cert.CertificateException, java.security.UnrecoverableKeyException, java.security.KeyManagementException
    {
        java.security.SecureRandom $r0;
        java.io.File $r1, $r16;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0;
        javax.net.ssl.TrustManagerFactory $r6, $r11;
        javax.net.ssl.KeyManagerFactory $r7, $r18;
        javax.net.ssl.SSLContext $r8;
        javax.net.ssl.KeyManager[] $r9;
        javax.net.ssl.TrustManager[] $r10;
        java.security.KeyStore $r12;
        java.io.FileInputStream $r13;
        char[] $r14;
        java.lang.Throwable $r15, $r17, $r19;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.security.SecureRandom;

        if $r2 != null goto label01;

        $r2 = "TLS";

     label01:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("ssl.TrustManagerFactory.algorithm");

        $r4 = $r3;

        if $r3 != null goto label02;

        $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

     label02:
        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStoreType");

        $r3 = $r5;

        if $r5 != null goto label03;

        $r3 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

     label03:
        $r5 = "none";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label10;

        $r6 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r4);

     label04:
        $r7 = null;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("ssl.KeyManagerFactory.algorithm");

        $r4 = $r3;

        if $r3 != null goto label05;

        $r4 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

     label05:
        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStoreType");

        $r3 = $r5;

        if $r5 != null goto label06;

        $r3 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

     label06:
        $r5 = "none";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label26;

        $r7 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r4);

     label07:
        $r8 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r2);

        if $r7 == null goto label38;

        $r9 = virtualinvoke $r7.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

     label08:
        if $r6 == null goto label39;

        $r10 = virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

     label09:
        virtualinvoke $r8.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r9, $r10, $r0);

        return $r8;

     label10:
        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStore");

        if $r5 == null goto label19;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r5);

        $r11 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r4);

        $r6 = $r11;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStoreProvider");

        if $r4 == null goto label15;

        $r12 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>($r3, $r4);

     label11:
        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStorePassword");

        $r13 = new java.io.FileInputStream;

        specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        if $r4 == null goto label16;

     label12:
        $r14 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

     label13:
        virtualinvoke $r12.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r13, $r14);

     label14:
        virtualinvoke $r13.<java.io.FileInputStream: void close()>();

        virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r12);

        goto label04;

     label15:
        $r12 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r3);

        goto label11;

     label16:
        $r14 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD>;

     label17:
        goto label13;

     label18:
        $r15 := @caughtexception;

        virtualinvoke $r13.<java.io.FileInputStream: void close()>();

        throw $r15;

     label19:
        $r1 = new java.io.File;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r4);

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "lib/security/jssecacerts");

        $z0 = virtualinvoke $r16.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label20;

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "lib/security/cacerts");

     label20:
        $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r11 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r4);

        $r6 = $r11;

        $r4 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r12 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r4);

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStorePassword");

        $r13 = new java.io.FileInputStream;

        specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>($r16);

        if $r4 == null goto label24;

     label21:
        $r14 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

     label22:
        virtualinvoke $r12.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r13, $r14);

     label23:
        virtualinvoke $r13.<java.io.FileInputStream: void close()>();

        virtualinvoke $r11.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r12);

        goto label04;

     label24:
        $r14 = null;

        goto label22;

     label25:
        $r17 := @caughtexception;

        virtualinvoke $r13.<java.io.FileInputStream: void close()>();

        throw $r17;

     label26:
        $r1 = null;

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStore");

        if $r5 == null goto label27;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r5);

     label27:
        if $r1 == null goto label07;

        $r18 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r4);

        $r7 = $r18;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStoreProvider");

        if $r4 == null goto label33;

        $r12 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>($r3, $r4);

     label28:
        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStorePassword");

        $r13 = new java.io.FileInputStream;

        specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        if $r4 == null goto label34;

     label29:
        $r14 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

     label30:
        virtualinvoke $r12.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r13, $r14);

     label31:
        virtualinvoke $r13.<java.io.FileInputStream: void close()>();

        if $r4 == null goto label37;

        $r14 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

     label32:
        virtualinvoke $r18.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r12, $r14);

        goto label07;

     label33:
        $r12 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r3);

        goto label28;

     label34:
        $r14 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD>;

     label35:
        goto label30;

     label36:
        $r19 := @caughtexception;

        virtualinvoke $r13.<java.io.FileInputStream: void close()>();

        throw $r19;

     label37:
        $r14 = <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD>;

        goto label32;

     label38:
        $r9 = null;

        goto label08;

     label39:
        $r10 = null;

        goto label09;

        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.Throwable from label29 to label30 with label36;
        catch java.lang.Throwable from label30 to label31 with label36;
        catch java.lang.Throwable from label34 to label35 with label36;
    }

    public static ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory getSocketFactory() throws ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;

        nop;

        $r0 = new ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createDefaultSSLContext()>();

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext)>($r1);

        return $r0;
    }

    public static ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory getSystemSocketFactory() throws ch.boye.httpclientandroidlib.conn.ssl.SSLInitializationException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;

        $r0 = new ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 = staticinvoke <ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSystemSSLContext()>();

        specialinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext)>($r1);

        return $r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, ch.boye.httpclientandroidlib.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException, ch.boye.httpclientandroidlib.conn.ConnectTimeoutException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0, $i1;
        java.net.InetAddress $r3;
        ch.boye.httpclientandroidlib.params.HttpParams $r4;
        ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress $r5;
        java.net.InetSocketAddress $r6;
        ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver $r7;
        ch.boye.httpclientandroidlib.HttpHost $r8;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.net.InetAddress;

        $i1 := @parameter4: int;

        $r4 := @parameter5: ch.boye.httpclientandroidlib.params.HttpParams;

        $r6 = null;

        if $r3 != null goto label1;

        if $i1 <= 0 goto label3;

     label1:
        if $i1 >= 0 goto label2;

        $i1 = 0;

     label2:
        $r6 = new java.net.InetSocketAddress;

        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r3, $i1);

     label3:
        $r7 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver>;

        if $r7 == null goto label5;

        $r7 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver nameResolver>;

        $r3 = interfaceinvoke $r7.<ch.boye.httpclientandroidlib.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>($r2);

     label4:
        $r5 = new ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress;

        $r8 = new ch.boye.httpclientandroidlib.HttpHost;

        specialinvoke $r8.<ch.boye.httpclientandroidlib.HttpHost: void <init>(java.lang.String,int)>($r2, $i0);

        specialinvoke $r5.<ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress: void <init>(ch.boye.httpclientandroidlib.HttpHost,java.net.InetAddress,int)>($r8, $r3, $i0);

        $r1 = virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,ch.boye.httpclientandroidlib.params.HttpParams)>($r1, $r5, $r6, $r4);

        return $r1;

     label5:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r2);

        goto label4;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.net.InetSocketAddress, java.net.InetSocketAddress, ch.boye.httpclientandroidlib.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException, ch.boye.httpclientandroidlib.conn.ConnectTimeoutException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        java.net.InetSocketAddress $r2, $r3;
        ch.boye.httpclientandroidlib.params.HttpParams $r4;
        java.lang.Throwable $r5, $r13;
        java.lang.IllegalArgumentException $r6;
        boolean $z0;
        int $i0, $i1;
        ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress $r7;
        ch.boye.httpclientandroidlib.HttpHost $r8;
        java.lang.String $r9;
        javax.net.ssl.SSLSocket $r10;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r11;
        javax.net.ssl.SSLSocketFactory $r12;
        ch.boye.httpclientandroidlib.conn.ConnectTimeoutException $r14;
        java.lang.StringBuilder $r15;
        java.lang.Exception $r16;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.net.InetSocketAddress;

        $r3 := @parameter2: java.net.InetSocketAddress;

        $r4 := @parameter3: ch.boye.httpclientandroidlib.params.HttpParams;

        if $r2 != null goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Remote address may not be null");

        throw $r6;

     label01:
        if $r4 != null goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r6;

     label02:
        if $r1 == null goto label11;

     label03:
        if $r3 == null goto label04;

        $z0 = staticinvoke <ch.boye.httpclientandroidlib.params.HttpConnectionParams: boolean getSoReuseaddr(ch.boye.httpclientandroidlib.params.HttpParams)>($r4);

        virtualinvoke $r1.<java.net.Socket: void setReuseAddress(boolean)>($z0);

        virtualinvoke $r1.<java.net.Socket: void bind(java.net.SocketAddress)>($r3);

     label04:
        $i0 = staticinvoke <ch.boye.httpclientandroidlib.params.HttpConnectionParams: int getConnectionTimeout(ch.boye.httpclientandroidlib.params.HttpParams)>($r4);

        $i1 = staticinvoke <ch.boye.httpclientandroidlib.params.HttpConnectionParams: int getSoTimeout(ch.boye.httpclientandroidlib.params.HttpParams)>($r4);

     label05:
        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i1);

        virtualinvoke $r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r2, $i0);

     label06:
        $z0 = $r2 instanceof ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress;

        if $z0 == 0 goto label13;

        $r7 = (ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress) $r2;

        $r8 = virtualinvoke $r7.<ch.boye.httpclientandroidlib.conn.HttpInetSocketAddress: ch.boye.httpclientandroidlib.HttpHost getHttpHost()>();

        $r9 = virtualinvoke $r8.<ch.boye.httpclientandroidlib.HttpHost: java.lang.String getHostName()>();

     label07:
        $z0 = $r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label14;

        $r10 = (javax.net.ssl.SSLSocket) $r1;

     label08:
        $r11 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        if $r11 == null goto label19;

        $r11 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

     label09:
        interfaceinvoke $r11.<ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>($r9, $r10);

     label10:
        return $r10;

     label11:
        $r12 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r1 = virtualinvoke $r12.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        goto label03;

     label12:
        $r13 := @caughtexception;

        $r14 = new ch.boye.httpclientandroidlib.conn.ConnectTimeoutException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Connect to ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out");

        $r9 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<ch.boye.httpclientandroidlib.conn.ConnectTimeoutException: void <init>(java.lang.String)>($r9);

        throw $r14;

     label13:
        $r9 = virtualinvoke $r2.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        goto label07;

     label14:
        $i0 = virtualinvoke $r2.<java.net.InetSocketAddress: int getPort()>();

        $r12 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r1 = virtualinvoke $r12.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r9, $i0, 1);

        $r10 = (javax.net.ssl.SSLSocket) $r1;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r10);

        goto label08;

     label15:
        $r5 := @caughtexception;

     label16:
        virtualinvoke $r10.<javax.net.ssl.SSLSocket: void close()>();

     label17:
        throw $r5;

     label18:
        $r16 := @caughtexception;

        goto label17;

     label19:
        return $r10;

        catch java.net.SocketTimeoutException from label05 to label06 with label12;
        catch java.io.IOException from label09 to label10 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    public java.net.Socket createLayeredSocket(java.net.Socket, java.lang.String, int, ch.boye.httpclientandroidlib.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        ch.boye.httpclientandroidlib.params.HttpParams $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        javax.net.ssl.SSLSocket $r5;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r6;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: ch.boye.httpclientandroidlib.params.HttpParams;

        $r4 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r1 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, 1);

        $r5 = (javax.net.ssl.SSLSocket) $r1;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r5);

        $r6 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        if $r6 == null goto label1;

        $r6 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r6.<ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>($r2, $r5);

     label1:
        return $r5;
    }

    public java.net.Socket createLayeredSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        javax.net.ssl.SSLSocketFactory $r3;
        javax.net.ssl.SSLSocket $r4;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r5;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r1 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);

        $r4 = (javax.net.ssl.SSLSocket) $r1;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r4);

        $r5 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        if $r5 == null goto label1;

        $r5 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r5.<ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>($r2, $r4);

     label1:
        return $r4;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocket $r3;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        $r3 = (javax.net.ssl.SSLSocket) $r2;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r3);

        return $r3;
    }

    public java.net.Socket createSocket(ch.boye.httpclientandroidlib.params.HttpParams) throws java.io.IOException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.params.HttpParams $r1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3;
        javax.net.ssl.SSLSocket $r4;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.params.HttpParams;

        $r2 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        $r4 = (javax.net.ssl.SSLSocket) $r3;

        virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>($r4);

        return $r4;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r1 = virtualinvoke $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);

        return $r1;
    }

    public ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier getHostnameVerifier()
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier r1;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        r1 = $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        return r1;
    }

    public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r2;

     label1:
        $z0 = $r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory");

        throw $r2;

     label2:
        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isClosed()>();

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed");

        throw $r2;

     label3:
        return 1;
    }

    protected void prepareSocket(javax.net.ssl.SSLSocket) throws java.io.IOException
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLSocket $r1;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        return;
    }

    public void setHostnameVerifier(ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier)
    {
        ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory $r0;
        ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hostname verifier may not be null");

        throw $r2;

     label1:
        $r0.<ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory: ch.boye.httpclientandroidlib.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r1;

        return;
    }
}
