Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2734)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: e7adb9f212d9578a7b696d732d69922fe33c7e0dd322823d040495f87c20c34b
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer2732, varReplacer2733)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 3a2044419d58527afb259992f4a84fe8824c20597ae1e3a6e0a9b39648923d6f
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 2be18435da5845a85a621cf2f80cce42f76a23a9cb29b2054bcb6f671e7c6e60
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3860)
		Method: <com.chw.DroidAIMSlib.Prefs: java.lang.String md5(java.lang.String,boolean)>
		SHA-256: 2cd1d1aeb03e25dad2ac8a53406adaa634bbd9ce5ea10e220e673eaf47ebf0f1
		Secure: true
	Object:
		Variable: $r5
		Type: javax.net.ssl.SSLContext
		Statement: $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3690)
		Method: <com.chw.DroidAIMSlib.UpdateService$Fetcher: org.apache.http.client.HttpClient sslClient(org.apache.http.client.HttpClient)>
		SHA-256: 2c42abc2f2a7f50e9ff5fda55465710f697ac5631af943888d1dc0f5319200ab
		Secure: false
	Object:
		Variable: $r12
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r12.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 2be18435da5845a85a621cf2f80cce42f76a23a9cb29b2054bcb6f671e7c6e60
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKeyFactory
		Statement: $r7 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer2731)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 477b45a4358c1f27be38292de520d50b4da3b6fc7569fa78dd1287e324d668ba
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <com.google.android.vending.licensing.LicenseChecker: void <clinit>()>
		SHA-256: db6dac925326692e2db9bc12d14c8fc5c8c772354a99db96f1deb45338ec3783
		Secure: true
	Object:
		Variable: $r11
		Type: javax.crypto.Cipher
		Statement: $r11 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2726)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 20ed70a7f799c5eae5f52cb647e6c0fce23c4ec081536078250619c423102dc
		Secure: true
	Object:
		Variable: varReplacer2734
		Type: java.lang.String
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2734)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: e46321355db60b39fe27a24eb4d1c7e768b95bbfbc82459a43a24e3aff46c86a
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.SecretKey
		Statement: $r10 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: f564e68a9287f8b3a99a59984f43ed9ba60e3bb2d720648e32576ece2cfafd60
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.chw.DroidAIMSlib.Prefs: java.lang.String md5(java.lang.String,boolean)>
		SHA-256: 61e3e6a3566ab899fd9cfef92409419c7dc20a9f3c7373c12e59b337086cb253
		Secure: true
	Object:
		Variable: $r11
		Type: javax.crypto.Cipher
		Statement: $r11 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2728)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: f72405d174b0e3af68a28b733a4766122fbb180274eb01cf3c8497b630cc3cb7
		Secure: true
	Object:
		Variable: $r3
		Type: javax.net.ssl.SSLContext
		Statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3702)
		Method: <com.chw.DroidAIMSlib.UpdateService$MySSLSocketFactory: void <init>(com.chw.DroidAIMSlib.UpdateService,javax.net.ssl.SSLContext)>
		SHA-256: cecc86b2b4eb7c8a410343d1e6c2f8d49bbee51ae97e212e1d0c2dfe15b1b234
		Secure: false
	Object:
		Variable: varReplacer2733
		Type: int
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer2732, varReplacer2733)
		Method: <com.google.android.vending.licensing.AESObfuscator: void <init>(byte[],java.lang.String,java.lang.String)>
		SHA-256: 1f751a5d75ef79f7a4c86e9f4cd2217109d7d892803cb5f562fd7c0eacd7ce4e
		Secure: false

Findings in Java Class: com.google.android.vending.licensing.AESObfuscator

	 in Method: void <init>(byte[],java.lang.String,java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #3a2044419d58527afb259992f4a84fe8824c20597ae1e3a6e0a9b39648923d6f)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r10 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r12.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2734)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #3a2044419d58527afb259992f4a84fe8824c20597ae1e3a6e0a9b39648923d6f)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer2732, varReplacer2733)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer2732, varReplacer2733)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r12.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r10 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #3a2044419d58527afb259992f4a84fe8824c20597ae1e3a6e0a9b39648923d6f)
			Third parameter (with value 1024)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r9, $r1, varReplacer2732, varReplacer2733)


Findings in Java Class: com.chw.DroidAIMSlib.UpdateService$MySSLSocketFactory

	 in Method: void <init>(com.chw.DroidAIMSlib.UpdateService,javax.net.ssl.SSLContext)
		IncompleteOperationError violating CrySL rule for javax.net.ssl.SSLContext (on Object #cecc86b2b4eb7c8a410343d1e6c2f8d49bbee51ae97e212e1d0c2dfe15b1b234)
			Operation on object of type javax.net.ssl.SSLContext object not completed. Expected call to init
			at statement: $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3702)


Findings in Java Class: com.chw.DroidAIMSlib.UpdateService$Fetcher

	 in Method: org.apache.http.client.HttpClient sslClient(org.apache.http.client.HttpClient)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3692, r17, varReplacer3692)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3692, r17, varReplacer3692)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 15

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 1
	NeverTypeOfError: 1
	RequiredPredicateError: 7
	IncompleteOperationError: 2
=====================================================================