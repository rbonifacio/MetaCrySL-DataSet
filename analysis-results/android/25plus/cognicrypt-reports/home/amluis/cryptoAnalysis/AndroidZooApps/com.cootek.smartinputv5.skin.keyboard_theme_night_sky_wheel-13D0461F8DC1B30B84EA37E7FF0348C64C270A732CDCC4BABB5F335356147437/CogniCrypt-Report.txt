Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r16
		Type: byte[]
		Statement: $r16 = virtualinvoke $r19.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r14)
		Method: <com.cootek.usage.p: org.apache.http.client.methods.HttpPost c()>
		SHA-256: bed10e67db81dc5284f6022d4fe5225eeb88fc74ca61f05812736614d21780ce
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2494)
		Method: <com.cootek.tark.ads.utility.Utility: java.lang.String MD5(java.lang.String)>
		SHA-256: d710de85bcab6662e5e3f9e7fd26045a647092aeda77195bc5102d585248bacc
		Secure: true
	Object:
		Variable: $r14
		Type: byte[]
		Statement: $r16 = virtualinvoke $r19.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r14)
		Method: <com.cootek.usage.p: org.apache.http.client.methods.HttpPost c()>
		SHA-256: a786b2349da436e1670c50fdaf6d4dbb4b36d69c9271bec07e6c3dedc3f381b3
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.cootek.tark.ads.utility.Utility: java.lang.String MD5(java.lang.String)>
		SHA-256: f7b053846a463dbc5c1e4e18ab43e2cae80462e1eb802289f71b55e9dae9e429
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.cootek.usage.e: javax.crypto.Cipher a(java.lang.String,int)>
		SHA-256: 69a6e11629d5ad4330e68020ab53d94117f3fa7ade657ab7d93f293532f4646b
		Secure: true
	Object:
		Variable: varReplacer817
		Type: java.lang.String
		Statement: specialinvoke r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer817)
		Method: <com.cootek.usage.e: java.lang.String a(java.lang.String,byte[])>
		SHA-256: 5810d037a3169feb4a844e30f6ce32ab4e482d5b6120c58c3ec50ab4064e8f2c
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer674)
		Method: <com.cootek.usage.e: javax.crypto.Cipher a(java.lang.String,int)>
		SHA-256: 8cf2d4b44f07ecb2b82b5f113851609da8fdd78417d72d4fba3556eabcc3e9c2
		Secure: false
	Object:
		Variable: $r19
		Type: javax.crypto.Cipher
		Statement: $r19 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer786)
		Method: <com.cootek.usage.p: org.apache.http.client.methods.HttpPost c()>
		SHA-256: a761a37095f7120555427e207b8febf97ea17311b284acdf1e7bb38adf64403d
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.cootek.usage.e: java.lang.String a(java.lang.String,byte[])>
		SHA-256: 2ad0333bd37733d881e1e75d1c5088ccdf12edb497eece16a7e2a254cc071845
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer5430)
		Method: <com.facebook.ads.internal.util.s: java.lang.String a(java.lang.String)>
		SHA-256: efba7cb3165965679cc714718e00a56763880ed09deee78690e2ca8ae9a9a838
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8637)
		Method: <okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>
		SHA-256: e2d93065f3488c542443e5008be0eac5962d1506be3808ce418c7e68e9034ac4
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer673)
		Method: <com.cootek.usage.e: javax.crypto.Cipher a(java.lang.String,int)>
		SHA-256: 76fa939d59b2d63e5682eb79dbcacecaf2be60456887fec53a3bf2dcb7d4dc68
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.facebook.ads.internal.util.s: java.lang.String a(java.lang.String)>
		SHA-256: 2125805d03a1e43489bdecc5db182c9da3fb7141e4e8c4afb45e18805c8edeaa
		Secure: true
	Object:
		Variable: r36
		Type: javax.crypto.CipherOutputStream
		Statement: specialinvoke r36.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r2, $r16)
		Method: <com.cootek.usage.v: void a(com.cootek.usage.v,com.cootek.usage.UsageData)>
		SHA-256: 6686e0c6d6397311c0eb730cae9d461054f5173a001789ef723e66ae7d47a3e5
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r0)
		Method: <com.facebook.ads.internal.h.a.o: java.lang.String a(byte[],java.lang.String)>
		SHA-256: 8b3145b340a6eb159a4d880bda44d3cff594af2332e72af75d6e28d17186dbf7
		Secure: true
	Object:
		Variable: $r13
		Type: java.security.MessageDigest
		Statement: $r13 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer778)
		Method: <com.cootek.usage.p: org.apache.http.client.methods.HttpPost c()>
		SHA-256: 2cf86f59fff930411c8408b8c45427b06980513752f119a26cec4de704e8858b
		Secure: true
	Object:
		Variable: r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer817)
		Method: <com.cootek.usage.e: java.lang.String a(java.lang.String,byte[])>
		SHA-256: 6c021abc74635e0ef4b3675b8e57377764589b25b88429ee575ba9e4c6b5b86c
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer814)
		Method: <com.cootek.usage.e: java.lang.String a(java.lang.String,byte[])>
		SHA-256: 1d1ad494c7c50bf94f25ac8bde68dac3416058a241bfc8dc5b26e5cb1057c3e
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer8197)
		Method: <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>
		SHA-256: 48bbbc61570521449c069c670e9ef28a21df732bd34a13cd684f7507f6aa4321
		Secure: true
	Object:
		Variable: $r22
		Type: javax.net.ssl.SSLContext
		Statement: $r22 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2313)
		Method: <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>
		SHA-256: f729a95179d0b5b21ae7c16151f748d9996243036730a7ceac04b69b3efdaae0
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer6248)
		Method: <com.facebook.ads.internal.h.a.o: java.lang.String a(byte[],java.lang.String)>
		SHA-256: 43ed3ad97b4f75e474e322c27ed802e245e2ea217728f659905bed0825d77778
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer676)
		Method: <com.cootek.usage.e: javax.crypto.Cipher a(java.lang.String,int)>
		SHA-256: fda2cfdd6793b854b9d82636a38fc9bb6542c8e4f45b4d1debca70e58a4363e4
		Secure: true
	Object:
		Variable: $r14
		Type: byte[]
		Statement: $r14 = virtualinvoke $r13.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.cootek.usage.p: org.apache.http.client.methods.HttpPost c()>
		SHA-256: f43f0b80cc24f7364199acb9950a0f04dbd8191c02216c1f94e49ad87e486405
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <okhttp3.internal.Util: okio.ByteString sha256(okio.ByteString)>
		SHA-256: b9fa638f7c73836986e4b143e5c8a0f5f8453b073695b12e807f45e7b460c05a
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3)
		Method: <okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>
		SHA-256: 35b0119aad99960d8bec3a1c0a0d18ad4ede33706412ee7d9291554433d85f77
		Secure: true
	Object:
		Variable: varReplacer674
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer674)
		Method: <com.cootek.usage.e: javax.crypto.Cipher a(java.lang.String,int)>
		SHA-256: 6adcf0483cf98fe3b77df68d0ed97c0153df57ed07dc219761ab7058f3d7bb51
		Secure: false

Findings in Java Class: com.cootek.usage.v

	 in Method: void a(com.cootek.usage.v,com.cootek.usage.UsageData)
		IncompleteOperationError violating CrySL rule for javax.crypto.CipherOutputStream (on Object #6686e0c6d6397311c0eb730cae9d461054f5173a001789ef723e66ae7d47a3e5)
			Operation on object of type javax.crypto.CipherOutputStream object not completed. Expected call to write
			at statement: specialinvoke r36.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r2, $r16)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #76fa939d59b2d63e5682eb79dbcacecaf2be60456887fec53a3bf2dcb7d4dc68)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init, update, wrap, doFinal
			at statement: specialinvoke r36.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r2, $r16)


Findings in Java Class: com.cootek.usage.e

	 in Method: java.lang.String a(java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer817)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer816, r8)


	 in Method: javax.crypto.Cipher a(java.lang.String,int)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer674)


Findings in Java Class: com.cootek.usage.p

	 in Method: org.apache.http.client.methods.HttpPost c()
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r19.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer768, $r18)


Findings in Java Class: okhttp3.OkHttpClient

	 in Method: void <init>(okhttp3.OkHttpClient$Builder)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r22.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2314, varReplacer2314, varReplacer2314)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r22.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2314, varReplacer2314, varReplacer2314)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 26

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 6
	IncompleteOperationError: 2
=====================================================================