public class com.csi.vanguard.utils.RSAAlgoConst extends java.lang.Object
{

    public void <init>()
    {
        com.csi.vanguard.utils.RSAAlgoConst $r0;

        $r0 := @this: com.csi.vanguard.utils.RSAAlgoConst;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String doRSAEncreption(java.lang.String, java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.spec.InvalidKeySpecException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, java.lang.Exception
    {
        java.lang.String $r0, $r1, $r2, varReplacer12525, varReplacer12526, varReplacer12527;
        java.math.BigInteger $r3, $r4;
        java.security.spec.RSAPublicKeySpec $r5;
        byte[] $r6, $r7;
        java.security.KeyFactory $r8;
        java.security.PublicKey $r9;
        int varReplacer12521, varReplacer12522, varReplacer12523, varReplacer12524, varReplacer12528;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        varReplacer12525 = "UTF-8";

        $r6 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer12525);

        varReplacer12523 = 0;

        $r6 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r6, varReplacer12523);

        varReplacer12527 = "UTF-8";

        $r7 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer12527);

        varReplacer12528 = 0;

        $r7 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r7, varReplacer12528);

        $r4 = new java.math.BigInteger;

        varReplacer12522 = 1;

        specialinvoke $r4.<java.math.BigInteger: void <init>(int,byte[])>(varReplacer12522, $r6);

        $r3 = new java.math.BigInteger;

        varReplacer12521 = 1;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(varReplacer12521, $r7);

        $r5 = new java.security.spec.RSAPublicKeySpec;

        specialinvoke $r5.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r3);

        varReplacer12526 = "RSA";

        $r8 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer12526);

        $r9 = virtualinvoke $r8.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r5);

        $r6 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r6 = staticinvoke <com.csi.vanguard.utils.RSAAlgoConst: byte[] encryptWithPublicKey(byte[],java.security.PublicKey)>($r6, $r9);

        varReplacer12524 = 2;

        $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r6, varReplacer12524);

        return $r0;
    }

    private static byte[] encryptWithPublicKey(byte[], java.security.PublicKey) throws java.lang.Exception
    {
        byte[] $r0;
        java.security.PublicKey $r1;
        javax.crypto.Cipher $r2;
        java.lang.String varReplacer12529;
        int varReplacer12530;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.security.PublicKey;

        varReplacer12529 = "RSA/None/PKCS1PADDING";

        $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer12529);

        varReplacer12530 = 1;

        virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer12530, $r1);

        $r0 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        return $r0;
    }
}
