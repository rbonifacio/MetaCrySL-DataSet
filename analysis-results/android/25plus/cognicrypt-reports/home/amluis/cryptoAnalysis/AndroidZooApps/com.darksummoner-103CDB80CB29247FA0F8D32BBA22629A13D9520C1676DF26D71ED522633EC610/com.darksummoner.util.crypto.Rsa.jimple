public class com.darksummoner.util.crypto.Rsa extends java.lang.Object
{
    private static int KEY_SIZE;
    private static java.math.BigInteger PUBLIC_EXPONETN;

    static void <clinit>()
    {
        java.math.BigInteger $r0;
        int varReplacer6940;

        nop;

        varReplacer6940 = 1024;

        <com.darksummoner.util.crypto.Rsa: int KEY_SIZE> = varReplacer6940;

        $r0 = <java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger F4>;

        <com.darksummoner.util.crypto.Rsa: java.math.BigInteger PUBLIC_EXPONETN> = $r0;

        return;
    }

    public void <init>()
    {
        com.darksummoner.util.crypto.Rsa $r0;

        $r0 := @this: com.darksummoner.util.crypto.Rsa;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] crypto(byte[], java.security.Key, int) throws com.darksummoner.util.crypto.DarknessCryptoException
    {
        byte[] $r0;
        java.security.Key $r1;
        int $i0, varReplacer6942;
        javax.crypto.Cipher $r2;
        java.lang.Throwable $r3, $r4, $r5, $r6, $r7;
        com.darksummoner.util.crypto.DarknessCryptoException r8;
        java.lang.Exception r9;
        java.lang.String varReplacer6943;
        null_type varReplacer6944;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.security.Key;

        $i0 := @parameter2: int;

     label1:
        varReplacer6943 = "RSA/NONE/OAEPPadding";

        $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer6943);

        varReplacer6942 = 2;

        virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer6942, $r1);

        $r0 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        r9 = (java.lang.Exception) $r3;

        staticinvoke <jp.co.a_tm.util.LogUtil: void e(java.lang.Exception)>(r9);

     label4:
        varReplacer6944 = null;

        return varReplacer6944;

     label5:
        $r4 := @caughtexception;

        r9 = (java.lang.Exception) $r4;

        staticinvoke <jp.co.a_tm.util.LogUtil: void e(java.lang.Exception)>(r9);

        goto label4;

     label6:
        $r5 := @caughtexception;

        r8 = new com.darksummoner.util.crypto.DarknessCryptoException;

        specialinvoke r8.<com.darksummoner.util.crypto.DarknessCryptoException: void <init>(java.lang.Throwable)>($r5);

        throw r8;

     label7:
        $r6 := @caughtexception;

        r8 = new com.darksummoner.util.crypto.DarknessCryptoException;

        specialinvoke r8.<com.darksummoner.util.crypto.DarknessCryptoException: void <init>(java.lang.Throwable)>($r6);

        throw r8;

     label8:
        $r7 := @caughtexception;

        r8 = new com.darksummoner.util.crypto.DarknessCryptoException;

        specialinvoke r8.<com.darksummoner.util.crypto.DarknessCryptoException: void <init>(java.lang.Throwable)>($r7);

        throw r8;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label5;
        catch java.security.InvalidKeyException from label1 to label2 with label6;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label7;
        catch javax.crypto.BadPaddingException from label1 to label2 with label8;
    }

    public static byte[] decrypt(byte[], java.security.PrivateKey) throws com.darksummoner.util.crypto.DarknessCryptoException
    {
        byte[] $r0;
        java.security.PrivateKey $r1;
        int varReplacer6941;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.security.PrivateKey;

        varReplacer6941 = 2;

        $r0 = staticinvoke <com.darksummoner.util.crypto.Rsa: byte[] crypto(byte[],java.security.Key,int)>($r0, $r1, varReplacer6941);

        return $r0;
    }

    public static byte[] encrypt(byte[], java.security.PublicKey) throws com.darksummoner.util.crypto.DarknessCryptoException
    {
        byte[] $r0;
        java.security.PublicKey $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.security.PublicKey;

        $r0 = staticinvoke <com.darksummoner.util.crypto.Rsa: byte[] crypto(byte[],java.security.Key,int)>($r0, $r1, 1);

        return $r0;
    }

    public static java.security.KeyPair generateKeyPair()
    {
        java.security.spec.RSAKeyGenParameterSpec $r0, r6;
        java.math.BigInteger $r1;
        java.security.KeyPairGenerator $r2;
        int $i0;
        java.security.KeyPair $r3;
        java.lang.Throwable $r4, $r5;
        java.lang.Exception r7;
        null_type varReplacer6956, varReplacer6957;
        java.lang.String varReplacer6958;

     label1:
        nop;

        varReplacer6958 = "RSA";

        $r2 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer6958);

     label2:
        r6 = new java.security.spec.RSAKeyGenParameterSpec;

        $r0 = r6;

        $i0 = <com.darksummoner.util.crypto.Rsa: int KEY_SIZE>;

        $r1 = <com.darksummoner.util.crypto.Rsa: java.math.BigInteger PUBLIC_EXPONETN>;

     label3:
        specialinvoke r6.<java.security.spec.RSAKeyGenParameterSpec: void <init>(int,java.math.BigInteger)>($i0, $r1);

        virtualinvoke $r2.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r0);

        $r3 = virtualinvoke $r2.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

        r7 = (java.lang.Exception) $r4;

        staticinvoke <jp.co.a_tm.util.LogUtil: void e(java.lang.Exception)>(r7);

        varReplacer6956 = null;

        return varReplacer6956;

     label6:
        $r5 := @caughtexception;

        r7 = (java.lang.Exception) $r5;

        staticinvoke <jp.co.a_tm.util.LogUtil: void e(java.lang.Exception)>(r7);

        varReplacer6957 = null;

        return varReplacer6957;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label6;
        catch java.security.InvalidAlgorithmParameterException from label3 to label4 with label6;
    }

    public static java.security.KeyPair getKeyPair(byte[], byte[]) throws java.security.spec.InvalidKeySpecException
    {
        byte[] $r0, $r1;
        java.lang.Throwable $r2;
        java.security.spec.PKCS8EncodedKeySpec $r3, r9;
        java.security.spec.X509EncodedKeySpec $r4, r8;
        java.security.KeyFactory $r5;
        java.security.PublicKey $r6;
        java.security.PrivateKey $r7;
        java.security.KeyPair r10;
        java.lang.Exception r11;
        null_type varReplacer6959;
        java.lang.String varReplacer6960;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

     label1:
        varReplacer6960 = "RSA";

        $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer6960);

     label2:
        r8 = new java.security.spec.X509EncodedKeySpec;

        $r4 = r8;

     label3:
        specialinvoke r8.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r0);

     label4:
        r9 = new java.security.spec.PKCS8EncodedKeySpec;

        $r3 = r9;

     label5:
        specialinvoke r9.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r1);

     label6:
        r10 = new java.security.KeyPair;

     label7:
        $r6 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r4);

        $r7 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r3);

        specialinvoke r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r6, $r7);

     label8:
        return r10;

     label9:
        $r2 := @caughtexception;

        r11 = (java.lang.Exception) $r2;

        staticinvoke <jp.co.a_tm.util.LogUtil: void e(java.lang.Exception)>(r11);

        varReplacer6959 = null;

        return varReplacer6959;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label9;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label9;
        catch java.security.NoSuchAlgorithmException from label5 to label6 with label9;
        catch java.security.NoSuchAlgorithmException from label7 to label8 with label9;
    }
}
