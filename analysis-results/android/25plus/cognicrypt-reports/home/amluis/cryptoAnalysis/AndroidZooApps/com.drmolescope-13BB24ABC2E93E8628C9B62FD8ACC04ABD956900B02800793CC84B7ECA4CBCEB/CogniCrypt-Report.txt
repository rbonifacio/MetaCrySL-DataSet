Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: java.lang.String createHash(char[])>
		SHA-256: 53b619e25a30e20674cf3321e765e693580b029487a69b21031287d4cd76808c
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2395)
		Method: <com.molescope.DatabaseHandler: byte[] encryptDecrypt(byte[],int)>
		SHA-256: d2718174b874ac43d31aad4c9daccc897f62b2f85c3f8f5fc73e799e02f91d24
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer2394)
		Method: <com.molescope.DatabaseHandler: byte[] encryptDecrypt(byte[],int)>
		SHA-256: ccc96e5894c6bb5e377c61d53e11808278ea7ffe4a123d15fc16c00852d9979
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1771, varReplacer1772)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: byte[] pbkdf2(char[],byte[],int,int)>
		SHA-256: 5147d331f9326131178783efd1dfe601c0d1021060ffcc4c4baff551cd23af20
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.molescope.DatabaseHandler: byte[] encryptDecrypt(byte[],int)>
		SHA-256: 8599be176768bdf35bbda4e024ca0ca7a5069204416dfc7d9341e9f824ad9e65
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKey
		Statement: $r4 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: byte[] pbkdf2(char[],byte[],int,int)>
		SHA-256: 7c467b2402a97c8079248009aa0c1be27682561deb850e33d92c9c610ff19cdd
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.KeyStore
		Statement: $r4 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r3)
		Method: <com.molescope.HttpRequest: void setupSSL(android.content.Context)>
		SHA-256: 42b89cfd3c1c51d904b1cb9e834814022d3b3e0e57cf9e197a2ed7e2122c4d96
		Secure: true
	Object:
		Variable: varReplacer2394
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer2394)
		Method: <com.molescope.DatabaseHandler: byte[] encryptDecrypt(byte[],int)>
		SHA-256: 2ec95cd9e87e88c0af8f3eb7ee64a095ba4de74c809754ffbd49cf579a77906c
		Secure: false
	Object:
		Variable: $r13
		Type: javax.net.ssl.SSLContext
		Statement: $r13 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2796)
		Method: <com.molescope.HttpRequest: void setupSSL(android.content.Context)>
		SHA-256: f534e322bce60e2fe662bc045128cc9d20a1e4631b51aa2a4c0a6abcc82ae6b1
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: java.lang.String createHash(char[])>
		SHA-256: 534e0990bc9438a4a58d0ca1399eb7c5e644117c659d99dbd44b3f29d06b0d1c
		Secure: true
	Object:
		Variable: varReplacer1772
		Type: int
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1771, varReplacer1772)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: byte[] pbkdf2(char[],byte[],int,int)>
		SHA-256: 2c9a4295f3b89c81e71285e1b771d98680a837eec5d41024585e96b66c5c057b
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKeyFactory
		Statement: $r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer1773)
		Method: <com.molescope.UserDatabaseUtil$PasswordHash: byte[] pbkdf2(char[],byte[],int,int)>
		SHA-256: 16fe52256c956c6014a7193bbd417a79bdf72eeb4ffe32bf3da89e661200c04b
		Secure: false

Findings in Java Class: com.molescope.UserDatabaseUtil$PasswordHash

	 in Method: byte[] pbkdf2(char[],byte[],int,int)
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #5147d331f9326131178783efd1dfe601c0d1021060ffcc4c4baff551cd23af20)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1771, varReplacer1772)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r4 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #5147d331f9326131178783efd1dfe601c0d1021060ffcc4c4baff551cd23af20)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1771, varReplacer1772)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #5147d331f9326131178783efd1dfe601c0d1021060ffcc4c4baff551cd23af20)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r4 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #5147d331f9326131178783efd1dfe601c0d1021060ffcc4c4baff551cd23af20)
			Third parameter (with value 1000)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1771, varReplacer1772)


Findings in Java Class: com.molescope.DatabaseHandler

	 in Method: byte[] encryptDecrypt(byte[],int)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer2394)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d2718174b874ac43d31aad4c9daccc897f62b2f85c3f8f5fc73e799e02f91d24)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2395)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>($i0, $r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d2718174b874ac43d31aad4c9daccc897f62b2f85c3f8f5fc73e799e02f91d24)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2395)


Findings in Java Class: com.molescope.HttpRequest

	 in Method: void setupSSL(android.content.Context)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r13.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2794, $r14, varReplacer2794)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r13.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2794, $r14, varReplacer2794)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 12

	CogniCrypt found the following violations. For details see description above.
	NeverTypeOfError: 2
	IncompleteOperationError: 1
	RequiredPredicateError: 5
	ConstraintError: 3
=====================================================================