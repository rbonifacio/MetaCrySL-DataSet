Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer2873)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: d8e935fab34a755465ec0a4c5641568c79217c2e2c07c58ad152de29a5a5f790
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer2874)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: a6686bde98ffe39a9de7e4aaeb02155e399cbabb729b390775ff50a991c14026
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2869)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: e63cc5505229f8e6a12e58b19e2a06c3917ac55027cb595730a0638c1abbea2a
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r1, varReplacer2871, varReplacer2872)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: e058e080449c03f0031f92d9577563440407c24bbbf5337d9bd3df68f9bca1b4
		Secure: false
	Object:
		Variable: varReplacer2873
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer2873)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: e0d507fbdc122a3cb1a1157d0ef12eefd3d2a9c5960b3a1e6e8c73384794e6c1
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3023)
		Method: <com.xomodigital.azimov.util.MathUtil: java.lang.String hash(java.lang.String,java.lang.String)>
		SHA-256: 779be14d129226817865b8f1f2ab18f5f696b9ccf948e1b3a03624715f76d4a0
		Secure: true
	Object:
		Variable: varReplacer2869
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2869)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: 2a3e4950106dd52819bc872e93ad32e7ab4c324d706535d32696736adbb043db
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: df95c04ed76fe7565b426c50cde38eab25e76095c32672d02ac4cc89c29ba677
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: 279db3d9da58ae94c02e1ba6db8deae9057d6b5f9f4f37662fc46c910a8d6da3
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.xomodigital.azimov.util.MathUtil: java.lang.String hash(java.lang.String,java.lang.String)>
		SHA-256: 16676d39b6fc94d4ee1228c9088f27c327774124e21349174b057e3410f138b6
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKeyFactory
		Statement: $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer2870)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: b9acd482b2e8dcd050983c672d84d2413d6c88c6fc20ae505764328f5b2dc1d7
		Secure: false
	Object:
		Variable: varReplacer2872
		Type: int
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r1, varReplacer2871, varReplacer2872)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: 2c3f0173c6c469360e1899d66900462dc65b43f7c354e3d74c0acab22b008883
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.SecureRandom
		Statement: $r10 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer2879)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: 2607be8be02b989c7c28d498ad5cb1f33d5d08be74350280d6717f3ece7ff9c9
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKey
		Statement: $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4)
		Method: <com.tozny.crypto.android.AesCbcWithIntegrity: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])>
		SHA-256: 42a74b6a74bc1c37db7c1b9ab31919ca7b3a5f564f4d1bce3cde98113f1cf4bb
		Secure: false

Findings in Java Class: com.tozny.crypto.android.AesCbcWithIntegrity

	 in Method: com.tozny.crypto.android.AesCbcWithIntegrity$SecretKeys generateKeyFromPassword(java.lang.String,byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, varReplacer2873)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #e058e080449c03f0031f92d9577563440407c24bbbf5337d9bd3df68f9bca1b4)
			Third parameter (with value 24)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r1, varReplacer2871, varReplacer2872)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r1, varReplacer2871, varReplacer2872)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #e058e080449c03f0031f92d9577563440407c24bbbf5337d9bd3df68f9bca1b4)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #e058e080449c03f0031f92d9577563440407c24bbbf5337d9bd3df68f9bca1b4)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, $r1, varReplacer2871, varReplacer2872)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2869)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 14

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 4
	NeverTypeOfError: 1
	ConstraintError: 1
	IncompleteOperationError: 1
=====================================================================