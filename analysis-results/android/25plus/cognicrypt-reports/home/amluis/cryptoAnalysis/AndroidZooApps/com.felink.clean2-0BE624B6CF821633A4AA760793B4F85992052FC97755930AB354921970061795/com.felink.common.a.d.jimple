public class com.felink.common.a.d extends java.lang.Object
{

    public static byte[] a(java.lang.String, java.lang.String, byte[])
    {
        java.lang.String $r0, $r1, varReplacer1782, varReplacer1784;
        byte[] $r2, $r4;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.Cipher $r5;
        javax.crypto.spec.IvParameterSpec $r6;
        java.lang.Throwable $r7, $r9, $r10, $r11, $r12, $r13;
        java.lang.RuntimeException $r8;
        int varReplacer1783;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: byte[];

        $r3 = new javax.crypto.spec.SecretKeySpec;

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        varReplacer1784 = "AES";

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer1784);

     label01:
        varReplacer1782 = "AES/CBC/PKCS5Padding";

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1782);

     label02:
        $r6 = new javax.crypto.spec.IvParameterSpec;

     label03:
        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4);

        varReplacer1783 = 1;

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer1783, $r3, $r6);

        $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

     label04:
        return $r2;

     label05:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label06:
        $r9 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r8;

     label07:
        $r10 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r8;

     label08:
        $r11 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r8;

     label09:
        $r12 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw $r8;

     label10:
        $r13 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r8;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label05;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label06;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label06;
        catch java.security.InvalidKeyException from label01 to label02 with label07;
        catch java.security.InvalidKeyException from label03 to label04 with label07;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label08;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label08;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label09;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label09;
        catch javax.crypto.BadPaddingException from label01 to label02 with label10;
        catch javax.crypto.BadPaddingException from label03 to label04 with label10;
    }
}
