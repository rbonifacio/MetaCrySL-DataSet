public class com.mixpanel.android.util.ImageStore extends java.lang.Object
{
    private final com.mixpanel.android.mpmetrics.MPConfig mConfig;
    private final java.security.MessageDigest mDigest;
    private final java.io.File mDirectory;
    private final com.mixpanel.android.util.RemoteService mPoster;

    public void <init>(android.content.Context, java.lang.String)
    {
        com.mixpanel.android.util.ImageStore $r0;
        android.content.Context $r1;
        java.lang.String $r2, varReplacer2274, varReplacer2275;
        java.lang.StringBuilder $r3;
        com.mixpanel.android.util.HttpService $r4;

        nop;

        $r0 := @this: com.mixpanel.android.util.ImageStore;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        varReplacer2274 = "MixpanelAPI.Images.";

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2274);

        varReplacer2275 = "DecideChecker";

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2275);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new com.mixpanel.android.util.HttpService;

        specialinvoke $r4.<com.mixpanel.android.util.HttpService: void <init>()>();

        specialinvoke $r0.<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>($r1, $r2, $r4);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, com.mixpanel.android.util.RemoteService)
    {
        com.mixpanel.android.util.ImageStore $r0;
        android.content.Context $r1;
        java.lang.String $r2, varReplacer2276, varReplacer2278, varReplacer2279;
        com.mixpanel.android.util.RemoteService $r3;
        java.lang.Throwable $r4;
        java.io.File $r5;
        com.mixpanel.android.mpmetrics.MPConfig $r6;
        java.security.MessageDigest $r7;
        int varReplacer2277;

        nop;

        $r0 := @this: com.mixpanel.android.util.ImageStore;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.mixpanel.android.util.RemoteService;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        varReplacer2277 = 0;

        $r5 = virtualinvoke $r1.<android.content.Context: java.io.File getDir(java.lang.String,int)>($r2, varReplacer2277);

        $r0.<com.mixpanel.android.util.ImageStore: java.io.File mDirectory> = $r5;

        $r0.<com.mixpanel.android.util.ImageStore: com.mixpanel.android.util.RemoteService mPoster> = $r3;

        $r6 = staticinvoke <com.mixpanel.android.mpmetrics.MPConfig: com.mixpanel.android.mpmetrics.MPConfig getInstance(android.content.Context)>($r1);

        $r0.<com.mixpanel.android.util.ImageStore: com.mixpanel.android.mpmetrics.MPConfig mConfig> = $r6;

     label1:
        varReplacer2276 = "SHA1";

        $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2276);

     label2:
        $r0.<com.mixpanel.android.util.ImageStore: java.security.MessageDigest mDigest> = $r7;

        return;

     label3:
        $r4 := @caughtexception;

        varReplacer2278 = "MixpanelAPI.ImageStore";

        varReplacer2279 = "Images won\'t be stored because this platform doesn\'t supply a SHA1 hash function";

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(varReplacer2278, varReplacer2279);

        $r7 = null;

        goto label2;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private java.io.File storedFile(java.lang.String)
    {
        com.mixpanel.android.util.ImageStore $r0;
        java.lang.String $r1;
        java.security.MessageDigest $r2;
        byte[] $r3;
        java.lang.StringBuilder $r4;
        java.io.File $r5, $r6;

        $r0 := @this: com.mixpanel.android.util.ImageStore;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<com.mixpanel.android.util.ImageStore: java.security.MessageDigest mDigest>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<com.mixpanel.android.util.ImageStore: java.security.MessageDigest mDigest>;

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MP_IMG_");

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r3, 10);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.io.File;

        $r6 = $r0.<com.mixpanel.android.util.ImageStore: java.io.File mDirectory>;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r1);

        return $r5;
    }

    public void deleteStorage(java.lang.String)
    {
        com.mixpanel.android.util.ImageStore $r0;
        java.lang.String $r1;
        java.io.File $r2;

        $r0 := @this: com.mixpanel.android.util.ImageStore;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke $r0.<com.mixpanel.android.util.ImageStore: java.io.File storedFile(java.lang.String)>($r1);

        if $r2 == null goto label1;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    public android.graphics.Bitmap getImage(java.lang.String) throws com.mixpanel.android.util.ImageStore$CantGetImageException
    {
        com.mixpanel.android.util.ImageStore $r0;
        java.lang.String $r1;
        java.lang.Long $r2, $r21;
        android.graphics.BitmapFactory$Options $r3;
        java.io.FileOutputStream $r4, $r10;
        java.io.File $r5;
        byte[] $r6;
        boolean $z0;
        com.mixpanel.android.mpmetrics.MPConfig $r7;
        javax.net.ssl.SSLSocketFactory $r8;
        com.mixpanel.android.util.RemoteService $r9;
        int $i0, $i1;
        android.graphics.Bitmap $r11;
        com.mixpanel.android.util.ImageStore$CantGetImageException $r12;
        java.lang.Throwable $r13, $r15, $r16, $r17, $r18, $r19;
        com.mixpanel.android.util.RemoteService$ServiceUnavailableException $r14;
        long $l2, $l3;
        java.lang.Runtime $r20;
        byte $b4;

        $r0 := @this: com.mixpanel.android.util.ImageStore;

        $r1 := @parameter0: java.lang.String;

        $r5 = specialinvoke $r0.<com.mixpanel.android.util.ImageStore: java.io.File storedFile(java.lang.String)>($r1);

        $r6 = null;

        if $r5 == null goto label01;

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label05;

     label01:
        $r7 = $r0.<com.mixpanel.android.util.ImageStore: com.mixpanel.android.mpmetrics.MPConfig mConfig>;

     label02:
        $r8 = virtualinvoke $r7.<com.mixpanel.android.mpmetrics.MPConfig: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()>();

     label03:
        $r9 = $r0.<com.mixpanel.android.util.ImageStore: com.mixpanel.android.util.RemoteService mPoster>;

     label04:
        $r6 = interfaceinvoke $r9.<com.mixpanel.android.util.RemoteService: byte[] performRequest(java.lang.String,java.util.Map,javax.net.ssl.SSLSocketFactory)>($r1, null, $r8);

     label05:
        if $r6 == null goto label24;

        if $r5 == null goto label11;

        $i0 = lengthof $r6;

        if $i0 >= 10000000 goto label11;

        $r10 = null;

     label06:
        $r4 = new java.io.FileOutputStream;

     label07:
        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

     label08:
        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r6);

     label09:
        if $r4 == null goto label11;

     label10:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label11:
        $i0 = lengthof $r6;

        $r11 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>($r6, 0, $i0);

        if $r11 != null goto label29;

        $r12 = new com.mixpanel.android.util.ImageStore$CantGetImageException;

        specialinvoke $r12.<com.mixpanel.android.util.ImageStore$CantGetImageException: void <init>(java.lang.String)>("Downloaded data could not be interpreted as a bitmap");

        throw $r12;

     label12:
        $r13 := @caughtexception;

        $r12 = new com.mixpanel.android.util.ImageStore$CantGetImageException;

        specialinvoke $r12.<com.mixpanel.android.util.ImageStore$CantGetImageException: void <init>(java.lang.String,java.lang.Throwable)>("Can\'t download bitmap", $r13);

        throw $r12;

     label13:
        $r14 := @caughtexception;

        $r12 = new com.mixpanel.android.util.ImageStore$CantGetImageException;

        specialinvoke $r12.<com.mixpanel.android.util.ImageStore$CantGetImageException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t download image due to service availability", $r14);

        throw $r12;

     label14:
        $r15 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MixpanelAPI.ImageStore", "Problem closing output file", $r15);

        goto label11;

     label15:
        $r16 := @caughtexception;

     label16:
        $r12 = new com.mixpanel.android.util.ImageStore$CantGetImageException;

        specialinvoke $r12.<com.mixpanel.android.util.ImageStore$CantGetImageException: void <init>(java.lang.String,java.lang.Throwable)>("It appears that ImageStore is misconfigured, or disk storage is unavailable- can\'t write to bitmap directory", $r16);

        throw $r12;

     label17:
        $r17 := @caughtexception;

     label18:
        if $r10 == null goto label20;

     label19:
        virtualinvoke $r10.<java.io.OutputStream: void close()>();

     label20:
        throw $r17;

     label21:
        $r18 := @caughtexception;

     label22:
        $r12 = new com.mixpanel.android.util.ImageStore$CantGetImageException;

        specialinvoke $r12.<com.mixpanel.android.util.ImageStore$CantGetImageException: void <init>(java.lang.String,java.lang.Throwable)>("Can\'t store bitmap", $r18);

        throw $r12;

     label23:
        $r19 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MixpanelAPI.ImageStore", "Problem closing output file", $r19);

        goto label20;

     label24:
        $r3 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r3.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r3.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        $r1 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r1, $r3);

        $r2 = new java.lang.Long;

        $i0 = $r3.<android.graphics.BitmapFactory$Options: int outHeight>;

        $i1 = $r3.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i0 = $i0 * $i1;

        $l2 = (long) $i0;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>($l2);

        $r20 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l2 = virtualinvoke $r20.<java.lang.Runtime: long freeMemory()>();

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $l2 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $l3 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        $b4 = $l2 cmp $l3;

        if $b4 <= 0 goto label25;

        $r12 = new com.mixpanel.android.util.ImageStore$CantGetImageException;

        specialinvoke $r12.<com.mixpanel.android.util.ImageStore$CantGetImageException: void <init>(java.lang.String)>("Do not have enough memory for the image");

        throw $r12;

     label25:
        $r1 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r11 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>($r1);

        if $r11 != null goto label29;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        $r12 = new com.mixpanel.android.util.ImageStore$CantGetImageException;

        specialinvoke $r12.<com.mixpanel.android.util.ImageStore$CantGetImageException: void <init>(java.lang.String)>("Bitmap on disk can\'t be opened or was corrupt");

        throw $r12;

     label26:
        $r17 := @caughtexception;

        $r10 = $r4;

        goto label18;

     label27:
        $r18 := @caughtexception;

        $r10 = $r4;

        goto label22;

     label28:
        $r16 := @caughtexception;

        $r10 = $r4;

        goto label16;

     label29:
        return $r11;

        catch java.io.IOException from label02 to label03 with label12;
        catch java.io.IOException from label04 to label05 with label12;
        catch com.mixpanel.android.util.RemoteService$ServiceUnavailableException from label02 to label03 with label13;
        catch com.mixpanel.android.util.RemoteService$ServiceUnavailableException from label04 to label05 with label13;
        catch java.io.FileNotFoundException from label07 to label08 with label15;
        catch java.io.IOException from label07 to label08 with label21;
        catch java.lang.Throwable from label06 to label08 with label17;
        catch java.io.FileNotFoundException from label08 to label09 with label28;
        catch java.io.IOException from label08 to label09 with label27;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch java.io.IOException from label10 to label11 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.io.IOException from label19 to label20 with label23;
        catch java.lang.Throwable from label22 to label23 with label17;
    }
}
