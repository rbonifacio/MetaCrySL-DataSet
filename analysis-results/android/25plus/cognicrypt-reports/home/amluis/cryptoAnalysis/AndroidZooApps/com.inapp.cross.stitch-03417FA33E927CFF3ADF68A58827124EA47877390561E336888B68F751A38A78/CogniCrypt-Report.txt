Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3667)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: c1246877797fbe31c58b66256ee7f1fd4aea66e76f6cc6615c23ee51e7af8b92
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2625)
		Method: <com.umeng.analytics.s: byte[] b(byte[])>
		SHA-256: 7d066192bb2f37ae738f6e63aca30f770d5c33a54c5289aa051296f8257e6d73
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer137)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a()>
		SHA-256: 24b53b7d627da1843e77215baa5b00fdef5c2d1a36d1d6c849ef6e47de90e7b
		Secure: false
	Object:
		Variable: r17
		Type: java.security.SecureRandom
		Statement: specialinvoke r17.<java.security.SecureRandom: void <init>()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 3471e7361ae58e3d1c565e8b90ebc1741f759d996e09b82daf3f7a41eb065adf
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 141880d770344d9c6cee1cdc0028c41461b3f74707dded4ed9a4ae43ded6a71
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2697)
		Method: <u.aly.gi: java.lang.String a(java.lang.String)>
		SHA-256: d283724f0931fc3e5b781a48b1c2de239a364ad618b313fd20a3304eb7dacd89
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKeyFactory
		Statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer3662)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 7cd4220985c20335594c1ffb6e3162a6f89a583ae10ba25110b283169d22d92c
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r11.<java.security.MessageDigest: byte[] digest(byte[])>($r6)
		Method: <u.aly.gh: java.lang.String p(android.content.Context)>
		SHA-256: 6672633037273bc684c7a56184a60c650c59ccbf9844873a409252ec13a74329
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: da0001f2f60063ff8c3ff8a4f94b86183eb95033c873c3302a0bb4d3f9677725
		Secure: false
	Object:
		Variable: r17
		Type: java.security.SecureRandom
		Statement: specialinvoke r17.<java.security.SecureRandom: void <init>()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: e6f2e13bd9cf1e838ff5047a99a203627e8a9186865c7c1bb76ce3e4ba14648c
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKey
		Statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: eabac5d4694f0c3a1c1a78ee1edbf39575e287a76765f7a2bbbfa518dfe94c3d
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2622)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: 6afbb8ad29ec373ba09a8fd5e8b9dc58cd1e286e184f1dc81a67df4d8a9c87f5
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.gi: java.lang.String b(java.lang.String)>
		SHA-256: db7ce7715a4d20c843f3b647efb03b4185a332616382d09772954c5afcd1dedf
		Secure: true
	Object:
		Variable: $r11
		Type: java.security.MessageDigest
		Statement: $r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2413)
		Method: <u.aly.gh: java.lang.String p(android.content.Context)>
		SHA-256: 1757d1a6eca55330d9645cc745abed53ca5f99a1f28fad0ef28faaa411099202
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: abff8bd008aa8e630f3c565ff73f43fe4ad825b545c79672aa0ecbf5f80e56e1
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: 20c5e227023f83179f48f2d29725faedbdb908d9c821320416214b63e2139378
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.umeng.analytics.s: byte[] b(byte[])>
		SHA-256: fb40d49f1980c4b1fc0c80b54eb58455d51dcf103627d44d4367f91734a9ea00
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2623)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: 8a9faa869067578ad207ba1bc22218c817d7c12b5a3a7e56271cc79828695a61
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] a()>
		SHA-256: 4c007d82661266b5817bbe92225f4b95e375d4009b399b6ad4a1c654005f0fd7
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.Cipher
		Statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer132)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: 4c35ea88ec14fcdadab8f93de97b48a17cae4cac3038267007281927ff1e3759
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.eyewind.cross_stitch.util.e: java.lang.String d(java.lang.String)>
		SHA-256: 27f82111816bf99e6a2a10880c4210634b4624ba132e568446a0d29d52dd4b2d
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2366)
		Method: <u.aly.gi: java.lang.String b(java.lang.String)>
		SHA-256: f2588b789fe645c5f8024d30c503d9c766dea12b97fa7a2576e538bccdc01c49
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $z0 = virtualinvoke $r4.<java.security.Signature: boolean verify(byte[])>($r3)
		Method: <com.eyewind.cross_stitch.util.billing.p: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: f154e72054c3e5fcf84c1d9625748db9f190ce8a7471aa9ae18a5fdecc0fefc2
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer711)
		Method: <com.eyewind.cross_stitch.util.e: java.lang.String d(java.lang.String)>
		SHA-256: dfcc1d2edc45ffee620e5659934ac8f4b189a85dc6c06e0e6cf6c2399bb5b658
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <u.aly.gi: java.lang.String a(java.lang.String)>
		SHA-256: efb90d6c0588cba5ebcef086856e6845e8300ba68ce490c6310b52d33b1bbec2
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKeyFactory
		Statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer130)
		Method: <com.eyewind.cross_stitch.util.b: byte[] a(byte[])>
		SHA-256: e40661eb4367ff8a7dbb456ed246eb234fc71673469df12666ee3261e2aec744
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer972)
		Method: <com.eyewind.cross_stitch.util.billing.p: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: a2265cf79a3cd666816752eedcb8a0a980fe9bfd6008ef8a1ba101b58c9034ae
		Secure: false
	Object:
		Variable: varReplacer2622
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2622)
		Method: <com.umeng.analytics.s: byte[] a(byte[],byte[])>
		SHA-256: bc5fb95f9d3b789a735fa8ce510dafee8c61af01c8d3819d85201902983861cd
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKey
		Statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.eyewind.cross_stitch.util.b: byte[] b(byte[])>
		SHA-256: 5c116a0fc5fd5864b9d3b5a9773e309eacebfeef81e48f6293a3e61003089211
		Secure: false
	Object:
		Variable: r6
		Type: java.security.SecureRandom
		Statement: specialinvoke r6.<java.security.SecureRandom: void <init>()>()
		Method: <com.eyewind.cross_stitch.util.b: byte[] a()>
		SHA-256: a212a32d25e5836ac936eca4bb3774642296c7c151bea8c797ded6872c071780
		Secure: true

Findings in Java Class: com.eyewind.cross_stitch.util.b

	 in Method: byte[] a(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer131, $r6, $r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer131, $r6, $r1)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #4c35ea88ec14fcdadab8f93de97b48a17cae4cac3038267007281927ff1e3759)
			First parameter (with value "DES") should be any of {AES_128, ARC4, AES, BLOWFISH, DESede, AES_256, ChaCha20, RSA}
			at statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer132)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #e40661eb4367ff8a7dbb456ed246eb234fc71673469df12666ee3261e2aec744)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithHmacSHA224AndAES_256, PBEwithHmacSHA1AndAES_256, HmacSHA384, PBEwithHmacSHA512AndAES_128, PBEwithMD5ANDDES, PBKDF2withHmacSHA1And8BIT, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBKDF2withHmacSHA384, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, HmacSHA224, PBEwithMD5ANDRC2, PBEwithHmacSHA384AndAES_128, PBEwithHmacSHA256AndAES_256, HmacSHA256, PBEwithSHAANDTWOFISH-CBC	, PBKDF2withHmacSHA512, HmacSHA1, PBKDF2withHmacSHA224, PBEwithHmacSHA384AndAES_256, PBKDF2withHmacSHA256, AES, PBEwithSHAAND192BITAES-CBC-BC, PBKDF2withHmacSHA1, PBEwithSHAAND128BITRC4, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC, PBEwithHmacSHA224AndAES_128, DESede, PBEwithHmacSHA256AndAES_128, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithHmacSHA512AndAES_256, PBEwithSHAAND40BITRC4, PBEwithHmacSHA1AndAES_128, HmacSHA512, PBEwithSHAAND128BITRC2-CBC, PBEwithSHAAND128BITAES-CBC-BC}
			at statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer130)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)


	 in Method: byte[] a()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #24b53b7d627da1843e77215baa5b00fdef5c2d1a36d1d6c849ef6e47de90e7b)
			First parameter (with value "DES") should be any of {ARC4, HmacSHA224, HmacSHA256, HmacSHA1, AES, DESede, HmacMD5, HmacSHA512, ChaCha20, HmacSHA384, BLOWFISH}
			at statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer137)

		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			First parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(java.security.SecureRandom)>($r0)


	 in Method: byte[] b(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer3666, $r6, $r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as randomized
			at statement: virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(varReplacer3666, $r6, $r1)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c1246877797fbe31c58b66256ee7f1fd4aea66e76f6cc6615c23ee51e7af8b92)
			First parameter (with value "DES") should be any of {AES_128, ARC4, AES, BLOWFISH, DESede, AES_256, ChaCha20, RSA}
			at statement: $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3667)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #7cd4220985c20335594c1ffb6e3162a6f89a583ae10ba25110b283169d22d92c)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithHmacSHA224AndAES_256, PBEwithHmacSHA1AndAES_256, HmacSHA384, PBEwithHmacSHA512AndAES_128, PBEwithMD5ANDDES, PBKDF2withHmacSHA1And8BIT, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBKDF2withHmacSHA384, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, HmacSHA224, PBEwithMD5ANDRC2, PBEwithHmacSHA384AndAES_128, PBEwithHmacSHA256AndAES_256, HmacSHA256, PBEwithSHAANDTWOFISH-CBC	, PBKDF2withHmacSHA512, HmacSHA1, PBKDF2withHmacSHA224, PBEwithHmacSHA384AndAES_256, PBKDF2withHmacSHA256, AES, PBEwithSHAAND192BITAES-CBC-BC, PBKDF2withHmacSHA1, PBEwithSHAAND128BITRC4, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC, PBEwithHmacSHA224AndAES_128, DESede, PBEwithHmacSHA256AndAES_128, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithHmacSHA512AndAES_256, PBEwithSHAAND40BITRC4, PBEwithHmacSHA1AndAES_128, HmacSHA512, PBEwithSHAAND128BITRC2-CBC, PBEwithSHAAND128BITAES-CBC-BC}
			at statement: $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer3662)


Findings in Java Class: com.eyewind.cross_stitch.util.billing.p

	 in Method: boolean a(java.security.PublicKey,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0)


Findings in Java Class: com.umeng.analytics.s

	 in Method: byte[] a(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r4.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer2624, $r2, $r4)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer2622)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Third parameter was not properly generated as prepared I V
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer2624, $r2, $r4)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 30

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 5
	RequiredPredicateError: 12
=====================================================================