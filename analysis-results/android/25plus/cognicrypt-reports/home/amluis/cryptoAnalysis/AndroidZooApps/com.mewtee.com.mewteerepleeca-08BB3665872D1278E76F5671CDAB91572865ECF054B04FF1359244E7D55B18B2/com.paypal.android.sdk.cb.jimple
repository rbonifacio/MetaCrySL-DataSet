public class com.paypal.android.sdk.cb extends java.lang.Object
{
    private static final java.lang.String a;

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        nop;

        $r1 = class "Lcom/paypal/android/sdk/cb;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.paypal.android.sdk.cb: java.lang.String a> = $r0;

        return;
    }

    public void <init>()
    {
        com.paypal.android.sdk.cb $r0;

        $r0 := @this: com.paypal.android.sdk.cb;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static okhttp3.OkHttpClient$Builder a(int, boolean, boolean, java.lang.String, java.lang.String)
    {
        int $i0, varReplacer16069, varReplacer16070, varReplacer16073;
        boolean $z0, $z1;
        java.lang.String $r0, $r1, varReplacer16068, varReplacer16071, varReplacer16072, varReplacer16074, varReplacer16077, varReplacer16078;
        java.lang.StringBuilder $r2, r16;
        okhttp3.OkHttpClient$Builder $r3, r17;
        okhttp3.ConnectionSpec[] $r4;
        okhttp3.ConnectionSpec $r5;
        java.util.List $r6;
        java.lang.Integer $r7;
        long $l1;
        java.util.concurrent.TimeUnit $r8;
        java.lang.Object[] $r9;
        javax.net.ssl.SSLContext $r10;
        javax.net.ssl.SSLSocketFactory $r11;
        com.paypal.android.sdk.cd $r12, r20;
        com.paypal.android.sdk.cf $r13, r21;
        java.io.InputStream $r14;
        java.lang.Throwable $r15;
        com.paypal.android.sdk.cg r18;
        com.paypal.android.sdk.cc r19;
        java.lang.RuntimeException r22;
        javax.net.ssl.TrustManager[] r23;
        null_type varReplacer16075, varReplacer16076;

        nop;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $r0 := @parameter3: java.lang.String;

        $r1 := @parameter4: java.lang.String;

        r16 = new java.lang.StringBuilder;

        varReplacer16071 = "Creating okhttp client.  networkTimeout=";

        specialinvoke r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer16071);

        varReplacer16069 = 90;

        $r2 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(varReplacer16069);

        varReplacer16074 = ", isTrustAll=";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer16074);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        varReplacer16072 = ", useSslPinning=";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer16072);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        varReplacer16078 = ", userAgent=";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer16078);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        varReplacer16068 = ", baseUrl=";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer16068);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r17 = new okhttp3.OkHttpClient$Builder;

        specialinvoke r17.<okhttp3.OkHttpClient$Builder: void <init>()>();

        $r4 = newarray (okhttp3.ConnectionSpec)[1];

        $r5 = <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec MODERN_TLS>;

        $r4[0] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r3 = virtualinvoke r17.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List)>($r6);

        varReplacer16070 = 90;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer16070);

        $l1 = virtualinvoke $r7.<java.lang.Integer: long longValue()>();

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>($l1, $r8);

        varReplacer16073 = 90;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer16073);

        $l1 = virtualinvoke $r7.<java.lang.Integer: long longValue()>();

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>($l1, $r8);

        $r6 = virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: java.util.List interceptors()>();

        r18 = new com.paypal.android.sdk.cg;

        specialinvoke r18.<com.paypal.android.sdk.cg: void <init>(java.lang.String)>($r0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r18);

        if $z0 == 0 goto label09;

        $r9 = newarray (javax.net.ssl.TrustManager)[1];

        r19 = new com.paypal.android.sdk.cc;

     label01:
        specialinvoke r19.<com.paypal.android.sdk.cc: void <init>()>();

     label02:
        $r9[0] = r19;

     label03:
        varReplacer16077 = "TLSv1";

        $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer16077);

     label04:
        r23 = (javax.net.ssl.TrustManager[]) $r9;

     label05:
        varReplacer16075 = null;

        varReplacer16076 = null;

        virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer16075, r23, varReplacer16075);

        $r11 = virtualinvoke $r10.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r11);

     label06:
        r20 = new com.paypal.android.sdk.cd;

        $r12 = r20;

     label07:
        specialinvoke r20.<com.paypal.android.sdk.cd: void <init>()>();

        virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier)>($r12);

     label08:
        return $r3;

     label09:
        if $z1 == 0 goto label14;

        r21 = new com.paypal.android.sdk.cf;

        $r13 = r21;

     label10:
        $r14 = staticinvoke <com.paypal.android.sdk.ce: java.io.InputStream a()>();

        specialinvoke r21.<com.paypal.android.sdk.cf: void <init>(java.io.InputStream)>($r14);

        virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r13);

     label11:
        return $r3;

     label12:
        $r15 := @caughtexception;

     label13:
        r22 = new java.lang.RuntimeException;

        specialinvoke r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r15);

        throw r22;

     label14:
        r21 = new com.paypal.android.sdk.cf;

        $r13 = r21;

     label15:
        specialinvoke r21.<com.paypal.android.sdk.cf: void <init>()>();

        virtualinvoke $r3.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory)>($r13);

     label16:
        return $r3;

     label17:
        $r15 := @caughtexception;

        goto label13;

     label18:
        $r15 := @caughtexception;

        goto label13;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label12;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label12;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label12;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label12;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label12;
        catch java.security.KeyManagementException from label01 to label02 with label17;
        catch java.security.KeyManagementException from label03 to label04 with label17;
        catch java.security.KeyManagementException from label05 to label06 with label17;
        catch java.security.KeyManagementException from label07 to label08 with label17;
        catch java.security.KeyManagementException from label10 to label11 with label17;
        catch javax.net.ssl.SSLException from label01 to label02 with label18;
        catch javax.net.ssl.SSLException from label03 to label04 with label18;
        catch javax.net.ssl.SSLException from label05 to label06 with label18;
        catch javax.net.ssl.SSLException from label07 to label08 with label18;
        catch javax.net.ssl.SSLException from label10 to label11 with label18;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label12;
        catch java.security.KeyManagementException from label15 to label16 with label17;
        catch javax.net.ssl.SSLException from label15 to label16 with label18;
    }
}
