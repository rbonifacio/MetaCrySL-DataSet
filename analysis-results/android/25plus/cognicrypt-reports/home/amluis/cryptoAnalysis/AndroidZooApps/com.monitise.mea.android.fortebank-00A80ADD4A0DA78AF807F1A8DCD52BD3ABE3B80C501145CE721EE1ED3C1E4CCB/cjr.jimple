public class cjr extends javax.net.ssl.SSLSocketFactory
{
    static java.lang.String[] a;
    static java.lang.String[] b;
    private javax.net.ssl.SSLSocketFactory c;

    static void <clinit>()
    {
        int $i0, $i1;
        java.lang.String $r0, $r7, varReplacer4667;
        javax.net.SocketFactory $r1;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocket $r3;
        java.util.LinkedList $r4;
        java.lang.String[] $r5;
        java.util.Locale $r6;
        boolean $z0;
        java.lang.Object[] $r8;
        java.util.List $r9, $r10;
        java.util.HashSet $r11, $r12;
        java.lang.Throwable $r13;
        java.lang.Class $r14;
        null_type varReplacer4665, varReplacer4666;

        nop;

        $i1 = 0;

        varReplacer4665 = null;

        <cjr: java.lang.String[] a> = varReplacer4665;

        varReplacer4666 = null;

        <cjr: java.lang.String[] b> = varReplacer4666;

     label01:
        $r1 = staticinvoke <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>();

        $r2 = virtualinvoke $r1.<javax.net.SocketFactory: java.net.Socket createSocket()>();

     label02:
        $r3 = (javax.net.ssl.SSLSocket) $r2;

        if $r3 == null goto label23;

        $r4 = new java.util.LinkedList;

     label03:
        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        $r5 = virtualinvoke $r3.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedProtocols()>();

     label04:
        $i0 = lengthof $r5;

     label05:
        if $i1 >= $i0 goto label10;

        $r0 = $r5[$i1];

        $r6 = <java.util.Locale: java.util.Locale US>;

     label06:
        $r7 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r6);

        varReplacer4667 = "SSL";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>(varReplacer4667);

     label07:
        if $z0 != 0 goto label09;

     label08:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r0);

     label09:
        $i1 = $i1 + 1;

        goto label05;

     label10:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

     label11:
        $r5 = newarray (java.lang.String)[$i0];

     label12:
        $r8 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

     label13:
        $r5 = (java.lang.String[]) $r8;

        <cjr: java.lang.String[] a> = $r5;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 21 goto label23;

        $r5 = newarray (java.lang.String)[14];

        $r5[0] = "TLS_RSA_WITH_AES_256_GCM_SHA384";

        $r5[1] = "TLS_RSA_WITH_AES_128_GCM_SHA256";

        $r5[2] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";

        $r5[3] = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";

        $r5[4] = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";

        $r5[5] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";

        $r5[6] = "TLS_ECHDE_RSA_WITH_AES_128_GCM_SHA256";

        $r5[7] = "TLS_RSA_WITH_3DES_EDE_CBC_SHA";

        $r5[8] = "TLS_RSA_WITH_AES_128_CBC_SHA";

        $r5[9] = "TLS_RSA_WITH_AES_256_CBC_SHA";

        $r5[10] = "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA";

        $r5[11] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";

        $r5[12] = "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA";

        $r5[13] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";

     label14:
        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r5 = virtualinvoke $r3.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>();

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

     label15:
        $r11 = new java.util.HashSet;

     label16:
        specialinvoke $r11.<java.util.HashSet: void <init>(java.util.Collection)>($r9);

        virtualinvoke $r11.<java.util.HashSet: boolean retainAll(java.util.Collection)>($r10);

     label17:
        $r12 = new java.util.HashSet;

     label18:
        $r5 = virtualinvoke $r3.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        specialinvoke $r12.<java.util.HashSet: void <init>(java.util.Collection)>($r9);

        virtualinvoke $r11.<java.util.HashSet: boolean addAll(java.util.Collection)>($r12);

        $i0 = virtualinvoke $r11.<java.util.HashSet: int size()>();

     label19:
        $r5 = newarray (java.lang.String)[$i0];

     label20:
        $r8 = virtualinvoke $r11.<java.util.HashSet: java.lang.Object[] toArray(java.lang.Object[])>($r5);

     label21:
        $r5 = (java.lang.String[]) $r8;

        <cjr: java.lang.String[] b> = $r5;

        return;

     label22:
        $r13 := @caughtexception;

        $r14 = class "Lcjr;";

        virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

     label23:
        return;

        catch java.io.IOException from label01 to label02 with label22;
        catch java.io.IOException from label03 to label04 with label22;
        catch java.io.IOException from label06 to label07 with label22;
        catch java.io.IOException from label08 to label09 with label22;
        catch java.io.IOException from label10 to label11 with label22;
        catch java.io.IOException from label12 to label13 with label22;
        catch java.io.IOException from label14 to label15 with label22;
        catch java.io.IOException from label16 to label17 with label22;
        catch java.io.IOException from label18 to label19 with label22;
        catch java.io.IOException from label20 to label21 with label22;
    }

    public void <init>(javax.net.ssl.X509TrustManager)
    {
        cjr $r0;
        javax.net.ssl.X509TrustManager $r1;
        javax.net.ssl.X509TrustManager[] $r2;
        javax.net.ssl.SSLContext $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        java.lang.Throwable $r5;
        java.lang.AssertionError $r6;
        null_type varReplacer5551, varReplacer5552;
        java.lang.String varReplacer5553;

        nop;

        $r0 := @this: cjr;

        $r1 := @parameter0: javax.net.ssl.X509TrustManager;

        $r2 = null;

        specialinvoke $r0.<javax.net.ssl.SSLSocketFactory: void <init>()>();

     label1:
        varReplacer5553 = "TLS";

        $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer5553);

     label2:
        if $r1 == null goto label3;

        $r2 = newarray (javax.net.ssl.X509TrustManager)[1];

        $r2[0] = $r1;

     label3:
        varReplacer5551 = null;

        varReplacer5552 = null;

        virtualinvoke $r3.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer5551, $r2, varReplacer5551);

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label4:
        $r0.<cjr: javax.net.ssl.SSLSocketFactory c> = $r4;

        return;

     label5:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }

    private static void a(javax.net.ssl.SSLSocket)
    {
        javax.net.ssl.SSLSocket $r0;
        java.lang.String[] $r1;
        int $i0;

        nop;

        $r0 := @parameter0: javax.net.ssl.SSLSocket;

        $r1 = <cjr: java.lang.String[] a>;

        if $r1 == null goto label1;

        $r1 = <cjr: java.lang.String[] a>;

        virtualinvoke $r0.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r1);

     label1:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 20 goto label2;

        $r1 = <cjr: java.lang.String[] b>;

        if $r1 == null goto label2;

        $r1 = <cjr: java.lang.String[] b>;

        virtualinvoke $r0.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>($r1);

     label2:
        return;
    }

    public java.net.Socket createSocket(java.lang.String, int)
    {
        cjr $r0;
        java.lang.String $r1;
        int $i0;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        boolean $z0;
        javax.net.ssl.SSLSocket $r4;

        $r0 := @this: cjr;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r3 = $r0.<cjr: javax.net.ssl.SSLSocketFactory c>;

        $r2 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>($r1, $i0);

        $z0 = $r2 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label1;

        $r4 = (javax.net.ssl.SSLSocket) $r2;

        staticinvoke <cjr: void a(javax.net.ssl.SSLSocket)>($r4);

     label1:
        return $r2;
    }

    public java.net.Socket createSocket(java.lang.String, int, java.net.InetAddress, int)
    {
        cjr $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.net.InetAddress $r2;
        java.net.Socket $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        boolean $z0;
        javax.net.ssl.SSLSocket $r5;

        $r0 := @this: cjr;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.net.InetAddress;

        $i1 := @parameter3: int;

        $r4 = $r0.<cjr: javax.net.ssl.SSLSocketFactory c>;

        $r3 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>($r1, $i0, $r2, $i1);

        $z0 = $r3 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label1;

        $r5 = (javax.net.ssl.SSLSocket) $r3;

        staticinvoke <cjr: void a(javax.net.ssl.SSLSocket)>($r5);

     label1:
        return $r3;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int)
    {
        cjr $r0;
        java.net.InetAddress $r1;
        int $i0;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        boolean $z0;
        javax.net.ssl.SSLSocket $r4;

        $r0 := @this: cjr;

        $r1 := @parameter0: java.net.InetAddress;

        $i0 := @parameter1: int;

        $r3 = $r0.<cjr: javax.net.ssl.SSLSocketFactory c>;

        $r2 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>($r1, $i0);

        $z0 = $r2 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label1;

        $r4 = (javax.net.ssl.SSLSocket) $r2;

        staticinvoke <cjr: void a(javax.net.ssl.SSLSocket)>($r4);

     label1:
        return $r2;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int, java.net.InetAddress, int)
    {
        cjr $r0;
        java.net.InetAddress $r1, $r2;
        int $i0, $i1;
        java.net.Socket $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        boolean $z0;
        javax.net.ssl.SSLSocket $r5;

        $r0 := @this: cjr;

        $r1 := @parameter0: java.net.InetAddress;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.net.InetAddress;

        $i1 := @parameter3: int;

        $r4 = $r0.<cjr: javax.net.ssl.SSLSocketFactory c>;

        $r3 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>($r1, $i0, $r2, $i1);

        $z0 = $r3 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label1;

        $r5 = (javax.net.ssl.SSLSocket) $r3;

        staticinvoke <cjr: void a(javax.net.ssl.SSLSocket)>($r5);

     label1:
        return $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean)
    {
        cjr $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0, varReplacer9196;
        boolean $z0;
        javax.net.ssl.SSLSocketFactory $r3;
        javax.net.ssl.SSLSocket $r4;

        nop;

        $r0 := @this: cjr;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = $r0.<cjr: javax.net.ssl.SSLSocketFactory c>;

        varReplacer9196 = 1;

        $r1 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, varReplacer9196);

        $z0 = $r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label1;

        $r4 = (javax.net.ssl.SSLSocket) $r1;

        staticinvoke <cjr: void a(javax.net.ssl.SSLSocket)>($r4);

     label1:
        return $r1;
    }

    public java.lang.String[] getDefaultCipherSuites()
    {
        cjr $r0;
        java.lang.String[] r1;

        $r0 := @this: cjr;

        r1 = <cjr: java.lang.String[] b>;

        return r1;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        cjr $r0;
        java.lang.String[] r1;

        $r0 := @this: cjr;

        r1 = <cjr: java.lang.String[] b>;

        return r1;
    }
}
