public final class com.braintreegateway.encryption.b extends java.lang.Object
{
    private java.lang.String a;

    public void <init>(java.lang.String)
    {
        com.braintreegateway.encryption.b $r0;
        java.lang.String $r1;

        nop;

        $r0 := @this: com.braintreegateway.encryption.b;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.braintreegateway.encryption.b: java.lang.String a> = $r1;

        return;
    }

    private java.security.PublicKey a()
    {
        com.braintreegateway.encryption.b $r0;
        java.lang.String $r1, varReplacer5687, varReplacer5688;
        byte[] $r2;
        mp.lib.i $r3, r17;
        mp.lib.az $r4;
        boolean $z0;
        mp.lib.bx $r5, r19;
        java.security.spec.RSAPublicKeySpec $r6, r18;
        java.math.BigInteger $r7, $r8;
        java.security.KeyFactory $r9;
        java.security.PublicKey $r10;
        mp.lib.r $r11;
        java.lang.StringBuilder $r12, r20;
        java.lang.Class $r13;
        java.lang.Throwable $r14, $r15, $r16;
        java.lang.IllegalArgumentException r21;
        java.security.NoSuchAlgorithmException r22;
        java.security.spec.InvalidKeySpecException r23;
        java.io.IOException r24;
        null_type varReplacer5686;

        nop;

        $r0 := @this: com.braintreegateway.encryption.b;

        $r1 = $r0.<com.braintreegateway.encryption.b: java.lang.String a>;

     label01:
        $r2 = staticinvoke <mp.lib.by: byte[] a(java.lang.String)>($r1);

     label02:
        r17 = new mp.lib.i;

        $r3 = r17;

     label03:
        specialinvoke r17.<mp.lib.i: void <init>(byte[])>($r2);

        $r4 = virtualinvoke $r3.<mp.lib.i: mp.lib.az a()>();

     label04:
        if $r4 == null goto label05;

        $z0 = $r4 instanceof mp.lib.bx;

        if $z0 == 0 goto label09;

     label05:
        $r5 = (mp.lib.bx) $r4;

     label06:
        r18 = new java.security.spec.RSAPublicKeySpec;

        $r6 = r18;

     label07:
        $r7 = virtualinvoke $r5.<mp.lib.bx: java.math.BigInteger a()>();

        $r8 = virtualinvoke $r5.<mp.lib.bx: java.math.BigInteger f()>();

        specialinvoke r18.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r7, $r8);

        varReplacer5687 = "RSA";

        $r9 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer5687);

        $r10 = virtualinvoke $r9.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r6);

     label08:
        return $r10;

     label09:
        $z0 = $r4 instanceof mp.lib.r;

        if $z0 == 0 goto label12;

        r19 = new mp.lib.bx;

        $r11 = (mp.lib.r) $r4;

     label10:
        specialinvoke r19.<mp.lib.bx: void <init>(mp.lib.r)>($r11);

     label11:
        $r5 = r19;

        goto label06;

     label12:
        r21 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        $r12 = r20;

     label13:
        varReplacer5688 = "Invalid RSAPublicKeyStructure: ";

        specialinvoke r20.<java.lang.StringBuilder: void <init>(java.lang.String)>(varReplacer5688);

        $r13 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

     label14:
        throw r21;

     label15:
        $r14 := @caughtexception;

        r22 = (java.security.NoSuchAlgorithmException) $r14;

        virtualinvoke r22.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label16:
        varReplacer5686 = null;

        return varReplacer5686;

     label17:
        $r15 := @caughtexception;

        r23 = (java.security.spec.InvalidKeySpecException) $r15;

        virtualinvoke r23.<java.security.spec.InvalidKeySpecException: void printStackTrace()>();

        goto label16;

     label18:
        $r16 := @caughtexception;

        r24 = (java.io.IOException) $r16;

        virtualinvoke r24.<java.io.IOException: void printStackTrace()>();

        goto label16;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label15;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label15;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label15;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label15;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label15;
        catch java.security.spec.InvalidKeySpecException from label01 to label02 with label17;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label17;
        catch java.security.spec.InvalidKeySpecException from label07 to label08 with label17;
        catch java.security.spec.InvalidKeySpecException from label10 to label11 with label17;
        catch java.security.spec.InvalidKeySpecException from label13 to label14 with label17;
        catch java.io.IOException from label01 to label02 with label18;
        catch java.io.IOException from label03 to label04 with label18;
        catch java.io.IOException from label07 to label08 with label18;
        catch java.io.IOException from label10 to label11 with label18;
        catch java.io.IOException from label13 to label14 with label18;
    }

    public final java.lang.String a(byte[])
    {
        com.braintreegateway.encryption.b $r0;
        byte[] $r1;
        javax.crypto.Cipher $r2;
        java.security.PublicKey $r3;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8;
        java.lang.String r9, varReplacer5683;
        java.security.NoSuchAlgorithmException r10;
        javax.crypto.NoSuchPaddingException r11;
        java.security.InvalidKeyException r12;
        javax.crypto.IllegalBlockSizeException r13;
        javax.crypto.BadPaddingException r14;
        null_type varReplacer5684;
        int varReplacer5685;

        nop;

        $r0 := @this: com.braintreegateway.encryption.b;

        $r1 := @parameter0: byte[];

     label01:
        varReplacer5683 = "RSA/ECB/PKCS1Padding";

        $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer5683);

        $r3 = specialinvoke $r0.<com.braintreegateway.encryption.b: java.security.PublicKey a()>();

        varReplacer5685 = 1;

        virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer5685, $r3);

        $r1 = staticinvoke <mp.lib.by: byte[] a(byte[])>($r1);

        $r1 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label02:
        r9 = new java.lang.String;

     label03:
        $r1 = staticinvoke <mp.lib.by: byte[] a(byte[])>($r1);

        specialinvoke r9.<java.lang.String: void <init>(byte[])>($r1);

     label04:
        return r9;

     label05:
        $r4 := @caughtexception;

        r10 = (java.security.NoSuchAlgorithmException) $r4;

        virtualinvoke r10.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label06:
        varReplacer5684 = null;

        return varReplacer5684;

     label07:
        $r5 := @caughtexception;

        r11 = (javax.crypto.NoSuchPaddingException) $r5;

        virtualinvoke r11.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label06;

     label08:
        $r6 := @caughtexception;

        r12 = (java.security.InvalidKeyException) $r6;

        virtualinvoke r12.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label06;

     label09:
        $r7 := @caughtexception;

        r13 = (javax.crypto.IllegalBlockSizeException) $r7;

        virtualinvoke r13.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label06;

     label10:
        $r8 := @caughtexception;

        r14 = (javax.crypto.BadPaddingException) $r8;

        virtualinvoke r14.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label06;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label05;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label07;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label07;
        catch java.security.InvalidKeyException from label01 to label02 with label08;
        catch java.security.InvalidKeyException from label03 to label04 with label08;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label09;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label09;
        catch javax.crypto.BadPaddingException from label01 to label02 with label10;
        catch javax.crypto.BadPaddingException from label03 to label04 with label10;
    }
}
