public class io.rong.imlib.statistics.ConnectionQueue extends java.lang.Object
{
    private java.lang.String appKey_;
    private java.util.concurrent.Future connectionProcessorFuture_;
    private android.content.Context context_;
    private io.rong.imlib.statistics.DeviceId deviceId_;
    private java.util.concurrent.ExecutorService executor_;
    private java.lang.String serverURL_;
    private javax.net.ssl.SSLContext sslContext_;
    private io.rong.imlib.statistics.StatisticsStore store_;

    public void <init>()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static io.rong.imlib.statistics.StatisticsStore access$000(io.rong.imlib.statistics.ConnectionQueue)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        io.rong.imlib.statistics.StatisticsStore r1;

        $r0 := @parameter0: io.rong.imlib.statistics.ConnectionQueue;

        r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        return r1;
    }

    void beginSession()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.StringBuilder $r1;
        io.rong.imlib.statistics.DeviceId $r2;
        java.lang.String $r3, $r4, varReplacer5911, varReplacer5912, varReplacer5913, varReplacer5914;
        int $i0;
        io.rong.imlib.statistics.StatisticsStore $r5;
        boolean $z0;
        android.content.Context $r6;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void checkInternalState()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        varReplacer5914 = "deviceId=";

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5914);

        $r2 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.DeviceId deviceId_>;

        $r3 = virtualinvoke $r2.<io.rong.imlib.statistics.DeviceId: java.lang.String getId()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        varReplacer5913 = "&appKey=";

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5913);

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        varReplacer5911 = "&timestamp=";

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5911);

        $i0 = staticinvoke <io.rong.imlib.statistics.Statistics: int currentTimestamp()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r3;

        $r5 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        $z0 = virtualinvoke $r5.<io.rong.imlib.statistics.StatisticsStore: boolean uploadIfNeed()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        varReplacer5912 = "&deviceInfo=";

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5912);

        $r6 = $r0.<io.rong.imlib.statistics.ConnectionQueue: android.content.Context context_>;

        $r3 = staticinvoke <io.rong.imlib.statistics.DeviceInfo: java.lang.String getMetrics(android.content.Context)>($r6);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r5 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        virtualinvoke $r5.<io.rong.imlib.statistics.StatisticsStore: void addConnection(java.lang.String)>($r4);

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void tick()>();

        return;
    }

    void checkInternalState()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        android.content.Context $r1;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3, varReplacer5984, varReplacer5985, varReplacer5986, varReplacer5987, varReplacer5988, varReplacer5989;
        int $i0;
        io.rong.imlib.statistics.StatisticsStore $r4;
        boolean $z0;
        java.util.List $r5;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: android.content.Context context_>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        varReplacer5988 = "context has not been set";

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer5988);

        throw $r2;

     label1:
        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        if $r3 == null goto label2;

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r2 = new java.lang.IllegalStateException;

        varReplacer5989 = "app key has not been set";

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer5989);

        throw $r2;

     label3:
        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        if $r4 != null goto label4;

        $r2 = new java.lang.IllegalStateException;

        varReplacer5986 = "countly store has not been set";

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer5986);

        throw $r2;

     label4:
        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String serverURL_>;

        if $r3 == null goto label5;

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String serverURL_>;

        $z0 = staticinvoke <io.rong.imlib.statistics.Statistics: boolean isValidURL(java.lang.String)>($r3);

        if $z0 != 0 goto label6;

     label5:
        $r2 = new java.lang.IllegalStateException;

        varReplacer5984 = "server URL is not valid";

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer5984);

        throw $r2;

     label6:
        $r5 = <io.rong.imlib.statistics.Statistics: java.util.List publicKeyPinCertificates>;

        if $r5 == null goto label7;

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String serverURL_>;

        varReplacer5985 = "https";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer5985);

        if $z0 != 0 goto label7;

        $r2 = new java.lang.IllegalStateException;

        varReplacer5987 = "server must start with https once you specified public keys";

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer5987);

        throw $r2;

     label7:
        return;
    }

    void endSession(int)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        io.rong.imlib.statistics.StatisticsStore $r4;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void checkInternalState()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_key=");

        $r2 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&timestamp=");

        $i1 = staticinvoke <io.rong.imlib.statistics.Statistics: int currentTimestamp()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&end_session=1");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = $r2;

        if $i0 <= 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&session_duration=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        virtualinvoke $r4.<io.rong.imlib.statistics.StatisticsStore: void addConnection(java.lang.String)>($r3);

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void tick()>();

        return;
    }

    void ensureExecutor()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.util.concurrent.ExecutorService $r1;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.ExecutorService executor_>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.ExecutorService executor_> = $r1;

     label1:
        return;
    }

    java.lang.String getAppKey()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        return r1;
    }

    java.util.concurrent.Future getConnectionProcessorFuture()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.util.concurrent.Future r1;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.Future connectionProcessorFuture_>;

        return r1;
    }

    android.content.Context getContext()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        android.content.Context r1;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: android.content.Context context_>;

        return r1;
    }

    io.rong.imlib.statistics.StatisticsStore getCountlyStore()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        io.rong.imlib.statistics.StatisticsStore r1;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        return r1;
    }

    io.rong.imlib.statistics.DeviceId getDeviceId()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        io.rong.imlib.statistics.DeviceId r1;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.DeviceId deviceId_>;

        return r1;
    }

    java.util.concurrent.ExecutorService getExecutor()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.util.concurrent.ExecutorService r1;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.ExecutorService executor_>;

        return r1;
    }

    java.lang.String getServerURL()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String r1;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        r1 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String serverURL_>;

        return r1;
    }

    void recordEvents(java.lang.String)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String $r1, $r4;
        java.lang.StringBuilder $r2;
        io.rong.imlib.statistics.DeviceId $r3;
        int $i0;
        io.rong.imlib.statistics.StatisticsStore $r5;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void checkInternalState()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deviceId=");

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.DeviceId deviceId_>;

        $r4 = virtualinvoke $r3.<io.rong.imlib.statistics.DeviceId: java.lang.String getId()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&appKey=");

        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&timestamp=");

        $i0 = staticinvoke <io.rong.imlib.statistics.Statistics: int currentTimestamp()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&pushEvent=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        virtualinvoke $r5.<io.rong.imlib.statistics.StatisticsStore: void addConnection(java.lang.String)>($r1);

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void tick()>();

        return;
    }

    void recordLocation(java.lang.String)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String $r1, $r3;
        java.lang.StringBuilder $r2;
        int $i0;
        io.rong.imlib.statistics.StatisticsStore $r4;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void checkInternalState()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_key=");

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&timestamp=");

        $i0 = staticinvoke <io.rong.imlib.statistics.Statistics: int currentTimestamp()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&events=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        virtualinvoke $r4.<io.rong.imlib.statistics.StatisticsStore: void addConnection(java.lang.String)>($r1);

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void tick()>();

        return;
    }

    void sendCrashReport(java.lang.String, boolean)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String $r1, $r3;
        boolean $z0;
        java.lang.StringBuilder $r2;
        int $i0;
        android.content.Context $r4;
        java.lang.Boolean $r5;
        io.rong.imlib.statistics.StatisticsStore $r6;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void checkInternalState()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_key=");

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&timestamp=");

        $i0 = staticinvoke <io.rong.imlib.statistics.Statistics: int currentTimestamp()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&sdk_version=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("15.06");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&crash=");

        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: android.content.Context context_>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r1 = staticinvoke <io.rong.imlib.statistics.CrashDetails: java.lang.String getCrashData(android.content.Context,java.lang.String,java.lang.Boolean)>($r4, $r1, $r5);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        virtualinvoke $r6.<io.rong.imlib.statistics.StatisticsStore: void addConnection(java.lang.String)>($r1);

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void tick()>();

        return;
    }

    void sendReferrerData(java.lang.String)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String $r1, $r3, varReplacer5995, varReplacer5996;
        java.lang.StringBuilder $r2;
        int $i0;
        io.rong.imlib.statistics.StatisticsStore $r4;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void checkInternalState()>();

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        varReplacer5996 = "app_key=";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5996);

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        varReplacer5995 = "&timestamp=";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5995);

        $i0 = staticinvoke <io.rong.imlib.statistics.Statistics: int currentTimestamp()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        virtualinvoke $r4.<io.rong.imlib.statistics.StatisticsStore: void addConnection(java.lang.String)>($r1);

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void tick()>();

     label1:
        return;
    }

    void sendUserData()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String $r1, $r3;
        boolean $z0;
        java.lang.StringBuilder $r2;
        int $i0;
        io.rong.imlib.statistics.StatisticsStore $r4;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void checkInternalState()>();

        $r1 = staticinvoke <io.rong.imlib.statistics.UserData: java.lang.String getDataForRequest()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_key=");

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&timestamp=");

        $i0 = staticinvoke <io.rong.imlib.statistics.Statistics: int currentTimestamp()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        virtualinvoke $r4.<io.rong.imlib.statistics.StatisticsStore: void addConnection(java.lang.String)>($r1);

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void tick()>();

     label1:
        return;
    }

    void setAppKey(java.lang.String)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String $r1;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: java.lang.String;

        $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_> = $r1;

        return;
    }

    void setConnectionProcessorFuture(java.util.concurrent.Future)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.util.concurrent.Future $r1;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: java.util.concurrent.Future;

        $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.Future connectionProcessorFuture_> = $r1;

        return;
    }

    void setContext(android.content.Context)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        android.content.Context $r1;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: android.content.Context;

        $r0.<io.rong.imlib.statistics.ConnectionQueue: android.content.Context context_> = $r1;

        return;
    }

    void setCountlyStore(io.rong.imlib.statistics.StatisticsStore)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        io.rong.imlib.statistics.StatisticsStore $r1;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: io.rong.imlib.statistics.StatisticsStore;

        $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_> = $r1;

        return;
    }

    public void setDeviceId(io.rong.imlib.statistics.DeviceId)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        io.rong.imlib.statistics.DeviceId $r1;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: io.rong.imlib.statistics.DeviceId;

        $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.DeviceId deviceId_> = $r1;

        return;
    }

    void setExecutor(java.util.concurrent.ExecutorService)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.util.concurrent.ExecutorService $r1;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.ExecutorService executor_> = $r1;

        return;
    }

    void setServerURL(java.lang.String)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String $r1, varReplacer6080, varReplacer6082;
        java.lang.Throwable $r2;
        java.lang.Object[] $r3;
        javax.net.ssl.SSLContext $r4;
        java.util.List $r5;
        io.rong.imlib.statistics.ConnectionQueue$1 $r6, r7;
        java.lang.IllegalStateException r8;
        javax.net.ssl.TrustManager[] r9;
        null_type varReplacer6081, varReplacer6083, varReplacer6084;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: java.lang.String;

        varReplacer6082 = "https://stats.cn.ronghub.com/active.json";

        $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String serverURL_> = varReplacer6082;

        $r5 = <io.rong.imlib.statistics.Statistics: java.util.List publicKeyPinCertificates>;

        if $r5 != null goto label1;

        varReplacer6081 = null;

        $r0.<io.rong.imlib.statistics.ConnectionQueue: javax.net.ssl.SSLContext sslContext_> = varReplacer6081;

        return;

     label1:
        $r3 = newarray (javax.net.ssl.TrustManager)[1];

        r7 = new io.rong.imlib.statistics.ConnectionQueue$1;

     label2:
        $r6 = r7;

     label3:
        specialinvoke r7.<io.rong.imlib.statistics.ConnectionQueue$1: void <init>(io.rong.imlib.statistics.ConnectionQueue)>($r0);

        $r3[0] = $r6;

        varReplacer6080 = "TLS";

        $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer6080);

        $r0.<io.rong.imlib.statistics.ConnectionQueue: javax.net.ssl.SSLContext sslContext_> = $r4;

        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: javax.net.ssl.SSLContext sslContext_>;

        r9 = (javax.net.ssl.TrustManager[]) $r3;

        varReplacer6083 = null;

        varReplacer6084 = null;

        virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer6083, r9, varReplacer6083);

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        r8 = new java.lang.IllegalStateException;

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r2);

        throw r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    void tick()
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        io.rong.imlib.statistics.ConnectionProcessor $r1;
        java.lang.String $r2;
        io.rong.imlib.statistics.StatisticsStore $r3;
        io.rong.imlib.statistics.DeviceId $r4;
        javax.net.ssl.SSLContext $r5;
        boolean $z0;
        java.util.concurrent.Future $r6;
        java.util.concurrent.ExecutorService $r7;

        nop;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        $z0 = virtualinvoke $r3.<io.rong.imlib.statistics.StatisticsStore: boolean isEmptyConnections()>();

        if $z0 != 0 goto label2;

        $r6 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.Future connectionProcessorFuture_>;

        if $r6 == null goto label1;

        $r6 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.Future connectionProcessorFuture_>;

        $z0 = interfaceinvoke $r6.<java.util.concurrent.Future: boolean isDone()>();

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void ensureExecutor()>();

        $r7 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.ExecutorService executor_>;

        $r1 = new io.rong.imlib.statistics.ConnectionProcessor;

        $r2 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String serverURL_>;

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.DeviceId deviceId_>;

        $r5 = $r0.<io.rong.imlib.statistics.ConnectionQueue: javax.net.ssl.SSLContext sslContext_>;

        specialinvoke $r1.<io.rong.imlib.statistics.ConnectionProcessor: void <init>(java.lang.String,io.rong.imlib.statistics.StatisticsStore,io.rong.imlib.statistics.DeviceId,javax.net.ssl.SSLContext)>($r2, $r3, $r4, $r5);

        $r6 = interfaceinvoke $r7.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r1);

        $r0.<io.rong.imlib.statistics.ConnectionQueue: java.util.concurrent.Future connectionProcessorFuture_> = $r6;

     label2:
        return;
    }

    public void tokenSession(java.lang.String, io.rong.imlib.statistics.Statistics$CountlyMessagingMode)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        java.lang.String $r1, $r4;
        io.rong.imlib.statistics.Statistics$CountlyMessagingMode $r2, $r5;
        java.lang.StringBuilder $r3;
        int $i0;
        byte $b1;
        java.util.concurrent.ScheduledExecutorService $r6;
        io.rong.imlib.statistics.ConnectionQueue$2 $r7;
        java.util.concurrent.TimeUnit $r8;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: io.rong.imlib.statistics.Statistics$CountlyMessagingMode;

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void checkInternalState()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_key=");

        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timestamp=");

        $i0 = staticinvoke <io.rong.imlib.statistics.Statistics: int currentTimestamp()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("token_session=1");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android_token=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test_mode=");

        $r5 = <io.rong.imlib.statistics.Statistics$CountlyMessagingMode: io.rong.imlib.statistics.Statistics$CountlyMessagingMode TEST>;

        if $r2 != $r5 goto label2;

        $b1 = 2;

     label1:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("locale=");

        $r1 = staticinvoke <io.rong.imlib.statistics.DeviceInfo: java.lang.String getLocale()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>();

        $r7 = new io.rong.imlib.statistics.ConnectionQueue$2;

        specialinvoke $r7.<io.rong.imlib.statistics.ConnectionQueue$2: void <init>(io.rong.imlib.statistics.ConnectionQueue,java.lang.String)>($r0, $r1);

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke $r6.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r7, 10L, $r8);

        return;

     label2:
        $b1 = 0;

        goto label1;
    }

    void updateSession(int)
    {
        io.rong.imlib.statistics.ConnectionQueue $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        io.rong.imlib.statistics.DeviceId $r2;
        java.lang.String $r3;
        io.rong.imlib.statistics.StatisticsStore $r4;

        $r0 := @this: io.rong.imlib.statistics.ConnectionQueue;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void checkInternalState()>();

        if $i0 <= 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deviceId=");

        $r2 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.DeviceId deviceId_>;

        $r3 = virtualinvoke $r2.<io.rong.imlib.statistics.DeviceId: java.lang.String getId()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&appKey=");

        $r3 = $r0.<io.rong.imlib.statistics.ConnectionQueue: java.lang.String appKey_>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&timestamp=");

        $i0 = staticinvoke <io.rong.imlib.statistics.Statistics: int currentTimestamp()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r0.<io.rong.imlib.statistics.ConnectionQueue: io.rong.imlib.statistics.StatisticsStore store_>;

        virtualinvoke $r4.<io.rong.imlib.statistics.StatisticsStore: void addConnection(java.lang.String)>($r3);

        virtualinvoke $r0.<io.rong.imlib.statistics.ConnectionQueue: void tick()>();

     label1:
        return;
    }
}
