public final class com.salk.mycircadianclock.AESCrypt extends java.lang.Object
{
    private static final java.lang.String AES_MODE;
    private static final java.lang.String CHARSET;
    public static boolean DEBUG_LOG_ENABLED;
    private static final java.lang.String HASH_ALGORITHM;
    public static final java.lang.String PRIVATE_KEY;
    private static final java.lang.String TAG;
    private static final byte[] ivBytes;

    static void <clinit>()
    {
        byte[] $r0;
        int varReplacer274;

        nop;

        $r0 = newarray (byte)[16];

        <com.salk.mycircadianclock.AESCrypt: byte[] ivBytes> = $r0;

        varReplacer274 = 0;

        <com.salk.mycircadianclock.AESCrypt: boolean DEBUG_LOG_ENABLED> = varReplacer274;

        return;
    }

    private void <init>()
    {
        com.salk.mycircadianclock.AESCrypt $r0;

        $r0 := @this: com.salk.mycircadianclock.AESCrypt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String bytesToHex(byte[])
    {
        byte[] $r0;
        char[] $r1, $r2;
        short $s0, $s4;
        int $i1, $i2;
        java.lang.String $r3;
        byte $b3;
        char $c5;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        $i1 = lengthof $r0;

        $i1 = $i1 * 2;

        $r2 = newarray (char)[$i1];

        $i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if $i1 < $i2 goto label2;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r2);

        return $r3;

     label2:
        $b3 = $r0[$i1];

        $s0 = $b3 & 255;

        $i2 = $i1 * 2;

        $s4 = $s0 >>> 4;

        $c5 = $r1[$s4];

        $r2[$i2] = $c5;

        $i2 = $i1 * 2;

        $i2 = $i2 + 1;

        $s0 = $s0 & 15;

        $c5 = $r1[$s0];

        $r2[$i2] = $c5;

        $i1 = $i1 + 1;

        goto label1;
    }

    public static java.lang.String decrypt(java.lang.String, java.lang.String) throws java.security.GeneralSecurityException
    {
        java.lang.String $r0, $r1, varReplacer275, varReplacer276, varReplacer277, varReplacer278, varReplacer279, varReplacer281, varReplacer282;
        java.lang.Throwable $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        byte[] $r4, $r5;
        boolean $z0;
        java.security.GeneralSecurityException $r6;
        int varReplacer280;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <com.salk.mycircadianclock.AESCrypt: javax.crypto.spec.SecretKeySpec generateKey(java.lang.String)>($r0);

        varReplacer276 = "base64EncodedCipherText";

        staticinvoke <com.salk.mycircadianclock.AESCrypt: void log(java.lang.String,java.lang.String)>(varReplacer276, $r1);

        varReplacer280 = 2;

        $r4 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r1, varReplacer280);

        varReplacer282 = "decodedCipherText";

        staticinvoke <com.salk.mycircadianclock.AESCrypt: void log(java.lang.String,byte[])>(varReplacer282, $r4);

     label2:
        $r5 = <com.salk.mycircadianclock.AESCrypt: byte[] ivBytes>;

     label3:
        $r4 = staticinvoke <com.salk.mycircadianclock.AESCrypt: byte[] decrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>($r3, $r5, $r4);

        varReplacer275 = "decryptedBytes";

        staticinvoke <com.salk.mycircadianclock.AESCrypt: void log(java.lang.String,byte[])>(varReplacer275, $r4);

     label4:
        $r0 = new java.lang.String;

     label5:
        varReplacer281 = "UTF-8";

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, varReplacer281);

        varReplacer279 = "message";

        staticinvoke <com.salk.mycircadianclock.AESCrypt: void log(java.lang.String,java.lang.String)>(varReplacer279, $r0);

     label6:
        return $r0;

     label7:
        $r2 := @caughtexception;

        $z0 = <com.salk.mycircadianclock.AESCrypt: boolean DEBUG_LOG_ENABLED>;

        if $z0 == 0 goto label8;

        varReplacer277 = "AESCrypt";

        varReplacer278 = "UnsupportedEncodingException ";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(varReplacer277, varReplacer278, $r2);

     label8:
        $r6 = new java.security.GeneralSecurityException;

        specialinvoke $r6.<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>($r2);

        throw $r6;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label7;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label7;
        catch java.io.UnsupportedEncodingException from label5 to label6 with label7;
    }

    public static byte[] decrypt(javax.crypto.spec.SecretKeySpec, byte[], byte[]) throws java.security.GeneralSecurityException
    {
        javax.crypto.spec.SecretKeySpec $r0;
        byte[] $r1, $r2;
        javax.crypto.spec.IvParameterSpec $r3;
        javax.crypto.Cipher $r4;
        java.lang.String varReplacer301, varReplacer303;
        int varReplacer302;

        nop;

        $r0 := @parameter0: javax.crypto.spec.SecretKeySpec;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        varReplacer301 = "AES/CBC/PKCS7Padding";

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer301);

        $r3 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1);

        varReplacer302 = 2;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer302, $r0, $r3);

        $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        varReplacer303 = "decryptedBytes";

        staticinvoke <com.salk.mycircadianclock.AESCrypt: void log(java.lang.String,byte[])>(varReplacer303, $r1);

        return $r1;
    }

    public static java.lang.String encrypt(java.lang.String, java.lang.String) throws java.security.GeneralSecurityException
    {
        java.lang.String $r0, $r1, varReplacer284, varReplacer285, varReplacer286, varReplacer287, varReplacer288;
        java.lang.Throwable $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        byte[] $r4, $r5;
        boolean $z0;
        java.security.GeneralSecurityException $r6;
        int varReplacer283;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <com.salk.mycircadianclock.AESCrypt: javax.crypto.spec.SecretKeySpec generateKey(java.lang.String)>($r0);

        varReplacer285 = "message";

        staticinvoke <com.salk.mycircadianclock.AESCrypt: void log(java.lang.String,java.lang.String)>(varReplacer285, $r1);

     label2:
        $r4 = <com.salk.mycircadianclock.AESCrypt: byte[] ivBytes>;

     label3:
        varReplacer284 = "UTF-8";

        $r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer284);

        $r4 = staticinvoke <com.salk.mycircadianclock.AESCrypt: byte[] encrypt(javax.crypto.spec.SecretKeySpec,byte[],byte[])>($r3, $r4, $r5);

        varReplacer283 = 2;

        $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, varReplacer283);

        varReplacer286 = "Base64.NO_WRAP";

        staticinvoke <com.salk.mycircadianclock.AESCrypt: void log(java.lang.String,java.lang.String)>(varReplacer286, $r0);

     label4:
        return $r0;

     label5:
        $r2 := @caughtexception;

        $z0 = <com.salk.mycircadianclock.AESCrypt: boolean DEBUG_LOG_ENABLED>;

        if $z0 == 0 goto label6;

        varReplacer287 = "AESCrypt";

        varReplacer288 = "UnsupportedEncodingException ";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(varReplacer287, varReplacer288, $r2);

     label6:
        $r6 = new java.security.GeneralSecurityException;

        specialinvoke $r6.<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>($r2);

        throw $r6;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    public static byte[] encrypt(javax.crypto.spec.SecretKeySpec, byte[], byte[]) throws java.security.GeneralSecurityException
    {
        javax.crypto.spec.SecretKeySpec $r0;
        byte[] $r1, $r2;
        javax.crypto.spec.IvParameterSpec $r3;
        javax.crypto.Cipher $r4;
        java.lang.String varReplacer309, varReplacer310;
        int varReplacer311;

        nop;

        $r0 := @parameter0: javax.crypto.spec.SecretKeySpec;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        varReplacer309 = "AES/CBC/PKCS7Padding";

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer309);

        $r3 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1);

        varReplacer311 = 1;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer311, $r0, $r3);

        $r1 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        varReplacer310 = "cipherText";

        staticinvoke <com.salk.mycircadianclock.AESCrypt: void log(java.lang.String,byte[])>(varReplacer310, $r1);

        return $r1;
    }

    private static javax.crypto.spec.SecretKeySpec generateKey(java.lang.String) throws java.security.NoSuchAlgorithmException, java.io.UnsupportedEncodingException
    {
        java.lang.String $r0, varReplacer304, varReplacer305, varReplacer306, varReplacer307;
        javax.crypto.spec.SecretKeySpec $r1;
        int $i0, varReplacer308;
        java.security.MessageDigest $r2;
        byte[] $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        varReplacer306 = "SHA-256";

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer306);

        varReplacer304 = "UTF-8";

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer304);

        $i0 = lengthof $r3;

        varReplacer308 = 0;

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[],int,int)>($r3, varReplacer308, $i0);

        $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

        varReplacer307 = "SHA-256 key ";

        staticinvoke <com.salk.mycircadianclock.AESCrypt: void log(java.lang.String,byte[])>(varReplacer307, $r3);

        $r1 = new javax.crypto.spec.SecretKeySpec;

        varReplacer305 = "AES";

        specialinvoke $r1.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer305);

        return $r1;
    }

    public static java.lang.String generateRandPublicKey()
    {
        java.lang.Exception $r0;
        java.util.UUID $r1;
        java.lang.String $r2, varReplacer290, varReplacer291;
        null_type varReplacer292;

     label1:
        nop;

        $r1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r2 = virtualinvoke $r1.<java.util.UUID: java.lang.String toString()>();

        varReplacer290 = "-";

        varReplacer291 = "";

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(varReplacer290, varReplacer291);

     label2:
        return $r2;

     label3:
        $r0 := @caughtexception;

        virtualinvoke $r0.<java.lang.Exception: void printStackTrace()>();

        varReplacer292 = null;

        return varReplacer292;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static void log(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer293, varReplacer294, varReplacer295, varReplacer296;
        boolean $z0;
        java.lang.StringBuilder $r2;
        int $i0;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = <com.salk.mycircadianclock.AESCrypt: boolean DEBUG_LOG_ENABLED>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r0);

        varReplacer295 = "[";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer295);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer294 = "] [";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer294);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        varReplacer293 = "]";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer293);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer296 = "AESCrypt";

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(varReplacer296, $r0);

     label1:
        return;
    }

    private static void log(java.lang.String, byte[])
    {
        java.lang.String $r0, varReplacer297, varReplacer298, varReplacer299, varReplacer300;
        byte[] $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        int $i0;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $z0 = <com.salk.mycircadianclock.AESCrypt: boolean DEBUG_LOG_ENABLED>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r0);

        varReplacer299 = "[";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer299);

        $i0 = lengthof $r1;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer298 = "] [";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer298);

        $r0 = staticinvoke <com.salk.mycircadianclock.AESCrypt: java.lang.String bytesToHex(byte[])>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        varReplacer297 = "]";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer297);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer300 = "AESCrypt";

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(varReplacer300, $r0);

     label1:
        return;
    }
}
