public class com.babybus.utils.RSAUtils extends java.lang.Object
{
    private static final java.lang.String RSATYPE;

    public void <init>()
    {
        com.babybus.utils.RSAUtils $r0;

        $r0 := @this: com.babybus.utils.RSAUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] base64Dec(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        int varReplacer1949;

        nop;

        $r0 := @parameter0: java.lang.String;

        varReplacer1949 = 0;

        $r1 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r0, varReplacer1949);

        return $r1;
    }

    public static java.lang.String base64Enc(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        int varReplacer1948;

        nop;

        $r0 := @parameter0: byte[];

        varReplacer1948 = 0;

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r0, varReplacer1948);

        return $r1;
    }

    public static java.lang.String cPriDecrypt(java.lang.String, java.security.PrivateKey)
    {
        java.lang.String $r0, r9;
        java.security.PrivateKey $r1;
        javax.crypto.Cipher $r2;
        byte[] $r3;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8;
        java.security.NoSuchAlgorithmException r10;
        javax.crypto.NoSuchPaddingException r11;
        java.security.InvalidKeyException r12;
        javax.crypto.BadPaddingException r13;
        javax.crypto.IllegalBlockSizeException r14;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.security.PrivateKey;

     label1:
        $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r1);

        $r3 = staticinvoke <com.babybus.utils.RSAUtils: byte[] base64Dec(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

     label2:
        r9 = new java.lang.String;

     label3:
        specialinvoke r9.<java.lang.String: void <init>(byte[])>($r3);

     label4:
        return r9;

     label5:
        $r4 := @caughtexception;

        r10 = (java.security.NoSuchAlgorithmException) $r4;

        virtualinvoke r10.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        return null;

     label6:
        $r5 := @caughtexception;

        r11 = (javax.crypto.NoSuchPaddingException) $r5;

        virtualinvoke r11.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        return null;

     label7:
        $r6 := @caughtexception;

        r12 = (java.security.InvalidKeyException) $r6;

        virtualinvoke r12.<java.security.InvalidKeyException: void printStackTrace()>();

        return null;

     label8:
        $r7 := @caughtexception;

        r13 = (javax.crypto.BadPaddingException) $r7;

        virtualinvoke r13.<javax.crypto.BadPaddingException: void printStackTrace()>();

        return null;

     label9:
        $r8 := @caughtexception;

        r14 = (javax.crypto.IllegalBlockSizeException) $r8;

        virtualinvoke r14.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label6;
        catch javax.crypto.NoSuchPaddingException from label3 to label4 with label6;
        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.InvalidKeyException from label3 to label4 with label7;
        catch javax.crypto.BadPaddingException from label1 to label2 with label8;
        catch javax.crypto.BadPaddingException from label3 to label4 with label8;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label9;
        catch javax.crypto.IllegalBlockSizeException from label3 to label4 with label9;
    }

    public static java.lang.String cPubEncrypt(java.lang.String, java.security.PublicKey)
    {
        java.lang.String $r0;
        java.security.PublicKey $r1;
        javax.crypto.Cipher $r2;
        byte[] $r3;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8;
        java.security.NoSuchAlgorithmException r9;
        javax.crypto.NoSuchPaddingException r10;
        java.security.InvalidKeyException r11;
        javax.crypto.BadPaddingException r12;
        javax.crypto.IllegalBlockSizeException r13;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.security.PublicKey;

     label1:
        $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r1);

        $r3 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        $r0 = staticinvoke <com.babybus.utils.RSAUtils: java.lang.String base64Enc(byte[])>($r3);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        r9 = (java.security.NoSuchAlgorithmException) $r4;

        virtualinvoke r9.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        return null;

     label4:
        $r5 := @caughtexception;

        r10 = (javax.crypto.NoSuchPaddingException) $r5;

        virtualinvoke r10.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        return null;

     label5:
        $r6 := @caughtexception;

        r11 = (java.security.InvalidKeyException) $r6;

        virtualinvoke r11.<java.security.InvalidKeyException: void printStackTrace()>();

        return null;

     label6:
        $r7 := @caughtexception;

        r12 = (javax.crypto.BadPaddingException) $r7;

        virtualinvoke r12.<javax.crypto.BadPaddingException: void printStackTrace()>();

        return null;

     label7:
        $r8 := @caughtexception;

        r13 = (javax.crypto.IllegalBlockSizeException) $r8;

        virtualinvoke r13.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label4;
        catch java.security.InvalidKeyException from label1 to label2 with label5;
        catch javax.crypto.BadPaddingException from label1 to label2 with label6;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label7;
    }

    public static java.security.PrivateKey getPrivateKey(java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0;
        java.security.spec.PKCS8EncodedKeySpec $r1;
        byte[] $r2;
        java.security.KeyFactory $r3;
        java.security.PrivateKey $r4;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.babybus.utils.RSAUtils: byte[] base64Dec(java.lang.String)>($r0);

        $r1 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r1.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r2);

        $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r4 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r1);

        return $r4;
    }

    public static java.security.PublicKey getPublicKey(java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, varReplacer1947;
        java.security.spec.X509EncodedKeySpec $r1;
        byte[] $r2;
        java.security.KeyFactory $r3;
        java.security.PublicKey $r4;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.babybus.utils.RSAUtils: byte[] base64Dec(java.lang.String)>($r0);

        $r1 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r2);

        varReplacer1947 = "RSA";

        $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(varReplacer1947);

        $r4 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1);

        return $r4;
    }

    public static java.lang.String sPubEncrypt(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, varReplacer1946;
        java.security.PublicKey $r2;
        javax.crypto.Cipher $r3;
        byte[] $r4;
        java.lang.Throwable $r5, $r6;
        java.lang.Exception $r7;
        java.security.NoSuchAlgorithmException r8;
        javax.crypto.NoSuchPaddingException r9;
        null_type varReplacer1942, varReplacer1943, varReplacer1944;
        int varReplacer1945;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <com.babybus.utils.RSAUtils: java.security.PublicKey getPublicKey(java.lang.String)>($r1);

        varReplacer1946 = "RSA/ECB/PKCS1Padding";

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer1946);

        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        varReplacer1945 = 1;

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1945, $r2);

        $r4 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        $r0 = staticinvoke <com.babybus.utils.RSAUtils: java.lang.String base64Enc(byte[])>($r4);

     label2:
        return $r0;

     label3:
        $r5 := @caughtexception;

        r8 = (java.security.NoSuchAlgorithmException) $r5;

        virtualinvoke r8.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        varReplacer1943 = null;

        return varReplacer1943;

     label4:
        $r6 := @caughtexception;

        r9 = (javax.crypto.NoSuchPaddingException) $r6;

        virtualinvoke r9.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        varReplacer1944 = null;

        return varReplacer1944;

     label5:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        varReplacer1942 = null;

        return varReplacer1942;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    public java.lang.String cPriEncrypt(java.lang.String, java.security.PrivateKey)
    {
        com.babybus.utils.RSAUtils $r0;
        java.lang.String $r1;
        java.security.PrivateKey $r2;
        javax.crypto.Cipher $r3;
        byte[] $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9;
        java.security.NoSuchAlgorithmException r10;
        javax.crypto.NoSuchPaddingException r11;
        java.security.InvalidKeyException r12;
        javax.crypto.BadPaddingException r13;
        javax.crypto.IllegalBlockSizeException r14;

        $r0 := @this: com.babybus.utils.RSAUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.PrivateKey;

     label1:
        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r2);

        $r4 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, 0);

     label2:
        return $r1;

     label3:
        $r5 := @caughtexception;

        r10 = (java.security.NoSuchAlgorithmException) $r5;

        virtualinvoke r10.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        return null;

     label4:
        $r6 := @caughtexception;

        r11 = (javax.crypto.NoSuchPaddingException) $r6;

        virtualinvoke r11.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        return null;

     label5:
        $r7 := @caughtexception;

        r12 = (java.security.InvalidKeyException) $r7;

        virtualinvoke r12.<java.security.InvalidKeyException: void printStackTrace()>();

        return null;

     label6:
        $r8 := @caughtexception;

        r13 = (javax.crypto.BadPaddingException) $r8;

        virtualinvoke r13.<javax.crypto.BadPaddingException: void printStackTrace()>();

        return null;

     label7:
        $r9 := @caughtexception;

        r14 = (javax.crypto.IllegalBlockSizeException) $r9;

        virtualinvoke r14.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label4;
        catch java.security.InvalidKeyException from label1 to label2 with label5;
        catch javax.crypto.BadPaddingException from label1 to label2 with label6;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label7;
    }

    public java.lang.String cPubDecrypt(java.lang.String, java.security.PublicKey)
    {
        com.babybus.utils.RSAUtils $r0;
        java.lang.String $r1, r10;
        java.security.PublicKey $r2;
        javax.crypto.Cipher $r3;
        byte[] $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9;
        java.security.NoSuchAlgorithmException r11;
        javax.crypto.NoSuchPaddingException r12;
        java.security.InvalidKeyException r13;
        javax.crypto.BadPaddingException r14;
        javax.crypto.IllegalBlockSizeException r15;

        $r0 := @this: com.babybus.utils.RSAUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.PublicKey;

     label1:
        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r2);

        $r4 = staticinvoke <com.babybus.utils.RSAUtils: byte[] base64Dec(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

     label2:
        r10 = new java.lang.String;

     label3:
        specialinvoke r10.<java.lang.String: void <init>(byte[])>($r4);

     label4:
        return r10;

     label5:
        $r5 := @caughtexception;

        r11 = (java.security.NoSuchAlgorithmException) $r5;

        virtualinvoke r11.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        return null;

     label6:
        $r6 := @caughtexception;

        r12 = (javax.crypto.NoSuchPaddingException) $r6;

        virtualinvoke r12.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        return null;

     label7:
        $r7 := @caughtexception;

        r13 = (java.security.InvalidKeyException) $r7;

        virtualinvoke r13.<java.security.InvalidKeyException: void printStackTrace()>();

        return null;

     label8:
        $r8 := @caughtexception;

        r14 = (javax.crypto.BadPaddingException) $r8;

        virtualinvoke r14.<javax.crypto.BadPaddingException: void printStackTrace()>();

        return null;

     label9:
        $r9 := @caughtexception;

        r15 = (javax.crypto.IllegalBlockSizeException) $r9;

        virtualinvoke r15.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label6;
        catch javax.crypto.NoSuchPaddingException from label3 to label4 with label6;
        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.InvalidKeyException from label3 to label4 with label7;
        catch javax.crypto.BadPaddingException from label1 to label2 with label8;
        catch javax.crypto.BadPaddingException from label3 to label4 with label8;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label9;
        catch javax.crypto.IllegalBlockSizeException from label3 to label4 with label9;
    }
}
