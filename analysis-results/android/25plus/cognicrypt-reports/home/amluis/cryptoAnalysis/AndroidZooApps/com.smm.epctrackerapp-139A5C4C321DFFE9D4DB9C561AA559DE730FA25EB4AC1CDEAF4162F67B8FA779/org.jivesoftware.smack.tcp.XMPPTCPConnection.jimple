public class org.jivesoftware.smack.tcp.XMPPTCPConnection extends org.jivesoftware.smack.XMPPConnection
{
    private static final java.util.logging.Logger LOGGER;
    private boolean anonymous;
    private final java.lang.Object compressionLock;
    private java.util.Collection compressionMethods;
    private boolean connected;
    java.lang.String connectionID;
    org.jivesoftware.smack.tcp.PacketReader packetReader;
    org.jivesoftware.smack.tcp.PacketWriter packetWriter;
    private org.jivesoftware.smack.parsing.ParsingExceptionCallback parsingExceptionCallback;
    private boolean serverAckdCompression;
    java.net.Socket socket;
    private volatile boolean socketClosed;
    private java.lang.String user;
    private boolean usingTLS;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        nop;

        $r0 = class "Lorg/jivesoftware/smack/tcp/XMPPTCPConnection;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER> = $r2;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1;
        org.jivesoftware.smack.parsing.ParsingExceptionCallback $r2;
        org.jivesoftware.smack.ConnectionConfiguration $r3;
        java.lang.Object $r4;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.String;

        $r3 = new org.jivesoftware.smack.ConnectionConfiguration;

        specialinvoke $r3.<org.jivesoftware.smack.ConnectionConfiguration: void <init>(java.lang.String)>($r1);

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void <init>(org.jivesoftware.smack.ConnectionConfiguration)>($r3);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String connectionID> = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user> = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected> = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed> = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean anonymous> = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS> = 0;

        $r2 = staticinvoke <org.jivesoftware.smack.SmackConfiguration: org.jivesoftware.smack.parsing.ParsingExceptionCallback getDefaultParsingExceptionCallback()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.parsing.ParsingExceptionCallback parsingExceptionCallback> = $r2;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean serverAckdCompression> = 0;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.Object compressionLock> = $r4;

        return;
    }

    public void <init>(java.lang.String, org.apache.harmony.javax.security.auth.callback.CallbackHandler)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1;
        org.apache.harmony.javax.security.auth.callback.CallbackHandler $r2;
        org.jivesoftware.smack.parsing.ParsingExceptionCallback $r3;
        org.jivesoftware.smack.ConnectionConfiguration $r4;
        java.lang.Object $r5;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.harmony.javax.security.auth.callback.CallbackHandler;

        $r4 = new org.jivesoftware.smack.ConnectionConfiguration;

        specialinvoke $r4.<org.jivesoftware.smack.ConnectionConfiguration: void <init>(java.lang.String)>($r1);

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void <init>(org.jivesoftware.smack.ConnectionConfiguration)>($r4);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String connectionID> = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user> = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected> = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed> = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean anonymous> = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS> = 0;

        $r3 = staticinvoke <org.jivesoftware.smack.SmackConfiguration: org.jivesoftware.smack.parsing.ParsingExceptionCallback getDefaultParsingExceptionCallback()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.parsing.ParsingExceptionCallback parsingExceptionCallback> = $r3;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean serverAckdCompression> = 0;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.Object compressionLock> = $r5;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        virtualinvoke $r4.<org.jivesoftware.smack.ConnectionConfiguration: void setCallbackHandler(org.apache.harmony.javax.security.auth.callback.CallbackHandler)>($r2);

        return;
    }

    public void <init>(org.jivesoftware.smack.ConnectionConfiguration)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.ConnectionConfiguration $r1;
        org.jivesoftware.smack.parsing.ParsingExceptionCallback $r2;
        java.lang.Object $r3;
        int varReplacer15734, varReplacer15736, varReplacer15738, varReplacer15739, varReplacer15740;
        null_type varReplacer15735, varReplacer15737;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.ConnectionConfiguration;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void <init>(org.jivesoftware.smack.ConnectionConfiguration)>($r1);

        varReplacer15737 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String connectionID> = varReplacer15737;

        varReplacer15735 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user> = varReplacer15735;

        varReplacer15739 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected> = varReplacer15739;

        varReplacer15734 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed> = varReplacer15734;

        varReplacer15736 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean anonymous> = varReplacer15736;

        varReplacer15740 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS> = varReplacer15740;

        $r2 = staticinvoke <org.jivesoftware.smack.SmackConfiguration: org.jivesoftware.smack.parsing.ParsingExceptionCallback getDefaultParsingExceptionCallback()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.parsing.ParsingExceptionCallback parsingExceptionCallback> = $r2;

        varReplacer15738 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean serverAckdCompression> = varReplacer15738;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.Object compressionLock> = $r3;

        return;
    }

    public void <init>(org.jivesoftware.smack.ConnectionConfiguration, org.apache.harmony.javax.security.auth.callback.CallbackHandler)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.ConnectionConfiguration $r1;
        org.apache.harmony.javax.security.auth.callback.CallbackHandler $r2;
        org.jivesoftware.smack.parsing.ParsingExceptionCallback $r3;
        java.lang.Object $r4;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.ConnectionConfiguration;

        $r2 := @parameter1: org.apache.harmony.javax.security.auth.callback.CallbackHandler;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void <init>(org.jivesoftware.smack.ConnectionConfiguration)>($r1);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String connectionID> = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user> = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected> = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed> = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean anonymous> = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS> = 0;

        $r3 = staticinvoke <org.jivesoftware.smack.SmackConfiguration: org.jivesoftware.smack.parsing.ParsingExceptionCallback getDefaultParsingExceptionCallback()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.parsing.ParsingExceptionCallback parsingExceptionCallback> = $r3;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean serverAckdCompression> = 0;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.Object compressionLock> = $r4;

        virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: void setCallbackHandler(org.apache.harmony.javax.security.auth.callback.CallbackHandler)>($r2);

        return;
    }

    private void connectUsingConfiguration(org.jivesoftware.smack.ConnectionConfiguration) throws org.jivesoftware.smack.SmackException, java.io.IOException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.ConnectionConfiguration $r1;
        java.util.LinkedList $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Exception $r5, $r11;
        java.lang.Object $r6;
        org.jivesoftware.smack.util.dns.HostAddress $r7;
        java.lang.String $r8;
        int $i0, varReplacer15859;
        javax.net.SocketFactory $r9;
        java.net.Socket $r10;
        org.jivesoftware.smack.SmackException $r12;
        org.jivesoftware.smack.SmackException$ConnectionException $r13;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.ConnectionConfiguration;

     label01:
        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void maybeResolveDns()>();

     label02:
        $r3 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.util.List getHostAddresses()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

     label03:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r5 = null;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.jivesoftware.smack.util.dns.HostAddress) $r6;

        $r8 = virtualinvoke $r7.<org.jivesoftware.smack.util.dns.HostAddress: java.lang.String getFQDN()>();

        $i0 = virtualinvoke $r7.<org.jivesoftware.smack.util.dns.HostAddress: int getPort()>();

     label04:
        $r9 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: javax.net.SocketFactory getSocketFactory()>();

     label05:
        if $r9 != null goto label10;

        $r10 = new java.net.Socket;

     label06:
        specialinvoke $r10.<java.net.Socket: void <init>(java.lang.String,int)>($r8, $i0);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket> = $r10;

     label07:
        if $r5 != null goto label13;

        virtualinvoke $r7.<org.jivesoftware.smack.util.dns.HostAddress: java.lang.String getFQDN()>();

        virtualinvoke $r7.<org.jivesoftware.smack.util.dns.HostAddress: int getPort()>();

     label08:
        varReplacer15859 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed> = varReplacer15859;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initConnection()>();

        return;

     label09:
        $r11 := @caughtexception;

        $r12 = new org.jivesoftware.smack.SmackException;

        specialinvoke $r12.<org.jivesoftware.smack.SmackException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label10:
        $r9 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: javax.net.SocketFactory getSocketFactory()>();

        $r10 = virtualinvoke $r9.<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>($r8, $i0);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket> = $r10;

     label11:
        goto label07;

     label12:
        $r5 := @caughtexception;

        goto label07;

     label13:
        virtualinvoke $r7.<org.jivesoftware.smack.util.dns.HostAddress: void setException(java.lang.Exception)>($r5);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label03;

        $r13 = new org.jivesoftware.smack.SmackException$ConnectionException;

        specialinvoke $r13.<org.jivesoftware.smack.SmackException$ConnectionException: void <init>(java.util.List)>($r2);

        throw $r13;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Exception from label06 to label07 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    private void initConnection() throws org.jivesoftware.smack.SmackException, java.io.IOException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0, $z1;
        org.jivesoftware.smack.tcp.PacketReader $r1;
        org.jivesoftware.smack.tcp.PacketWriter $r2;
        org.jivesoftware.smack.ConnectionConfiguration $r3;
        org.jivesoftware.smack.debugger.SmackDebugger $r4;
        org.jivesoftware.smack.PacketListener $r5;
        java.util.Collection $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        org.jivesoftware.smack.ConnectionCreationListener $r9;
        org.jivesoftware.smack.SmackException $r10;
        null_type varReplacer15882, varReplacer15883, varReplacer15885;
        int varReplacer15884, varReplacer15886;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = 1;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketReader packetReader>;

        if $r1 == null goto label01;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        if $r2 != null goto label26;

     label01:
        varReplacer15882 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler> = varReplacer15882;

        varReplacer15886 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean serverAckdCompression> = varReplacer15886;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initReaderAndWriter()>();

        if $z0 == 0 goto label27;

        $r2 = new org.jivesoftware.smack.tcp.PacketWriter;

     label02:
        specialinvoke $r2.<org.jivesoftware.smack.tcp.PacketWriter: void <init>(org.jivesoftware.smack.tcp.XMPPTCPConnection)>($r0);

     label03:
        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter> = $r2;

        $r1 = new org.jivesoftware.smack.tcp.PacketReader;

     label04:
        specialinvoke $r1.<org.jivesoftware.smack.tcp.PacketReader: void <init>(org.jivesoftware.smack.tcp.XMPPTCPConnection)>($r0);

     label05:
        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketReader packetReader> = $r1;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

     label06:
        $z1 = virtualinvoke $r3.<org.jivesoftware.smack.ConnectionConfiguration: boolean isDebuggerEnabled()>();

     label07:
        if $z1 == 0 goto label13;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

     label08:
        $r5 = interfaceinvoke $r4.<org.jivesoftware.smack.debugger.SmackDebugger: org.jivesoftware.smack.PacketListener getReaderListener()>();

        varReplacer15885 = null;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void addPacketListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter)>($r5, varReplacer15885);

     label09:
        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

     label10:
        $r5 = interfaceinvoke $r4.<org.jivesoftware.smack.debugger.SmackDebugger: org.jivesoftware.smack.PacketListener getWriterListener()>();

     label11:
        if $r5 == null goto label13;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

     label12:
        $r5 = interfaceinvoke $r4.<org.jivesoftware.smack.debugger.SmackDebugger: org.jivesoftware.smack.PacketListener getWriterListener()>();

        varReplacer15883 = null;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void addPacketSendingListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter)>($r5, varReplacer15883);

     label13:
        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

     label14:
        virtualinvoke $r2.<org.jivesoftware.smack.tcp.PacketWriter: void startup()>();

     label15:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketReader packetReader>;

     label16:
        virtualinvoke $r1.<org.jivesoftware.smack.tcp.PacketReader: void startup()>();

     label17:
        varReplacer15884 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected> = varReplacer15884;

        if $z0 == 0 goto label32;

     label18:
        $r6 = staticinvoke <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection getConnectionCreationListeners()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label19:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label20:
        if $z0 == 0 goto label32;

     label21:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label22:
        $r9 = (org.jivesoftware.smack.ConnectionCreationListener) $r8;

     label23:
        interfaceinvoke $r9.<org.jivesoftware.smack.ConnectionCreationListener: void connectionCreated(org.jivesoftware.smack.XMPPConnection)>($r0);

     label24:
        goto label19;

     label25:
        $r10 := @caughtexception;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void shutdown()>();

        throw $r10;

     label26:
        $z0 = 0;

        goto label01;

     label27:
        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

     label28:
        virtualinvoke $r2.<org.jivesoftware.smack.tcp.PacketWriter: void init()>();

     label29:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketReader packetReader>;

     label30:
        virtualinvoke $r1.<org.jivesoftware.smack.tcp.PacketReader: void init()>();

     label31:
        goto label13;

     label32:
        return;

        catch org.jivesoftware.smack.SmackException from label02 to label03 with label25;
        catch org.jivesoftware.smack.SmackException from label04 to label05 with label25;
        catch org.jivesoftware.smack.SmackException from label06 to label07 with label25;
        catch org.jivesoftware.smack.SmackException from label08 to label09 with label25;
        catch org.jivesoftware.smack.SmackException from label10 to label11 with label25;
        catch org.jivesoftware.smack.SmackException from label12 to label13 with label25;
        catch org.jivesoftware.smack.SmackException from label14 to label15 with label25;
        catch org.jivesoftware.smack.SmackException from label16 to label17 with label25;
        catch org.jivesoftware.smack.SmackException from label18 to label20 with label25;
        catch org.jivesoftware.smack.SmackException from label21 to label22 with label25;
        catch org.jivesoftware.smack.SmackException from label23 to label24 with label25;
        catch org.jivesoftware.smack.SmackException from label28 to label29 with label25;
        catch org.jivesoftware.smack.SmackException from label30 to label31 with label25;
    }

    private void initReaderAndWriter() throws java.io.IOException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.compression.XMPPInputOutputStream $r1;
        java.io.BufferedReader $r2;
        java.io.InputStreamReader $r3;
        java.net.Socket $r4;
        java.io.InputStream $r5;
        java.io.BufferedWriter $r6;
        java.io.OutputStreamWriter $r7;
        java.io.OutputStream $r8;
        java.lang.Exception $r9;
        java.util.logging.Logger $r10;
        java.util.logging.Level $r11;
        java.lang.Throwable $r12;
        java.lang.IllegalStateException $r13;
        java.lang.String varReplacer16168, varReplacer16169, varReplacer16170, varReplacer16171, varReplacer16173, varReplacer16174, varReplacer16175;
        null_type varReplacer16172;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        if $r1 != null goto label06;

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

     label01:
        $r5 = virtualinvoke $r4.<java.net.Socket: java.io.InputStream getInputStream()>();

        varReplacer16173 = "UTF-8";

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r5, varReplacer16173);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

     label02:
        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Reader reader> = $r2;

        $r6 = new java.io.BufferedWriter;

        $r7 = new java.io.OutputStreamWriter;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

     label03:
        $r8 = virtualinvoke $r4.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        varReplacer16175 = "UTF-8";

        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r8, varReplacer16175);

        specialinvoke $r6.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r7);

     label04:
        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer> = $r6;

     label05:
        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initDebugger()>();

        return;

     label06:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        $r8 = virtualinvoke $r4.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r8 = virtualinvoke $r1.<org.jivesoftware.smack.compression.XMPPInputOutputStream: java.io.OutputStream getOutputStream(java.io.OutputStream)>($r8);

     label07:
        $r6 = new java.io.BufferedWriter;

        $r7 = new java.io.OutputStreamWriter;

     label08:
        varReplacer16170 = "UTF-8";

        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r8, varReplacer16170);

        specialinvoke $r6.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r7);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer> = $r6;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        $r5 = virtualinvoke $r4.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r5 = virtualinvoke $r1.<org.jivesoftware.smack.compression.XMPPInputOutputStream: java.io.InputStream getInputStream(java.io.InputStream)>($r5);

     label09:
        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

     label10:
        varReplacer16168 = "UTF-8";

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r5, varReplacer16168);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Reader reader> = $r2;

     label11:
        goto label05;

     label12:
        $r9 := @caughtexception;

        $r10 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

     label13:
        varReplacer16171 = "initReaderAndWriter()";

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, varReplacer16171, $r9);

     label14:
        varReplacer16172 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler> = varReplacer16172;

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

     label15:
        $r5 = virtualinvoke $r4.<java.net.Socket: java.io.InputStream getInputStream()>();

        varReplacer16174 = "UTF-8";

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r5, varReplacer16174);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

     label16:
        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Reader reader> = $r2;

        $r6 = new java.io.BufferedWriter;

        $r7 = new java.io.OutputStreamWriter;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

     label17:
        $r8 = virtualinvoke $r4.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        varReplacer16169 = "UTF-8";

        specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r8, varReplacer16169);

        specialinvoke $r6.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r7);

     label18:
        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer> = $r6;

        goto label05;

     label19:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label19;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label19;
        catch java.lang.Exception from label06 to label07 with label12;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.io.UnsupportedEncodingException from label13 to label14 with label19;
        catch java.io.UnsupportedEncodingException from label15 to label16 with label19;
        catch java.io.UnsupportedEncodingException from label17 to label18 with label19;
    }

    private org.jivesoftware.smack.compression.XMPPInputOutputStream maybeGetCompressionHandler()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.Collection $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.jivesoftware.smack.compression.XMPPInputOutputStream $r5;
        java.lang.String $r6;
        null_type varReplacer15843;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection compressionMethods>;

        if $r1 == null goto label2;

        $r2 = staticinvoke <org.jivesoftware.smack.SmackConfiguration: java.util.List getCompresionHandlers()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.jivesoftware.smack.compression.XMPPInputOutputStream) $r4;

        $r6 = virtualinvoke $r5.<org.jivesoftware.smack.compression.XMPPInputOutputStream: java.lang.String getCompressionMethod()>();

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection compressionMethods>;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return $r5;

     label2:
        varReplacer15843 = null;

        return varReplacer15843;
    }

    private void notifyReconnection()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.jivesoftware.smack.ConnectionListener $r6;
        java.lang.Exception $r7;
        java.lang.String varReplacer15864;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r3 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection getConnectionListeners()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.jivesoftware.smack.ConnectionListener) $r5;

     label2:
        interfaceinvoke $r6.<org.jivesoftware.smack.ConnectionListener: void reconnectionSuccessful()>();

     label3:
        goto label1;

     label4:
        $r7 := @caughtexception;

        $r1 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        varReplacer15864 = "notifyReconnection()";

        virtualinvoke $r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, varReplacer15864, $r7);

        goto label1;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private void requestStreamCompression(java.lang.String) throws java.io.IOException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1, varReplacer15844, varReplacer15845, varReplacer15846;
        java.io.Writer $r2;
        java.lang.StringBuilder $r3;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        varReplacer15845 = "<compress xmlns=\'http://jabber.org/protocol/compress\'>";

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(varReplacer15845);

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        varReplacer15844 = "<method>";

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer15844);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        varReplacer15846 = "</method></compress>";

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer15846);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void flush()>();

        return;
    }

    private boolean useCompression() throws java.io.IOException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        org.jivesoftware.smack.compression.XMPPInputOutputStream $r2;
        java.lang.Object $r3, $r5;
        java.lang.String $r4, varReplacer15826;
        long $l0;
        java.lang.Throwable $r6, $r7;
        int varReplacer15827;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean authenticated>;

        if $z0 == 0 goto label01;

        $r1 = new java.lang.IllegalStateException;

        varReplacer15826 = "Compression should be negotiated before authentication.";

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer15826);

        throw $r1;

     label01:
        $r2 = specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream maybeGetCompressionHandler()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler> = $r2;

        if $r2 == null goto label10;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.Object compressionLock>;

        entermonitor $r3;

     label02:
        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        $r4 = virtualinvoke $r2.<org.jivesoftware.smack.compression.XMPPInputOutputStream: java.lang.String getCompressionMethod()>();

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void requestStreamCompression(java.lang.String)>($r4);

     label03:
        $r5 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.Object compressionLock>;

     label04:
        $l0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: long getPacketReplyTimeout()>();

        virtualinvoke $r5.<java.lang.Object: void wait(long)>($l0);

     label05:
        exitmonitor $r3;

     label06:
        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isUsingCompression()>();

        return $z0;

     label07:
        $r6 := @caughtexception;

     label08:
        exitmonitor $r3;

     label09:
        throw $r6;

     label10:
        varReplacer15827 = 0;

        return varReplacer15827;

     label11:
        $r7 := @caughtexception;

        goto label05;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.InterruptedException from label04 to label05 with label11;
        catch java.lang.Throwable from label03 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    protected void connectInternal() throws org.jivesoftware.smack.SmackException, java.io.IOException, org.jivesoftware.smack.XMPPException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.ConnectionConfiguration $r1;
        boolean $z0;
        java.lang.String $r2, $r3, $r4;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void connectUsingConfiguration(org.jivesoftware.smack.ConnectionConfiguration)>($r1);

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected>;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void callConnectionConnectedListener()>();

     label1:
        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected>;

        if $z0 == 0 goto label4;

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean wasAuthenticated>;

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isAnonymous()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void loginAnonymously()>();

     label2:
        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void notifyReconnection()>();

        return;

     label3:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r2 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.lang.String getUsername()>();

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r3 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.lang.String getPassword()>();

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r4 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.lang.String getResource()>();

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void login(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        goto label2;

     label4:
        return;
    }

    protected org.jivesoftware.smack.ConnectionConfiguration getConfiguration()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.ConnectionConfiguration $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: org.jivesoftware.smack.ConnectionConfiguration getConfiguration()>();

        return $r1;
    }

    public java.lang.String getConnectionID()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        java.lang.String r1;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isConnected()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String connectionID>;

        return r1;
    }

    public org.jivesoftware.smack.parsing.ParsingExceptionCallback getParsingExceptionCallback()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.parsing.ParsingExceptionCallback r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.parsing.ParsingExceptionCallback parsingExceptionCallback>;

        return r1;
    }

    protected java.io.Reader getReader()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Reader $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: java.io.Reader getReader()>();

        return $r1;
    }

    protected org.jivesoftware.smack.SASLAuthentication getSASLAuthentication()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.SASLAuthentication $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: org.jivesoftware.smack.SASLAuthentication getSASLAuthentication()>();

        return $r1;
    }

    public java.lang.String getUser()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        java.lang.String r1;
        null_type varReplacer15825;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isAuthenticated()>();

        if $z0 != 0 goto label1;

        varReplacer15825 = null;

        return varReplacer15825;

     label1:
        r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user>;

        return r1;
    }

    protected java.io.Writer getWriter()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: java.io.Writer getWriter()>();

        return $r1;
    }

    public boolean isAnonymous()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean z0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean anonymous>;

        return z0;
    }

    public boolean isAuthenticated()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean z0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean authenticated>;

        return z0;
    }

    public boolean isConnected()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean z0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected>;

        return z0;
    }

    public boolean isSecureConnection()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isUsingTLS()>();

        return $z0;
    }

    public boolean isSocketClosed()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean z0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed>;

        return z0;
    }

    public boolean isUsingCompression()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.compression.XMPPInputOutputStream $r1;
        boolean $z0;
        int varReplacer15847, varReplacer15848;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler>;

        if $r1 == null goto label1;

        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean serverAckdCompression>;

        if $z0 == 0 goto label1;

        varReplacer15848 = 1;

        return varReplacer15848;

     label1:
        varReplacer15847 = 0;

        return varReplacer15847;
    }

    public boolean isUsingTLS()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean z0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS>;

        return z0;
    }

    public void login(java.lang.String, java.lang.String, java.lang.String) throws org.jivesoftware.smack.XMPPException, org.jivesoftware.smack.SmackException, org.apache.harmony.javax.security.sasl.SaslException, java.io.IOException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1, $r2, $r3, $r10, varReplacer15814, varReplacer15816, varReplacer15817;
        boolean $z0;
        org.jivesoftware.smack.SmackException$NotConnectedException $r4;
        java.lang.Throwable $r5;
        org.jivesoftware.smack.SmackException$AlreadyLoggedInException $r6;
        java.util.Locale $r7;
        org.jivesoftware.smack.SASLAuthentication $r8;
        org.jivesoftware.smack.ConnectionConfiguration $r9;
        org.jivesoftware.smack.packet.Presence $r11;
        org.jivesoftware.smack.packet.Presence$Type $r12;
        org.jivesoftware.smack.debugger.SmackDebugger $r13;
        org.apache.harmony.javax.security.auth.callback.CallbackHandler $r14;
        org.apache.harmony.javax.security.sasl.SaslException $r15;
        java.lang.StringBuilder $r16;
        int varReplacer15813, varReplacer15815;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        entermonitor $r0;

     label01:
        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isConnected()>();

        if $z0 != 0 goto label03;

        $r4 = new org.jivesoftware.smack.SmackException$NotConnectedException;

        specialinvoke $r4.<org.jivesoftware.smack.SmackException$NotConnectedException: void <init>()>();

        throw $r4;

     label02:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

     label03:
        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean authenticated>;

        if $z0 == 0 goto label04;

        $r6 = new org.jivesoftware.smack.SmackException$AlreadyLoggedInException;

        specialinvoke $r6.<org.jivesoftware.smack.SmackException$AlreadyLoggedInException: void <init>()>();

        throw $r6;

     label04:
        $r7 = <java.util.Locale: java.util.Locale US>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r7);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r8 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        $z0 = virtualinvoke $r8.<org.jivesoftware.smack.SASLAuthentication: boolean hasNonAnonymousAuthentication()>();

        if $z0 == 0 goto label12;

        if $r2 == null goto label11;

        $r8 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        virtualinvoke $r8.<org.jivesoftware.smack.SASLAuthentication: void authenticate(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

     label05:
        $r9 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $z0 = virtualinvoke $r9.<org.jivesoftware.smack.ConnectionConfiguration: boolean isCompressionEnabled()>();

        if $z0 == 0 goto label06;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useCompression()>();

     label06:
        $r10 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String bindResourceAndEstablishSession(java.lang.String)>($r3);

        if $r10 == null goto label13;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user> = $r10;

        $r10 = staticinvoke <org.jivesoftware.smack.util.StringUtils: java.lang.String parseServer(java.lang.String)>($r10);

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void setServiceName(java.lang.String)>($r10);

     label07:
        varReplacer15815 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean authenticated> = varReplacer15815;

        varReplacer15813 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean anonymous> = varReplacer15813;

        $r9 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $z0 = virtualinvoke $r9.<org.jivesoftware.smack.ConnectionConfiguration: boolean isSendPresence()>();

        if $z0 == 0 goto label08;

        $r11 = new org.jivesoftware.smack.packet.Presence;

        $r12 = <org.jivesoftware.smack.packet.Presence$Type: org.jivesoftware.smack.packet.Presence$Type available>;

        specialinvoke $r11.<org.jivesoftware.smack.packet.Presence: void <init>(org.jivesoftware.smack.packet.Presence$Type)>($r12);

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void sendPacket(org.jivesoftware.smack.packet.Packet)>($r11);

     label08:
        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void setLoginInfo(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        $r9 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $z0 = virtualinvoke $r9.<org.jivesoftware.smack.ConnectionConfiguration: boolean isDebuggerEnabled()>();

        if $z0 == 0 goto label09;

        $r13 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

        if $r13 == null goto label09;

        $r13 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user>;

        interfaceinvoke $r13.<org.jivesoftware.smack.debugger.SmackDebugger: void userHasLogged(java.lang.String)>($r1);

     label09:
        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void callConnectionAuthenticatedListener()>();

     label10:
        exitmonitor $r0;

        return;

     label11:
        $r8 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        $r9 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r14 = virtualinvoke $r9.<org.jivesoftware.smack.ConnectionConfiguration: org.apache.harmony.javax.security.auth.callback.CallbackHandler getCallbackHandler()>();

        virtualinvoke $r8.<org.jivesoftware.smack.SASLAuthentication: void authenticate(java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler)>($r3, $r14);

        goto label05;

     label12:
        $r15 = new org.apache.harmony.javax.security.sasl.SaslException;

        varReplacer15814 = "No non-anonymous SASL authentication mechanism available";

        specialinvoke $r15.<org.apache.harmony.javax.security.sasl.SaslException: void <init>(java.lang.String)>(varReplacer15814);

        throw $r15;

     label13:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        varReplacer15816 = "@";

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer15816);

        $r10 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String getServiceName()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user> = $r10;

        if $r3 == null goto label07;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r10 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user>;

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        varReplacer15817 = "/";

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer15817);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user> = $r10;

     label14:
        goto label07;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label10 with label02;
        catch java.lang.Throwable from label11 to label14 with label02;
    }

    public void loginAnonymously() throws org.jivesoftware.smack.XMPPException, org.jivesoftware.smack.SmackException, org.apache.harmony.javax.security.sasl.SaslException, java.io.IOException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        org.jivesoftware.smack.SmackException$NotConnectedException $r1;
        java.lang.Throwable $r2;
        org.jivesoftware.smack.SmackException$AlreadyLoggedInException $r3;
        org.jivesoftware.smack.SASLAuthentication $r4;
        java.lang.String $r5, varReplacer15860;
        org.jivesoftware.smack.ConnectionConfiguration $r6;
        org.jivesoftware.smack.packet.Presence $r7;
        org.jivesoftware.smack.packet.Presence$Type $r8;
        org.jivesoftware.smack.debugger.SmackDebugger $r9;
        org.apache.harmony.javax.security.sasl.SaslException $r10;
        null_type varReplacer15861;
        int varReplacer15862, varReplacer15863;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        entermonitor $r0;

     label1:
        $z0 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean isConnected()>();

        if $z0 != 0 goto label3;

        $r1 = new org.jivesoftware.smack.SmackException$NotConnectedException;

        specialinvoke $r1.<org.jivesoftware.smack.SmackException$NotConnectedException: void <init>()>();

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

     label3:
        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean authenticated>;

        if $z0 == 0 goto label4;

        $r3 = new org.jivesoftware.smack.SmackException$AlreadyLoggedInException;

        specialinvoke $r3.<org.jivesoftware.smack.SmackException$AlreadyLoggedInException: void <init>()>();

        throw $r3;

     label4:
        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        $z0 = virtualinvoke $r4.<org.jivesoftware.smack.SASLAuthentication: boolean hasAnonymousAuthentication()>();

        if $z0 == 0 goto label8;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.SASLAuthentication saslAuthentication>;

        virtualinvoke $r4.<org.jivesoftware.smack.SASLAuthentication: void authenticateAnonymously()>();

        varReplacer15861 = null;

        $r5 = virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String bindResourceAndEstablishSession(java.lang.String)>(varReplacer15861);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user> = $r5;

        $r5 = staticinvoke <org.jivesoftware.smack.util.StringUtils: java.lang.String parseServer(java.lang.String)>($r5);

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void setServiceName(java.lang.String)>($r5);

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $z0 = virtualinvoke $r6.<org.jivesoftware.smack.ConnectionConfiguration: boolean isCompressionEnabled()>();

        if $z0 == 0 goto label5;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean useCompression()>();

     label5:
        $r7 = new org.jivesoftware.smack.packet.Presence;

        $r8 = <org.jivesoftware.smack.packet.Presence$Type: org.jivesoftware.smack.packet.Presence$Type available>;

        specialinvoke $r7.<org.jivesoftware.smack.packet.Presence: void <init>(org.jivesoftware.smack.packet.Presence$Type)>($r8);

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void sendPacket(org.jivesoftware.smack.packet.Packet)>($r7);

        varReplacer15862 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean authenticated> = varReplacer15862;

        varReplacer15863 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean anonymous> = varReplacer15863;

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $z0 = virtualinvoke $r6.<org.jivesoftware.smack.ConnectionConfiguration: boolean isDebuggerEnabled()>();

        if $z0 == 0 goto label6;

        $r9 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

        if $r9 == null goto label6;

        $r9 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.debugger.SmackDebugger debugger>;

        $r5 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.String user>;

        interfaceinvoke $r9.<org.jivesoftware.smack.debugger.SmackDebugger: void userHasLogged(java.lang.String)>($r5);

     label6:
        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void callConnectionAuthenticatedListener()>();

     label7:
        exitmonitor $r0;

        return;

     label8:
        $r10 = new org.apache.harmony.javax.security.sasl.SaslException;

        varReplacer15860 = "No anonymous SASL authentication mechanism available";

        specialinvoke $r10.<org.apache.harmony.javax.security.sasl.SaslException: void <init>(java.lang.String)>(varReplacer15860);

        throw $r10;

     label9:
        nop;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label7 with label2;
        catch java.lang.Throwable from label8 to label9 with label2;
    }

    void notifyConnectionError(java.lang.Exception)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.Exception $r1;
        org.jivesoftware.smack.tcp.PacketReader $r2;
        boolean $z0;
        org.jivesoftware.smack.tcp.PacketWriter $r3;
        java.lang.Throwable $r4;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.Exception;

        entermonitor $r0;

     label1:
        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketReader packetReader>;

        if $r2 == null goto label2;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketReader packetReader>;

        $z0 = $r2.<org.jivesoftware.smack.tcp.PacketReader: boolean done>;

        if $z0 == 0 goto label5;

     label2:
        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        if $r3 == null goto label4;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        $z0 = $r3.<org.jivesoftware.smack.tcp.PacketWriter: boolean done>;

     label3:
        if $z0 == 0 goto label5;

     label4:
        exitmonitor $r0;

        return;

     label5:
        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void shutdown()>();

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void callConnectionClosedOnErrorListener(java.lang.Exception)>($r1);

     label6:
        goto label4;

     label7:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    void proceedTLSReceived() throws java.lang.Exception
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.ConnectionConfiguration $r1;
        javax.net.ssl.SSLContext $r2, $r5;
        org.apache.harmony.javax.security.auth.callback.CallbackHandler $r3;
        javax.net.ssl.KeyManager[] $r4;
        java.net.Socket $r6;
        javax.net.ssl.SSLSocketFactory $r7;
        java.net.InetAddress $r8;
        java.lang.String $r9, varReplacer16905, varReplacer16906, varReplacer16908, varReplacer16909, varReplacer16911, varReplacer16912, varReplacer16913, varReplacer16914, varReplacer16917, varReplacer16918, varReplacer16919, varReplacer16920;
        int $i0, varReplacer16907, varReplacer16915, varReplacer16916, varReplacer16921;
        javax.net.ssl.SSLSocket $r10;
        org.jivesoftware.smack.tcp.PacketWriter $r11;
        java.io.Writer $r12;
        boolean $z0;
        org.apache.harmony.javax.security.auth.callback.PasswordCallback $r13, r35;
        java.security.KeyStore $r14, $r25;
        javax.net.ssl.KeyManagerFactory $r15;
        java.lang.Class $r16;
        java.lang.Class[] $r17;
        java.lang.reflect.Constructor $r18;
        java.lang.StringBuilder $r19, r33;
        java.io.ByteArrayInputStream $r20, r34;
        byte[] $r21;
        java.lang.Object[] $r22;
        java.lang.Object $r23;
        java.security.Provider $r24;
        char[] $r26;
        java.lang.Exception $r27, $r29;
        java.io.FileInputStream $r28, r36;
        java.lang.NullPointerException $r30;
        java.lang.Throwable $r31;
        java.security.SecureRandom r32;
        org.apache.harmony.javax.security.auth.callback.Callback[] r37;
        java.io.IOException r38;
        null_type varReplacer16903, varReplacer16904, varReplacer16910, varReplacer16922, varReplacer16923;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r2 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: javax.net.ssl.SSLContext getCustomSSLContext()>();

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r3 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: org.apache.harmony.javax.security.auth.callback.CallbackHandler getCallbackHandler()>();

        if $r3 != null goto label05;

        $r4 = null;

     label01:
        if $r2 != null goto label31;

        varReplacer16905 = "TLS";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer16905);

        $r5 = $r2;

        r32 = new java.security.SecureRandom;

        specialinvoke r32.<java.security.SecureRandom: void <init>()>();

        varReplacer16910 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, varReplacer16910, r32);

     label02:
        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        $r7 = virtualinvoke $r5.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r8 = virtualinvoke $r6.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $r9 = virtualinvoke $r8.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $i0 = virtualinvoke $r6.<java.net.Socket: int getPort()>();

        varReplacer16907 = 1;

        $r6 = virtualinvoke $r7.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r6, $r9, $i0, varReplacer16907);

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket> = $r6;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initReaderAndWriter()>();

        $r6 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        $r10 = (javax.net.ssl.SSLSocket) $r6;

     label03:
        virtualinvoke $r10.<javax.net.ssl.SSLSocket: void startHandshake()>();

     label04:
        varReplacer16916 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS> = varReplacer16916;

        $r11 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        $r12 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        virtualinvoke $r11.<org.jivesoftware.smack.tcp.PacketWriter: void setWriter(java.io.Writer)>($r12);

        $r11 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        virtualinvoke $r11.<org.jivesoftware.smack.tcp.PacketWriter: void openStream()>();

        return;

     label05:
        if $r2 != null goto label32;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r9 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.lang.String getKeystoreType()>();

        varReplacer16909 = "NONE";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer16909);

        if $z0 == 0 goto label10;

        $r13 = null;

        $r14 = null;

     label06:
        varReplacer16911 = "SunX509";

        $r15 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(varReplacer16911);

        if $r13 != null goto label27;

     label07:
        varReplacer16903 = null;

        virtualinvoke $r15.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, varReplacer16903);

     label08:
        $r4 = virtualinvoke $r15.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

     label09:
        goto label01;

     label10:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r9 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.lang.String getKeystoreType()>();

        varReplacer16908 = "PKCS11";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer16908);

        if $z0 == 0 goto label20;

     label11:
        varReplacer16917 = "sun.security.pkcs11.SunPKCS11";

        $r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(varReplacer16917);

        $r17 = newarray (java.lang.Class)[1];

        $r17[0] = class "Ljava/io/InputStream;";

        $r18 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r17);

     label12:
        r33 = new java.lang.StringBuilder;

        $r19 = r33;

     label13:
        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        varReplacer16912 = "name = SmartCard\nlibrary = ";

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer16912);

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r9 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.lang.String getPKCS11Library()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        r34 = new java.io.ByteArrayInputStream;

        $r20 = r34;

     label15:
        $r21 = virtualinvoke $r9.<java.lang.String: byte[] getBytes()>();

        specialinvoke r34.<java.io.ByteArrayInputStream: void <init>(byte[])>($r21);

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = $r20;

        $r23 = virtualinvoke $r18.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r22);

        $r24 = (java.security.Provider) $r23;

        staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r24);

        varReplacer16906 = "PKCS11";

        $r25 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)>(varReplacer16906, $r24);

     label16:
        $r14 = $r25;

        r35 = new org.apache.harmony.javax.security.auth.callback.PasswordCallback;

        $r13 = r35;

     label17:
        varReplacer16920 = "PKCS11 Password: ";

        varReplacer16921 = 0;

        specialinvoke r35.<org.apache.harmony.javax.security.auth.callback.PasswordCallback: void <init>(java.lang.String,boolean)>(varReplacer16920, varReplacer16921);

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r3 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: org.apache.harmony.javax.security.auth.callback.CallbackHandler getCallbackHandler()>();

        $r22 = newarray (org.apache.harmony.javax.security.auth.callback.Callback)[1];

        $r22[0] = $r13;

        r37 = (org.apache.harmony.javax.security.auth.callback.Callback[]) $r22;

        interfaceinvoke $r3.<org.apache.harmony.javax.security.auth.callback.CallbackHandler: void handle(org.apache.harmony.javax.security.auth.callback.Callback[])>(r37);

        $r26 = virtualinvoke $r13.<org.apache.harmony.javax.security.auth.callback.PasswordCallback: char[] getPassword()>();

        varReplacer16904 = null;

        virtualinvoke $r25.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer16904, $r26);

     label18:
        goto label06;

     label19:
        $r27 := @caughtexception;

        $r13 = null;

        $r14 = null;

        goto label06;

     label20:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r9 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.lang.String getKeystoreType()>();

        varReplacer16913 = "Apple";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(varReplacer16913);

        if $z0 == 0 goto label21;

        varReplacer16918 = "KeychainStore";

        varReplacer16919 = "Apple";

        $r14 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(varReplacer16918, varReplacer16919);

        varReplacer16922 = null;

        varReplacer16923 = null;

        virtualinvoke $r14.<java.security.KeyStore: void load(java.io.InputStream,char[])>(varReplacer16922, varReplacer16922);

        $r13 = null;

        goto label06;

     label21:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r9 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.lang.String getKeystoreType()>();

        $r25 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r9);

        $r14 = $r25;

        r35 = new org.apache.harmony.javax.security.auth.callback.PasswordCallback;

        $r13 = r35;

     label22:
        varReplacer16914 = "Keystore Password: ";

        varReplacer16915 = 0;

        specialinvoke r35.<org.apache.harmony.javax.security.auth.callback.PasswordCallback: void <init>(java.lang.String,boolean)>(varReplacer16914, varReplacer16915);

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r3 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: org.apache.harmony.javax.security.auth.callback.CallbackHandler getCallbackHandler()>();

        $r22 = newarray (org.apache.harmony.javax.security.auth.callback.Callback)[1];

        $r22[0] = $r13;

        r37 = (org.apache.harmony.javax.security.auth.callback.Callback[]) $r22;

        interfaceinvoke $r3.<org.apache.harmony.javax.security.auth.callback.CallbackHandler: void handle(org.apache.harmony.javax.security.auth.callback.Callback[])>(r37);

     label23:
        r36 = new java.io.FileInputStream;

        $r28 = r36;

     label24:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r9 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: java.lang.String getKeystorePath()>();

        specialinvoke r36.<java.io.FileInputStream: void <init>(java.lang.String)>($r9);

        $r26 = virtualinvoke $r13.<org.apache.harmony.javax.security.auth.callback.PasswordCallback: char[] getPassword()>();

        virtualinvoke $r25.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r28, $r26);

     label25:
        goto label06;

     label26:
        $r29 := @caughtexception;

        $r13 = null;

        $r14 = null;

        goto label06;

     label27:
        $r26 = virtualinvoke $r13.<org.apache.harmony.javax.security.auth.callback.PasswordCallback: char[] getPassword()>();

        virtualinvoke $r15.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r14, $r26);

        virtualinvoke $r13.<org.apache.harmony.javax.security.auth.callback.PasswordCallback: void clearPassword()>();

     label28:
        goto label08;

     label29:
        $r30 := @caughtexception;

        $r4 = null;

        goto label01;

     label30:
        $r31 := @caughtexception;

        r38 = (java.io.IOException) $r31;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void setConnectionException(java.io.IOException)>(r38);

        throw $r31;

     label31:
        $r5 = $r2;

        goto label02;

     label32:
        $r4 = null;

        goto label01;

        catch java.io.IOException from label03 to label04 with label30;
        catch java.lang.NullPointerException from label07 to label09 with label29;
        catch java.lang.Exception from label11 to label12 with label19;
        catch java.lang.Exception from label13 to label14 with label19;
        catch java.lang.Exception from label15 to label16 with label19;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Exception from label22 to label23 with label26;
        catch java.lang.Exception from label24 to label25 with label26;
        catch java.lang.NullPointerException from label27 to label28 with label29;
    }

    protected void processPacket(org.jivesoftware.smack.packet.Packet)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.packet.Packet $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.packet.Packet;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void processPacket(org.jivesoftware.smack.packet.Packet)>($r1);

        return;
    }

    protected void sendPacketInternal(org.jivesoftware.smack.packet.Packet) throws org.jivesoftware.smack.SmackException$NotConnectedException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.packet.Packet $r1;
        org.jivesoftware.smack.tcp.PacketWriter $r2;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.packet.Packet;

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        virtualinvoke $r2.<org.jivesoftware.smack.tcp.PacketWriter: void sendPacket(org.jivesoftware.smack.packet.Packet)>($r1);

        return;
    }

    protected void serverRequiresBinding()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void serverRequiresBinding()>();

        return;
    }

    protected void serverSupportsAccountCreation()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void serverSupportsAccountCreation()>();

        return;
    }

    protected void serverSupportsSession()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void serverSupportsSession()>();

        return;
    }

    void setAvailableCompressionMethods(java.util.Collection)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.Collection $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.util.Collection;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.Collection compressionMethods> = $r1;

        return;
    }

    public void setParsingExceptionCallback(org.jivesoftware.smack.parsing.ParsingExceptionCallback)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        org.jivesoftware.smack.parsing.ParsingExceptionCallback $r1;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: org.jivesoftware.smack.parsing.ParsingExceptionCallback;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.parsing.ParsingExceptionCallback parsingExceptionCallback> = $r1;

        return;
    }

    protected void setRosterVersioningSupported()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void setRosterVersioningSupported()>();

        return;
    }

    protected void setServiceCapsNode(java.lang.String)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void setServiceCapsNode(java.lang.String)>($r1);

        return;
    }

    protected void setServiceName(java.lang.String)
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.String $r1;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void setServiceName(java.lang.String)>($r1);

        return;
    }

    protected void shutdown()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;
        org.jivesoftware.smack.tcp.PacketReader $r3;
        org.jivesoftware.smack.tcp.PacketWriter $r4;
        java.net.Socket $r5;
        boolean $z0;
        java.lang.Exception $r6;
        int varReplacer16178, varReplacer16181, varReplacer16183, varReplacer16184;
        java.lang.String varReplacer16179;
        null_type varReplacer16180, varReplacer16182;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketReader packetReader>;

        if $r3 == null goto label1;

        $r3 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketReader packetReader>;

        virtualinvoke $r3.<org.jivesoftware.smack.tcp.PacketReader: void shutdown()>();

     label1:
        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        if $r4 == null goto label2;

        $r4 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        virtualinvoke $r4.<org.jivesoftware.smack.tcp.PacketWriter: void shutdown()>();

     label2:
        varReplacer16181 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean socketClosed> = varReplacer16181;

     label3:
        $r5 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.net.Socket socket>;

        virtualinvoke $r5.<java.net.Socket: void close()>();

     label4:
        $z0 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean authenticated>;

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void setWasAuthenticated(boolean)>($z0);

        varReplacer16178 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean authenticated> = varReplacer16178;

        varReplacer16183 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean connected> = varReplacer16183;

        varReplacer16184 = 0;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean usingTLS> = varReplacer16184;

        varReplacer16182 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Reader reader> = varReplacer16182;

        varReplacer16180 = null;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer> = varReplacer16180;

        return;

     label5:
        $r6 := @caughtexception;

        $r1 = <org.jivesoftware.smack.tcp.XMPPTCPConnection: java.util.logging.Logger LOGGER>;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        varReplacer16179 = "shutdown";

        virtualinvoke $r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, varReplacer16179, $r6);

        goto label4;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    void startStreamCompression() throws java.io.IOException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.io.Writer $r1;
        org.jivesoftware.smack.tcp.PacketWriter $r2;
        int varReplacer16924;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        varReplacer16924 = 1;

        $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: boolean serverAckdCompression> = varReplacer16924;

        specialinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void initReaderAndWriter()>();

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        virtualinvoke $r2.<org.jivesoftware.smack.tcp.PacketWriter: void setWriter(java.io.Writer)>($r1);

        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.tcp.PacketWriter packetWriter>;

        virtualinvoke $r2.<org.jivesoftware.smack.tcp.PacketWriter: void openStream()>();

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void streamCompressionNegotiationDone()>();

        return;
    }

    void startTLSReceived(boolean) throws java.io.IOException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        boolean $z0;
        org.jivesoftware.smack.ConnectionConfiguration $r1;
        org.jivesoftware.smack.ConnectionConfiguration$SecurityMode $r2, $r3;
        java.lang.IllegalStateException $r4;
        java.io.Writer $r5;
        java.lang.String varReplacer16892, varReplacer16893;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r2 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode getSecurityMode()>();

        $r3 = <org.jivesoftware.smack.ConnectionConfiguration$SecurityMode: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode disabled>;

        if $r2 != $r3 goto label1;

        $r4 = new java.lang.IllegalStateException;

        varReplacer16893 = "TLS required by server but not allowed by connection configuration";

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer16893);

        virtualinvoke $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: void notifyConnectionError(java.lang.Exception)>($r4);

        return;

     label1:
        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: org.jivesoftware.smack.ConnectionConfiguration config>;

        $r2 = virtualinvoke $r1.<org.jivesoftware.smack.ConnectionConfiguration: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode getSecurityMode()>();

        $r3 = <org.jivesoftware.smack.ConnectionConfiguration$SecurityMode: org.jivesoftware.smack.ConnectionConfiguration$SecurityMode disabled>;

        if $r2 == $r3 goto label2;

        $r5 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        varReplacer16892 = "<starttls xmlns=\"urn:ietf:params:xml:ns:xmpp-tls\"/>";

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>(varReplacer16892);

        $r5 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.io.Writer writer>;

        virtualinvoke $r5.<java.io.Writer: void flush()>();

     label2:
        return;
    }

    void streamCompressionNegotiationDone()
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;
        java.lang.Object $r1, $r2;
        java.lang.Throwable $r3;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        $r1 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.Object compressionLock>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<org.jivesoftware.smack.tcp.XMPPTCPConnection: java.lang.Object compressionLock>;

        virtualinvoke $r2.<java.lang.Object: void notify()>();

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void throwConnectionExceptionOrNoResponse() throws java.io.IOException, org.jivesoftware.smack.SmackException$NoResponseException
    {
        org.jivesoftware.smack.tcp.XMPPTCPConnection $r0;

        nop;

        $r0 := @this: org.jivesoftware.smack.tcp.XMPPTCPConnection;

        specialinvoke $r0.<org.jivesoftware.smack.XMPPConnection: void throwConnectionExceptionOrNoResponse()>();

        return;
    }
}
