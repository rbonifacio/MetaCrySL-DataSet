Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: varReplacer2812
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer2812)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: b6b66ccd59aa9daf69313989cc375d236d6fa0d30fc1e654fa8f05ee3dbff3a
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $z0 = virtualinvoke $r3.<java.security.Signature: boolean verify(byte[])>($r4)
		Method: <com.clientmate.android.trivialdrivesample.util.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: 50d20e0d863bf9aaaccbe6d5f71c736bbbd4ab16c1ca9b261b70d21b96f5b665
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer2812)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: d9e9781dc386e7a628aa8a6c586816a55df83b3e01cb942054a452a34912b47f
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 8de80dfde750b54a8dc4f0a31eeee957e344d00f114bdcad0dca32f685f88fae
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer2753)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: cf98ba93a95137ae2459c51b05e196ad48a14c4224221bbbe3ac6a7f587b7472
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: bf58e9be970bb4d9b8b9779a2db2332dda7629a9233a386367015fa09918a479
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 9a39546100165a37e889fd7cf2a6477829cbb9e55b2e972d72febc045529fcda
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2813)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: b0cc096112c18dc387cda67decca825abdd6a0155304db8b0973c86683cb1bd
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2749)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 5be4dc31507f4499c7c6c69c4801e426349bd1ca42589668097bd8e234bf77d6
		Secure: false
	Object:
		Variable: varReplacer2748
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer2748)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 49fb3cd9008f7a869b9fc81e62ba3c0c9b073622b350e7043a1224ecff49b31d
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer2751)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: 861adbf5b3b9786f6fc3c4f0c7abafdf0f7bee0b63277c8b79cc53b2c4ed060e
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: fa136a602799631e6b4b59350ee9e51490addbaa3e0a4d88762b38031b45344d
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 4755c5e34f3121596ca9a7f33f965995bb6b82fd562703d3839051d031b7eed3
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.Signature
		Statement: $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer5036)
		Method: <com.clientmate.android.trivialdrivesample.util.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>
		SHA-256: aee7977d160dd1877df3bd9f5d12f41d31ecd8a5abac352dbc7e1d0a75970883
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer2748)
		Method: <com.tnstory.chongmu.chongmunote2.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: c56198eec7f9d92b02ae27dd052c0e8ac94494984d795da359933dc7302f049
		Secure: false

Findings in Java Class: com.tnstory.chongmu.chongmunote2.SimpleCrypto

	 in Method: byte[] decrypt(byte[],byte[])
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #5be4dc31507f4499c7c6c69c4801e426349bd1ca42589668097bd8e234bf77d6)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2749)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2747, $r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #5be4dc31507f4499c7c6c69c4801e426349bd1ca42589668097bd8e234bf77d6)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2749)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer2748)


	 in Method: byte[] encrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2814, $r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #b0cc096112c18dc387cda67decca825abdd6a0155304db8b0973c86683cb1bd)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2813)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #b0cc096112c18dc387cda67decca825abdd6a0155304db8b0973c86683cb1bd)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2813)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer2812)


	 in Method: byte[] getRawKey(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			Second parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(varReplacer2752, $r2)


Findings in Java Class: com.clientmate.android.trivialdrivesample.util.Security

	 in Method: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Pubkey
			at statement: virtualinvoke $r3.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 15

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 6
	ConstraintError: 4
=====================================================================