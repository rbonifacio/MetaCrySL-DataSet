class com.tss21.netapi.api.util.a extends com.loopj.android.http.AsyncHttpClient
{
    private javax.net.ssl.SSLContext a;
    private org.apache.http.conn.ssl.SSLSocketFactory b;

    public void <init>()
    {
        com.tss21.netapi.api.util.a $r0;
        java.lang.String $r1, varReplacer3344, varReplacer3345;
        javax.net.ssl.TrustManagerFactory $r2;
        javax.net.ssl.TrustManager[] $r3;
        int $i0;
        java.security.NoSuchAlgorithmException $r4, r13;
        java.lang.Exception $r5;
        javax.net.ssl.TrustManager $r6;
        javax.net.ssl.X509TrustManager $r7;
        javax.net.ssl.SSLContext $r8;
        java.lang.Object[] $r9;
        com.tss21.netapi.api.util.b $r10, r14;
        org.apache.http.conn.ssl.SSLSocketFactory $r11;
        org.apache.http.conn.ssl.X509HostnameVerifier $r12;
        null_type varReplacer3346, varReplacer3347, varReplacer3348;

        nop;

        $r0 := @this: com.tss21.netapi.api.util.a;

        specialinvoke $r0.<com.loopj.android.http.AsyncHttpClient: void <init>()>();

     label01:
        $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1);

        varReplacer3346 = null;

        virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer3346);

        $r3 = virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        $i0 = lengthof $r3;

     label02:
        if $i0 != 0 goto label05;

        r13 = new java.security.NoSuchAlgorithmException;

        $r4 = r13;

     label03:
        varReplacer3345 = "no trust manager found";

        specialinvoke r13.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>(varReplacer3345);

        throw $r4;

     label04:
        $r5 := @caughtexception;

        return;

     label05:
        $r6 = $r3[0];

        $r7 = (javax.net.ssl.X509TrustManager) $r6;

        varReplacer3344 = "TLS";

        $r8 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3344);

        $r0.<com.tss21.netapi.api.util.a: javax.net.ssl.SSLContext a> = $r8;

        $r8 = $r0.<com.tss21.netapi.api.util.a: javax.net.ssl.SSLContext a>;

        $r9 = newarray (javax.net.ssl.TrustManager)[1];

        $r9[0] = $r7;

        $r3 = (javax.net.ssl.TrustManager[]) $r9;

        varReplacer3347 = null;

        varReplacer3348 = null;

        virtualinvoke $r8.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3347, $r3, varReplacer3347);

     label06:
        r14 = new com.tss21.netapi.api.util.b;

        $r10 = r14;

     label07:
        $r8 = $r0.<com.tss21.netapi.api.util.a: javax.net.ssl.SSLContext a>;

        specialinvoke r14.<com.tss21.netapi.api.util.b: void <init>(javax.net.ssl.SSLContext)>($r8);

        $r0.<com.tss21.netapi.api.util.a: org.apache.http.conn.ssl.SSLSocketFactory b> = $r10;

        $r11 = $r0.<com.tss21.netapi.api.util.a: org.apache.http.conn.ssl.SSLSocketFactory b>;

     label08:
        $r12 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER>;

     label09:
        virtualinvoke $r11.<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>($r12);

        $r11 = $r0.<com.tss21.netapi.api.util.a: org.apache.http.conn.ssl.SSLSocketFactory b>;

        virtualinvoke $r0.<com.tss21.netapi.api.util.a: void setSSLSocketFactory(org.apache.http.conn.ssl.SSLSocketFactory)>($r11);

     label10:
        return;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label03 to label04 with label04;
        catch java.lang.Exception from label05 to label06 with label04;
        catch java.lang.Exception from label07 to label08 with label04;
        catch java.lang.Exception from label09 to label10 with label04;
    }
}
