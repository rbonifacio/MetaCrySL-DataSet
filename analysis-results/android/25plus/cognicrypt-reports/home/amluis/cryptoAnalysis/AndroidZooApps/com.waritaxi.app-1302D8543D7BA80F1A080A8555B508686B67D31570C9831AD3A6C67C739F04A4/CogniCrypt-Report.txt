Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r3)
		Method: <cn.jpush.android.util.a: java.lang.String a(byte[])>
		SHA-256: edf8d4512ea4d685450853f37af1c60bdb4661ea96e0a8476dfe9d41f4bd92a
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r0)
		Method: <cn.jpush.android.util.a: java.lang.String a(byte[])>
		SHA-256: c4d4007881f660d31095047c858a7cddf0ade719a9b3b9bb76358ae5434d949b
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <cn.jpush.android.util.ai: java.lang.String b(java.lang.String)>
		SHA-256: e3190b6f4323befbf18670a0eb10cd2790133ea7e985cb6f92d999f647f560e9
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4)
		Method: <cn.jpush.android.util.a: java.lang.String b(java.lang.String)>
		SHA-256: 8e4d3ce3f6a3961627a164a718666216cbb71ad4d5d8d2a6bc5f52f33a56ba40
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r1)
		Method: <cn.jpush.android.util.ai: java.lang.String b(java.lang.String)>
		SHA-256: 589f10f65a2d04fe4b0bb06abf8101daf047c6762569191c753224ee717411cc
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r4, varReplacer3065, $i0, $r2, varReplacer3065)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: a9c51fd5dded87ca16ac531924f8bbcd135f7e1f7d379139f45e8d431172ac69
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.Cipher
		Statement: $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer3073, varReplacer3074)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: 6050c1a5d29210f6201daf12bb454f013179a6820fbd29745c7a91c465a05a04
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r5.<javax.crypto.Cipher: int doFinal(byte[],int)>($r2, $i0)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: 8df24129554b6fedc63b16805f88a2dbfe55ed3af1bd3740681b630d8d55eee6
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer5999)
		Method: <com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator: byte[] getMD5(byte[])>
		SHA-256: 5ff7f80ca631742cb42068daccc352938ad5511f597a6003eb1723455ded9401
		Secure: true
	Object:
		Variable: varReplacer3076
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer3076)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: e6c5c5af5ea26694428301c08d7bc21927f1fbb93fd2ba8168a8f234ee4e3d34
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.MessageDigest
		Statement: $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3052)
		Method: <com.mob.tools.utils.Data: byte[] SHA1(byte[])>
		SHA-256: a805fefba48c712157d7ba517d7fe998773c9055ed2cee55d0195179a834e0e0
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <cn.jpush.android.util.a: java.lang.String b(java.lang.String)>
		SHA-256: f5d4bf9ca7f7fb9000cf6a89dae134f0d93e52312b490bf6d8a3635e0c274af1
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <cn.jpush.android.util.a: java.lang.String a(java.lang.String)>
		SHA-256: 67f8276464ff2b603934593edfd3991f3b602712d92e93712f83733b7783915
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r2)
		Method: <com.loopj.android.http.MySSLSocketFactory: java.security.KeyStore getKeystore()>
		SHA-256: d011df71b400b4926b84dec0cad6ffb90a5bd3d26c43a5974bec9e614ef5edf5
		Secure: true
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4)
		Method: <cn.jpush.android.service.o: int a()>
		SHA-256: 653797a3eb9e4ef0deb00eee8dbd188412609eac7343ec8708aa488926eaccbd
		Secure: true
	Object:
		Variable: $r7
		Type: java.security.MessageDigest
		Statement: $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4438)
		Method: <cn.sharesdk.wechat.utils.j: byte[] a(java.lang.String,java.lang.String,int)>
		SHA-256: 99e243e46a73f052aa24683c1be44877fdf4a97528e82aad5244feecd5aa8cab
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r5)
		Method: <cn.jpush.android.util.a: java.lang.String a(java.lang.String)>
		SHA-256: bfdf7a7690f99313d7d90ffe799c08accc3face2ec5e8c2f9d6c2ccbb3a7f821
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()
		Method: <cn.jpush.android.util.g: byte[] a(java.io.File)>
		SHA-256: 9d5518b928395bd05bce5b6b363adfca98533751c6f8b6369158fc7086bf8946
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.MessageDigest
		Statement: $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r4)
		Method: <cn.jpush.android.util.g: byte[] a(java.io.File)>
		SHA-256: c674f616d8a4149c10b3f91dfa9584390dcb6804f11b69608665967bac43ce50
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r4, varReplacer3065, $i0, $r2, varReplacer3065)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: c2d3b022ab8e64a1cac1c41d52cdfc5e7fcfe21aabb591d3067d4b9e3139556e
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer3076)
		Method: <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>
		SHA-256: 53a4f2620aed0f8137d0efa5fdf4c007a1c140055bc6d82d1a654cd7b6f69483
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator: byte[] getMD5(byte[])>
		SHA-256: ac2912fd2a8cc62f2d028959fdfebed1a18ae39f8a205fd829cc8080606487cd
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r2)
		Method: <cn.jpush.android.service.o: int a()>
		SHA-256: fd9d39511df74aea82f21cf2e65bf81d82654e9f49b3696b92868e26ab2ec055
		Secure: true
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer662)
		Method: <com.loopj.android.http.MySSLSocketFactory: void <init>(java.security.KeyStore)>
		SHA-256: 4daf50ae473d36c71934e23b5e2cd59ac4d7334f5f2e462844c65b3e7b478437
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.mob.tools.utils.Data: byte[] SHA1(byte[])>
		SHA-256: cdff87fc6ee152b4274d6b94084108209269e65da113e6beef5395960d55f5f3
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>()
		Method: <cn.sharesdk.wechat.utils.j: byte[] a(java.lang.String,java.lang.String,int)>
		SHA-256: 9093915e9c69f24e21e4ebaff597ca98d1c23ccf4250950c32c27bb4554e29d0
		Secure: true

Findings in Java Class: cn.jpush.android.util.g

	 in Method: byte[] a(java.io.File)
		TypestateError violating CrySL rule for java.security.MessageDigest (on Object #c674f616d8a4149c10b3f91dfa9584390dcb6804f11b69608665967bac43ce50)
			Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[])
			at statement: $r2 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>()


Findings in Java Class: com.mob.tools.utils.Data

	 in Method: byte[] AES128Encode(java.lang.String,java.lang.String)
		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint length(cipherText) + 0 < ciphertext_off + 0 could not be evaluted due to insufficient information.
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: int doFinal(byte[],int)>($r2, $i0)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer3076)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3069, $r3)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.Cipher
			Constraint length(pre_ciphertext) + 0 < pre_ciphertext_off + 0 could not be evaluted due to insufficient information.
			at statement: $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r4, varReplacer3065, $i0, $r2, varReplacer3065)


Findings in Java Class: com.loopj.android.http.MySSLSocketFactory

	 in Method: void <init>(java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer663, r5, varReplacer663)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer663, r5, varReplacer663)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 26

	CogniCrypt found the following violations. For details see description above.
	TypestateError: 1
	RequiredPredicateError: 4
	ImpreciseValueExtractionError: 2
=====================================================================