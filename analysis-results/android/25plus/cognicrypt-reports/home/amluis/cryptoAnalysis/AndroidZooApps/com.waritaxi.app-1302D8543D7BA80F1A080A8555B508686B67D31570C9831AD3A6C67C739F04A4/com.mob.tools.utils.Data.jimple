public class com.mob.tools.utils.Data extends java.lang.Object
{
    private static final java.lang.String CHAT_SET;

    public void <init>()
    {
        com.mob.tools.utils.Data $r0;

        $r0 := @this: com.mob.tools.utils.Data;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String AES128Decode(java.lang.String, byte[]) throws java.lang.Throwable
    {
        java.lang.String $r0;
        byte[] $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        if $r0 == null goto label1;

        if $r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r1 = staticinvoke <com.mob.tools.utils.Data: byte[] AES128Decode(byte[],byte[])>($r2, $r1);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "UTF-8");

        return $r0;
    }

    public static byte[] AES128Decode(byte[], byte[]) throws java.lang.Throwable
    {
        byte[] $r0, $r1, $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        int $i0;
        javax.crypto.Cipher $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        if $r0 == null goto label1;

        if $r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = newarray (byte)[16];

        $i0 = lengthof $r0;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 16);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, 0, $i0);

        $r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "AES");

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/ECB/NoPadding", "BC");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r3);

        $i0 = lengthof $r1;

        $i0 = virtualinvoke $r4.<javax.crypto.Cipher: int getOutputSize(int)>($i0);

        $r0 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke $r4.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r1, 0, $i0, $r0, 0);

        virtualinvoke $r4.<javax.crypto.Cipher: int doFinal(byte[],int)>($r0, $i0);

        return $r0;
    }

    public static byte[] AES128Encode(java.lang.String, java.lang.String) throws java.lang.Throwable
    {
        java.lang.String $r0, $r1, varReplacer3070, varReplacer3073, varReplacer3074, varReplacer3075, varReplacer3076;
        byte[] $r2, $r4;
        javax.crypto.spec.SecretKeySpec $r3;
        int $i0, varReplacer3065, varReplacer3066, varReplacer3067, varReplacer3068, varReplacer3069, varReplacer3071;
        javax.crypto.Cipher $r5;
        null_type varReplacer3072;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label1;

        if $r1 != null goto label2;

     label1:
        varReplacer3072 = null;

        return varReplacer3072;

     label2:
        varReplacer3075 = "UTF-8";

        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer3075);

        $r2 = newarray (byte)[16];

        $i0 = lengthof $r4;

        varReplacer3071 = 16;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, varReplacer3071);

        varReplacer3067 = 0;

        varReplacer3068 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, varReplacer3067, $r2, varReplacer3067, $i0);

        varReplacer3070 = "UTF-8";

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer3070);

        $r3 = new javax.crypto.spec.SecretKeySpec;

        varReplacer3076 = "AES";

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, varReplacer3076);

        varReplacer3073 = "AES/ECB/PKCS7Padding";

        varReplacer3074 = "BC";

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer3073, varReplacer3074);

        varReplacer3069 = 1;

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3069, $r3);

        $i0 = lengthof $r4;

        $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int getOutputSize(int)>($i0);

        $r2 = newarray (byte)[$i0];

        $i0 = lengthof $r4;

        varReplacer3065 = 0;

        varReplacer3066 = 0;

        $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r4, varReplacer3065, $i0, $r2, varReplacer3065);

        virtualinvoke $r5.<javax.crypto.Cipher: int doFinal(byte[],int)>($r2, $i0);

        return $r2;
    }

    public static byte[] AES128Encode(byte[], java.lang.String) throws java.lang.Throwable
    {
        byte[] $r0, $r2;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label1;

        if $r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r0 = staticinvoke <com.mob.tools.utils.Data: byte[] AES128Encode(byte[],byte[])>($r0, $r2);

        return $r0;
    }

    public static byte[] AES128Encode(byte[], byte[]) throws java.lang.Throwable
    {
        byte[] $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.Cipher $r3;
        int $i0;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "AES");

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/ECB/PKCS7Padding", "BC");

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r2);

        $i0 = lengthof $r1;

        $i0 = virtualinvoke $r3.<javax.crypto.Cipher: int getOutputSize(int)>($i0);

        $r0 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke $r3.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r1, 0, $i0, $r0, 0);

        virtualinvoke $r3.<javax.crypto.Cipher: int doFinal(byte[],int)>($r0, $i0);

        return $r0;
    }

    public static java.lang.String Base64AES(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r3;
        java.lang.Throwable $r2;
        byte[] $r4;
        boolean $z0;
        com.mob.tools.log.NLog $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label01;

        if $r1 != null goto label02;

     label01:
        return null;

     label02:
        $r3 = null;

     label03:
        $r4 = staticinvoke <com.mob.tools.utils.Data: byte[] AES128Encode(java.lang.String,java.lang.String)>($r1, $r0);

        $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, 0);

     label04:
        $r3 = $r0;

     label05:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

     label06:
        if $z0 != 0 goto label12;

     label07:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("\n");

     label08:
        if $z0 == 0 goto label12;

     label09:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "");

     label10:
        return $r0;

     label11:
        $r2 := @caughtexception;

        $r5 = staticinvoke <com.mob.tools.MobLog: com.mob.tools.log.NLog getInstance()>();

        virtualinvoke $r5.<com.mob.tools.log.NLog: int w(java.lang.Throwable)>($r2);

        return $r3;

     label12:
        return $r0;

        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static java.lang.String CRC32(byte[]) throws java.lang.Throwable
    {
        byte[] $r0;
        java.util.zip.CRC32 $r1;
        long $l0, $l1;
        java.lang.StringBuilder $r2;
        int $i2;
        byte $b3;
        java.lang.Object[] $r3;
        short $s4;
        java.lang.Integer $r4;
        java.lang.String $r5;
        char $c5;

        $r0 := @parameter0: byte[];

        $r1 = new java.util.zip.CRC32;

        specialinvoke $r1.<java.util.zip.CRC32: void <init>()>();

        virtualinvoke $r1.<java.util.zip.CRC32: void update(byte[])>($r0);

        $l0 = virtualinvoke $r1.<java.util.zip.CRC32: long getValue()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $l1 = $l0 >>> 56;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r3 = newarray (java.lang.Object)[1];

        $s4 = $b3 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s4);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $l1 = $l0 >>> 48;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r3 = newarray (java.lang.Object)[1];

        $s4 = $b3 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s4);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $l1 = $l0 >>> 40;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r3 = newarray (java.lang.Object)[1];

        $s4 = $b3 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s4);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $l1 = $l0 >>> 32;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r3 = newarray (java.lang.Object)[1];

        $s4 = $b3 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s4);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $l1 = $l0 >>> 24;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r3 = newarray (java.lang.Object)[1];

        $s4 = $b3 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s4);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $l1 = $l0 >>> 16;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r3 = newarray (java.lang.Object)[1];

        $s4 = $b3 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s4);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $l1 = $l0 >>> 8;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r3 = newarray (java.lang.Object)[1];

        $s4 = $b3 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s4);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        $r3 = newarray (java.lang.Object)[1];

        $s4 = $b3 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s4);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label1:
        $c5 = virtualinvoke $r2.<java.lang.StringBuilder: char charAt(int)>(0);

        if $c5 != 48 goto label2;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>(0);

        goto label1;

     label2:
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        return $r5;
    }

    public static java.lang.String MD5(java.io.File)
    {
        java.io.File $r0;
        java.lang.Throwable $r1;
        java.io.FileInputStream $r2;
        boolean $z0;
        byte[] $r3;
        java.lang.String $r4;
        com.mob.tools.log.NLog $r5;

        $r0 := @parameter0: java.io.File;

        if $r0 == null goto label4;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r3 = staticinvoke <com.mob.tools.utils.Data: byte[] rawMD5(java.io.InputStream)>($r2);

        virtualinvoke $r2.<java.io.FileInputStream: void close()>();

     label2:
        if $r3 == null goto label4;

        $r4 = staticinvoke <com.mob.tools.utils.Data: java.lang.String toHex(byte[])>($r3);

        return $r4;

     label3:
        $r1 := @caughtexception;

        $r5 = staticinvoke <com.mob.tools.MobLog: com.mob.tools.log.NLog getInstance()>();

        virtualinvoke $r5.<com.mob.tools.log.NLog: int w(java.lang.Throwable)>($r1);

     label4:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.String MD5(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <com.mob.tools.utils.Data: byte[] rawMD5(java.lang.String)>($r0);

        if $r1 == null goto label2;

        $r0 = staticinvoke <com.mob.tools.utils.Data: java.lang.String toHex(byte[])>($r1);

        return $r0;

     label2:
        return null;
    }

    public static java.lang.String MD5(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        return null;

     label1:
        $r0 = staticinvoke <com.mob.tools.utils.Data: byte[] rawMD5(byte[])>($r0);

        if $r0 == null goto label2;

        $r1 = staticinvoke <com.mob.tools.utils.Data: java.lang.String toHex(byte[])>($r0);

        return $r1;

     label2:
        return null;
    }

    public static byte[] SHA1(java.io.File)
    {
        java.io.File $r0;
        java.lang.Throwable $r1;
        java.io.FileInputStream $r2;
        boolean $z0;
        byte[] $r3, $r4;
        com.mob.tools.log.NLog $r5;

        $r0 := @parameter0: java.io.File;

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r3 = null;

     label3:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r4 = staticinvoke <com.mob.tools.utils.Data: byte[] SHA1(java.io.InputStream)>($r2);

     label4:
        $r3 = $r4;

     label5:
        virtualinvoke $r2.<java.io.FileInputStream: void close()>();

     label6:
        return $r4;

     label7:
        $r1 := @caughtexception;

        $r5 = staticinvoke <com.mob.tools.MobLog: com.mob.tools.log.NLog getInstance()>();

        virtualinvoke $r5.<com.mob.tools.log.NLog: int w(java.lang.Throwable)>($r1);

        return $r3;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static byte[] SHA1(java.io.InputStream)
    {
        java.io.InputStream $r0;
        byte[] $r1;
        java.lang.Throwable $r2;
        java.security.MessageDigest $r3;
        int $i0;
        com.mob.tools.log.NLog $r4;

        $r0 := @parameter0: java.io.InputStream;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = newarray (byte)[1024];

        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r1);

     label2:
        if $i0 == -1 goto label5;

     label3:
        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[],int,int)>($r1, 0, $i0);

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r1);

     label4:
        goto label2;

     label5:
        $r1 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>();

     label6:
        return $r1;

     label7:
        $r2 := @caughtexception;

        $r4 = staticinvoke <com.mob.tools.MobLog: com.mob.tools.log.NLog getInstance()>();

        virtualinvoke $r4.<com.mob.tools.log.NLog: int w(java.lang.Throwable)>($r2);

        return null;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static byte[] SHA1(java.lang.String) throws java.lang.Throwable
    {
        java.lang.String $r0, varReplacer3049;
        boolean $z0;
        byte[] $r1;
        null_type varReplacer3050;

        nop;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label1;

        varReplacer3050 = null;

        return varReplacer3050;

     label1:
        varReplacer3049 = "utf-8";

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer3049);

        $r1 = staticinvoke <com.mob.tools.utils.Data: byte[] SHA1(byte[])>($r1);

        return $r1;
    }

    public static byte[] SHA1(byte[]) throws java.lang.Throwable
    {
        byte[] $r0;
        java.security.MessageDigest $r1;
        java.lang.String varReplacer3052;

        nop;

        $r0 := @parameter0: byte[];

        varReplacer3052 = "SHA-1";

        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer3052);

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte[])>($r0);

        $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>();

        return $r0;
    }

    public static java.lang.String base62(long)
    {
        int $i0;
        long $l1, $l3;
        byte $b2;
        java.lang.String $r0, $r2;
        java.lang.StringBuilder $r1;
        char $c4;

        $l1 := @parameter0: long;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        $r0 = "0";

     label1:
        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label3;

        $l3 = $l1 % 62L;

        $i0 = (int) $l3;

        $l1 = $l1 / 62L;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        $r0 = "";

        goto label1;

     label3:
        return $r0;
    }

    public static java.lang.String byteToHex(byte[])
    {
        byte[] $r0;
        int $i0, varReplacer3048;
        java.lang.String $r1;

        nop;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        varReplacer3048 = 0;

        $r1 = staticinvoke <com.mob.tools.utils.Data: java.lang.String byteToHex(byte[],int,int)>($r0, varReplacer3048, $i0);

        return $r1;
    }

    public static java.lang.String byteToHex(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;
        java.lang.StringBuffer $r1;
        java.lang.String $r2, varReplacer3051;
        java.lang.Object[] $r3;
        byte $b2;
        java.lang.Byte $r4;

        nop;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        if $r0 != null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label1:
        if $i0 >= $i1 goto label2;

        $r3 = newarray (java.lang.Object)[1];

        $b2 = $r0[$i0];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        $r3[0] = $r4;

        varReplacer3051 = "%02x";

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(varReplacer3051, $r3);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static byte[] rawMD5(java.io.InputStream)
    {
        java.io.InputStream $r0;
        byte[] $r1;
        java.lang.Throwable $r2;
        java.security.MessageDigest $r3;
        int $i0;
        com.mob.tools.log.NLog $r4;

        $r0 := @parameter0: java.io.InputStream;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = newarray (byte)[1024];

        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r1);

     label2:
        if $i0 == -1 goto label5;

     label3:
        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[],int,int)>($r1, 0, $i0);

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r1);

     label4:
        goto label2;

     label5:
        $r1 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>();

     label6:
        return $r1;

     label7:
        $r2 := @caughtexception;

        $r4 = staticinvoke <com.mob.tools.MobLog: com.mob.tools.log.NLog getInstance()>();

        virtualinvoke $r4.<com.mob.tools.log.NLog: int w(java.lang.Throwable)>($r2);

        return null;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static byte[] rawMD5(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1;
        byte[] $r2;
        com.mob.tools.log.NLog $r3;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

        $r2 = staticinvoke <com.mob.tools.utils.Data: byte[] rawMD5(byte[])>($r2);

     label2:
        return $r2;

     label3:
        $r1 := @caughtexception;

        $r3 = staticinvoke <com.mob.tools.MobLog: com.mob.tools.log.NLog getInstance()>();

        virtualinvoke $r3.<com.mob.tools.log.NLog: int w(java.lang.Throwable)>($r1);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static byte[] rawMD5(byte[])
    {
        byte[] $r0;
        java.io.ByteArrayInputStream $r1;
        java.lang.Throwable $r2;
        com.mob.tools.log.NLog $r3;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r0 = staticinvoke <com.mob.tools.utils.Data: byte[] rawMD5(java.io.InputStream)>($r1);

        virtualinvoke $r1.<java.io.ByteArrayInputStream: void close()>();

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <com.mob.tools.MobLog: com.mob.tools.log.NLog getInstance()>();

        virtualinvoke $r3.<com.mob.tools.log.NLog: int w(java.lang.Throwable)>($r2);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static byte[] rawRSADecode(byte[], byte[], int) throws java.lang.Throwable
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2;
        com.mob.tools.network.BufferedByteArrayOutputStream $r2;
        java.security.spec.PKCS8EncodedKeySpec $r3;
        java.security.KeyFactory $r4;
        java.security.PrivateKey $r5;
        java.security.interfaces.RSAPrivateKey $r6;
        javax.crypto.Cipher $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r3 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r3.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r1);

        $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r3);

        $r6 = (java.security.interfaces.RSAPrivateKey) $r5;

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/None/PKCS1Padding");

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r6);

        $i2 = 0;

        $i0 = $i0 / 8;

        $r2 = new com.mob.tools.network.BufferedByteArrayOutputStream;

        specialinvoke $r2.<com.mob.tools.network.BufferedByteArrayOutputStream: void <init>()>();

     label1:
        $i1 = lengthof $r0;

        $i1 = $i1 - $i2;

        if $i1 <= 0 goto label2;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $r1 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i2, $i1);

        $i1 = lengthof $r1;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, 0, $i1);

        $i2 = $i2 + $i0;

        goto label1;

     label2:
        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void close()>();

        $r0 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r0;
    }

    public static byte[] rawRSAEncode(byte[], byte[], int) throws java.lang.Throwable
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2;
        java.io.ByteArrayOutputStream $r2;
        java.security.spec.X509EncodedKeySpec $r3;
        java.security.KeyFactory $r4;
        java.security.PublicKey $r5;
        java.security.interfaces.RSAPublicKey $r6;
        javax.crypto.Cipher $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i0 = $i0 / 8;

        $i0 = $i0 + -11;

        $r3 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1);

        $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

        $r6 = (java.security.interfaces.RSAPublicKey) $r5;

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/None/PKCS1Padding");

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r6);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $i2 = 0;

     label1:
        $i1 = lengthof $r0;

        $i1 = $i1 - $i2;

        if $i1 <= 0 goto label2;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $r1 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i2, $i1);

        $i1 = lengthof $r1;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, 0, $i1);

        $i2 = $i2 + $i0;

        goto label1;

     label2:
        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void close()>();

        $r0 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r0;
    }

    private static java.lang.String toHex(byte[])
    {
        byte[] $r0;
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.Object[] $r2;
        byte $b2;
        java.lang.Byte $r3;
        java.lang.String $r4;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $r2 = newarray (java.lang.Object)[1];

        $b2 = $r0[$i0];

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String urlEncode(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1;
        com.mob.tools.log.NLog $r2;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <com.mob.tools.utils.Data: java.lang.String urlEncode(java.lang.String,java.lang.String)>($r0, "utf-8");

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $r2 = staticinvoke <com.mob.tools.MobLog: com.mob.tools.log.NLog getInstance()>();

        virtualinvoke $r2.<com.mob.tools.log.NLog: int w(java.lang.Throwable)>($r1);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.String urlEncode(java.lang.String, java.lang.String) throws java.lang.Throwable
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, $r1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "%20");

        return $r0;
    }
}
