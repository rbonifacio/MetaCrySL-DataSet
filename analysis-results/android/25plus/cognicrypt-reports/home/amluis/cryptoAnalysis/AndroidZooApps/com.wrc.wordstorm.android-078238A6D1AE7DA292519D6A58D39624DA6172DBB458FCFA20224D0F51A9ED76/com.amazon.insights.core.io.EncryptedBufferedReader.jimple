public class com.amazon.insights.core.io.EncryptedBufferedReader extends java.io.BufferedReader
{
    private static final int BUFFER_SIZE;
    private javax.crypto.Cipher cipher;
    private final java.io.BufferedReader reader;

    public void <init>(java.io.BufferedReader, javax.crypto.SecretKey)
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        java.io.BufferedReader $r1;
        javax.crypto.SecretKey $r2;
        java.lang.String $r3;
        javax.crypto.Cipher $r4;
        java.lang.Throwable $r5, $r7, $r8;
        java.lang.IllegalArgumentException $r6;
        int varReplacer5120;
        null_type varReplacer5121, varReplacer5122, varReplacer5123;

        nop;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $r1 := @parameter0: java.io.BufferedReader;

        $r2 := @parameter1: javax.crypto.SecretKey;

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: java.io.BufferedReader reader> = $r1;

     label1:
        $r3 = interfaceinvoke $r2.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r3);

     label2:
        $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: javax.crypto.Cipher cipher> = $r4;

        $r4 = $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: javax.crypto.Cipher cipher>;

     label3:
        varReplacer5120 = 2;

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer5120, $r2);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        varReplacer5122 = null;

        $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: javax.crypto.Cipher cipher> = varReplacer5122;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label6:
        $r7 := @caughtexception;

        varReplacer5121 = null;

        $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: javax.crypto.Cipher cipher> = varReplacer5121;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r7);

        throw $r6;

     label7:
        $r8 := @caughtexception;

        varReplacer5123 = null;

        $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: javax.crypto.Cipher cipher> = varReplacer5123;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r8);

        throw $r6;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label6;
        catch javax.crypto.NoSuchPaddingException from label3 to label4 with label6;
        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.InvalidKeyException from label3 to label4 with label7;
    }

    public void close()
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        java.io.BufferedReader $r1;

        nop;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $r1 = $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: java.io.BufferedReader reader>;

        virtualinvoke $r1.<java.io.BufferedReader: void close()>();

        return;
    }

    public void mark(int)
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This writer does not support the mark(int) method");

        throw $r1;
    }

    public boolean markSupported()
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        return 0;
    }

    public int read()
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This writer does not support the read() method");

        throw $r1;
    }

    public int read(java.nio.CharBuffer)
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        java.nio.CharBuffer $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $r1 := @parameter0: java.nio.CharBuffer;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This writer does not support the read(CharBuffer) method");

        throw $r2;
    }

    public int read(char[])
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        char[] $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $r1 := @parameter0: char[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This writer does not support the read(char[]) method");

        throw $r2;
    }

    public int read(char[], int, int)
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        char[] $r1;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This writer does not support the read(char[],int,int) method");

        throw $r2;
    }

    public java.lang.String readLine()
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        javax.crypto.Cipher $r1;
        java.io.IOException $r2, r28;
        java.io.BufferedReader $r3;
        java.lang.String $r4, r32, varReplacer6495, varReplacer6496, varReplacer6498;
        byte[] $r5;
        java.io.ByteArrayInputStream $r6, r29;
        java.io.ByteArrayOutputStream $r7, r30;
        java.util.zip.GZIPInputStream $r8, r31;
        int $i0, varReplacer6499;
        java.lang.Exception $r9, $r16, $r17, $r21, $r22, $r27;
        com.amazon.insights.core.io.DecryptionException $r10, $r15, $r23;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r24, $r25, $r26;
        null_type varReplacer6497;

        nop;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $r1 = $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: javax.crypto.Cipher cipher>;

        if $r1 != null goto label01;

        r28 = new java.io.IOException;

        varReplacer6498 = "Could not build a Cipher to decrpyt the underlying writer";

        specialinvoke r28.<java.io.IOException: void <init>(java.lang.String)>(varReplacer6498);

        throw r28;

     label01:
        $r3 = $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: java.io.BufferedReader reader>;

     label02:
        $r4 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if $r4 != null goto label04;

        varReplacer6497 = null;

        return varReplacer6497;

     label04:
        $r1 = $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: javax.crypto.Cipher cipher>;

     label05:
        varReplacer6496 = "UTF-8";

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>(varReplacer6496);

        $r5 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r5);

        $r5 = virtualinvoke $r1.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

     label06:
        r29 = new java.io.ByteArrayInputStream;

     label07:
        $r6 = r29;

     label08:
        specialinvoke r29.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

     label09:
        r30 = new java.io.ByteArrayOutputStream;

     label10:
        $r7 = r30;

     label11:
        specialinvoke r30.<java.io.ByteArrayOutputStream: void <init>()>();

     label12:
        $r5 = newarray (byte)[1024];

     label13:
        r31 = new java.util.zip.GZIPInputStream;

     label14:
        $r8 = r31;

     label15:
        specialinvoke r31.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r6);

     label16:
        $i0 = virtualinvoke $r8.<java.util.zip.GZIPInputStream: int read(byte[])>($r5);

     label17:
        if $i0 <= 0 goto label34;

     label18:
        varReplacer6499 = 0;

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r5, varReplacer6499, $i0);

     label19:
        goto label16;

     label20:
        $r9 := @caughtexception;

     label21:
        $r23 = new com.amazon.insights.core.io.DecryptionException;

     label22:
        $r10 = $r23;

     label23:
        specialinvoke $r23.<com.amazon.insights.core.io.DecryptionException: void <init>(java.lang.Exception)>($r9);

     label24:
        throw $r10;

     label25:
        $r11 := @caughtexception;

     label26:
        $r23 = new com.amazon.insights.core.io.DecryptionException;

     label27:
        $r10 = $r23;

     label28:
        $r9 = (java.lang.Exception) $r11;

        specialinvoke $r23.<com.amazon.insights.core.io.DecryptionException: void <init>(java.lang.Exception)>($r9);

        throw $r10;

     label29:
        $r12 := @caughtexception;

     label30:
        if $r8 == null goto label31;

        virtualinvoke $r8.<java.util.zip.GZIPInputStream: void close()>();

     label31:
        if $r6 == null goto label32;

        virtualinvoke $r6.<java.io.ByteArrayInputStream: void close()>();

     label32:
        if $r7 == null goto label33;

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

     label33:
        throw $r12;

     label34:
        r32 = new java.lang.String;

     label35:
        $r5 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        varReplacer6495 = "UTF-8";

        specialinvoke r32.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, varReplacer6495);

     label36:
        virtualinvoke $r8.<java.util.zip.GZIPInputStream: void close()>();

        virtualinvoke $r6.<java.io.ByteArrayInputStream: void close()>();

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

        return r32;

     label37:
        $r13 := @caughtexception;

        $r7 = null;

        $r6 = null;

        $r8 = null;

        $r14 = $r13;

     label38:
        $r23 = new com.amazon.insights.core.io.DecryptionException;

     label39:
        $r10 = $r23;

     label40:
        $r9 = (java.lang.Exception) $r14;

        specialinvoke $r23.<com.amazon.insights.core.io.DecryptionException: void <init>(java.lang.Exception)>($r9);

        throw $r10;

     label41:
        $r10 := @caughtexception;

        $r7 = null;

        $r6 = null;

        $r8 = null;

        $r15 = $r10;

     label42:
        throw $r15;

     label43:
        $r16 := @caughtexception;

        $r7 = null;

        $r6 = null;

        $r8 = null;

        $r17 = $r16;

     label44:
        r28 = new java.io.IOException;

     label45:
        $r2 = r28;

     label46:
        $r4 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke r28.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label47:
        $r18 := @caughtexception;

        $r7 = null;

        $r6 = null;

        $r8 = null;

        $r12 = $r18;

        goto label30;

     label48:
        $r19 := @caughtexception;

        $r7 = null;

        $r12 = $r19;

        $r8 = null;

        goto label30;

     label49:
        $r20 := @caughtexception;

        $r8 = null;

        $r12 = $r20;

        goto label30;

     label50:
        $r21 := @caughtexception;

        $r7 = null;

        $r17 = $r21;

        $r8 = null;

        goto label44;

     label51:
        $r22 := @caughtexception;

        $r8 = null;

        $r17 = $r22;

        goto label44;

     label52:
        $r17 := @caughtexception;

        goto label44;

     label53:
        $r23 := @caughtexception;

        $r7 = null;

        $r15 = $r23;

        $r8 = null;

        goto label42;

     label54:
        $r15 := @caughtexception;

        goto label42;

     label55:
        $r24 := @caughtexception;

        $r7 = null;

        $r14 = $r24;

        $r8 = null;

        goto label38;

     label56:
        $r14 := @caughtexception;

        goto label38;

     label57:
        $r25 := @caughtexception;

        $r7 = null;

        $r6 = null;

        $r8 = null;

        $r11 = $r25;

        goto label26;

     label58:
        $r26 := @caughtexception;

        $r7 = null;

        $r11 = $r26;

        $r8 = null;

        goto label26;

     label59:
        $r27 := @caughtexception;

        $r8 = null;

        $r9 = $r27;

        goto label21;

        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label57;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label57;
        catch javax.crypto.IllegalBlockSizeException from label08 to label09 with label57;
        catch javax.crypto.BadPaddingException from label02 to label03 with label37;
        catch javax.crypto.BadPaddingException from label05 to label06 with label37;
        catch javax.crypto.BadPaddingException from label08 to label09 with label37;
        catch com.amazon.insights.core.io.DecryptionException from label02 to label03 with label41;
        catch com.amazon.insights.core.io.DecryptionException from label05 to label06 with label41;
        catch com.amazon.insights.core.io.DecryptionException from label08 to label09 with label41;
        catch java.lang.Exception from label01 to label03 with label43;
        catch java.lang.Exception from label04 to label06 with label43;
        catch java.lang.Exception from label08 to label09 with label43;
        catch java.lang.Throwable from label01 to label03 with label47;
        catch java.lang.Throwable from label04 to label07 with label47;
        catch java.lang.Throwable from label08 to label09 with label47;
        catch javax.crypto.IllegalBlockSizeException from label11 to label12 with label58;
        catch javax.crypto.BadPaddingException from label11 to label12 with label55;
        catch com.amazon.insights.core.io.DecryptionException from label11 to label12 with label53;
        catch java.lang.Exception from label11 to label12 with label50;
        catch java.lang.Throwable from label09 to label10 with label48;
        catch java.lang.Throwable from label11 to label12 with label48;
        catch java.lang.Exception from label12 to label13 with label51;
        catch java.lang.Exception from label15 to label16 with label59;
        catch java.lang.Throwable from label13 to label14 with label49;
        catch java.lang.Throwable from label15 to label16 with label49;
        catch java.lang.Exception from label16 to label17 with label20;
        catch java.lang.Exception from label18 to label19 with label20;
        catch java.lang.Throwable from label16 to label17 with label29;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch javax.crypto.IllegalBlockSizeException from label23 to label24 with label25;
        catch javax.crypto.BadPaddingException from label23 to label24 with label56;
        catch com.amazon.insights.core.io.DecryptionException from label23 to label25 with label54;
        catch java.lang.Exception from label23 to label25 with label52;
        catch java.lang.Throwable from label21 to label22 with label29;
        catch java.lang.Throwable from label23 to label25 with label29;
        catch java.lang.Throwable from label26 to label27 with label29;
        catch java.lang.Throwable from label28 to label29 with label29;
        catch javax.crypto.IllegalBlockSizeException from label35 to label36 with label25;
        catch javax.crypto.BadPaddingException from label35 to label36 with label56;
        catch com.amazon.insights.core.io.DecryptionException from label35 to label36 with label54;
        catch java.lang.Exception from label35 to label36 with label52;
        catch java.lang.Throwable from label34 to label35 with label29;
        catch java.lang.Throwable from label35 to label36 with label29;
        catch java.lang.Throwable from label38 to label39 with label29;
        catch java.lang.Throwable from label40 to label41 with label29;
        catch java.lang.Throwable from label42 to label43 with label29;
        catch java.lang.Throwable from label44 to label45 with label29;
        catch java.lang.Throwable from label46 to label47 with label29;
    }

    public boolean ready()
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        boolean $z0;
        java.io.BufferedReader $r1;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $r1 = $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: java.io.BufferedReader reader>;

        $z0 = virtualinvoke $r1.<java.io.BufferedReader: boolean ready()>();

        return $z0;
    }

    public void reset()
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        java.io.BufferedReader $r1;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $r1 = $r0.<com.amazon.insights.core.io.EncryptedBufferedReader: java.io.BufferedReader reader>;

        virtualinvoke $r1.<java.io.BufferedReader: void reset()>();

        return;
    }

    public long skip(long)
    {
        com.amazon.insights.core.io.EncryptedBufferedReader $r0;
        long $l0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: com.amazon.insights.core.io.EncryptedBufferedReader;

        $l0 := @parameter0: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This writer does not support the skip(long) method");

        throw $r1;
    }
}
