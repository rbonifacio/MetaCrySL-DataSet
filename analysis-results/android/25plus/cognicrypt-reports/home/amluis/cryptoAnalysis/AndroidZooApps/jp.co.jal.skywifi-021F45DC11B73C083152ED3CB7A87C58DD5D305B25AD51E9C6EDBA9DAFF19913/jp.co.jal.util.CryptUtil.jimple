public class jp.co.jal.util.CryptUtil extends java.lang.Object
{
    private static java.lang.String CIPHER_ALGORITHM;
    private static final byte[] COMMON_KEY;
    private static final int INITIAL_VECTOR_SIZE_BYTES;
    private static java.lang.String UUID_KEY;

    static void <clinit>()
    {
        byte[] $r0;
        java.lang.String varReplacer543, varReplacer544;

        nop;

        varReplacer543 = "AES";

        <jp.co.jal.util.CryptUtil: java.lang.String CIPHER_ALGORITHM> = varReplacer543;

        varReplacer544 = "temporary";

        <jp.co.jal.util.CryptUtil: java.lang.String UUID_KEY> = varReplacer544;

        $r0 = newarray (byte)[16];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 2;

        $r0[3] = 3;

        $r0[4] = 4;

        $r0[5] = 5;

        $r0[6] = 6;

        $r0[7] = 7;

        $r0[8] = 8;

        $r0[9] = 9;

        $r0[10] = 10;

        $r0[11] = 11;

        $r0[12] = 12;

        $r0[13] = 13;

        $r0[14] = 14;

        $r0[15] = 15;

        <jp.co.jal.util.CryptUtil: byte[] COMMON_KEY> = $r0;

        return;
    }

    public void <init>()
    {
        jp.co.jal.util.CryptUtil $r0;

        $r0 := @this: jp.co.jal.util.CryptUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.security.Key createKey(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2, varReplacer565;
        byte[] $r3;
        java.lang.StringBuilder $r4;
        javax.crypto.spec.SecretKeySpec $r5;
        int varReplacer566, varReplacer567, varReplacer568;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.String;

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        varReplacer568 = 2;

        $r3 = staticinvoke <android.util.Base64: byte[] encode(byte[],int)>($r3, varReplacer568);

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        varReplacer565 = "J8AJGAY34U8YGAHR";

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer565);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer566 = 0;

        varReplacer567 = 16;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(varReplacer566, varReplacer567);

        $r5 = new javax.crypto.spec.SecretKeySpec;

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r0 = <jp.co.jal.util.CryptUtil: java.lang.String CIPHER_ALGORITHM>;

        specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r0);

        return $r5;
    }

    private static java.lang.String createKeyBase(android.content.Context)
    {
        android.content.Context $r0;
        java.util.UUID $r1;
        java.lang.String $r2, $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r2 = virtualinvoke $r1.<java.util.UUID: java.lang.String toString()>();

        $r3 = <jp.co.jal.util.CryptUtil: java.lang.String UUID_KEY>;

        staticinvoke <jp.co.jal.common.DefaultSharedPreferencesManager: void setPreference(android.content.Context,java.lang.String,java.lang.String)>($r0, $r3, $r2);

        return $r2;
    }

    public static java.lang.String decode(android.content.Context, java.lang.String, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r2, $r4, varReplacer546, varReplacer547, varReplacer550;
        java.lang.Exception $r3;
        boolean $z0;
        java.security.Key $r5;
        javax.crypto.Cipher $r6;
        byte[] $r7;
        int varReplacer545, varReplacer548, varReplacer549;

        nop;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <jp.co.jal.util.CommonUtil: boolean isBlank(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        varReplacer550 = "";

        return varReplacer550;

     label1:
        $r4 = staticinvoke <jp.co.jal.util.CryptUtil: java.lang.String getKeyBase(android.content.Context)>($r0);

        varReplacer547 = "J8AJGAY34U8YGAHR";

        $r5 = staticinvoke <jp.co.jal.util.CryptUtil: java.security.Key createKey(java.lang.String,java.lang.String)>($r4, varReplacer547);

     label2:
        $r2 = <jp.co.jal.util.CryptUtil: java.lang.String CIPHER_ALGORITHM>;

     label3:
        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2);

        varReplacer548 = 2;

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer548, $r5);

        $r7 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        varReplacer545 = 0;

        $r7 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r7, varReplacer545);

        $r7 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r7);

     label4:
        $r1 = new java.lang.String;

     label5:
        varReplacer549 = 0;

        $r7 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r7, varReplacer549);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r7);

     label6:
        return $r1;

     label7:
        $r3 := @caughtexception;

        varReplacer546 = "";

        return varReplacer546;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static byte[] decrypt(byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <jp.co.jal.util.CryptUtil: byte[] getBytes(byte[],int,int)>($r0, 0, 16);

        $i0 = lengthof $r0;

        $i0 = $i0 + -16;

        $r0 = staticinvoke <jp.co.jal.util.CryptUtil: byte[] getBytes(byte[],int,int)>($r0, 16, $i0);

        $r2 = <jp.co.jal.util.CryptUtil: byte[] COMMON_KEY>;

        $r0 = staticinvoke <jp.co.jal.util.CryptUtil: byte[] decrypt(byte[],byte[],byte[])>($r0, $r2, $r1);

        $r0 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r0, 0);

        return $r0;
    }

    private static byte[] decrypt(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        javax.crypto.spec.IvParameterSpec $r3, r13;
        javax.crypto.spec.SecretKeySpec $r4, r12;
        javax.crypto.Cipher $r5;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Exception r14;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        r12 = new javax.crypto.spec.SecretKeySpec;

        $r4 = r12;

     label01:
        specialinvoke r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

     label02:
        r13 = new javax.crypto.spec.IvParameterSpec;

        $r3 = r13;

     label03:
        specialinvoke r13.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2);

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r4, $r3);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label04:
        return $r0;

     label05:
        $r6 := @caughtexception;

        r14 = (java.lang.Exception) $r6;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

     label06:
        return null;

     label07:
        $r7 := @caughtexception;

        r14 = (java.lang.Exception) $r7;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

     label08:
        $r8 := @caughtexception;

        r14 = (java.lang.Exception) $r8;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

     label09:
        $r9 := @caughtexception;

        r14 = (java.lang.Exception) $r9;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

     label10:
        $r10 := @caughtexception;

        r14 = (java.lang.Exception) $r10;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

     label11:
        $r11 := @caughtexception;

        r14 = (java.lang.Exception) $r11;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label05;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label07;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label07;
        catch java.security.InvalidKeyException from label01 to label02 with label08;
        catch java.security.InvalidKeyException from label03 to label04 with label08;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label09;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label09;
        catch javax.crypto.BadPaddingException from label01 to label02 with label10;
        catch javax.crypto.BadPaddingException from label03 to label04 with label10;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label11;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label11;
    }

    public static java.lang.String encode(android.content.Context, java.lang.String, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r2, $r4, $r5;
        java.lang.Exception $r3;
        boolean $z0;
        java.security.Key $r6;
        javax.crypto.Cipher $r7;
        byte[] $r8;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <jp.co.jal.util.CommonUtil: boolean isBlank(java.lang.String)>($r1);

        if $z0 == 0 goto label01;

        return "";

     label01:
        $r4 = staticinvoke <jp.co.jal.util.CryptUtil: java.lang.String getKeyBase(android.content.Context)>($r0);

     label02:
        $r5 = $r4;

        if $r4 != null goto label05;

     label03:
        $r4 = staticinvoke <jp.co.jal.util.CryptUtil: java.lang.String createKeyBase(android.content.Context)>($r0);

     label04:
        $r5 = $r4;

     label05:
        $r6 = staticinvoke <jp.co.jal.util.CryptUtil: java.security.Key createKey(java.lang.String,java.lang.String)>($r5, $r2);

     label06:
        $r2 = <jp.co.jal.util.CryptUtil: java.lang.String CIPHER_ALGORITHM>;

     label07:
        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2);

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r6);

        $r8 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r8 = staticinvoke <android.util.Base64: byte[] encode(byte[],int)>($r8, 0);

        $r8 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r8);

     label08:
        $r1 = new java.lang.String;

     label09:
        $r8 = staticinvoke <android.util.Base64: byte[] encode(byte[],int)>($r8, 0);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r8);

     label10:
        return $r1;

     label11:
        $r3 := @caughtexception;

        return "";

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    public static byte[] encrypt(byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i1;
        java.nio.ByteBuffer $r3;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <android.util.Base64: byte[] encode(byte[],int)>($r0, 0);

        $r0 = staticinvoke <jp.co.jal.util.CryptUtil: byte[] generateInitialVector()>();

        $r2 = <jp.co.jal.util.CryptUtil: byte[] COMMON_KEY>;

        $r1 = staticinvoke <jp.co.jal.util.CryptUtil: byte[] encrypt(byte[],byte[],byte[])>($r1, $r2, $r0);

        $i1 = lengthof $r0;

        $i0 = lengthof $r1;

        $i0 = $i1 + $i0;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r0);

        $r3 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r1);

        $r0 = virtualinvoke $r3.<java.nio.ByteBuffer: byte[] array()>();

        return $r0;
    }

    private static byte[] encrypt(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        javax.crypto.spec.IvParameterSpec $r3, r13;
        javax.crypto.spec.SecretKeySpec $r4, r12;
        javax.crypto.Cipher $r5;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Exception r14;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        r12 = new javax.crypto.spec.SecretKeySpec;

        $r4 = r12;

     label01:
        specialinvoke r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

     label02:
        r13 = new javax.crypto.spec.IvParameterSpec;

        $r3 = r13;

     label03:
        specialinvoke r13.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2);

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r4, $r3);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label04:
        return $r0;

     label05:
        $r6 := @caughtexception;

        r14 = (java.lang.Exception) $r6;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

     label06:
        return null;

     label07:
        $r7 := @caughtexception;

        r14 = (java.lang.Exception) $r7;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

     label08:
        $r8 := @caughtexception;

        r14 = (java.lang.Exception) $r8;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

     label09:
        $r9 := @caughtexception;

        r14 = (java.lang.Exception) $r9;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

     label10:
        $r10 := @caughtexception;

        r14 = (java.lang.Exception) $r10;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

     label11:
        $r11 := @caughtexception;

        r14 = (java.lang.Exception) $r11;

        staticinvoke <jp.co.jal.util.Logger: void error(java.lang.Exception)>(r14);

        goto label06;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label05;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label07;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label07;
        catch java.security.InvalidKeyException from label01 to label02 with label08;
        catch java.security.InvalidKeyException from label03 to label04 with label08;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label09;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label09;
        catch javax.crypto.BadPaddingException from label01 to label02 with label10;
        catch javax.crypto.BadPaddingException from label03 to label04 with label10;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label11;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label11;
    }

    private static byte[] generateInitialVector()
    {
        byte[] $r0, $r3;
        java.util.UUID $r1;
        java.lang.String $r2;
        int $i0;
        byte $b1;
        java.lang.StringBuilder $r4;

        $r0 = newarray (byte)[16];

        $r1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r2 = virtualinvoke $r1.<java.util.UUID: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        $i0 = 0;

     label1:
        if $i0 >= 16 goto label2;

        $b1 = $r3[$i0];

        $r0[$i0] = $b1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("generateInitialVector()  iv:");

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.co.jal.util.Logger: void log(java.lang.String)>($r2);

        return $r0;
    }

    private static byte[] getBytes(byte[], int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3;
        byte $b4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = newarray (byte)[$i1];

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $i3 = $i0 + $i2;

        $b4 = $r0[$i3];

        $r1[$i2] = $b4;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static java.lang.String getKeyBase(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        null_type varReplacer569;

        nop;

        $r0 := @parameter0: android.content.Context;

        $r1 = <jp.co.jal.util.CryptUtil: java.lang.String UUID_KEY>;

        varReplacer569 = null;

        $r1 = staticinvoke <jp.co.jal.common.DefaultSharedPreferencesManager: java.lang.String getPreference(android.content.Context,java.lang.String,java.lang.String)>($r0, $r1, varReplacer569);

        return $r1;
    }
}
