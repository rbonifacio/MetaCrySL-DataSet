Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer264)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 8f9ab0ca1e8675b90c87e2765711ecd6ac7d38c7931999e1eb349e655849fba9
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer268, varReplacer269)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>
		SHA-256: 189f1d40d5fd4f755bcea6625ccad8eb47056e5caf8d5cdadd4ba044efb8699
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer263)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: b3a25955ae209a575e2cece60495063223b10583e259bd4703b02d793af7907d
		Secure: false
	Object:
		Variable: varReplacer280
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer280)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 705d1c0450bcc46d4c304e4d4320141ebab0108c0af504a4cbe58bd31923ee61
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 67660ebef9bcdf29dff625f17bb31960ddd36740584c870ce6a0fa4bb5fa1796
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: fe6b72027cc6f025149b8979a26071ca516bdfe1393947e8ebe7c9b2c4ce9edc
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKey
		Statement: $r4 = virtualinvoke $r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>
		SHA-256: 762215049bef3c54581ac4e00b3705695d7ae13659e31960c224a736293065a
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer278)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 1f0cc5ed57de4b01604712a01065a89828112c76395bf74a0f28a075d5bb7933
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer280)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 3662b9b8aaa9ecb85acd6c92773c5a0b5d4bc3360f5bc29afbba777038dc93c4
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: d813bc543f0902c2e0c075877458f798ef50a800f91e2c5faf8acc4dc555d942
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer271)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>
		SHA-256: 124d67cb1f043484e9ef3b626bb812ab32987849cd8285bbe1d8790d6203fa3f
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: dd3300be7e03b89b2cfe63d8d323121bc171c237827caefce97d4bad210807fd
		Secure: false
	Object:
		Variable: varReplacer264
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer264)
		Method: <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 3789c4dd6ec512660062c0e962de969fe185cb1083ccc2730709d328b2c98a55
		Secure: false

Findings in Java Class: ru.vsa.safenotelite.util.XCrypto

	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer265, $r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #b3a25955ae209a575e2cece60495063223b10583e259bd4703b02d793af7907d)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer263)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer264)


	 in Method: byte[] encrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer279, $r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer280)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #1f0cc5ed57de4b01604712a01065a89828112c76395bf74a0f28a075d5bb7933)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer278)


	 in Method: byte[] generateKey(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			Second parameter was not properly generated as randomized
			at statement: virtualinvoke $r2.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(varReplacer270, $r3)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 13

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 5
	ConstraintError: 2
=====================================================================