public class ru.vsa.safenotelite.util.XCrypto extends java.lang.Object
{

    public void <init>()
    {
        ru.vsa.safenotelite.util.XCrypto $r0;

        $r0 := @this: ru.vsa.safenotelite.util.XCrypto;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] decrypt(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.Cipher $r3;
        java.lang.String varReplacer247, varReplacer248;
        int varReplacer249;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = new javax.crypto.spec.SecretKeySpec;

        varReplacer248 = "AES";

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer248);

        varReplacer247 = "AES";

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer247);

        varReplacer249 = 2;

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer249, $r2);

        $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

        return $r0;
    }

    public static byte[] decryptB2B(byte[], java.lang.String) throws java.lang.Exception
    {
        byte[] $r0, $r2;
        java.lang.String $r1;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>($r1);

        $r0 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>($r2, $r0);

        return $r0;
    }

    public static java.lang.String decryptB2S(byte[], java.lang.String) throws java.lang.Exception
    {
        byte[] $r0, $r2;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>($r1);

        $r1 = new java.lang.String;

        $r0 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>($r2, $r0);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r0);

        return $r1;
    }

    public static java.lang.String decryptS2S(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1;
        byte[] $r2, $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>($r1);

        $r3 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] fromHexString(java.lang.String)>($r0);

        $r2 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>($r2, $r3);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

        return $r0;
    }

    private static byte[] encrypt(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.Cipher $r3;
        java.lang.String varReplacer262, varReplacer263;
        int varReplacer264;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = new javax.crypto.spec.SecretKeySpec;

        varReplacer263 = "AES";

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer263);

        varReplacer262 = "AES";

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer262);

        varReplacer264 = 1;

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer264, $r2);

        $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

        return $r0;
    }

    public static byte[] encryptB2B(byte[], java.lang.String) throws java.lang.Exception
    {
        byte[] $r0, $r2;
        java.lang.String $r1;

        nop;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>($r1);

        $r0 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] encrypt(byte[],byte[])>($r2, $r0);

        return $r0;
    }

    public static java.lang.String encryptS2S(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0, $r1, varReplacer385;
        byte[] $r2, $r3;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        varReplacer385 = "1309";

        $r3 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>(varReplacer385);

        $r2 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] encrypt(byte[],byte[])>($r3, $r2);

        $r0 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: java.lang.String toHexString(byte[])>($r2);

        return $r0;
    }

    private static byte[] fromHexString(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i4, $i5, varReplacer250, varReplacer251;
        char $c3;
        byte $b6;

        nop;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i0 / 2;

        $r1 = newarray (byte)[$i1];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = $i1 / 2;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        varReplacer251 = 16;

        $i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, varReplacer251);

        $i4 = $i4 << 4;

        $i5 = $i1 + 1;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5);

        varReplacer250 = 16;

        $i5 = staticinvoke <java.lang.Character: int digit(char,int)>($c3, varReplacer250);

        $i4 = $i4 + $i5;

        $b6 = (byte) $i4;

        $r1[$i2] = $b6;

        $i1 = $i1 + 2;

        goto label1;

     label2:
        return $r1;
    }

    private static byte[] generateKey(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String $r0, varReplacer253, varReplacer254, varReplacer255;
        byte[] $r1;
        javax.crypto.KeyGenerator $r2;
        java.security.SecureRandom $r3;
        javax.crypto.SecretKey $r4;
        int varReplacer252;

        nop;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        varReplacer253 = "AES";

        $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer253);

        varReplacer254 = "SHA1PRNG";

        varReplacer255 = "Crypto";

        $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer254, varReplacer255);

        virtualinvoke $r3.<java.security.SecureRandom: void setSeed(byte[])>($r1);

        varReplacer252 = 256;

        virtualinvoke $r2.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(varReplacer252, $r3);

        $r4 = virtualinvoke $r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        $r1 = interfaceinvoke $r4.<javax.crypto.SecretKey: byte[] getEncoded()>();

        return $r1;
    }

    public static void test1_bitmap(android.app.Activity) throws java.lang.Exception
    {
        android.app.Activity $r0;
        java.io.ByteArrayOutputStream $r1;
        android.graphics.Bitmap$Config $r2;
        android.graphics.Bitmap $r3;
        android.graphics.Bitmap$CompressFormat $r4;
        byte[] $r5, $r6;
        java.lang.String $r7;

        $r0 := @parameter0: android.app.Activity;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(96, 96, $r2);

        $r4 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r3.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r4, 100, $r1);

        $r5 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r6 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>("111");

        $r7 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <ru.vsa.safenotelite.util.DlgOk: void show(android.app.Activity,java.lang.String)>($r0, $r7);

        $r5 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] encrypt(byte[],byte[])>($r6, $r5);

        $r7 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <ru.vsa.safenotelite.util.DlgOk: void show(android.app.Activity,java.lang.String)>($r0, $r7);

        $r6 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>($r6, $r5);

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <ru.vsa.safenotelite.util.DlgOk: void show(android.app.Activity,java.lang.String)>($r0, $r7);

        return;
    }

    public static void test2_string(android.app.Activity) throws java.lang.Exception
    {
        android.app.Activity $r0;
        java.lang.String $r1;
        byte[] $r2, $r3, $r4, $r5;
        java.lang.Object[] $r6;

        $r0 := @parameter0: android.app.Activity;

        $r1 = "string gg";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] generateKey(java.lang.String)>("111");

        $r4 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] encrypt(byte[],byte[])>($r3, $r2);

        $r1 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: java.lang.String toHexString(byte[])>($r4);

        $r5 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] fromHexString(java.lang.String)>($r1);

        $r3 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: byte[] decrypt(byte[],byte[])>($r3, $r5);

        $r6 = newarray (java.lang.Object)[5];

        $r6[0] = "string gg";

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r6[1] = $r1;

        $r1 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r6[2] = $r1;

        $r1 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r6[3] = $r1;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r3);

        $r6[4] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("s=%s\nb=%s\ne=%s\nd=%s\ns=%s", $r6);

        staticinvoke <ru.vsa.safenotelite.util.DlgOk: void show(android.app.Activity,java.lang.String)>($r0, $r1);

        return;
    }

    public static void test3_string(android.app.Activity) throws java.lang.Exception
    {
        android.app.Activity $r0;
        java.lang.String $r1, $r2;
        java.lang.Object[] $r3;

        $r0 := @parameter0: android.app.Activity;

        $r1 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: java.lang.String encryptS2S(java.lang.String,java.lang.String)>("string gg", "111");

        $r2 = staticinvoke <ru.vsa.safenotelite.util.XCrypto: java.lang.String decryptS2S(java.lang.String,java.lang.String)>("string gg", "111");

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = "111";

        $r3[1] = "string gg";

        $r3[2] = $r1;

        $r3[3] = $r2;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("key=%s\nstr=%s\nenc=%s\ndec=%s", $r3);

        staticinvoke <ru.vsa.safenotelite.util.DlgOk: void show(android.app.Activity,java.lang.String)>($r0, $r1);

        return;
    }

    private static java.lang.String toHexString(byte[])
    {
        byte[] $r0;
        char[] $r1, $r2;
        short $s0;
        int $i1, $i2, $i4;
        byte $b3;
        char $c5;
        java.lang.String $r3;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        $i1 = lengthof $r0;

        $i1 = $i1 * 2;

        $r2 = newarray (char)[$i1];

        $i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label2;

        $b3 = $r0[$i1];

        $s0 = $b3 & 255;

        $i2 = $i1 * 2;

        $i4 = $s0 / 16;

        $c5 = $r1[$i4];

        $r2[$i2] = $c5;

        $i2 = $i1 * 2;

        $i2 = $i2 + 1;

        $i4 = $s0 % 16;

        $c5 = $r1[$i4];

        $r2[$i2] = $c5;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r2);

        return $r3;
    }
}
