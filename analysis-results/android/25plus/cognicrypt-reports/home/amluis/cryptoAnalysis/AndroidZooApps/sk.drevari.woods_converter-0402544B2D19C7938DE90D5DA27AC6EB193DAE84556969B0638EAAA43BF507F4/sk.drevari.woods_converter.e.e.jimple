public class sk.drevari.woods_converter.e.e extends java.lang.Object
{
    public static java.lang.String a;
    private java.util.ArrayList b;

    public void <init>(android.content.Context, java.lang.String)
    {
        sk.drevari.woods_converter.e.e $r0;
        android.content.Context $r1;
        java.lang.String $r2, $r10, varReplacer2936, varReplacer2938, varReplacer2939, varReplacer2940, varReplacer2942, varReplacer2944, varReplacer2945;
        java.util.ArrayList $r3, r23;
        android.content.res.Resources $r4;
        java.io.InputStream $r5;
        byte[] $r6, $r11;
        int $i0, varReplacer2937, varReplacer2941, varReplacer2943;
        javax.crypto.Cipher $r7;
        javax.crypto.spec.SecretKeySpec $r8, r25;
        java.lang.StringBuilder $r9, r24;
        java.io.InputStreamReader $r12, r27;
        java.io.ByteArrayInputStream $r13, r26;
        java.io.BufferedReader $r14, r28;
        java.lang.String[] $r15;
        sk.drevari.woods_converter.k $r16, r29;
        java.lang.Throwable $r17, $r18, $r19, $r20, $r21, $r22;
        java.security.NoSuchAlgorithmException r30;
        javax.crypto.NoSuchPaddingException r31;
        java.security.InvalidKeyException r32;
        javax.crypto.IllegalBlockSizeException r33;
        javax.crypto.BadPaddingException r34;

        nop;

        $r0 := @this: sk.drevari.woods_converter.e.e;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r23 = new java.util.ArrayList;

        specialinvoke r23.<java.util.ArrayList: void <init>()>();

        $r0.<sk.drevari.woods_converter.e.e: java.util.ArrayList b> = r23;

     label01:
        $r4 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        varReplacer2943 = 2131165322;

        $r5 = virtualinvoke $r4.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(varReplacer2943);

     label02:
        $r6 = newarray (byte)[65535];

     label03:
        $i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>($r6);

     label04:
        varReplacer2940 = "AES/ECB/PKCS5Padding";

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2940);

     label05:
        r25 = new javax.crypto.spec.SecretKeySpec;

        $r8 = r25;

        r24 = new java.lang.StringBuilder;

        $r9 = r24;

     label06:
        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        varReplacer2945 = "sh";

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2945);

     label07:
        $r10 = <sk.drevari.woods_converter.e.e: java.lang.String a>;

     label08:
        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw0()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw1()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw2()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw3()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw4()>();

        staticinvoke <FLOWDROID_EXCEPTIONS: void throw5()>();

        $r10 = "83m_26";

        varReplacer2944 = "83m_26";

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2944);

        varReplacer2936 = "WSj3";

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2936);

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        varReplacer2942 = "AES";

        specialinvoke r25.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r11, varReplacer2942);

        varReplacer2941 = 2;

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2941, $r8);

     label09:
        varReplacer2937 = 0;

        $r6 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r6, varReplacer2937, $i0);

     label10:
        r27 = new java.io.InputStreamReader;

        $r12 = r27;

        r26 = new java.io.ByteArrayInputStream;

        $r13 = r26;

     label11:
        specialinvoke r26.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        varReplacer2939 = "UTF-8";

        specialinvoke r27.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r13, varReplacer2939);

     label12:
        r28 = new java.io.BufferedReader;

        $r14 = r28;

     label13:
        specialinvoke r28.<java.io.BufferedReader: void <init>(java.io.Reader)>($r12);

     label14:
        $r2 = virtualinvoke $r14.<java.io.BufferedReader: java.lang.String readLine()>();

     label15:
        if $r2 == null goto label40;

     label16:
        varReplacer2938 = ";";

        $r15 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer2938);

     label17:
        r29 = new sk.drevari.woods_converter.k;

        $r16 = r29;

     label18:
        specialinvoke r29.<sk.drevari.woods_converter.k: void <init>()>();

     label19:
        $i0 = lengthof $r15;

        if $i0 < 2 goto label20;

        $r2 = $r15[0];

        $r16.<sk.drevari.woods_converter.k: java.lang.String a> = $r2;

        $r2 = $r15[1];

        $r16.<sk.drevari.woods_converter.k: java.lang.String b> = $r2;

     label20:
        $i0 = lengthof $r15;

        if $i0 != 3 goto label21;

        $r2 = $r15[2];

        $r16.<sk.drevari.woods_converter.k: java.lang.String c> = $r2;

     label21:
        $r3 = $r0.<sk.drevari.woods_converter.e.e: java.util.ArrayList b>;

     label22:
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label23:
        goto label14;

     label24:
        $r17 := @caughtexception;

        throw $r17;

     label25:
        $r18 := @caughtexception;

        r30 = (java.security.NoSuchAlgorithmException) $r18;

     label26:
        virtualinvoke r30.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label27:
        return;

     label28:
        $r19 := @caughtexception;

        r31 = (javax.crypto.NoSuchPaddingException) $r19;

     label29:
        virtualinvoke r31.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

     label30:
        return;

     label31:
        $r20 := @caughtexception;

        r32 = (java.security.InvalidKeyException) $r20;

     label32:
        virtualinvoke r32.<java.security.InvalidKeyException: void printStackTrace()>();

     label33:
        return;

     label34:
        $r21 := @caughtexception;

        r33 = (javax.crypto.IllegalBlockSizeException) $r21;

     label35:
        virtualinvoke r33.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

     label36:
        return;

     label37:
        $r22 := @caughtexception;

        r34 = (javax.crypto.BadPaddingException) $r22;

     label38:
        virtualinvoke r34.<javax.crypto.BadPaddingException: void printStackTrace()>();

     label39:
        return;

     label40:
        if $r14 == null goto label42;

     label41:
        virtualinvoke $r14.<java.io.BufferedReader: void close()>();

     label42:
        if $r12 == null goto label44;

     label43:
        virtualinvoke $r12.<java.io.InputStreamReader: void close()>();

     label44:
        if $r5 == null goto label46;

     label45:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

     label46:
        return;

        catch java.io.IOException from label01 to label02 with label24;
        catch java.io.IOException from label03 to label04 with label24;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label25;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label28;
        catch java.io.IOException from label04 to label05 with label24;
        catch java.security.InvalidKeyException from label06 to label07 with label31;
        catch java.security.InvalidKeyException from label08 to label09 with label31;
        catch java.io.IOException from label06 to label07 with label24;
        catch java.io.IOException from label08 to label09 with label24;
        catch javax.crypto.IllegalBlockSizeException from label09 to label10 with label34;
        catch javax.crypto.BadPaddingException from label09 to label10 with label37;
        catch java.io.IOException from label09 to label10 with label24;
        catch java.io.IOException from label11 to label12 with label24;
        catch java.io.IOException from label13 to label15 with label24;
        catch java.io.IOException from label16 to label17 with label24;
        catch java.io.IOException from label18 to label19 with label24;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.io.IOException from label26 to label27 with label24;
        catch java.io.IOException from label29 to label30 with label24;
        catch java.io.IOException from label32 to label33 with label24;
        catch java.io.IOException from label35 to label36 with label24;
        catch java.io.IOException from label38 to label39 with label24;
        catch java.io.IOException from label41 to label42 with label24;
        catch java.io.IOException from label43 to label44 with label24;
        catch java.io.IOException from label45 to label46 with label24;
    }

    public static java.lang.String a(java.lang.String)
    {
        java.lang.String $r0, varReplacer703, varReplacer704, varReplacer705, varReplacer706, varReplacer707, varReplacer708;
        java.util.Locale $r1;

        nop;

        $r0 := @parameter0: java.lang.String;

        varReplacer705 = " ";

        varReplacer706 = "_";

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(varReplacer705, varReplacer706);

        varReplacer707 = ".";

        varReplacer708 = "";

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(varReplacer707, varReplacer708);

        varReplacer703 = "/";

        varReplacer704 = "_";

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(varReplacer703, varReplacer704);

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        return $r0;
    }

    public sk.drevari.woods_converter.k b(java.lang.String)
    {
        sk.drevari.woods_converter.e.e $r0;
        java.lang.String $r1, $r6;
        sk.drevari.woods_converter.k $r2;
        java.util.ArrayList $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;

        $r0 := @this: sk.drevari.woods_converter.e.e;

        $r1 := @parameter0: java.lang.String;

        $r2 = new sk.drevari.woods_converter.k;

        specialinvoke $r2.<sk.drevari.woods_converter.k: void <init>()>();

        $r3 = $r0.<sk.drevari.woods_converter.e.e: java.util.ArrayList b>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (sk.drevari.woods_converter.k) $r5;

        $r6 = $r2.<sk.drevari.woods_converter.k: java.lang.String a>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return $r2;

     label2:
        return null;
    }
}
