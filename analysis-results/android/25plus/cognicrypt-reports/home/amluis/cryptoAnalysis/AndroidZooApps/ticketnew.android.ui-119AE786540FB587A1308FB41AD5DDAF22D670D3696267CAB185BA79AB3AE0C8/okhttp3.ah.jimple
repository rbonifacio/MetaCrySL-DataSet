public class okhttp3.ah extends java.lang.Object implements java.lang.Cloneable
{
    private static final java.util.List A;
    private static final java.util.List z;
    final okhttp3.w a;
    final java.net.Proxy b;
    final java.util.List c;
    final java.util.List d;
    final java.util.List e;
    final java.util.List f;
    final java.net.ProxySelector g;
    final okhttp3.u h;
    final okhttp3.d i;
    final okhttp3.internal.a.m j;
    final javax.net.SocketFactory k;
    final javax.net.ssl.SSLSocketFactory l;
    final okhttp3.internal.e.b m;
    final javax.net.ssl.HostnameVerifier n;
    final okhttp3.l o;
    final okhttp3.b p;
    final okhttp3.b q;
    final okhttp3.p r;
    final okhttp3.x s;
    final boolean t;
    final boolean u;
    final boolean v;
    final int w;
    final int x;
    final int y;

    static void <clinit>()
    {
        okhttp3.Protocol[] $r0;
        okhttp3.Protocol $r1;
        java.util.List $r2;
        okhttp3.r[] $r3;
        okhttp3.r $r4;
        okhttp3.ai $r5;

        nop;

        $r0 = newarray (okhttp3.Protocol)[3];

        $r1 = <okhttp3.Protocol: okhttp3.Protocol HTTP_2>;

        $r0[0] = $r1;

        $r1 = <okhttp3.Protocol: okhttp3.Protocol SPDY_3>;

        $r0[1] = $r1;

        $r1 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_1>;

        $r0[2] = $r1;

        $r2 = staticinvoke <okhttp3.internal.f: java.util.List a(java.lang.Object[])>($r0);

        <okhttp3.ah: java.util.List z> = $r2;

        $r3 = newarray (okhttp3.r)[3];

        $r4 = <okhttp3.r: okhttp3.r a>;

        $r3[0] = $r4;

        $r4 = <okhttp3.r: okhttp3.r b>;

        $r3[1] = $r4;

        $r4 = <okhttp3.r: okhttp3.r c>;

        $r3[2] = $r4;

        $r2 = staticinvoke <okhttp3.internal.f: java.util.List a(java.lang.Object[])>($r3);

        <okhttp3.ah: java.util.List A> = $r2;

        $r5 = new okhttp3.ai;

        specialinvoke $r5.<okhttp3.ai: void <init>()>();

        <okhttp3.internal.a: okhttp3.internal.a a> = $r5;

        return;
    }

    public void <init>()
    {
        okhttp3.ah $r0;
        okhttp3.ah$a $r1;

        $r0 := @this: okhttp3.ah;

        $r1 = new okhttp3.ah$a;

        specialinvoke $r1.<okhttp3.ah$a: void <init>()>();

        specialinvoke $r0.<okhttp3.ah: void <init>(okhttp3.ah$a)>($r1);

        return;
    }

    private void <init>(okhttp3.ah$a)
    {
        okhttp3.ah $r0;
        okhttp3.ah$a $r1;
        okhttp3.w $r2;
        java.net.Proxy $r3;
        java.util.List $r4;
        java.net.ProxySelector $r5;
        okhttp3.u $r6;
        okhttp3.d $r7;
        okhttp3.internal.a.m $r8;
        javax.net.SocketFactory $r9;
        java.util.Iterator $r10;
        boolean $z0, $z1;
        java.lang.Object $r11;
        okhttp3.r $r12;
        javax.net.ssl.SSLSocketFactory $r13;
        okhttp3.internal.e.b $r14;
        javax.net.ssl.HostnameVerifier $r15;
        okhttp3.l $r16;
        okhttp3.b $r17;
        okhttp3.p $r18;
        okhttp3.x $r19;
        int $i0;
        javax.net.ssl.X509TrustManager $r20;

        nop;

        $r0 := @this: okhttp3.ah;

        $r1 := @parameter0: okhttp3.ah$a;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = $r1.<okhttp3.ah$a: okhttp3.w a>;

        $r0.<okhttp3.ah: okhttp3.w a> = $r2;

        $r3 = $r1.<okhttp3.ah$a: java.net.Proxy b>;

        $r0.<okhttp3.ah: java.net.Proxy b> = $r3;

        $r4 = $r1.<okhttp3.ah$a: java.util.List c>;

        $r0.<okhttp3.ah: java.util.List c> = $r4;

        $r4 = $r1.<okhttp3.ah$a: java.util.List d>;

        $r0.<okhttp3.ah: java.util.List d> = $r4;

        $r4 = $r1.<okhttp3.ah$a: java.util.List e>;

        $r4 = staticinvoke <okhttp3.internal.f: java.util.List a(java.util.List)>($r4);

        $r0.<okhttp3.ah: java.util.List e> = $r4;

        $r4 = $r1.<okhttp3.ah$a: java.util.List f>;

        $r4 = staticinvoke <okhttp3.internal.f: java.util.List a(java.util.List)>($r4);

        $r0.<okhttp3.ah: java.util.List f> = $r4;

        $r5 = $r1.<okhttp3.ah$a: java.net.ProxySelector g>;

        $r0.<okhttp3.ah: java.net.ProxySelector g> = $r5;

        $r6 = $r1.<okhttp3.ah$a: okhttp3.u h>;

        $r0.<okhttp3.ah: okhttp3.u h> = $r6;

        $r7 = $r1.<okhttp3.ah$a: okhttp3.d i>;

        $r0.<okhttp3.ah: okhttp3.d i> = $r7;

        $r8 = $r1.<okhttp3.ah$a: okhttp3.internal.a.m j>;

        $r0.<okhttp3.ah: okhttp3.internal.a.m j> = $r8;

        $r9 = $r1.<okhttp3.ah$a: javax.net.SocketFactory k>;

        $r0.<okhttp3.ah: javax.net.SocketFactory k> = $r9;

        $r4 = $r0.<okhttp3.ah: java.util.List d>;

        $r10 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (okhttp3.r) $r11;

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r12.<okhttp3.r: boolean a()>();

        if $z0 == 0 goto label4;

     label2:
        $z0 = 1;

     label3:
        goto label1;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r13 = $r1.<okhttp3.ah$a: javax.net.ssl.SSLSocketFactory l>;

        if $r13 != null goto label6;

        if $z0 != 0 goto label8;

     label6:
        $r13 = $r1.<okhttp3.ah$a: javax.net.ssl.SSLSocketFactory l>;

        $r0.<okhttp3.ah: javax.net.ssl.SSLSocketFactory l> = $r13;

        $r14 = $r1.<okhttp3.ah$a: okhttp3.internal.e.b m>;

        $r0.<okhttp3.ah: okhttp3.internal.e.b m> = $r14;

     label7:
        $r15 = $r1.<okhttp3.ah$a: javax.net.ssl.HostnameVerifier n>;

        $r0.<okhttp3.ah: javax.net.ssl.HostnameVerifier n> = $r15;

        $r16 = $r1.<okhttp3.ah$a: okhttp3.l o>;

        $r14 = $r0.<okhttp3.ah: okhttp3.internal.e.b m>;

        $r16 = virtualinvoke $r16.<okhttp3.l: okhttp3.l a(okhttp3.internal.e.b)>($r14);

        $r0.<okhttp3.ah: okhttp3.l o> = $r16;

        $r17 = $r1.<okhttp3.ah$a: okhttp3.b p>;

        $r0.<okhttp3.ah: okhttp3.b p> = $r17;

        $r17 = $r1.<okhttp3.ah$a: okhttp3.b q>;

        $r0.<okhttp3.ah: okhttp3.b q> = $r17;

        $r18 = $r1.<okhttp3.ah$a: okhttp3.p r>;

        $r0.<okhttp3.ah: okhttp3.p r> = $r18;

        $r19 = $r1.<okhttp3.ah$a: okhttp3.x s>;

        $r0.<okhttp3.ah: okhttp3.x s> = $r19;

        $z0 = $r1.<okhttp3.ah$a: boolean t>;

        $r0.<okhttp3.ah: boolean t> = $z0;

        $z0 = $r1.<okhttp3.ah$a: boolean u>;

        $r0.<okhttp3.ah: boolean u> = $z0;

        $z0 = $r1.<okhttp3.ah$a: boolean v>;

        $r0.<okhttp3.ah: boolean v> = $z0;

        $i0 = $r1.<okhttp3.ah$a: int w>;

        $r0.<okhttp3.ah: int w> = $i0;

        $i0 = $r1.<okhttp3.ah$a: int x>;

        $r0.<okhttp3.ah: int x> = $i0;

        $i0 = $r1.<okhttp3.ah$a: int y>;

        $r0.<okhttp3.ah: int y> = $i0;

        return;

     label8:
        $r20 = specialinvoke $r0.<okhttp3.ah: javax.net.ssl.X509TrustManager A()>();

        $r13 = specialinvoke $r0.<okhttp3.ah: javax.net.ssl.SSLSocketFactory a(javax.net.ssl.X509TrustManager)>($r20);

        $r0.<okhttp3.ah: javax.net.ssl.SSLSocketFactory l> = $r13;

        $r14 = staticinvoke <okhttp3.internal.e.b: okhttp3.internal.e.b a(javax.net.ssl.X509TrustManager)>($r20);

        $r0.<okhttp3.ah: okhttp3.internal.e.b m> = $r14;

        goto label7;
    }

    void <init>(okhttp3.ah$a, okhttp3.ai)
    {
        okhttp3.ah $r0;
        okhttp3.ah$a $r1;
        okhttp3.ai $r2;

        nop;

        $r0 := @this: okhttp3.ah;

        $r1 := @parameter0: okhttp3.ah$a;

        $r2 := @parameter1: okhttp3.ai;

        specialinvoke $r0.<okhttp3.ah: void <init>(okhttp3.ah$a)>($r1);

        return;
    }

    private javax.net.ssl.X509TrustManager A()
    {
        okhttp3.ah $r0;
        java.lang.String $r1, varReplacer3086;
        javax.net.ssl.TrustManagerFactory $r2;
        javax.net.ssl.TrustManager[] $r3;
        int $i0;
        javax.net.ssl.TrustManager $r4;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r7;
        java.lang.AssertionError $r8;
        javax.net.ssl.X509TrustManager $r9;
        null_type varReplacer3085;

        nop;

        $r0 := @this: okhttp3.ah;

     label1:
        $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r1);

        varReplacer3085 = null;

        virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(varReplacer3085);

        $r3 = virtualinvoke $r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

     label2:
        $i0 = lengthof $r3;

        if $i0 != 1 goto label3;

        $r4 = $r3[0];

        $z0 = $r4 instanceof javax.net.ssl.X509TrustManager;

        if $z0 != 0 goto label7;

     label3:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

     label4:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer3086 = "Unexpected default trust managers:";

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3086);

        $r1 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

     label5:
        throw $r5;

     label6:
        $r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label7:
        $r4 = $r3[0];

        $r9 = (javax.net.ssl.X509TrustManager) $r4;

        return $r9;

        catch java.security.GeneralSecurityException from label1 to label2 with label6;
        catch java.security.GeneralSecurityException from label4 to label5 with label6;
    }

    private javax.net.ssl.SSLSocketFactory a(javax.net.ssl.X509TrustManager)
    {
        okhttp3.ah $r0;
        javax.net.ssl.X509TrustManager $r1;
        javax.net.ssl.SSLContext $r2;
        java.lang.Object[] $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        java.lang.Throwable $r5;
        java.lang.AssertionError r6;
        javax.net.ssl.TrustManager[] r7;
        java.lang.String varReplacer3087;
        null_type varReplacer3088, varReplacer3089;

        nop;

        $r0 := @this: okhttp3.ah;

        $r1 := @parameter0: javax.net.ssl.X509TrustManager;

     label1:
        varReplacer3087 = "TLS";

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3087);

     label2:
        $r3 = newarray (javax.net.ssl.TrustManager)[1];

        $r3[0] = $r1;

        r7 = (javax.net.ssl.TrustManager[]) $r3;

     label3:
        varReplacer3088 = null;

        varReplacer3089 = null;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3088, r7, varReplacer3088);

        $r4 = virtualinvoke $r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        r6 = new java.lang.AssertionError;

        specialinvoke r6.<java.lang.AssertionError: void <init>()>();

        throw r6;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }

    static java.util.List y()
    {
        java.util.List r0;

        nop;

        r0 = <okhttp3.ah: java.util.List z>;

        return r0;
    }

    static java.util.List z()
    {
        java.util.List r0;

        nop;

        r0 = <okhttp3.ah: java.util.List A>;

        return r0;
    }

    public int a()
    {
        okhttp3.ah $r0;
        int i0;

        $r0 := @this: okhttp3.ah;

        i0 = $r0.<okhttp3.ah: int w>;

        return i0;
    }

    public okhttp3.j a(okhttp3.al)
    {
        okhttp3.ah $r0;
        okhttp3.al $r1;
        okhttp3.aj $r2;

        nop;

        $r0 := @this: okhttp3.ah;

        $r1 := @parameter0: okhttp3.al;

        $r2 = new okhttp3.aj;

        specialinvoke $r2.<okhttp3.aj: void <init>(okhttp3.ah,okhttp3.al)>($r0, $r1);

        return $r2;
    }

    public int b()
    {
        okhttp3.ah $r0;
        int i0;

        $r0 := @this: okhttp3.ah;

        i0 = $r0.<okhttp3.ah: int x>;

        return i0;
    }

    public int c()
    {
        okhttp3.ah $r0;
        int i0;

        $r0 := @this: okhttp3.ah;

        i0 = $r0.<okhttp3.ah: int y>;

        return i0;
    }

    public java.net.Proxy d()
    {
        okhttp3.ah $r0;
        java.net.Proxy r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.net.Proxy b>;

        return r1;
    }

    public java.net.ProxySelector e()
    {
        okhttp3.ah $r0;
        java.net.ProxySelector r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.net.ProxySelector g>;

        return r1;
    }

    public okhttp3.u f()
    {
        okhttp3.ah $r0;
        okhttp3.u r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.u h>;

        return r1;
    }

    okhttp3.internal.a.m g()
    {
        okhttp3.ah $r0;
        okhttp3.d $r1;
        okhttp3.internal.a.m r2;

        nop;

        $r0 := @this: okhttp3.ah;

        $r1 = $r0.<okhttp3.ah: okhttp3.d i>;

        if $r1 == null goto label1;

        $r1 = $r0.<okhttp3.ah: okhttp3.d i>;

        r2 = $r1.<okhttp3.d: okhttp3.internal.a.m a>;

        return r2;

     label1:
        r2 = $r0.<okhttp3.ah: okhttp3.internal.a.m j>;

        return r2;
    }

    public okhttp3.x h()
    {
        okhttp3.ah $r0;
        okhttp3.x r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.x s>;

        return r1;
    }

    public javax.net.SocketFactory i()
    {
        okhttp3.ah $r0;
        javax.net.SocketFactory r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: javax.net.SocketFactory k>;

        return r1;
    }

    public javax.net.ssl.SSLSocketFactory j()
    {
        okhttp3.ah $r0;
        javax.net.ssl.SSLSocketFactory r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: javax.net.ssl.SSLSocketFactory l>;

        return r1;
    }

    public javax.net.ssl.HostnameVerifier k()
    {
        okhttp3.ah $r0;
        javax.net.ssl.HostnameVerifier r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: javax.net.ssl.HostnameVerifier n>;

        return r1;
    }

    public okhttp3.l l()
    {
        okhttp3.ah $r0;
        okhttp3.l r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.l o>;

        return r1;
    }

    public okhttp3.b m()
    {
        okhttp3.ah $r0;
        okhttp3.b r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.b q>;

        return r1;
    }

    public okhttp3.b n()
    {
        okhttp3.ah $r0;
        okhttp3.b r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.b p>;

        return r1;
    }

    public okhttp3.p o()
    {
        okhttp3.ah $r0;
        okhttp3.p r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.p r>;

        return r1;
    }

    public boolean p()
    {
        okhttp3.ah $r0;
        boolean z0;

        $r0 := @this: okhttp3.ah;

        z0 = $r0.<okhttp3.ah: boolean t>;

        return z0;
    }

    public boolean q()
    {
        okhttp3.ah $r0;
        boolean z0;

        $r0 := @this: okhttp3.ah;

        z0 = $r0.<okhttp3.ah: boolean u>;

        return z0;
    }

    public boolean r()
    {
        okhttp3.ah $r0;
        boolean z0;

        $r0 := @this: okhttp3.ah;

        z0 = $r0.<okhttp3.ah: boolean v>;

        return z0;
    }

    public okhttp3.w s()
    {
        okhttp3.ah $r0;
        okhttp3.w r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: okhttp3.w a>;

        return r1;
    }

    public java.util.List t()
    {
        okhttp3.ah $r0;
        java.util.List r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.util.List c>;

        return r1;
    }

    public java.util.List u()
    {
        okhttp3.ah $r0;
        java.util.List r1;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.util.List d>;

        return r1;
    }

    public java.util.List v()
    {
        okhttp3.ah $r0;
        java.util.List r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.util.List e>;

        return r1;
    }

    public java.util.List w()
    {
        okhttp3.ah $r0;
        java.util.List r1;

        nop;

        $r0 := @this: okhttp3.ah;

        r1 = $r0.<okhttp3.ah: java.util.List f>;

        return r1;
    }

    public okhttp3.ah$a x()
    {
        okhttp3.ah $r0;
        okhttp3.ah$a $r1;

        $r0 := @this: okhttp3.ah;

        $r1 = new okhttp3.ah$a;

        specialinvoke $r1.<okhttp3.ah$a: void <init>(okhttp3.ah)>($r0);

        return $r1;
    }
}
