Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.inditex.stradivarius-10702B935F1FA5817586AF070B128F887F341B6D123FB8C9115460267F3C74B7.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r1
		Type: java.security.KeyStore
		Statement: $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer13428)
		Method: <com.inditex.itxinwalletframework.activity.IWFingerprintActivity: void generateKey()>
		SHA-256: 335ee547baa4e5d286a6b6f9e5c8200be8e25c865bf4e82bf0f634bf5040ca9f
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer16581, varReplacer16582)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: bd71c20a87006760927cbf8845b1939b2acaaa87730f674a846cebdceb7e4ff2
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer16578)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: ce7e464191073b793750a96aeb50e7fcc96a5e24236ba8cd73fff10757921bcb
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 197fe427bb47c7000549fc2bae1257af55f252f1907d92d197d440873bb7d19d
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer16586)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 5c56155e9eb3d4edaa4e18769218523802d8549871d03e97ff70a1a5a5c11cdd
		Secure: false
	Object:
		Variable: $r16
		Type: java.security.MessageDigest
		Statement: $r16 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer12288)
		Method: <com.inditex.itxinwalletframework.manager.impl.QRManager: java.lang.String generateCodeForCard(com.inditex.itxinwalletframework.rest.model.ItxWalletCardObj,com.inditex.itxinwalletframework.model.CurrentUser,com.inditex.itxinwalletframework.model.StoreData,com.inditex.itxinwalletframework.model.ExtendedCardInfo)>
		SHA-256: 421f472fad44acce001e1865afe4c0a8e9c62d4aaace9e3aead7c8d266eb656c
		Secure: true
	Object:
		Variable: $r10
		Type: javax.crypto.Cipher
		Statement: $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2843)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 534ca94c20415bfdd27e2e1750dcd4ed27df738ebcb330938b036d90e1a11d4d
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>($r1)
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] generateDatabaseKey()>
		SHA-256: 7f63ddec16f7ebd694f9bae2a234e255d503ad65ab3db30be5cf9b76d93c67e8
		Secure: true
	Object:
		Variable: $r9
		Type: javax.crypto.SecretKey
		Statement: $r9 = virtualinvoke $r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r7)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 448449e0709e0526695e283fbaa2d735286a245b7be948be9c23aa9299ab4a05
		Secure: false
	Object:
		Variable: r9
		Type: java.security.SecureRandom
		Statement: specialinvoke r9.<java.security.SecureRandom: void <init>()>()
		Method: <com.inditex.rest.helpers.OkHTTPClientTrustSSL: com.squareup.okhttp.OkHttpClient getUnsafeOkHttpClient()>
		SHA-256: 29211615345791b2a80d5df714aa0370cc525ea64d574bcdb7c9ae5ae5f7b5c3
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer16592)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: d48a25c448cd4016685171c14e541ba1b6f3d795f85fc4818215dd82598a9e5
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.KeyPairGenerator
		Statement: $r2 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer9754)
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: java.security.KeyPair generateKeyPairKeys()>
		SHA-256: 5bbc6d4b4cfe11931e07d07fb4b40ade33f21b9675758de685bfadd099fec7cf
		Secure: false
	Object:
		Variable: varReplacer16568
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer16567, $i0, varReplacer16568)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: cc1fa3b8360abb8995b32b541a84bdc0cb0f7f08f6ccf240fc30d5790beecb48
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] generateDatabaseKey()>
		SHA-256: b2e797e2aef5712fbd1129754004cb8696cf299909c3a04e2b37ffc6a3c5dc1f
		Secure: true
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer6083)
		Method: <com.inditex.rest.helpers.OkHTTPClientTrustSSL: com.squareup.okhttp.OkHttpClient getUnsafeOkHttpClient()>
		SHA-256: 1c8e9a9963ba3be2d5f1ab719038598bb7adf877d1cd18732bdb7256e5b7d480
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.Cipher
		Statement: $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer13439)
		Method: <com.inditex.itxinwalletframework.activity.IWFingerprintActivity: boolean cipherInit()>
		SHA-256: 9394d34e0cff7384c62aac0872ff603db775428654651441cfc0ae1b93ac42f2
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.SecretKey
		Statement: $r2 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: 2e264fbf613ad849d59d8af8503eb792a6154af12ffa74d9a033ffc80141321b
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer12320)
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] signData(byte[],java.security.PrivateKey)>
		SHA-256: 44a2092afd1188c4d624c8bc279204e3f645d5cd0256f3623a09de3e855ce80e
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyPair
		Statement: $r3 = virtualinvoke $r2.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: java.security.KeyPair generateKeyPairKeys()>
		SHA-256: 998d7f8b789bb471b4fc448ecd77c8064ff966c3ee432d0ce8aeed074c263056
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer17177)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: d679a85e352f07e3fc0a22bc2f6d8edd402b77ddd4af7d5a2266e331e5b281da
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<java.security.Signature: byte[] sign()>()
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] signData(byte[],java.security.PrivateKey)>
		SHA-256: 1b60ada71588e4c898565eee208814b6c5d9ab3e542639603a4bac2860e8e971
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 418c2ad98edc91011d89c3be10f36bd98972111ac309f4208c409f9fb9324bc5
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer16573)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: af737c59ea279dc611bcb224c769c95dc1a70845b4d1de41036cca3cb83357e6
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Mac
		Statement: $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer16604)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>
		SHA-256: 8eda9b0bb08715b65e6eee7125cfd326a63907e0075105b0460041060e2d407b
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: df95c04ed76fe7565b426c50cde38eab25e76095c32672d02ac4cc89c29ba677
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.tencent.mm.algorithm.MD5: java.lang.String getMessageDigest(byte[])>
		SHA-256: f9d57de5f460dffb636596b0fda0470337543f67320a3d0a6000c6125fdd5c06
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer2846)
		Method: <com.tencent.mm.algorithm.MD5: java.lang.String getMessageDigest(byte[])>
		SHA-256: acfc4b8aa18de3e7d8fd683aab8a55fc0686ab65654cd925853ae3ffd8b16dd7
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r2.<javax.crypto.Mac: byte[] doFinal(byte[])>($r0)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>
		SHA-256: c6dc4131ca13a700f69eebff9cf4d4cbd1f442867ec8377fecf98f1bef3306a4
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer13433, varReplacer13434)
		Method: <com.inditex.itxinwalletframework.activity.IWFingerprintActivity: void generateKey()>
		SHA-256: a59f5971fb9e84e95541002ae6c2decbe19053dbc7b914cb8cff47f6cc2abcd7
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 36da9e361da26f0f9650bfcbd38588efc7fa4e7a5a1d92c4a966ccf918fc9e45
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 3f9926bdf527602ea45fc7bc0f3a0983861f76f95c4a49e3f70ddb8eb8a6e773
		Secure: false
	Object:
		Variable: $r0
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16579)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: e0bdb255d5d5af939fda731e9e7f51187f0e4ddd08484ed6518ea5ec786c79c4
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 25d3835610df116c8d3f054724d99f7905e07400f4267757f6af4ad048311bb9
		Secure: true
	Object:
		Variable: $r15
		Type: byte[]
		Statement: $r15 = virtualinvoke $r16.<java.security.MessageDigest: byte[] digest(byte[])>($r15)
		Method: <com.inditex.itxinwalletframework.manager.impl.QRManager: java.lang.String generateCodeForCard(com.inditex.itxinwalletframework.rest.model.ItxWalletCardObj,com.inditex.itxinwalletframework.model.CurrentUser,com.inditex.itxinwalletframework.model.StoreData,com.inditex.itxinwalletframework.model.ExtendedCardInfo)>
		SHA-256: 76e3a7452e9b6fbb7416cc680a11570c3770ba58aad3a2b2f1d4c3a7018d3759
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: 279db3d9da58ae94c02e1ba6db8deae9057d6b5f9f4f37662fc46c910a8d6da3
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.SecretKeyFactory
		Statement: $r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer2840)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 665fa989406c71ed2917ec1ca9022c7a09e7780ce9bc7abbc70ee22bfdad3cea
		Secure: false
	Object:
		Variable: varReplacer16573
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer16573)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: c85077be24c3a81452c9e75cdf6cbb0359dec0b0de8fe3c81649a4e39059d339
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer16567, $i0, varReplacer16568)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: d8a095fefbc756810be854bfe05017c582953c61567ef72cff73b8f0e258aa4d
		Secure: false
	Object:
		Variable: varReplacer16579
		Type: java.lang.String
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16579)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: dc1444e9c1ebf16742ab6cf6abe6ec61a033b690313adc572a0397955d22c5da
		Secure: false

Findings in Java Class: com.tencent.mm.sdk.platformtools.LogHelper

	 in Method: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer2845, $r9)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #665fa989406c71ed2917ec1ca9022c7a09e7780ce9bc7abbc70ee22bfdad3cea)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithHmacSHA224AndAES_256, PBEwithHmacSHA1AndAES_256, HmacSHA384, PBEwithHmacSHA512AndAES_128, PBEwithMD5ANDDES, PBKDF2withHmacSHA1And8BIT, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBKDF2withHmacSHA384, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, HmacSHA224, PBEwithMD5ANDRC2, PBEwithHmacSHA384AndAES_128, PBEwithHmacSHA256AndAES_256, HmacSHA256, PBEwithSHAANDTWOFISH-CBC	, PBKDF2withHmacSHA512, HmacSHA1, PBKDF2withHmacSHA224, PBEwithHmacSHA384AndAES_256, PBKDF2withHmacSHA256, AES, PBEwithSHAAND192BITAES-CBC-BC, PBKDF2withHmacSHA1, PBEwithSHAAND128BITRC4, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC, PBEwithHmacSHA224AndAES_128, DESede, PBEwithHmacSHA256AndAES_128, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithHmacSHA512AndAES_256, PBEwithSHAAND40BITRC4, PBEwithHmacSHA1AndAES_128, HmacSHA512, PBEwithSHAAND128BITRC2-CBC, PBEwithSHAAND128BITAES-CBC-BC}
			at statement: $r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer2840)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r9 = virtualinvoke $r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r7)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #534ca94c20415bfdd27e2e1750dcd4ed27df738ebcb330938b036d90e1a11d4d)
			First parameter (with value "DES") should be any of {AES_128, ARC4, AES, BLOWFISH, DESede, AES_256, ChaCha20, RSA}
			at statement: $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer2843)


Findings in Java Class: com.inditex.itxinwalletframework.manager.impl.CryptoManager

	 in Method: java.security.KeyPair generateKeyPairKeys()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #5bbc6d4b4cfe11931e07d07fb4b40ade33f21b9675758de685bfadd099fec7cf)
			First parameter (with value 1024) should be any of {2048, 4096}
			at statement: virtualinvoke $r2.<java.security.KeyPairGenerator: void initialize(int)>(varReplacer9750)


	 in Method: byte[] signData(byte[],java.security.PrivateKey)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initSign(java.security.PrivateKey)>($r2)


Findings in Java Class: com.inditex.rest.helpers.AesCbcWithIntegrity

	 in Method: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer16567, $i0, varReplacer16568)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			Constraint length(keyMaterial) + 0 >= off - len could not be evaluted due to insufficient information.
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer16567, $i0, varReplacer16568)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer16573)


	 in Method: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer17179, $r5, $r2)


	 in Method: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer16585, $r5, $r2)


	 in Method: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16579)


Findings in Java Class: com.inditex.rest.helpers.OkHTTPClientTrustSSL

	 in Method: com.squareup.okhttp.OkHttpClient getUnsafeOkHttpClient()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer6082, r13, $r5)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer6082, r13, $r5)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 39

	CogniCrypt found the following violations. For details see description above.
	ImpreciseValueExtractionError: 1
	RequiredPredicateError: 11
	ConstraintError: 3
=====================================================================
