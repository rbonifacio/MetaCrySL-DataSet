Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.spiceworks-0107103493F7254867593DFC2FBBE5435CAFEE610F808C45012E91D5BD0972C5.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: varReplacer4474
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer4474)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 6bcc0fdc30a6affdc5261629c7c9d217ba20e634e4def35e95f4ae9258ef32f2
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 9a39546100165a37e889fd7cf2a6477829cbb9e55b2e972d72febc045529fcda
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.SecretKey
		Statement: $r3 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: bf58e9be970bb4d9b8b9779a2db2332dda7629a9233a386367015fa09918a479
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer3141, varReplacer3142)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: b744b28642bb107abbee09c3a262937d427f9b8bf15a4544670a7e80353b87f5
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer3144)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: b101fa602bed05a5546f95f9c84506326fad8ab960592663e426ab63fd2defbd
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 8de80dfde750b54a8dc4f0a31eeee957e344d00f114bdcad0dca32f685f88fae
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3136)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 7e968e0adac3756e3c1f78addf6e44b9197ceb17711f2d6d09bf43bd36fc3e6d
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer3138)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 9ec0a7f64ecc1fcb366934f97eac09ae2921ccc4aa65d2997d6ee84e87555fe8
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.MessageDigest
		Statement: $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4725)
		Method: <com.google.ads.conversiontracking.g: java.lang.String e(android.content.Context)>
		SHA-256: 33e2b9a810a664ab9d276f55ef2cab2d340eab9e69d2cb2c0749b19b9dc17072
		Secure: true
	Object:
		Variable: r12
		Type: java.security.SecureRandom
		Statement: specialinvoke r12.<java.security.SecureRandom: void <init>()>()
		Method: <com.google.android.apps.analytics.PersistentHitStore: void loadExistingSession(android.database.sqlite.SQLiteDatabase)>
		SHA-256: 28ce7f80687f60d700936748d1561bbe406957299dfe63f40eacb0b994499d24
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer4474)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 1c05ddf51b26cf322e7032b5e2e3b4b24d5b3fd32ec0aefa5c568592f7fb4e24
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: fa136a602799631e6b4b59350ee9e51490addbaa3e0a4d88762b38031b45344d
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: 4755c5e34f3121596ca9a7f33f965995bb6b82fd562703d3839051d031b7eed3
		Secure: false
	Object:
		Variable: varReplacer3138
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer3138)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] decrypt(byte[],byte[])>
		SHA-256: a00b4619252c057d9fba5bb2b98afb8f2c8ea45bea8b7d5579b3b69007aec697
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer3143)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] getRawKey(byte[])>
		SHA-256: 26d54e7148f5f2461a90f3c5efc976d7274bbd41b2151a85d6c12979e77cf174
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.google.ads.conversiontracking.g: java.lang.String e(android.content.Context)>
		SHA-256: a79e94387df141fe9dcb34d2ae3fc05c5097b22bbdc3a1b0291ebb4f6436ceb4
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4476)
		Method: <com.spiceworks.db.SimpleCrypto: byte[] encrypt(byte[],byte[])>
		SHA-256: 42360dbd92ef880e07c3750ced1be080dec6273640f6cc21db2d8f63aa66b8f3
		Secure: false

Findings in Java Class: com.spiceworks.db.SimpleCrypto

	 in Method: byte[] decrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer3138)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer3137, $r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #7e968e0adac3756e3c1f78addf6e44b9197ceb17711f2d6d09bf43bd36fc3e6d)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer3136)


	 in Method: byte[] encrypt(byte[],byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer4475, $r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer4474)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #42360dbd92ef880e07c3750ced1be080dec6273640f6cc21db2d8f63aa66b8f3)
			First parameter (with value "AES") should be any of AES/{OFB, GCM, CTS, CTR, CFB, ECB, CBC}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer4476)


	 in Method: byte[] getRawKey(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.KeyGenerator
			Second parameter was not properly generated as randomized
			at statement: virtualinvoke $r1.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(varReplacer3140, $r2)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 17

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 5
	ConstraintError: 2
=====================================================================
