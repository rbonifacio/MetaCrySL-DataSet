Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/sg.com.mcdelivery-1109A669075F692B07EAE6F2A0967E36DA73B2BB2D720D37011978D334C0352F.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.crypto.spec.PBEKeySpec
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKeyFactory
		Statement: $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>($r1)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: e5d84e5a70c065fe094514ca5ac2482f5e831d9c23f08e68e4a86f6c2f42cddd
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.PrivateKey
		Statement: $r8 = virtualinvoke $r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <com.google.android.gms.iid.f: java.security.KeyPair a(java.lang.String,long)>
		SHA-256: 7352392ac1a61e12c3ab32898ca689dddd258b6f1239ef778511babba2d4e7d
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.PublicKey
		Statement: $r5 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <com.google.android.gms.iid.f: java.security.KeyPair a(java.lang.String,long)>
		SHA-256: 3a1e80698e549c91437350956eb5865d687d056e7348af703228dcb9347cf8b8
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.google.android.gms.iid.a: java.lang.String a(java.security.KeyPair)>
		SHA-256: 667d1c74233dc4695844b2a369b7ca168b7b3f396ce37cb94fd304b9f22f5e14
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.KeyPair
		Statement: $r1 = virtualinvoke $r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.google.android.gms.iid.c: java.security.KeyPair a()>
		SHA-256: 588458274b445946250cb882f03e117802589055ad1c0641c873f0c9f0a9b58b
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.KeyStore
		Statement: $r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r1)
		Method: <sg.com.steria.mcdonalds.backend.RestProxyHelper: void setupCerts(javax.net.ssl.HttpsURLConnection,boolean)>
		SHA-256: 48f0e52a14e21ebf74e61b8e5690a99aed04f7a3cf1c66facd337a566eb06659
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.SecretKeyFactory
		Statement: $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>($r1)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 579f3778efe41e6e28dcda7154a3675a123eccdeecd88fd144ca3a586425a5ed
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r5.<java.security.Signature: byte[] sign()>()
		Method: <com.google.android.gms.iid.e: java.lang.String a(java.security.KeyPair,java.lang.String[])>
		SHA-256: 23eb3e252b70966d3d0966a2feb58e39bc842849d9905948935e8605dfbd44e2
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 503c88af2bc4a3af9a28bc0b26aa9a5f2d5b43d9aae58e43a456dd483474a58e
		Secure: false
	Object:
		Variable: $r5
		Type: byte[]
		Statement: $r5 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: bc6cad922c7583735581233b40d90faef84c99e8ea052fa491f265f2598464fb
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1871, varReplacer1872)
		Method: <sg.com.steria.mcdonalds.util.RSAHelper: java.lang.String Encrypt(java.lang.String,java.lang.String)>
		SHA-256: 556f1b2c145221aee31a516c2d35c76b0957d6a2b52d3be4235f3164282b3903
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4010)
		Method: <com.google.android.gms.iid.a: java.lang.String a(java.security.KeyPair)>
		SHA-256: 8369e5915b41d3ac2f50a7e69654f556f8f22f6a5d06cd7219b3ca731a972ff5
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKey
		Statement: $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: 4dfbd7b12436b0358d2d1bcc16e8c2a1ab729fdda65093b99b7712cbfd8a2e3a
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.KeyPairGenerator
		Statement: $r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer4070)
		Method: <com.google.android.gms.iid.c: java.security.KeyPair a()>
		SHA-256: a17f017b129fa12b70f168a4c25f61e0508daa829017d12212c44558b9d2009f
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r1)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: e2a0b9854fbf5b1cc14a31f7c73d07c1dae17422cb4863516197bd4775ac245e
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.Signature
		Statement: $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2)
		Method: <com.google.android.gms.iid.e: java.lang.String a(java.security.KeyPair,java.lang.String[])>
		SHA-256: 11f1bcb7ae07944efc67e46877e2d7ceddc5e8edcbf8a0082e0feef337558e47
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <sg.com.steria.mcdonalds.util.RSAHelper: java.lang.String Encrypt(java.lang.String,java.lang.String)>
		SHA-256: 5100a271c35120a5ab544df0523c8a56419954417cdfb31abe8349b9103a7ce9
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.SecretKey
		Statement: $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 65dc122464ca2d1f593481beebb6b5f9e0fbc601b26f02fa57abe7eee743007c
		Secure: false
	Object:
		Variable: $r9
		Type: javax.net.ssl.SSLContext
		Statement: $r9 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer1879)
		Method: <sg.com.steria.mcdonalds.backend.RestProxyHelper: void setupCerts(javax.net.ssl.HttpsURLConnection,boolean)>
		SHA-256: 284d86a9c3dfa0eb3d5bdca398430bc670875a21243cef1996fa390231ed2c6f
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer6189)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String sign()>
		SHA-256: 15e5ed16a82cac772967f06732d50cdbae8122439e16e1286f32361dbbfd9b53
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r1)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 98fb1c7efdcb2bbd48f7323a225977ff812e9ae4cc3031c54970c127104f40b6
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.KeyPair
		Statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r7, $r9)
		Method: <com.google.android.gms.iid.f: java.security.KeyPair f(java.lang.String)>
		SHA-256: 8551cd6b3cc22405d453a0e2748b84cb2fd415de658d3d644bd174e7acddd53a
		Secure: true
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r6 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>($r6)
		Method: <sg.com.steria.mcdonalds.util.Encryption: java.lang.String sign()>
		SHA-256: 17cd820a0b8b97d205dd2fd9243ad933ad57cd4a7fb986a44f0faf37337f53f5
		Secure: true

Findings in Java Class: sg.com.steria.mcdonalds.util.Encryption

	 in Method: java.lang.String decrypt(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1054, $r7)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #98fb1c7efdcb2bbd48f7323a225977ff812e9ae4cc3031c54970c127104f40b6)
			First parameter (with value "DES") should be any of {AES_128, ARC4, AES, BLOWFISH, DESede, AES_256, ChaCha20, RSA}
			at statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r1)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #579f3778efe41e6e28dcda7154a3675a123eccdeecd88fd144ca3a586425a5ed)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithHmacSHA224AndAES_256, PBEwithHmacSHA1AndAES_256, HmacSHA384, PBEwithHmacSHA512AndAES_128, PBEwithMD5ANDDES, PBKDF2withHmacSHA1And8BIT, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBKDF2withHmacSHA384, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, HmacSHA224, PBEwithMD5ANDRC2, PBEwithHmacSHA384AndAES_128, PBEwithHmacSHA256AndAES_256, HmacSHA256, PBEwithSHAANDTWOFISH-CBC	, PBKDF2withHmacSHA512, HmacSHA1, PBKDF2withHmacSHA224, PBEwithHmacSHA384AndAES_256, PBKDF2withHmacSHA256, AES, PBEwithSHAAND192BITAES-CBC-BC, PBKDF2withHmacSHA1, PBEwithSHAAND128BITRC4, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC, PBEwithHmacSHA224AndAES_128, DESede, PBEwithHmacSHA256AndAES_128, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithHmacSHA512AndAES_256, PBEwithSHAAND40BITRC4, PBEwithHmacSHA1AndAES_128, HmacSHA512, PBEwithSHAAND128BITRC2-CBC, PBEwithSHAAND128BITAES-CBC-BC}
			at statement: $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4)


	 in Method: java.lang.String encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #e2a0b9854fbf5b1cc14a31f7c73d07c1dae17422cb4863516197bd4775ac245e)
			First parameter (with value "DES") should be any of {AES_128, ARC4, AES, BLOWFISH, DESede, AES_256, ChaCha20, RSA}
			at statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r1)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #e5d84e5a70c065fe094514ca5ac2482f5e831d9c23f08e68e4a86f6c2f42cddd)
			First parameter (with value "DES") should be any of {PBEwithSHA1ANDRC2, PBEwithHmacSHA1, PBEwithHmacSHA224AndAES_256, PBEwithHmacSHA1AndAES_256, HmacSHA384, PBEwithHmacSHA512AndAES_128, PBEwithMD5ANDDES, PBKDF2withHmacSHA1And8BIT, PBEwithSHA256AND256BITAES-CBC-BC, PBEwithSHAAND2-KEYTRIPLEDES-CBC, PBKDF2withHmacSHA384, PBEwithSHAAND40BITRC2-CBC, PBEwithSHAAND3-KEYTRIPLEDES-CBC, PBEwithMD5AND192BITAES-CBC-OPENSSL, PBEwithSHAAND256BITAES-CBC-BC, PBEwithSHA256AND192BITAES-CBC-BC, PBEwithMD5AND256BITAES-CBC-OPENSSL, HmacSHA224, PBEwithMD5ANDRC2, PBEwithHmacSHA384AndAES_128, PBEwithHmacSHA256AndAES_256, HmacSHA256, PBEwithSHAANDTWOFISH-CBC	, PBKDF2withHmacSHA512, HmacSHA1, PBKDF2withHmacSHA224, PBEwithHmacSHA384AndAES_256, PBKDF2withHmacSHA256, AES, PBEwithSHAAND192BITAES-CBC-BC, PBKDF2withHmacSHA1, PBEwithSHAAND128BITRC4, PBEwithSHA1ANDDES, PBEwithSHA256AND128BITAES-CBC-BC, PBEwithHmacSHA224AndAES_128, DESede, PBEwithHmacSHA256AndAES_128, PBEwithMD5AND128BITAES-CBC-OPENSSL, PBEwithHmacSHA512AndAES_256, PBEwithSHAAND40BITRC4, PBEwithHmacSHA1AndAES_128, HmacSHA512, PBEwithSHAAND128BITRC2-CBC, PBEwithSHAAND128BITAES-CBC-BC}
			at statement: $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>($r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r7 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1058, $r7)


Findings in Java Class: sg.com.steria.mcdonalds.util.RSAHelper

	 in Method: java.lang.String Encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #556f1b2c145221aee31a516c2d35c76b0957d6a2b52d3be4235f3164282b3903)
			First parameter (with value "RSA/None/PKCS1Padding") should be any of RSA/{ECB, Empty String}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1871, varReplacer1872)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1868, $r5)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #556f1b2c145221aee31a516c2d35c76b0957d6a2b52d3be4235f3164282b3903)
			First parameter (with value "RSA/None/PKCS1Padding") should be any of RSA/{ECB, Empty String}
			at statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1871, varReplacer1872)


Findings in Java Class: com.google.android.gms.iid.e

	 in Method: java.lang.String a(java.security.KeyPair,java.lang.String[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke $r5.<java.security.Signature: void initSign(java.security.PrivateKey)>($r4)

		ConstraintError violating CrySL rule for java.security.Signature (on Object #11f1bcb7ae07944efc67e46877e2d7ceddc5e8edcbf8a0082e0feef337558e47)
			First parameter (with value "SHA256withECDSA") should be any of {SHA1withRSA/ISO9796-2, RSASSA-PSS, SHA1withDSA, SHA224withECDSA, SHA256withDSA, SHA512withRSA/PSS, SHA512withRSA, SHA384withRSA/PSS, SHA384withRSA, SHA1withRSA, NONEwithRSA, MD4withRSA, MD5withRSA, DSAwithSHA1, NONEwithDSA, SHA256withRSA/PSS, SHA224withRSA/PSS, SHA256withRSA, SHA224withRSA, DSA, SHA1withRSA/PSS, MD5withRSA/ISO9796-2, DSS, SHA224withDSA}
			at statement: $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2)


Findings in Java Class: com.google.android.gms.iid.a

	 in Method: java.lang.String a(java.security.KeyPair)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #8369e5915b41d3ac2f50a7e69654f556f8f22f6a5d06cd7219b3ca731a972ff5)
			First parameter (with value "SHA1") should be any of {SHA-224, SHA-256, SHA-1, SHA-384, SHA-512, MD5}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer4010)


Findings in Java Class: sg.com.steria.mcdonalds.backend.RestProxyHelper

	 in Method: void setupCerts(javax.net.ssl.HttpsURLConnection,boolean)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r9.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1877, $r10, varReplacer1877)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r9.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer1877, $r10, varReplacer1877)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 32
	Number of Objects Analyzed: 23

	CogniCrypt found the following violations. For details see description above.
	RequiredPredicateError: 8
	ConstraintError: 8
=====================================================================
