public class com.funplus.sdk.utils.DeviceUtils extends java.lang.Object
{
    private static final java.lang.String DATE_FORMAT;
    private static final java.lang.String DEVICE_PHONE;
    private static final java.lang.String DEVICE_TABLET;
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String OS_ANDROID;
    private static final java.lang.String RESOLUTION_HIGH;
    private static final java.lang.String RESOLUTION_LOW;
    private static final java.lang.String RESOLUTION_MEDIUM;
    private static final java.lang.String SCREEN_LARGE;
    private static final java.lang.String SCREEN_LONG;
    private static final java.lang.String SCREEN_NORMAL;
    private static final java.lang.String SCREEN_SMALL;
    private static final java.lang.String SCREEN_XLARGE;
    private static final java.lang.String UNKNOWN;

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        nop;

        $r1 = class "Lcom/funplus/sdk/utils/DeviceUtils;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.funplus.sdk.utils.DeviceUtils: java.lang.String LOG_TAG> = $r0;

        return;
    }

    public void <init>()
    {
        com.funplus.sdk.utils.DeviceUtils $r0;

        $r0 := @this: com.funplus.sdk.utils.DeviceUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String createUuid()
    {
        java.util.UUID $r0;
        java.lang.String $r1;

        $r0 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r1 = virtualinvoke $r0.<java.util.UUID: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String dateFormat(long)
    {
        long $l0;
        java.text.SimpleDateFormat $r0;
        java.util.Locale $r1;
        java.lang.Long $r2;
        java.lang.String $r3;

        $l0 := @parameter0: long;

        $r0 = new java.text.SimpleDateFormat;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ss\'Z\'Z", $r1);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.lang.Object)>($r2);

        return $r3;
    }

    public static java.lang.String decryptAES(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException, java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException
    {
        java.lang.String $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        byte[] $r3;
        java.security.MessageDigest $r4;
        javax.crypto.Cipher $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r3 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

        $r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "AES");

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r2);

        $r1 = new java.lang.String;

        $r3 = staticinvoke <com.funplus.sdk.utils.DeviceUtils: byte[] toByte(java.lang.String)>($r0);

        $r3 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r3);

        return $r1;
    }

    public static java.lang.String encryptHmacSha256(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        java.lang.String $r0, $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        javax.crypto.Mac $r3;
        byte[] $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA256");

        $r2 = new javax.crypto.spec.SecretKeySpec;

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "HmacSHA256");

        virtualinvoke $r3.<javax.crypto.Mac: void init(java.security.Key)>($r2);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r4 = virtualinvoke $r3.<javax.crypto.Mac: byte[] doFinal(byte[])>($r4);

        $r0 = staticinvoke <com.funplus.sdk.utils.DeviceUtils: java.lang.String toHex(byte[])>($r4);

        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, 2);

        return $r0;
    }

    public static java.lang.String getAndroidId(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Exception $r1;
        android.content.ContentResolver $r2;
        java.lang.String $r3, varReplacer1851;
        null_type varReplacer1850;

        nop;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        varReplacer1851 = "android_id";

        $r3 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, varReplacer1851);

     label2:
        return $r3;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        varReplacer1850 = null;

        return varReplacer1850;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String getAvailableMemory(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Exception $r1;
        android.app.ActivityManager$MemoryInfo $r2;
        long $l0;
        java.lang.Object $r3;
        android.app.ActivityManager $r4;
        java.lang.String $r5;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r3 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        $r4 = (android.app.ActivityManager) $r3;

     label2:
        $r2 = new android.app.ActivityManager$MemoryInfo;

     label3:
        specialinvoke $r2.<android.app.ActivityManager$MemoryInfo: void <init>()>();

        virtualinvoke $r4.<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>($r2);

        $l0 = $r2.<android.app.ActivityManager$MemoryInfo: long availMem>;

        $r5 = staticinvoke <android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>($r0, $l0);

     label4:
        return $r5;

     label5:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static java.lang.String getCountry(java.util.Locale)
    {
        java.util.Locale $r0;
        java.lang.String $r1;

        nop;

        $r0 := @parameter0: java.util.Locale;

        $r1 = virtualinvoke $r0.<java.util.Locale: java.lang.String getCountry()>();

        return $r1;
    }

    public static java.lang.String getDeviceId(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Throwable $r1;
        java.lang.Object $r2;
        android.telephony.TelephonyManager $r3;
        java.lang.String $r4;
        java.lang.SecurityException r5;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

     label2:
        $r3 = (android.telephony.TelephonyManager) $r2;

     label3:
        $r4 = virtualinvoke $r3.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>();

     label4:
        return $r4;

     label5:
        $r1 := @caughtexception;

        r5 = (java.lang.SecurityException) $r1;

        virtualinvoke r5.<java.lang.SecurityException: void printStackTrace()>();

        return null;

        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.SecurityException from label3 to label4 with label5;
    }

    public static java.lang.String getDeviceName()
    {
        java.lang.String r0;

        r0 = <android.os.Build: java.lang.String MODEL>;

        return r0;
    }

    public static java.lang.String getDeviceType(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 & 15;

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label3;
            default: goto label1;
        };

     label1:
        return "unknown";

     label2:
        return "phone";

     label3:
        return "tablet";
    }

    public static java.lang.String getDisplayHeight(android.util.DisplayMetrics)
    {
        android.util.DisplayMetrics $r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @parameter0: android.util.DisplayMetrics;

        if $r0 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = $r0.<android.util.DisplayMetrics: int heightPixels>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label1:
        $r2 = <com.funplus.sdk.utils.DeviceUtils: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r2, "Unable to get the display height.");

        return null;
    }

    public static java.lang.String getDisplayWidth(android.util.DisplayMetrics)
    {
        android.util.DisplayMetrics $r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @parameter0: android.util.DisplayMetrics;

        if $r0 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = $r0.<android.util.DisplayMetrics: int widthPixels>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label1:
        $r2 = <com.funplus.sdk.utils.DeviceUtils: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r2, "Unable to get the display width.");

        return null;
    }

    public static int getGameVersionCode(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Exception $r1;
        android.content.pm.PackageManager $r2;
        java.lang.String $r3;
        android.content.pm.PackageInfo $r4;
        int i0;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r3, 0);

        i0 = $r4.<android.content.pm.PackageInfo: int versionCode>;

     label2:
        return i0;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        return -2147483648;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String getGameVersionName(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Exception $r1;
        android.content.pm.PackageManager $r2;
        java.lang.String $r3, varReplacer1853;
        android.content.pm.PackageInfo $r4;
        int varReplacer1852;

        nop;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        varReplacer1852 = 0;

        $r4 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r3, varReplacer1852);

        $r3 = $r4.<android.content.pm.PackageInfo: java.lang.String versionName>;

     label2:
        return $r3;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        varReplacer1853 = "unknown";

        return varReplacer1853;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String getLanguage(java.util.Locale)
    {
        java.util.Locale $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.util.Locale;

        $r1 = virtualinvoke $r0.<java.util.Locale: java.lang.String getLanguage()>();

        return $r1;
    }

    public static java.lang.String getMacAddress(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Throwable $r1;
        java.lang.Object $r2;
        android.net.wifi.WifiManager $r3;
        android.net.wifi.WifiInfo $r4;
        java.lang.String $r5;
        java.lang.SecurityException r6;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

     label2:
        $r3 = (android.net.wifi.WifiManager) $r2;

     label3:
        $r4 = virtualinvoke $r3.<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>();

        $r5 = virtualinvoke $r4.<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>();

     label4:
        return $r5;

     label5:
        $r1 := @caughtexception;

        r6 = (java.lang.SecurityException) $r1;

        virtualinvoke r6.<java.lang.SecurityException: void printStackTrace()>();

        return null;

        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.SecurityException from label3 to label4 with label5;
    }

    public static java.lang.String getOsName()
    {
        return "android";
    }

    public static java.lang.String getOsVersion()
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r1 = <android.os.Build$VERSION: java.lang.String RELEASE>;

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String getPackageName(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r1;

        $r0 := @parameter0: android.content.Context;

        if $r0 == null goto label1;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        return $r1;

     label1:
        $r1 = <com.funplus.sdk.utils.DeviceUtils: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r1, "Unable to get the package name of this application.");

        return null;
    }

    public static java.lang.String getScreenDensity(android.util.DisplayMetrics)
    {
        android.util.DisplayMetrics $r0;
        int $i0;

        $r0 := @parameter0: android.util.DisplayMetrics;

        $i0 = $r0.<android.util.DisplayMetrics: int densityDpi>;

        if $i0 != 0 goto label1;

        return "unknown";

     label1:
        if $i0 >= 140 goto label2;

        return "low";

     label2:
        if $i0 <= 200 goto label3;

        return "high";

     label3:
        return "medium";
    }

    public static java.lang.String getScreenOrientation(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 & 48;

        lookupswitch($i0)
        {
            case 16: goto label3;
            case 32: goto label2;
            default: goto label1;
        };

     label1:
        return "unknown";

     label2:
        return "long";

     label3:
        return "normal";
    }

    public static java.lang.String getScreenSize(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 & 15;

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label1;
        };

     label1:
        return "unknown";

     label2:
        return "small";

     label3:
        return "normal";

     label4:
        return "large";

     label5:
        return "xlarge";
    }

    public static java.lang.String getTotalMemory()
    {
        java.lang.Exception $r0;
        java.io.RandomAccessFile $r1;
        java.lang.String $r2;

        $r1 = new java.io.RandomAccessFile;

     label1:
        specialinvoke $r1.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>("/proc/meminfo", "r");

        $r2 = virtualinvoke $r1.<java.io.RandomAccessFile: java.lang.String readLine()>();

     label2:
        return $r2;

     label3:
        $r0 := @caughtexception;

        virtualinvoke $r0.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean hasPermission(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r4;
        java.lang.String[] $r2;
        java.lang.Exception $r3;
        int $i0, $i1;
        android.content.pm.PackageManager $r5;
        android.content.pm.PackageInfo $r6;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

     label01:
        $r5 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r6 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r4, 4096);

        $r2 = $r6.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

     label02:
        if $r2 == null goto label10;

     label03:
        $r2 = $r6.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        $i0 = lengthof $r2;

     label04:
        $i1 = 0;

     label05:
        if $i1 >= $i0 goto label10;

     label06:
        $r4 = $r2[$i1];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

     label07:
        if $z0 == 0 goto label08;

        return 1;

     label08:
        $i1 = $i1 + 1;

        goto label05;

     label09:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

     label10:
        return 0;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label06 to label07 with label09;
    }

    public static java.lang.String md5(java.lang.String)
    {
        java.lang.String $r0, varReplacer1854;
        java.lang.Exception $r1;
        java.security.MessageDigest $r2;
        byte[] $r3;
        null_type varReplacer1855;

        nop;

        $r0 := @parameter0: java.lang.String;

     label1:
        varReplacer1854 = "MD5";

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer1854);

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>($r3);

        $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

        $r0 = staticinvoke <com.funplus.sdk.utils.DeviceUtils: java.lang.String toHex(byte[])>($r3);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        varReplacer1855 = null;

        return varReplacer1855;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static byte[] toByte(java.lang.String)
    {
        java.lang.String $r0, $r2;
        int $i0, $i1, $i2, $i3;
        byte[] $r1;
        java.lang.Integer $r3;
        byte $b4;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 / 2;

        $r1 = newarray (byte)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i2 = $i1 * 2;

        $i3 = $i1 * 2;

        $i3 = $i3 + 2;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r2, 16);

        $b4 = virtualinvoke $r3.<java.lang.Integer: byte byteValue()>();

        $r1[$i1] = $b4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    private static java.lang.String toHex(byte[])
    {
        byte[] $r0;
        java.math.BigInteger $r1;
        java.lang.StringBuilder $r2;
        int $i0, varReplacer1857;
        java.lang.String $r3, varReplacer1856, varReplacer1858;
        java.lang.Object[] $r4;

        nop;

        $r0 := @parameter0: byte[];

        $r1 = new java.math.BigInteger;

        varReplacer1857 = 1;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(varReplacer1857, $r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        varReplacer1856 = "%0";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1856);

        $i0 = lengthof $r0;

        $i0 = $i0 << 1;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        varReplacer1858 = "x";

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1858);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r4);

        return $r3;
    }
}
