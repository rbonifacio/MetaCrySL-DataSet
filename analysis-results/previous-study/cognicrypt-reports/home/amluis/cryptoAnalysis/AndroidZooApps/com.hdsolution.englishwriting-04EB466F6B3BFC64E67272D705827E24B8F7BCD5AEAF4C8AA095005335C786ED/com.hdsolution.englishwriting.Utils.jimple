public class com.hdsolution.englishwriting.Utils extends java.lang.Object
{
    public static final java.lang.String DATA_ENCODE;

    public void <init>()
    {
        com.hdsolution.englishwriting.Utils $r0;

        $r0 := @this: com.hdsolution.englishwriting.Utils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] decrypt(byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r4;
        javax.crypto.spec.IvParameterSpec $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        java.security.MessageDigest $r3;
        int $i0, $i1, varReplacer22, varReplacer25;
        byte $b2;
        javax.crypto.Cipher $r5;
        java.lang.String varReplacer23, varReplacer24, varReplacer26;

        nop;

        $r0 := @parameter0: byte[];

        varReplacer26 = "md5";

        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer26);

        $r4 = staticinvoke <com.hdsolution.englishwriting.Utils: byte[] getKey()>();

        $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4);

        varReplacer22 = 24;

        $r4 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r4, varReplacer22);

        $i0 = 16;

        $i1 = 0;

     label1:
        if $i1 >= 8 goto label2;

        $b2 = $r4[$i1];

        $r4[$i0] = $b2;

        $i0 = $i0 + 1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r2 = new javax.crypto.spec.SecretKeySpec;

        varReplacer23 = "DESede";

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, varReplacer23);

        $r1 = new javax.crypto.spec.IvParameterSpec;

        $r4 = newarray (byte)[8];

        specialinvoke $r1.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4);

        varReplacer24 = "DESede/CBC/PKCS5Padding";

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer24);

        varReplacer25 = 2;

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer25, $r2, $r1);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    private static byte[] encrypt(byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r4;
        javax.crypto.spec.IvParameterSpec $r1;
        javax.crypto.spec.SecretKeySpec $r2;
        java.security.MessageDigest $r3;
        int $i0, $i1;
        byte $b2;
        javax.crypto.Cipher $r5;

        $r0 := @parameter0: byte[];

        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("md5");

        $r4 = staticinvoke <com.hdsolution.englishwriting.Utils: byte[] getKey()>();

        $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r4);

        $r4 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r4, 24);

        $i0 = 16;

        $i1 = 0;

     label1:
        if $i1 >= 8 goto label2;

        $b2 = $r4[$i1];

        $r4[$i0] = $b2;

        $i0 = $i0 + 1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "DESede");

        $r1 = new javax.crypto.spec.IvParameterSpec;

        $r4 = newarray (byte)[8];

        specialinvoke $r1.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4);

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DESede/CBC/PKCS5Padding");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r2, $r1);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    private static byte[] getKey()
    {
        java.lang.String $r0;
        byte[] $r1;

        nop;

        $r0 = staticinvoke <com.hdsolution.englishwriting.Utils: java.lang.String getKeyS()>();

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        return $r1;
    }

    private static java.lang.String getKeyS()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        nop;

        $r1 = class "Lcom/hdsolution/englishwriting/Utils;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r0;
    }

    public static void prepareDataFiles(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Exception $r1;
        java.io.RandomAccessFile $r2;
        byte[] $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        $r3 = staticinvoke <com.hdsolution.englishwriting.Utils: byte[] readAllFile(java.lang.String)>($r0);

     label1:
        $r3 = staticinvoke <com.hdsolution.englishwriting.Utils: byte[] encrypt(byte[])>($r3);

     label2:
        $r2 = new java.io.RandomAccessFile;

        $r4 = new java.lang.StringBuilder;

     label3:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dat");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r0, "rw");

        virtualinvoke $r2.<java.io.RandomAccessFile: void write(byte[])>($r3);

        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

     label4:
        return;

     label5:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static byte[] readAllFile(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Exception $r1;
        java.io.RandomAccessFile $r2;
        long $l0;
        byte[] $r3;
        int $i1;

        $r0 := @parameter0: java.lang.String;

        $r3 = null;

        $r2 = new java.io.RandomAccessFile;

     label1:
        specialinvoke $r2.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r0, "r");

        $l0 = virtualinvoke $r2.<java.io.RandomAccessFile: long length()>();

     label2:
        $i1 = (int) $l0;

     label3:
        $r3 = newarray (byte)[$i1];

        virtualinvoke $r2.<java.io.RandomAccessFile: void readFully(byte[])>($r3);

        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

     label4:
        return $r3;

     label5:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        return $r3;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static byte[] readAllRawFile(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        byte[] $r2, $r5;
        java.lang.Exception $r3;
        java.io.ByteArrayOutputStream $r4;
        android.content.res.Resources $r6;
        android.content.res.AssetManager $r7;
        java.io.InputStream $r8;
        int $i0, varReplacer21;

        nop;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r5 = null;

     label01:
        $r6 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        $r8 = virtualinvoke $r7.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>($r1);

     label02:
        $r4 = new java.io.ByteArrayOutputStream;

     label03:
        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r2 = newarray (byte)[65535];

     label04:
        $i0 = virtualinvoke $r8.<java.io.InputStream: int read(byte[])>($r2);

     label05:
        if $i0 == -1 goto label09;

     label06:
        varReplacer21 = 0;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, varReplacer21, $i0);

     label07:
        goto label04;

     label08:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

        return $r5;

     label09:
        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void flush()>();

        $r2 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label10:
        $r5 = $r2;

     label11:
        $r2 = staticinvoke <com.hdsolution.englishwriting.Utils: byte[] decrypt(byte[])>($r2);

     label12:
        return $r2;

        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.Exception from label03 to label05 with label08;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label08;
        catch java.lang.Exception from label11 to label12 with label08;
    }
}
