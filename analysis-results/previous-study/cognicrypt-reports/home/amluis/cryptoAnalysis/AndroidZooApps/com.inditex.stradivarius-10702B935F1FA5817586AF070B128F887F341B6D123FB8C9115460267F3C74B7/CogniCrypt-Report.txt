Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	javax.net.ssl.SSLParameters
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.spec.DHParameterSpec
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.TrustManagerFactory
	javax.crypto.spec.PBEKeySpec
	java.security.cert.TrustAnchor
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	javax.net.ssl.SSLEngine
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 418c2ad98edc91011d89c3be10f36bd98972111ac309f4208c409f9fb9324bc5
		Secure: false
	Object:
		Variable: $r0
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16505)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: 37ca6e25a94cda5772557c1d8a4420974e37a6be8ded63398e7ddf03bbffed41
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.Cipher
		Statement: $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer16513)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 5aafaba1c0bb09795de0d1c0a19e2620028880971ed47738d7acc9a46fc04b4
		Secure: false
	Object:
		Variable: $r16
		Type: java.security.MessageDigest
		Statement: $r16 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer13811)
		Method: <com.inditex.itxinwalletframework.manager.impl.QRManager: java.lang.String generateCodeForCard(com.inditex.itxinwalletframework.rest.model.ItxWalletCardObj,com.inditex.itxinwalletframework.model.CurrentUser,com.inditex.itxinwalletframework.model.StoreData,com.inditex.itxinwalletframework.model.ExtendedCardInfo)>
		SHA-256: 2e444c53c90d72f7e30a2e40999fd967d305fe662aa0d06af18b0efc0f1f1dd3
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.SecretKey
		Statement: $r2 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: 2e264fbf613ad849d59d8af8503eb792a6154af12ffa74d9a033ffc80141321b
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer16012)
		Method: <com.tencent.mm.algorithm.MD5: java.lang.String getMessageDigest(byte[])>
		SHA-256: f7201b18925304263182b27a193937b43bf2f63a2ed05c2015c76f249091c97f
		Secure: false
	Object:
		Variable: varReplacer16502
		Type: java.lang.String
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer16501, $i0, varReplacer16502)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: 747ef2326014c07abcac5217f2303e476d98980aa105708bd1f919dd473d0ee4
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.KeyPairGenerator
		Statement: $r2 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer13728)
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: java.security.KeyPair generateKeyPairKeys()>
		SHA-256: 455534eb52a6c0b2005bb0287bfbfdb785c85f76c7c90c40f88edc6e112ca7b2
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.SecretKeyFactory
		Statement: $r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer16006)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 952dca0af89e86d080dec725ef17f89fa866a39b20c8f2f25eaf60850d242ab8
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r0)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: 279db3d9da58ae94c02e1ba6db8deae9057d6b5f9f4f37662fc46c910a8d6da3
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.KeyGenerator
		Statement: $r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>(varReplacer12889, varReplacer12890)
		Method: <com.inditex.itxinwalletframework.activity.IWFingerprintActivity: void generateKey()>
		SHA-256: 97a795e579be88910de7966d04800e86556415da909ae19a510ffef73eb6fb58
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 25d3835610df116c8d3f054724d99f7905e07400f4267757f6af4ad048311bb9
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer16520)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: e9cc6a1bf39105cecac9f59b53f307aa8428093bd4628304d2e2fc548e3187b6
		Secure: true
	Object:
		Variable: $r7
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer16501, $i0, varReplacer16502)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: f1c562657eece735fba964bdcc03114214702dc75ec31d535f5443b5e6afecb5
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Mac
		Statement: $r2 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(varReplacer16532)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>
		SHA-256: 8efbbc532d84d81cfcb924e200efa81ef69dcc9614f6218d0cc3ee501fb8ac10
		Secure: true
	Object:
		Variable: varReplacer16505
		Type: java.lang.String
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16505)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: 605a18d6b1196190aeca0aa09f5aa7783942cd1a8049d6768f80f1bb5870e537
		Secure: false
	Object:
		Variable: $r4
		Type: javax.net.ssl.SSLContext
		Statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3585)
		Method: <com.inditex.rest.helpers.OkHTTPClientTrustSSL: com.squareup.okhttp.OkHttpClient getUnsafeOkHttpClient()>
		SHA-256: 39f452d5838ef1c9714035414f46f659cca6543e28f2a95580e3739cd758ed55
		Secure: false
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 3f9926bdf527602ea45fc7bc0f3a0983861f76f95c4a49e3f70ddb8eb8a6e773
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(varReplacer16509, varReplacer16510)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] randomBytes(int)>
		SHA-256: ebf14eacfcb2fe4e5bfe7e7b116f83f223023f6b71600e6b8ccb8bf593ba72cb
		Secure: true
	Object:
		Variable: $r10
		Type: javax.crypto.Cipher
		Statement: $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer16007)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 38c46e137d2b315404aaaacd159845a667be7f65eba921eaf326cd132848e7b1
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyPair
		Statement: $r3 = virtualinvoke $r2.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: java.security.KeyPair generateKeyPairKeys()>
		SHA-256: 998d7f8b789bb471b4fc448ecd77c8064ff966c3ee432d0ce8aeed074c263056
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 197fe427bb47c7000549fc2bae1257af55f252f1907d92d197d440873bb7d19d
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: 36da9e361da26f0f9650bfcbd38588efc7fa4e7a5a1d92c4a966ccf918fc9e45
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.Cipher
		Statement: $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer12896)
		Method: <com.inditex.itxinwalletframework.activity.IWFingerprintActivity: boolean cipherInit()>
		SHA-256: ef8c2f67e517d65ff45197bfdd54fd7e1240841413bc692dd42a29d59fb99fcf
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r4.<java.security.Signature: byte[] sign()>()
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] signData(byte[],java.security.PrivateKey)>
		SHA-256: 1b60ada71588e4c898565eee208814b6c5d9ab3e542639603a4bac2860e8e971
		Secure: false
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r2.<javax.crypto.Mac: byte[] doFinal(byte[])>($r0)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] generateMac(byte[],javax.crypto.SecretKey)>
		SHA-256: c6dc4131ca13a700f69eebff9cf4d4cbd1f442867ec8377fecf98f1bef3306a4
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer16499)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: ed558c00d4f1ac947f112cf2e9400a5daab3c8d55661e6c8bb92b190eea6a3d5
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity$PrngFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: df95c04ed76fe7565b426c50cde38eab25e76095c32672d02ac4cc89c29ba677
		Secure: true
	Object:
		Variable: $r15
		Type: byte[]
		Statement: $r15 = virtualinvoke $r16.<java.security.MessageDigest: byte[] digest(byte[])>($r15)
		Method: <com.inditex.itxinwalletframework.manager.impl.QRManager: java.lang.String generateCodeForCard(com.inditex.itxinwalletframework.rest.model.ItxWalletCardObj,com.inditex.itxinwalletframework.model.CurrentUser,com.inditex.itxinwalletframework.model.StoreData,com.inditex.itxinwalletframework.model.ExtendedCardInfo)>
		SHA-256: fec3551d2b295bff8f7274e5e65197ac892052a7f2f7276e361e7a14270d80e4
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.Signature
		Statement: $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(varReplacer13825)
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] signData(byte[],java.security.PrivateKey)>
		SHA-256: 13564c310a673e6d031e809e0ea456224ab9545c189d32fcde1f82740e9f623c
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.SecretKey
		Statement: $r9 = virtualinvoke $r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r7)
		Method: <com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>
		SHA-256: 448449e0709e0526695e283fbaa2d735286a245b7be948be9c23aa9299ab4a05
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.KeyStore
		Statement: $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(varReplacer12891)
		Method: <com.inditex.itxinwalletframework.activity.IWFingerprintActivity: void generateKey()>
		SHA-256: c37704d5d2163ea6a96237a5a89cefd7cc2e6c99b7d29f3029c67ad6ef7e37a5
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.Cipher
		Statement: $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer17182)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)>
		SHA-256: fa547662ae81c0b3ecbd9a8b0d64604802760a3150f9e7deb349463498b26d50
		Secure: false
	Object:
		Variable: varReplacer16499
		Type: java.lang.String
		Statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer16499)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)>
		SHA-256: c42158337c4a8c44a957eb6c9f5e0b5f9507e253aad0de73cebc97ebb42fe790
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] generateDatabaseKey()>
		SHA-256: b2e797e2aef5712fbd1129754004cb8696cf299909c3a04e2b37ffc6a3c5dc1f
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer16504)
		Method: <com.inditex.rest.helpers.AesCbcWithIntegrity: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()>
		SHA-256: d4f2f087d4e0d6f16ee31eadac52325732eb1f065ee5d3436f28526757643cd4
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>($r1)
		Method: <com.inditex.itxinwalletframework.manager.impl.CryptoManager: byte[] generateDatabaseKey()>
		SHA-256: 7f63ddec16f7ebd694f9bae2a234e255d503ad65ab3db30be5cf9b76d93c67e8
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.tencent.mm.algorithm.MD5: java.lang.String getMessageDigest(byte[])>
		SHA-256: 7661a97939dcd6c058b8a6b7078384abde71f624fbaeb9a9ae674c516fd5d06e
		Secure: false
	Object:
		Variable: r9
		Type: java.security.SecureRandom
		Statement: specialinvoke r9.<java.security.SecureRandom: void <init>()>()
		Method: <com.inditex.rest.helpers.OkHTTPClientTrustSSL: com.squareup.okhttp.OkHttpClient getUnsafeOkHttpClient()>
		SHA-256: 29211615345791b2a80d5df714aa0370cc525ea64d574bcdb7c9ae5ae5f7b5c3
		Secure: true

Findings in Java Class: com.inditex.rest.helpers.OkHTTPClientTrustSSL

	 in Method: com.squareup.okhttp.OkHttpClient getUnsafeOkHttpClient()
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3586, r13, $r5)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #39f452d5838ef1c9714035414f46f659cca6543e28f2a95580e3739cd758ed55)
			First parameter (with value "SSL") should be any of {TLSv1.1, TLSv1.2}
			at statement: $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer3585)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer3586, r13, $r5)


Findings in Java Class: com.inditex.itxinwalletframework.manager.impl.CryptoManager

	 in Method: java.security.KeyPair generateKeyPairKeys()
		ConstraintError violating CrySL rule for java.security.KeyPairGenerator (on Object #455534eb52a6c0b2005bb0287bfbfdb785c85f76c7c90c40f88edc6e112ca7b2)
			First parameter (with value 1024) should be any of {2048, 4096}
			at statement: virtualinvoke $r2.<java.security.KeyPairGenerator: void initialize(int)>(varReplacer13729)


	 in Method: byte[] signData(byte[],java.security.PrivateKey)
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke $r4.<java.security.Signature: void initSign(java.security.PrivateKey)>($r2)


Findings in Java Class: com.inditex.itxinwalletframework.manager.impl.QRManager

	 in Method: java.lang.String generateCodeForCard(com.inditex.itxinwalletframework.rest.model.ItxWalletCardObj,com.inditex.itxinwalletframework.model.CurrentUser,com.inditex.itxinwalletframework.model.StoreData,com.inditex.itxinwalletframework.model.ExtendedCardInfo)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #2e444c53c90d72f7e30a2e40999fd967d305fe662aa0d06af18b0efc0f1f1dd3)
			First parameter (with value "SHA-1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r16 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer13811)


Findings in Java Class: com.tencent.mm.sdk.platformtools.LogHelper

	 in Method: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #952dca0af89e86d080dec725ef17f89fa866a39b20c8f2f25eaf60850d242ab8)
			First parameter (with value "DES") should be any of {PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBKDF2WithHmacSHA224, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA512, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r8 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer16006)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #38c46e137d2b315404aaaacd159845a667be7f65eba921eaf326cd132848e7b1)
			First parameter (with value "DES") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256, RSA}
			at statement: $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer16007)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer16005, $r9)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r9 = virtualinvoke $r8.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r7)


Findings in Java Class: com.tencent.mm.algorithm.MD5

	 in Method: java.lang.String getMessageDigest(byte[])
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #f7201b18925304263182b27a193937b43bf2f63a2ed05c2015c76f249091c97f)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer16012)


Findings in Java Class: com.inditex.rest.helpers.AesCbcWithIntegrity

	 in Method: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys keys(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, varReplacer16499)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer16501, $i0, varReplacer16502)

		ImpreciseValueExtractionError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			Constraint length(keyMaterial) + 0 >= off - len could not be evaluted due to insufficient information.
			at statement: specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r3, varReplacer16501, $i0, varReplacer16502)


	 in Method: com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys generateKey()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, varReplacer16505)


	 in Method: com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac encrypt(byte[],com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer16514, $r5, $r2)


	 in Method: byte[] decrypt(com.inditex.rest.helpers.AesCbcWithIntegrity$CipherTextIvMac,com.inditex.rest.helpers.AesCbcWithIntegrity$SecretKeys)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer17183, $r5, $r2)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 38
	Number of Objects Analyzed: 39

	CogniCrypt found the following violations. For details see description above.
	ConstraintError: 6
	ImpreciseValueExtractionError: 1
	RequiredPredicateError: 11
=====================================================================