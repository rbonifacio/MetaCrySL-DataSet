Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.apspdcl.consumerapp-12F8594D8A951BEC8A05F27562975F4D7F6B78AC163A023DF05644F498654E75.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	javax.net.ssl.SSLParameters
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.spec.DHParameterSpec
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.TrustManagerFactory
	javax.crypto.spec.PBEKeySpec
	java.security.cert.TrustAnchor
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	javax.net.ssl.SSLEngine
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: varReplacer1087
		Type: int
		Statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1086, varReplacer1087)
		Method: <com.billdesk.utils.h: javax.crypto.SecretKey a(char[],byte[],java.lang.String,int,int)>
		SHA-256: 885ec774d6a330d929fad74f6c0ecea1b9bb1c2b03dbc31625e6a5757799e3c8
		Secure: false
	Object:
		Variable: $r2
		Type: javax.net.ssl.SSLContext
		Statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2171)
		Method: <com.loopj.android.http.MySSLSocketFactory: void <init>(java.security.KeyStore)>
		SHA-256: e2d124d169091d4ff5298edcc61a46eead6bfddc9c43a5ce9fb6a3db333e6310
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.SecretKey
		Statement: $r2 = virtualinvoke $r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <com.billdesk.utils.h: java.lang.String c()>
		SHA-256: f39f96f1dd7dfcd6a5c557878bc207e586aa9a8301d41d84a7a70385b53c05f3
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKeyFactory
		Statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r2, varReplacer1085)
		Method: <com.billdesk.utils.h: javax.crypto.SecretKey a(char[],byte[],java.lang.String,int,int)>
		SHA-256: a766c04012f82b3b20ba0bcd9236061bfe02a56e6c98fa212fc4e05d696fe68c
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.Cipher
		Statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1073, varReplacer1074)
		Method: <com.billdesk.utils.h: java.lang.String c(java.lang.String)>
		SHA-256: f6dde1615d7c375bde7087086784a2c032173e331d5b1a45b18fa551b94725d3
		Secure: false
	Object:
		Variable: varReplacer1076
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer1076)
		Method: <com.billdesk.utils.h: java.lang.String c(java.lang.String)>
		SHA-256: d9e6d2bc096f6e797af0a0b2d4b9256ecd88748b5667ba4a85e2e2a999cfa341
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKey
		Statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3)
		Method: <com.billdesk.utils.h: javax.crypto.SecretKey a(char[],byte[],java.lang.String,int,int)>
		SHA-256: 163d721d126490691c0644fa18262a76d7366188ac3646ed1f9c1c114be521f6
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1086, varReplacer1087)
		Method: <com.billdesk.utils.h: javax.crypto.SecretKey a(char[],byte[],java.lang.String,int,int)>
		SHA-256: a29adeae0456c4b0f6be78fb34682e1e38974475ebc7fe267dfe0244862ddcb2
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.KeyStore
		Statement: $r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r2)
		Method: <com.loopj.android.http.MySSLSocketFactory: java.security.KeyStore getKeystore()>
		SHA-256: d011df71b400b4926b84dec0cad6ffb90a5bd3d26c43a5974bec9e614ef5edf5
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer1076)
		Method: <com.billdesk.utils.h: java.lang.String c(java.lang.String)>
		SHA-256: a8614d49cd8bd8a2d19d1a080b8d621a907a5849da0b0036abfbe3f72e8d512e
		Secure: false
	Object:
		Variable: varReplacer1080
		Type: java.lang.String
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer1080)
		Method: <com.billdesk.utils.h: java.lang.String b(java.lang.String)>
		SHA-256: 2f7c1b824e477ad661f299e07d62d5c439d37d267f6aa1237b136b38a82a8ddd
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.SecureRandom
		Statement: specialinvoke $r0.<java.security.SecureRandom: void <init>()>()
		Method: <com.billdesk.utils.h: java.lang.String c()>
		SHA-256: 3c858def843d59aedd854bb43b9e0486729f6bedc5064821245629f0cb9889ce
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = interfaceinvoke $r2.<javax.crypto.SecretKey: byte[] getEncoded()>()
		Method: <com.billdesk.utils.h: java.lang.String c()>
		SHA-256: aafcb1a4afdc06ae6b2432cdd529750e9f44a4bce64ba479bfd321b896355bda
		Secure: true
	Object:
		Variable: $r0
		Type: byte[]
		Statement: $r0 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0)
		Method: <com.billdesk.utils.h: java.lang.String c(java.lang.String)>
		SHA-256: e021cc5cbe4f64a0cde5110aa93bf8fa8b477bafdbe440998525eb4fddd94604
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.KeyGenerator
		Statement: $r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer1058)
		Method: <com.billdesk.utils.h: java.lang.String c()>
		SHA-256: 7e3d0dcb9caf6ad53922d9328bd25019c94007005db6cf0389b50096c31ebc88
		Secure: true
	Object:
		Variable: $r1
		Type: byte[]
		Statement: $r1 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)
		Method: <com.billdesk.utils.h: java.lang.String b(java.lang.String)>
		SHA-256: 7a7c42c5e000581cdcf0400ffe5613a28b16b97ba91f77c72eee5a0015ba6e39
		Secure: false
	Object:
		Variable: $r0
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer1080)
		Method: <com.billdesk.utils.h: java.lang.String b(java.lang.String)>
		SHA-256: adce1350892a774e9289d5710a879bb964fabb5fbc01bf56e487457c7b9de0b4
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1082, varReplacer1083)
		Method: <com.billdesk.utils.h: java.lang.String b(java.lang.String)>
		SHA-256: f936abd3d470ad6156c9df2cf7a45563d7e60a5ac8bd1b71127aa81675ce60ab
		Secure: false

Findings in Java Class: com.billdesk.utils.h

	 in Method: java.lang.String c(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r2.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1072, $r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, varReplacer1076)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #f6dde1615d7c375bde7087086784a2c032173e331d5b1a45b18fa551b94725d3)
			First parameter (with value "AES") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1073, varReplacer1074)


	 in Method: java.lang.String b(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r0.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, varReplacer1080)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #f936abd3d470ad6156c9df2cf7a45563d7e60a5ac8bd1b71127aa81675ce60ab)
			First parameter (with value "AES") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>(varReplacer1082, varReplacer1083)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer1078, $r0)


	 in Method: javax.crypto.SecretKey a(char[],byte[],java.lang.String,int,int)
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #a29adeae0456c4b0f6be78fb34682e1e38974475ebc7fe267dfe0244862ddcb2)
			Third parameter (with value 2000)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1086, varReplacer1087)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #a766c04012f82b3b20ba0bcd9236061bfe02a56e6c98fa212fc4e05d696fe68c)
			First parameter (with value "PBEWithMD5AndDES") should be any of {PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBKDF2WithHmacSHA224, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA512, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r2, varReplacer1085)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #a29adeae0456c4b0f6be78fb34682e1e38974475ebc7fe267dfe0244862ddcb2)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEKeySpec
			Second parameter was not properly generated as randomized
			at statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1086, varReplacer1087)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #a29adeae0456c4b0f6be78fb34682e1e38974475ebc7fe267dfe0244862ddcb2)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r0, $r1, varReplacer1086, varReplacer1087)

		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #a766c04012f82b3b20ba0bcd9236061bfe02a56e6c98fa212fc4e05d696fe68c)
			First parameter (with value "PBKDF2WithHmacSHA1") should be any of {PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBKDF2WithHmacSHA224, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA512, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r2, varReplacer1085)


Findings in Java Class: com.loopj.android.http.MySSLSocketFactory

	 in Method: void <init>(java.security.KeyStore)
		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			First parameter was not properly generated as generated Key Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2169, r5, varReplacer2169)

		ConstraintError violating CrySL rule for javax.net.ssl.SSLContext (on Object #e2d124d169091d4ff5298edcc61a46eead6bfddc9c43a5ce9fb6a3db333e6310)
			First parameter (with value "TLS") should be any of {TLSv1.1, TLSv1.2}
			at statement: $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(varReplacer2171)

		RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext
			Second parameter was not properly generated as generated Trust Manager
			at statement: virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(varReplacer2169, r5, varReplacer2169)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 38
	Number of Objects Analyzed: 18

	CogniCrypt found the following violations. For details see description above.
	IncompleteOperationError: 1
	RequiredPredicateError: 8
	ConstraintError: 6
	NeverTypeOfError: 1
=====================================================================
