Analyzing /home/amluis/cryptoAnalysis/AndroidZooApps/com.geniemobile.app4715646426021888-091E78440BE9CE0B8CAEE112F5D0853646923E999C4114A2EEF85D59BAC88AA2.apk
Warning: Couldn't find any method for CryptSLMethod: java.security.SecureRandom.getInstanceStrong();
Warning: Couldn't find any method for CryptSLMethod: javax.crypto.SecretKey.destroy();
Ruleset: 
	java.security.KeyStore
	java.security.AlgorithmParameters
	java.security.spec.RSAKeyGenParameterSpec
	javax.crypto.Mac
	java.security.DigestInputStream
	java.security.SecureRandom
	java.security.spec.DSAParameterSpec
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.net.ssl.SSLContext
	java.security.KeyPairGenerator
	javax.crypto.SecretKeyFactory
	javax.crypto.spec.SecretKeySpec
	javax.crypto.spec.GCMParameterSpec
	java.security.Key
	javax.crypto.spec.DHGenParameterSpec
	javax.net.ssl.SSLParameters
	java.security.cert.PKIXBuilderParameters
	java.security.KeyPair
	javax.crypto.spec.DHParameterSpec
	javax.crypto.CipherInputStream
	javax.crypto.KeyGenerator
	javax.crypto.SecretKey
	java.security.DigestOutputStream
	javax.crypto.CipherOutputStream
	javax.xml.crypto.dsig.spec.HMACParameterSpec
	javax.net.ssl.KeyManagerFactory
	javax.net.ssl.CertPathTrustManagerParameters
	javax.net.ssl.TrustManagerFactory
	javax.crypto.spec.PBEKeySpec
	java.security.cert.TrustAnchor
	javax.net.ssl.KeyStoreBuilderParameters
	java.security.spec.DSAGenParameterSpec
	javax.net.ssl.SSLEngine
	java.security.MessageDigest
	javax.crypto.spec.IvParameterSpec
	java.security.Signature
	java.security.cert.PKIXParameters

Analyzed Objects: 
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: $r1 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(varReplacer13917)
		Method: <com.genie_connect.android.utils.crypt.PRNGFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: 7e87246e9049361651058dff54880c712073214dfe8241f42c9aa082e3094c8f
		Secure: true
	Object:
		Variable: varReplacer6578
		Type: int
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r0, varReplacer6577, varReplacer6578)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: javax.crypto.SecretKey deriveKeyPkcs12(byte[],java.lang.String)>
		SHA-256: 1072ab281a4de1626f3879f239ed601cda5d21fea6d33cec52f706d9184ff02f
		Secure: false
	Object:
		Variable: $r4
		Type: byte[]
		Statement: $r4 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: e003e37b3f2352ccfee0e167696882407d2f5f2173b5e6fe09b35b5459564f15
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer6574)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: bf481d34bd86d49902b39b8fdacab63fe4dc5b93ac557394da15346418e45d86
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: bc80facc49af8bc5053f26a3ce90174b7e7b110c7d584cc79a96dfcdd334cad9
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.eventgenie.android.fragments.base.GenieBaseFragment: void <init>()>
		SHA-256: bf7547312468aba60e5892a804f264ba937ecf9a7024ca0ca34cc2f2cbcea03d
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: 937ba499e25021b905ecebbf843959e04dfc8b11e337b4ee43b4e8e8cf3fe6f4
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.eventgenie.android.fragments.base.GenieBaseListFragment: void <init>()>
		SHA-256: 4aafceb3620f3ca14eb4b0ba7231877d938fbce14cdcfa3bded9013567af2e14
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.Signature
		Statement: $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2)
		Method: <com.google.android.gms.iid.zzc: java.lang.String zza(java.security.KeyPair,java.lang.String[])>
		SHA-256: 3d513363b6c375f87a40f665c5ec4fa58169cb093ce4df37102581b14944da3e
		Secure: false
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r5.<java.security.Signature: byte[] sign()>()
		Method: <com.google.android.gms.iid.zzc: java.lang.String zza(java.security.KeyPair,java.lang.String[])>
		SHA-256: 620c3090ee39f9e0f53b404a831eb8d63671b99583b54bc50694556834220d96
		Secure: false
	Object:
		Variable: $r6
		Type: byte[]
		Statement: $r4 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 1a58246e070d8f8d3d0d410afc9d3e0b703b21e111e127a4afcdfd7f346c08
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <com.genie_connect.android.utils.crypt.PRNGFixes: void installLinuxPRNGSecureRandom()>
		SHA-256: 87337823ba78b3cd832175897f47461de564d31a83b3ee130b2fa70551711f04
		Secure: true
	Object:
		Variable: $r10
		Type: java.security.PrivateKey
		Statement: $r10 = virtualinvoke $r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>()
		Method: <com.google.android.gms.iid.zzd: java.security.KeyPair zze(java.lang.String,long)>
		SHA-256: 7ae14d7cc011296025ff24587a1e330af22eaaf17feb2c29089580b3e77b8c99
		Secure: true
	Object:
		Variable: $r3
		Type: byte[]
		Statement: $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>()
		Method: <com.julysystems.appx.AppX: java.lang.String getMD5(java.lang.String)>
		SHA-256: 3123ed0b807407656392d9cd62a9cf4fa37dfb1a62428a83f7891e9f2ca7b613
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.PublicKey
		Statement: $r7 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>()
		Method: <com.google.android.gms.iid.zzd: java.security.KeyPair zze(java.lang.String,long)>
		SHA-256: 934140de6ac2c8214813e8f746fac3ad714c781b58d8938ba7642ef0e21fa554
		Secure: true
	Object:
		Variable: $r2
		Type: byte[]
		Statement: $r2 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r2)
		Method: <com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>
		SHA-256: d877fb4dd7f0d0a4e150d0fd992249ddc9a19f0582b52e1ac77d90be8042bdc0
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.MessageDigest
		Statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer13971)
		Method: <com.julysystems.appx.AppX: java.lang.String getMD5(java.lang.String)>
		SHA-256: 51c03caedba478dcda2e339101e2eaa9154ca3fc7abc1c8f5a1c18839a192062
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r0, varReplacer6577, varReplacer6578)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: javax.crypto.SecretKey deriveKeyPkcs12(byte[],java.lang.String)>
		SHA-256: da31a5bf4525e6ff5b3f820bb1e46ba404fe86772dbe7f6ffb5da1b11c3d17cc
		Secure: false
	Object:
		Variable: $r0
		Type: java.security.KeyPairGenerator
		Statement: $r0 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>(varReplacer5191)
		Method: <com.google.android.gms.iid.zza: java.security.KeyPair zzud()>
		SHA-256: 41cf235f0afd3e1ec205432a96f794fa0dedaedb961a24754e0f706118287854
		Secure: true
	Object:
		Variable: $r5
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r5)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: 7838ebc2cf158ce951c8c273171d0a8829ad50707f0e889a905da199bc304c9c
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.SecretKeyFactory
		Statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer6576)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: javax.crypto.SecretKey deriveKeyPkcs12(byte[],java.lang.String)>
		SHA-256: 3ab72af26f33f3fec2593420f5773e9caa078e5ca4feb08953c238a69089d3ef
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: 24c60d9e4e1e564b27ce94d0a94429da43c65291ee664d19047306ea9665f892
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.MessageDigest
		Statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer5148)
		Method: <com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>
		SHA-256: e41385da19ce0f4d0ae24ea24f871e0cbe18a5f3264e599ae9af5de314c3f7f8
		Secure: false
	Object:
		Variable: $r10
		Type: java.security.KeyPair
		Statement: specialinvoke $r10.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r7, $r9)
		Method: <com.google.android.gms.iid.zzd: java.security.KeyPair zzdj(java.lang.String)>
		SHA-256: dec5c7bbd2141752643acb362b31f4af98a763fcc1da3c0b5b264c0b58051308
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r5)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String decrypt(java.lang.String,java.lang.String)>
		SHA-256: 44d4a011ddd1c86dad4a6a46635fd051e3ee5a80c8c401a901c67807e3e835bd
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.Cipher
		Statement: $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer15075)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: abd26444acee726b7d85c8c95d42ffba38343c4a74a0725cd3ff0cc53b8a383e
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.SecretKey
		Statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: javax.crypto.SecretKey deriveKeyPkcs12(byte[],java.lang.String)>
		SHA-256: fe1e34268642e351b1836be802cfe002773c4cae1bfa291e292ba32674092b3c
		Secure: false
	Object:
		Variable: $r2
		Type: byte[]
		Statement: virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r2)
		Method: <com.genie_connect.android.utils.crypt.Crypt2: java.lang.String encrypt(java.lang.String,java.lang.String)>
		SHA-256: bca71b9ee34620e3368e9b746fead560716a08aaff31a97f1568ef322502c06a
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.KeyPair
		Statement: $r1 = virtualinvoke $r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>()
		Method: <com.google.android.gms.iid.zza: java.security.KeyPair zzud()>
		SHA-256: 5ace77f8b7c2eaa195b63fcdb7364729c246d8d3f112aa6fed84054756bcd3cd
		Secure: true

Findings in Java Class: com.google.android.gms.iid.InstanceID

	 in Method: java.lang.String zza(java.security.KeyPair)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #e41385da19ce0f4d0ae24ea24f871e0cbe18a5f3264e599ae9af5de314c3f7f8)
			First parameter (with value "SHA1") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer5148)


Findings in Java Class: com.genie_connect.android.utils.crypt.Crypt2

	 in Method: javax.crypto.SecretKey deriveKeyPkcs12(byte[],java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.SecretKeyFactory
			First parameter was not properly generated as specced Key
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)

		ConstraintError violating CrySL rule for javax.crypto.SecretKeyFactory (on Object #3ab72af26f33f3fec2593420f5773e9caa078e5ca4feb08953c238a69089d3ef)
			First parameter (with value "PBEWITHSHA256AND256BITAES-CBC-BC") should be any of {PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA384AndAES_128, PBKDF2WithHmacSHA224, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA384, PBKDF2WithHmacSHA512, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(varReplacer6576)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #da31a5bf4525e6ff5b3f820bb1e46ba404fe86772dbe7f6ffb5da1b11c3d17cc)
			Third parameter (with value 1000)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r0, varReplacer6577, varReplacer6578)

		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #da31a5bf4525e6ff5b3f820bb1e46ba404fe86772dbe7f6ffb5da1b11c3d17cc)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r3, $r0, varReplacer6577, varReplacer6578)

		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #da31a5bf4525e6ff5b3f820bb1e46ba404fe86772dbe7f6ffb5da1b11c3d17cc)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2)


	 in Method: java.lang.String decrypt(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer6571, $r7, $r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r5)


	 in Method: java.lang.String encrypt(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer15076, $r7, $r3)


Findings in Java Class: com.julysystems.appx.AppX

	 in Method: java.lang.String getMD5(java.lang.String)
		ConstraintError violating CrySL rule for java.security.MessageDigest (on Object #51c03caedba478dcda2e339101e2eaa9154ca3fc7abc1c8f5a1c18839a192062)
			First parameter (with value "MD5") should be any of {SHA-256, SHA-384, SHA-512}
			at statement: $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(varReplacer13971)


Findings in Java Class: com.google.android.gms.iid.zzc

	 in Method: java.lang.String zza(java.security.KeyPair,java.lang.String[])
		RequiredPredicateError violating CrySL rule for java.security.Signature
			First parameter was not properly generated as generated Privkey
			at statement: virtualinvoke $r5.<java.security.Signature: void initSign(java.security.PrivateKey)>($r4)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 38
	Number of Objects Analyzed: 29

	CogniCrypt found the following violations. For details see description above.
	NeverTypeOfError: 1
	IncompleteOperationError: 1
	ConstraintError: 4
	RequiredPredicateError: 5
=====================================================================
